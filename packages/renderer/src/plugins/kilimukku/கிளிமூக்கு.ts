import type {bds, client, tableaux, types} from '@constl/ipa';
import {
  சாபி_நெடுவரிசை_அடையாளம்,
  இலக்கு_மொழி_நெடுவரிசை_அடையாளம்,
  மூல்_மொழி_நெடுவரிசை_அடையாளம்,
  மூல்_உரை_நெடுவரிசை_அடையாளம்,
  மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்,
  குழு_அடையாளம்,
  மொழிபெயர்ப்பு_அட்டவணை_சாபி,
  கிளிமூக்கு_தரவுத்தளம்_வார்ப்புரு,
} from './மாறிலிகள்';
import {கிளி, தேதி_நெடுவரிசை_அடையாளம், பங்கேற்பாளர்_நெடுவரிசை_அடையாளம்} from '@lassi-js/kili';
import type {அங்கீகரிக்கப்பட்ட_உறுப்படி_வகை, பிணையம்_பரிந்துரை} from '@lassi-js/kili';
import type {ClientConstellation} from '@constl/ipa';

export type மூல்_மொழிப்பெயர்ப்பு_வகை = {
  clef: string;
  langueCible: string;
  traduction: string;
};

// மொழிபெயர்ப்பு மரங்கள் மட்டும் வடிவூட்டங்கள்
export type மொழி_மொழிபெயர்ப்பு_அகராதி_வகை = {
  [மொழி: string]: string;
};
export type மொழிபெயர்ப்பு_அகராதி_வகை = {[சாபி: string]: மொழி_மொழிபெயர்ப்பு_அகராதி_வகை};

export type மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை = {
  [சாபி: string]: மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை | string;
};
export type மரம்_மொழிபெயர்ப்பு_அகராதி_வகை = {[மொழி: string]: மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை};

// மொழியாக்க முன்னேற்றம்
export type முன்னேற்றம்_தகவல்கள் = {
  அங்கீகரிக்கப்பட்டவை: number;
  பரிந்துரைக்கப்பட்டவை: number;
  மொத்தம்: number;
};

// கிளிமூக்குக்காக தரவுத்தளம் உறுப்படி வகைகள்
export type அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_உறுப்படி_வகை =
  அங்கீகரிக்கப்பட்ட_உறுப்படி_வகை<மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை>;

export type மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை = {
  [சாபி_நெடுவரிசை_அடையாளம்]: string;
  [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: string;
  [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: string;
  [மூல்_மொழி_நெடுவரிசை_அடையாளம்]?: string;
  [மூல்_உரை_நெடுவரிசை_அடையாளம்]?: string;
};

export type அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_வகை = மொழிபெயர்ப்பு_பரிந்துரை_வகை & {
  பங்கேற்பாளர்: string;
  கைரேகை: string;
};

export type மொழிபெயர்ப்பு_பரிந்துரை_வகை = {
  சாபி: string;
  தேதி?: Date;
  மொழிபெயர்ப்பு: string;
  இலக்கு_மொழி: string;
  மூல்_மொழி?: string;
  மூல்_உரை?: string;
};

export type பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை = {
  பங்கேற்பாளர்: string;
  கைரேகை: string;
  பரிந்துரை: மொழிபெயர்ப்பு_பரிந்துரை_வகை;
};

const மொழிபெயர்ப்பு_உறுப்படியிலிருந்து_மொழிபெயர்ப்பு_முடிவு = (
  உறுப்படி: tableaux.élémentDonnées<அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_உறுப்படி_வகை>,
): அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்பு_வகை => {
  return {
    சாபி: உறுப்படி.données[சாபி_நெடுவரிசை_அடையாளம்],
    தேதி: உறுப்படி.données[தேதி_நெடுவரிசை_அடையாளம்]
      ? new Date(உறுப்படி.données[தேதி_நெடுவரிசை_அடையாளம்])
      : undefined,
    பங்கேற்பாளர்: உறுப்படி.données[பங்கேற்பாளர்_நெடுவரிசை_அடையாளம்],
    மொழிபெயர்ப்பு: உறுப்படி.données[மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்],
    மூல்_உரை: உறுப்படி.données[மூல்_உரை_நெடுவரிசை_அடையாளம்],
    மூல்_மொழி: உறுப்படி.données[மூல்_மொழி_நெடுவரிசை_அடையாளம்],
    இலக்கு_மொழி: உறுப்படி.données[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
    கைரேகை: உறுப்படி.id,
  };
};

const பரிந்துரை_உறுப்படியிலிருந்து_பரிந்துரை_முடிவு = (
  பரிந்துரை: பிணையம்_பரிந்துரை<மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை>,
): பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை => {
  return {
    பங்கேற்பாளர்: பரிந்துரை.பங்கேற்பாளர்,
    கைரேகை: பரிந்துரை.கைரேகை,
    பரிந்துரை: {
      சாபி: பரிந்துரை.பரிந்துரை[சாபி_நெடுவரிசை_அடையாளம்],
      தேதி: பரிந்துரை.பரிந்துரை[தேதி_நெடுவரிசை_அடையாளம்]
        ? new Date(பரிந்துரை.பரிந்துரை[தேதி_நெடுவரிசை_அடையாளம்])
        : undefined,
      மொழிபெயர்ப்பு: பரிந்துரை.பரிந்துரை[மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்],
      மூல்_உரை: பரிந்துரை.பரிந்துரை[மூல்_உரை_நெடுவரிசை_அடையாளம்],
      மூல்_மொழி: பரிந்துரை.பரிந்துரை[மூல்_மொழி_நெடுவரிசை_அடையாளம்],
      இலக்கு_மொழி: பரிந்துரை.பரிந்துரை[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
    },
  };
};

const மொழிபெயர்ப்பு_பட்டியலிலிருந்து_அரகாதி = (
  பட்டியல்: மொழிபெயர்ப்பு_பரிந்துரை_வகை[],
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const சாபிகள் = new Set(பட்டியல்.map(ப => ப.சாபி));
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const சாபி of சாபிகள்) {
    if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
    const சாபி_மொழிபெயர்ப்புகள் = பட்டியல்.filter(ப => ப.சாபி === சாபி);
    for (const ப of சாபி_மொழிபெயர்ப்புகள்) {
      அகராதி[சாபி][ப.இலக்கு_மொழி] = ப.மொழிபெயர்ப்பு;
    }
  }
  return அகராதி;
};

const மொழிபெயர்ப்புகளை_ஒன்றாக்கு = (
  ...அகராதிகள்: மொழிபெயர்ப்பு_அகராதி_வகை[]
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const அக of அகராதிகள்) {
    for (const சாபி of Object.keys(அக)) {
      if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
      for (const [மொழி, உரை] of Object.entries(அக[சாபி])) {
        அகராதி[சாபி][மொழி] = உரை;
      }
    }
  }
  return அகராதி;
};

export const மொழிபெயர்ப்பு_அகராதியிலிருந்து_மரம் = (
  அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை,
): மரம்_மொழிபெயர்ப்பு_அகராதி_வகை => {
  const மரம்: மரம்_மொழிபெயர்ப்பு_அகராதி_வகை = {};
  for (const சாபி in அகராதி) {
    const பிரிவுகள் = சாபி.split('.');

    for (const மொழி of Object.keys(அகராதி[சாபி])) {
      if (!மரம்[மொழி]) மரம்[மொழி] = {};
      let ம = மரம்[மொழி];
      for (const [இ, பிரிவு] of பிரிவுகள்.entries()) {
        if (இ === பிரிவுகள்.length - 1) {
          ம[பிரிவு] = அகராதி[சாபி][மொழி];
        } else {
          if (ம[பிரிவு] === undefined || typeof ம[பிரிவு] === 'string') ம[பிரிவு] = {};
          ம = ம[பிரிவு] as மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை;
        }
      }
    }
  }
  return மரம்;
};

export const மரத்திலிருந்து_மொழிபெயர்ப்பு_அகராதி = (
  மரம்: மரம்_மொழிபெயர்ப்பு_அகராதி_வகை,
): மொழிபெயர்ப்பு_அகராதி_வகை => {
  const அகராதி: மொழிபெயர்ப்பு_அகராதி_வகை = {};

  function* சாபியையும்_மதிப்பையும்_பெறு({
    ம,
    முன்,
  }: {
    ம: மரம்_மொழிபெயர்ப்பு_அகராதி_கிளை_வகை;
    முன்?: string[];
  }): Generator<{சாபி: string; மதிப்பு: string}> {
    முன் = முன் || [];
    for (const [வேர், கிளை] of Object.entries(ம)) {
      const முன்_ = [...முன், வேர்];
      if (typeof கிளை === 'string') {
        yield {சாபி: முன்_.join('.'), மதிப்பு: கிளை};
      } else {
        for (const {சாபி, மதிப்பு} of சாபியையும்_மதிப்பையும்_பெறு({ம: கிளை, முன்: முன்_})) {
          yield {சாபி, மதிப்பு};
        }
      }
    }
  }

  for (const மொழி of Object.keys(மரம்)) {
    for (const {சாபி, மதிப்பு} of சாபியையும்_மதிப்பையும்_பெறு({ம: மரம்[மொழி]})) {
      if (!அகராதி[சாபி]) அகராதி[சாபி] = {};
      அகராதி[சாபி][மொழி] = மதிப்பு;
    }
  }
  return அகராதி;
};

export class கிளிமூக்கு extends கிளி<மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை> {
  மூல்_மொழிபெயர்ப்புகள்: மொழிபெயர்ப்பு_அகராதி_வகை;
  மூல்_மொழி: string;

  constructor({
    விண்மீன்,
    மூல்_மொழிபெயர்ப்புகள்,
    மூல்_மொழி,
    மாறிலிகள்,
  }: {
    விண்மீன்: ClientConstellation;
    மூல்_மொழிபெயர்ப்புகள்: மொழிபெயர்ப்பு_அகராதி_வகை;
    மூல்_மொழி: string;
    மாறிலிகள்?: {
      அட்டவணை_சாபி?: string;
      குழு_அடையாளம்?: string;
      கிளிமூக்கு_தரவுத்தளம்_வார்ப்புரு?: bds.schémaSpécificationBd;
    };
  }) {
    super({
      விண்மீன்,
      அட்டவணை_சாபி: மாறிலிகள்?.அட்டவணை_சாபி || மொழிபெயர்ப்பு_அட்டவணை_சாபி,
      குழு_அடையாளம்: மாறிலிகள்?.குழு_அடையாளம் || குழு_அடையாளம்,
      வார்ப்புரு: மாறிலிகள்?.கிளிமூக்கு_தரவுத்தளம்_வார்ப்புரு || கிளிமூக்கு_தரவுத்தளம்_வார்ப்புரு,
    });

    this.மூல்_மொழிபெயர்ப்புகள் = மூல்_மொழிபெயர்ப்புகள்;
    this.மூல்_மொழி = மூல்_மொழி;
  }

  static async உருவாக்கு({விண்மீன்}: {விண்மீன்: client.default}): Promise<string> {
    return await கிளி.உருவாக்கு({
      விண்மீன்,
      வார்ப்புரு: கிளிமூக்கு_தரவுத்தளம்_வார்ப்புரு,
      அட்டவணை_சாபி: மொழிபெயர்ப்பு_அட்டவணை_சாபி,
    });
  }

  async சாபிகளை_கேள்ளு({
    செ,
  }: {
    செ: types.schémaFonctionSuivi<string[]>;
  }): Promise<types.schémaFonctionOublier> {
    const சாபிகள்: {
      மூல்: string[];
      மொழிபெயர்ப்புகள்: string[];
    } = {
      மூல்: Object.keys(this.மூல்_மொழிபெயர்ப்புகள்),
      மொழிபெயர்ப்புகள்: [],
    };
    const மொழிபெயர்ப்புகளை_மறந்துவிடு = await this.மொழிபெயர்ப்புகளை_கேள்ளு({
      செ: async இ => {
        சாபிகள்.மொழிபெயர்ப்புகள் = Object.keys(இ);
        return await செ([...new Set(Object.values(சாபிகள்).flat())]);
      },
    });

    return மொழிபெயர்ப்புகளை_மறந்துவிடு;
  }

  async மொழிகளை_கேள்ளு({
    பரிந்துரைகளும் = true,
    செ,
  }: {
    பரிந்துரைகளும்?: boolean;
    செ: types.schémaFonctionSuivi<string[]>;
  }): Promise<types.schémaFonctionOublier> {
    const மொழிகள்: {மூல்: string[]; அங்கீகரிக்கப்பட்டவை?: string[]; பரிந்துரைகள்?: string[]} = {
      மூல்: Object.values(this.மூல்_மொழிபெயர்ப்புகள்)
        .map(இ => Object.keys(இ))
        .flat(),
    };
    const செ_கடைசி = async () => {
      await செ([...new Set(Object.values(மொழிகள்).flat())]);
    };
    செ_கடைசி();

    const அங்கீகரிக்கப்பட்டவையை_மறந்துவிடு = await this.அங்கீகரிக்கப்பட்ட_உறுப்படிகளை_கேள்ளு({
      செ: async உறுப்படிகள் => {
        மொழிகள்.அங்கீகரிக்கப்பட்டவை = உறுப்படிகள்.map(
          உ => உ.données[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
        );
        await செ_கடைசி();
      },
    });
    const மறந்துவிடு = [அங்கீகரிக்கப்பட்டவையை_மறந்துவிடு];

    if (பரிந்துரைகளும்) {
      மறந்துவிடு.push(
        (
          await this.பரிந்துரைகளை_கேள்ளு({
            செ: async பரிந்துரைகள் => {
              மொழிகள்.பரிந்துரைகள் = பரிந்துரைகள்.map(
                ப => ப.பரிந்துரை[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்],
              );
              await செ_கடைசி();
            },
          })
        ).fOublier,
      );
    }

    return async () => {
      await Promise.all(மறந்துவிடு.map(ம => ம()));
    };
  }

  async அங்கீகரிக்கப்பட்ட_மொழிபெயர்ப்புகளை_கேள்ளு({
    செ,
  }: {
    செ: types.schémaFonctionSuivi<மொழிபெயர்ப்பு_அகராதி_வகை>;
  }): Promise<types.schémaFonctionOublier> {
    const தகவல்கள்: {
      உறுப்படிகள்: tableaux.élémentDonnées<
        அங்கீகரிக்கப்பட்ட_உறுப்படி_வகை<மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை>
      >[];
    } = {
      உறுப்படிகள்: [],
    };
    const செ_கடைசி = async () => {
      const அங்கீகரிக்கப்பட்டவை = மொழிபெயர்ப்புகளை_ஒன்றாக்கு(
        மொழிபெயர்ப்பு_பட்டியலிலிருந்து_அரகாதி(
          தகவல்கள்.உறுப்படிகள்.map(இ => மொழிபெயர்ப்பு_உறுப்படியிலிருந்து_மொழிபெயர்ப்பு_முடிவு(இ)),
        ),
        this.மூல்_மொழிபெயர்ப்புகள்,
      );
      await செ(அங்கீகரிக்கப்பட்டவை);
    };
    await செ_கடைசி();

    return await this.அங்கீகரிக்கப்பட்ட_உறுப்படிகளை_கேள்ளு({
      செ: async உறுப்படிகள் => {
        தகவல்கள்.உறுப்படிகள் = உறுப்படிகள்;
        await செ_கடைசி();
      },
    });
  }

  async மொழிபெயர்ப்புகளை_கேள்ளு({
    செ,
    பரிந்துரைகள்,
  }: {
    செ: types.schémaFonctionSuivi<மொழிபெயர்ப்பு_அகராதி_வகை>;
    பரிந்துரைகள்?: 'எனது' | 'எல்லாம்';
  }): Promise<types.schémaFonctionOublier> {
    await செ(this.மூல்_மொழிபெயர்ப்புகள்);

    const தகவல்கள்: {
      அங்கீகரிக்கப்பட்டவை?: மொழிபெயர்ப்பு_அகராதி_வகை;
      பரிந்துரைகள்?: பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[];
    } = {};
    const நான் = await this.விண்மீன்.obtIdCompte();

    const செ_கடைசி = async () => {
      let இறுதியான_பரிந்துரைகள்: பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[] = [];
      (தகவல்கள்.பரிந்துரைகள் || []).forEach(ப => {
        const இருக்கும்_பரிந்துரை = இறுதியான_பரிந்துரைகள்.find(
          இ => இ.பரிந்துரை.சாபி === ப.பரிந்துரை.சாபி,
        );
        if (!இருக்கும்_பரிந்துரை) {
          இறுதியான_பரிந்துரைகள்.push(ப);
        } else {
          if (
            (ப.பங்கேற்பாளர் === நான் && இருக்கும்_பரிந்துரை.பங்கேற்பாளர் !== நான்) ||
            (ப.பரிந்துரை.தேதி || 0) > (இருக்கும்_பரிந்துரை.பரிந்துரை.தேதி || 0)
          ) {
            இறுதியான_பரிந்துரைகள் = [
              ப,
              ...இறுதியான_பரிந்துரைகள்.filter(இ => இ.கைரேகை !== இருக்கும்_பரிந்துரை.கைரேகை),
            ];
          }
        }
      });
      const பரிந்துரைகள் = மொழிபெயர்ப்பு_பட்டியலிலிருந்து_அரகாதி(
        இறுதியான_பரிந்துரைகள்.map(ப => ப.பரிந்துரை),
      );
      const மொழிபெயர்ப்புகள் = மொழிபெயர்ப்புகளை_ஒன்றாக்கு(
        this.மூல்_மொழிபெயர்ப்புகள்,
        தகவல்கள்.அங்கீகரிக்கப்பட்டவை || {},
        பரிந்துரைகள்,
      );
      return await செ(மொழிபெயர்ப்புகள்);
    };

    const மொழிபெயர்ப்புகளை_மறந்துவிடு = await this.அங்கீகரிக்கப்பட்ட_உறுப்படிகளை_கேள்ளு({
      செ: async இ => {
        const அங்கீகரிக்கப்பட்ட_அகராதி = மொழிபெயர்ப்பு_பட்டியலிலிருந்து_அரகாதி(
          இ.map(மொழிபெயர்ப்பு_உறுப்படியிலிருந்து_மொழிபெயர்ப்பு_முடிவு),
        );
        const மொழிபெயர்ப்புகள் = மொழிபெயர்ப்புகளை_ஒன்றாக்கு(
          this.மூல்_மொழிபெயர்ப்புகள்,
          அங்கீகரிக்கப்பட்ட_அகராதி,
        );
        தகவல்கள்.அங்கீகரிக்கப்பட்டவை = மொழிபெயர்ப்புகள்;
      },
    });
    const மறந்துவிடு = [மொழிபெயர்ப்புகளை_மறந்துவிடு];

    if (பரிந்துரைகள் === 'எனது') {
      மறந்துவிடு.push(
        await this.எனது_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: async ப => {
            தகவல்கள்.பரிந்துரைகள் = ப;
            await செ_கடைசி();
          },
        }),
      );
    } else if (பரிந்துரைகள் === 'எல்லாம்') {
      மறந்துவிடு.push(
        (
          await this.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
            செ: async ப => {
              தகவல்கள்.பரிந்துரைகள் = ப;
              await செ_கடைசி();
            },
          })
        ).fOublier,
      );
    }
    return async () => {
      await Promise.all(மறந்துவிடு.map(ம => ம()));
    };
  }

  async மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
    சாபி,
    மொழி,
    செ,
  }: {
    சாபி?: string;
    மொழி?: string;
    செ: types.schémaFonctionSuivi<பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]>;
  }): Promise<types.schémaRetourFonctionRechercheParProfondeur> {
    return await this.பரிந்துரைகளை_கேள்ளு({
      செ: async பரிந்துரைகள் => {
        return await செ(
          பரிந்துரைகள்
            .filter(
              ப =>
                (!சாபி || ப.பரிந்துரை[சாபி_நெடுவரிசை_அடையாளம்] === சாபி) &&
                (!மொழி || ப.பரிந்துரை[இலக்கு_மொழி_நெடுவரிசை_அடையாளம்] === மொழி),
            )
            .map(பரிந்துரை_உறுப்படியிலிருந்து_பரிந்துரை_முடிவு),
        );
      },
    });
  }

  async எனது_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
    செ,
  }: {
    செ: types.schémaFonctionSuivi<பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[]>;
  }): Promise<types.schémaFonctionOublier> {
    return await this.எனது_பரிந்துரைகளை_கேள்ளு({
      செ: பரிந்துரைகள் =>
        செ(பரிந்துரைகள்.map(ப => பரிந்துரை_உறுப்படியிலிருந்து_பரிந்துரை_முடிவு(ப))),
    });
  }

  async முன்னேற்றத்தை_கேள்ளு({
    மொழி,
    வகை,
    செ,
  }: {
    மொழி: string;
    வகை: 'சாபி' | 'வார்த்தை';
    செ: types.schémaFonctionSuivi<முன்னேற்றம்_தகவல்கள்>;
  }): Promise<types.schémaFonctionOublier> {
    const தகவல்கள்: {
      சாபிகள்?: string[];
      மொழிபெயர்ப்புகள்?: மொழிபெயர்ப்பு_அகராதி_வகை;
      பரிந்துரைக்கப்பட்டவை?: பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[];
    } = {};
    const செ_கடைசி = async () => {
      if (!தகவல்கள்.சாபிகள்) return;

      if (வகை === 'சாபி') {
        const மொத்தம் = தகவல்கள்.சாபிகள்.length;
        const அங்கீகரிக்கப்பட்டவை = தகவல்கள்.சாபிகள்.filter(
          சாபி => தகவல்கள்.மொழிபெயர்ப்புகள்?.[சாபி]?.[மொழி],
        );
        const பரிந்துரைக்கப்பட்டவை =
          தகவல்கள்.பரிந்துரைக்கப்பட்டவை?.filter(
            ப =>
              ப.பரிந்துரை.இலக்கு_மொழி === மொழி && !அங்கீகரிக்கப்பட்டவை.includes(ப.பரிந்துரை.சாபி),
          ) || [];
        return await செ({
          மொத்தம்,
          அங்கீகரிக்கப்பட்டவை: அங்கீகரிக்கப்பட்டவை.length,
          பரிந்துரைக்கப்பட்டவை: பரிந்துரைக்கப்பட்டவை.length,
        });
      } else {
        if (!தகவல்கள்.மொழிபெயர்ப்புகள் || !தகவல்கள்.சாபிகள்) return;

        const அளவு = Object.fromEntries(
          தகவல்கள்.சாபிகள்.map(சாபி => [
            சாபி,
            தகவல்கள்.மொழிபெயர்ப்புகள்?.[சாபி]?.[this.மூல்_மொழி]?.length ||
              (தகவல்கள்.மொழிபெயர்ப்புகள்?.[சாபி]
                ? Object.values(தகவல்கள்.மொழிபெயர்ப்புகள்?.[சாபி])[0]?.length
                : 0),
          ]),
        );
        const மொத்தம் = Object.values(அளவு).reduce((இ, ஈ) => இ + ஈ, 0);
        const அங்கீகரிக்கப்பட்டவை = Object.entries(தகவல்கள்.மொழிபெயர்ப்புகள்)
          .filter(இ => இ[1][மொழி])
          .map(([சாபி, _]) => அளவு[சாபி])
          .reduce((இ, ஈ) => இ + ஈ, 0);
        const பரிந்துரைக்கப்பட்டவை =
          தகவல்கள்.பரிந்துரைக்கப்பட்டவை
            ?.map(ப => அளவு[ப.பரிந்துரை.சாபி] || 0)
            .reduce((இ, ஈ) => இ + ஈ, 0) || 0;
        return await செ({
          மொத்தம்,
          அங்கீகரிக்கப்பட்டவை,
          பரிந்துரைக்கப்பட்டவை,
        });
      }
    };

    const செ_மறந்துவிடு: types.schémaFonctionOublier[] = await Promise.all([
      this.சாபிகளை_கேள்ளு({
        செ: async சாபிகள் => {
          தகவல்கள்.சாபிகள் = சாபிகள்;
          await செ_கடைசி();
        },
      }),
      this.மொழிபெயர்ப்புகளை_கேள்ளு({
        செ: async மொழிபெயர்ப்புகள் => {
          தகவல்கள்.மொழிபெயர்ப்புகள் = மொழிபெயர்ப்புகள்;
          await செ_கடைசி();
        },
      }),
    ]);
    const பரிந்துரைகளை_மறந்துவிடு = (
      await this.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
        மொழி,
        செ: async பரிந்துரைகள் => {
          தகவல்கள்.பரிந்துரைக்கப்பட்டவை = பரிந்துரைகள்;
          await செ_கடைசி();
        },
      })
    ).fOublier;

    const மறந்துவிடு = async () => {
      await Promise.all(செ_மறந்துவிடு.map(செ => செ()));
      await பரிந்துரைகளை_மறந்துவிடு;
    };
    return மறந்துவிடு;
  }

  async மொழிபெயர்ப்பை_பரிந்துரையு({
    சாபி,
    மொழிபெயர்ப்பு,
    இலக்கு_மொழி,
    மூல்_மொழி,
    மூல்_உரை,
  }: {
    சாபி: string;
    மொழிபெயர்ப்பு: string;
    இலக்கு_மொழி: string;
    மூல்_மொழி?: string;
    மூல்_உரை?: string;
  }): Promise<void> {
    const பரிந்துரை: மொழிபெயர்ப்பு_பரிந்துரை_உறுப்படி_வகை = {
      [சாபி_நெடுவரிசை_அடையாளம்]: சாபி,
      [மொழிபெயர்ப்பு_நெடுவரிசை_அடையாளம்]: மொழிபெயர்ப்பு,
      [இலக்கு_மொழி_நெடுவரிசை_அடையாளம்]: இலக்கு_மொழி,
      [மூல்_மொழி_நெடுவரிசை_அடையாளம்]: மூல்_மொழி,
      [மூல்_உரை_நெடுவரிசை_அடையாளம்]: மூல்_உரை,
    };
    await this.பரிந்துரையு({
      பரிந்துரை,
    });
  }

  async பேசு({
    சாபி,
    மொழி,
    செ,
    பரிந்துரைகள்,
  }: {
    சாபி: string;
    மொழி: string;
    செ: types.schémaFonctionSuivi<string | undefined>;
    பரிந்துரைகள்: 'எனது' | 'எல்லாம்';
  }): Promise<types.schémaFonctionOublier> {
    const தகவல்கள்: {
      மொழிபெயர்ப்புகள்?: மொழிபெயர்ப்பு_அகராதி_வகை;
      பரிந்துரைகள்?: பிணையம்_மொழிபெயர்ப்பு_பரிந்துரை_வகை[];
    } = {};

    const செ_கடைசி = async () => {
      const மொழிபெயர்ப்பு = தகவல்கள்.மொழிபெயர்ப்புகள்?.[சாபி]?.[மொழி];
      if (மொழிபெயர்ப்பு) {
        return await செ(மொழிபெயர்ப்பு);
      } else {
        const நான் = await this.விண்மீன்.obtIdCompte();
        const பரிந்துரைகள் = (தகவல்கள்.பரிந்துரைகள் || []).filter(
          ப => ப.பரிந்துரை.சாபி === சாபி && ப.பரிந்துரை.இலக்கு_மொழி === மொழி,
        );
        const என்_பரிரிந்துரை = பரிந்துரைகள்.find(ப => ப.பங்கேற்பாளர் === நான்);

        return await செ((என்_பரிரிந்துரை || பரிந்துரைகள்[0])?.பரிந்துரை?.மொழிபெயர்ப்பு);
      }
    };

    const மொழிபெயர்ப்புகளை_மறந்துவிடு = await this.மொழிபெயர்ப்புகளை_கேள்ளு({
      செ: async மொழிபெயர்ப்புகள் => {
        தகவல்கள்.மொழிபெயர்ப்புகள் = மொழிபெயர்ப்புகள்;
        await செ_கடைசி();
      },
    });
    const மறந்துவிடு = [மொழிபெயர்ப்புகளை_மறந்துவிடு];

    if (பரிந்துரைகள் === 'எனது') {
      மறந்துவிடு.push(
        await this.எனது_மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
          செ: async ப => {
            தகவல்கள்.பரிந்துரைகள் = ப;
            await செ_கடைசி();
          },
        }),
      );
    } else if (பரிந்துரைகள் === 'எல்லாம்') {
      மறந்துவிடு.push(
        (
          await this.மொழிபெயர்ப்பு_பரிந்துரைகளை_கேள்ளு({
            செ: async ப => {
              தகவல்கள்.பரிந்துரைகள் = ப;
              await செ_கடைசி();
            },
          })
        ).fOublier,
      );
    }
    return async () => {
      await Promise.all(மறந்துவிடு.map(ம => ம()));
    };
  }
}
