{"version":3,"file":"configÉlectronPrincipal-npdb_JP6.js","sources":["../../../../4fb152003e9d29cd62f477a2412892","../../../../node_modules/electron/index.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/lib/RelayWindow.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/lib/ResourceManager.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/lib/ElectronBridge.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/wrtc/RTCDataChannel.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/wrtc/RTCPeerConnection.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/wrtc/RTCSessionDescription.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/wrtc/RTCIceCandidate.js","../../../../node_modules/@constl/electron-webrtc-relay/dist/index.js","../../../../node_modules/@constl/ipa/dist/src/sfip/configÉlectronPrincipal.js"],"sourcesContent":["export default '/home/runner/work/iug/iug/node_modules/electron'","const fs = require('fs');\nconst path = require('path');\n\nconst pathFile = path.join(__dirname, 'path.txt');\n\nfunction getElectronPath () {\n  let executablePath;\n  if (fs.existsSync(pathFile)) {\n    executablePath = fs.readFileSync(pathFile, 'utf-8');\n  }\n  if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {\n    return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || 'electron');\n  }\n  if (executablePath) {\n    return path.join(__dirname, 'dist', executablePath);\n  } else {\n    throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again');\n  }\n}\n\nmodule.exports = getElectronPath();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRelayWindow = void 0;\nconst getRelayWindow = (preload, debug) => {\n    return (`\n   <!DOCTYPE html>\n    <html>\n      <head></head>\n      <body>\n      <p>WRTC Relay</p>\n        <script>\n            window.arrayBufferToBase64 = function (buffer) {\n              var binary = ''\n              var bytes = new Uint8Array(buffer)\n              for (var i = 0; i < bytes.byteLength; i++) {\n                binary += String.fromCharCode(bytes[i])\n              }\n              return window.btoa(binary)\n            }\n        \n            window.base64ToArrayBuffer = function (base64) {\n              var binary = window.atob(base64)\n              var bytes = new Uint8Array(binary.length)\n              for (var i = 0; i < binary.length; i++) {\n                bytes[i] = binary.charCodeAt(i)\n              }\n              return bytes.buffer\n            }\n        \n          // region GLOBALS and INIT\n          // maximum amount of open WebRTC handlers, after that queue\n          const MAXMESSAGES = 475;\n          // Counter for GC\n          let i = 1;\n            \n          const queue = []\n          const ipcRenderer = ${preload ? \"window.ipcRenderer\" : \"require('electron').ipcRenderer\"}           \n          require = null;\n          window.require = null;\n          // endregion\n          \n          // region UTILS\n          send = window.send = function (event, message) {\n            ipcRenderer.send('WRTCRelayData', [ event, message ])\n          }\n          \n          function handlersAtLimit(){\n            return typeof conns === \"object\" && Object.keys(conns).length >= MAXMESSAGES\n          }\n          \n          function workMessage(message){\n             let err\n             let res \n              try {\n                res = eval(message.code)\n              } catch (e) {\n                err = e.message\n                ${debug ? 'console.error(e)' : \"\"}\n              }\n              window.send(message.id, { res: res, err: err })\n          }\n          \n          function invokeGC(){\n            console.log(i++);\n           \n            if (!(i % 5)) {\n              // try to invoke GC on each 5ish iteration\n              // https://bugs.chromium.org/p/chromium/issues/detail?id=825576 Garbage Collection not deleting closed WebRTC messages\n              queueMicrotask(() => { \n                if(typeof conns === \"object\"){\n                  ${debug ? 'console.log(\"gcing all conns: \" + Object.keys(conns).length)' : \"\"}\n                  Object.keys(conns).forEach((id) => {\n                    let tmpPC = conns[id]\n                    if(tmpPC?.signalingState === \"closed\"){\n                      tmpPC = null;\n                      conns[id] = null;\n                      delete conns[id];\n                      \n                      // remove stats for id\n                      ipcRenderer.send('WRTCRelayClose', {id})\n                    }\n                  })\n                  ipcRenderer.send('WRTCRelayStats', {id: window.windowID, handler: Object.keys(conns).length + queue.length})\n                }\n                let img = document.createElement(\"img\");\n                img.src = window.URL.createObjectURL(new Blob([new ArrayBuffer(5e+7)])); // 50Mo or less or more depending as you wish to force/invoke GC cycle run\n                img.onerror = function() {\n                  window.URL.revokeObjectURL(this.src);\n                  img = null\n                }\n              })\n            }\n          }\n          // endregion\n          \n          ${debug ? 'console.log(\"initializing browser \" + typeof ipcRenderer)' : \"\"}\n\n          // region MAIN LOGIC\n          function workQueue(){\n            if(queue.length === 0) return;\n            if(handlersAtLimit()) return;\n            \n            // Fixed Queue Overflow\n            let message = queue.shift()\n            workMessage(message)\n            \n            // make sure queue Messages do not get lost\n            workQueue();\n          }\n          setInterval(workQueue, 1000);\n        \n          ipcRenderer.on('WRTCRelayData', function (e, message) {  \n            if(handlersAtLimit()) {\n              queue.push(message)\n              return;\n            }\n            workMessage(message)\n          })\n          // endregion\n        </script>\n      </body>\n    </html>\n  `);\n};\nexports.getRelayWindow = getRelayWindow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nconst RelayWindow_1 = require(\"./RelayWindow\");\nconst debugFactory = require('debug');\nconst debug = debugFactory('electron-webrtc-relay:ResourceManager');\nclass ResourceManager {\n    constructor(opts, onReady) {\n        this.maxWindows = 1;\n        this.windowIDtoStatsMap = new Map();\n        this.referenceToWindowMap = new Map();\n        this.rollingCounter = { i: 0, length: 0 };\n        this.internalWindowCounter = 0;\n        this.internalWindowQueueBuffer = 0;\n        this.opts = opts;\n        if (typeof this.opts.maxWindows === \"undefined\")\n            this.opts.maxWindows = 1;\n        this.maxWindows = this.opts.maxWindows;\n        if (this.opts.debug)\n            debug.enabled = true;\n        this.registerListener();\n        this.openWindow(onReady);\n    }\n    openWindow(onReady) {\n        debug(\"trying to create window\");\n        this.internalWindowQueueBuffer += 15;\n        if (this.internalWindowCounter >= this.maxWindows)\n            return false;\n        const newWindowID = this.internalWindowCounter.toString();\n        this.internalWindowCounter++;\n        debug(`creating window: ${newWindowID}`);\n        const newWindow = new electron_1.BrowserWindow({\n            title: 'WRTC Relay',\n            width: this.opts.debug ? 900 : 0,\n            height: this.opts.debug ? 750 : 0,\n            transparent: !this.opts.debug,\n            frame: this.opts.debug,\n            alwaysOnTop: false,\n            skipTaskbar: true,\n            center: true,\n            show: true,\n            webPreferences: {\n                nodeIntegration: typeof this.opts.preload === \"string\" ? false : true,\n                contextIsolation: typeof this.opts.preload === \"string\" ? true : false,\n                webSecurity: true,\n                preload: typeof this.opts.preload === \"string\" ? this.opts.preload : \"\",\n                devTools: this.opts.debug ? true : false,\n            },\n        });\n        if (this.opts.debug)\n            newWindow.webContents.openDevTools();\n        newWindow.webContents.setWebRTCIPHandlingPolicy(typeof this.opts.webrtcPolicy === \"string\" ? this.opts.webrtcPolicy : \"default\");\n        const file = 'data:text/html;charset=UTF-8,' + encodeURIComponent((0, RelayWindow_1.getRelayWindow)(typeof this.opts.preload === \"string\", typeof this.opts.debug !== \"undefined\" && this.opts.debug));\n        newWindow.loadURL(file);\n        newWindow.on(\"ready-to-show\", () => {\n            newWindow.webContents.send(\"WRTCRelayData\", {\n                id: \"relayInit\",\n                code: `window.windowID = ${newWindowID}\n                       window.conns = {}`\n            });\n            this.windowIDtoStatsMap.set(newWindowID, { handler: 0, window: newWindow });\n            this.rollingCounter.length++;\n            this.internalWindowQueueBuffer -= 15;\n            if (typeof onReady === \"function\")\n                onReady();\n        });\n        return true;\n    }\n    registerListener() {\n        electron_1.ipcMain.on(\"WRTCRelayStats\", (event, args) => {\n            try {\n                if (!this.windowIDtoStatsMap.has(args.id.toString())) {\n                    debug(`Resource Manager can not find stats of window: ${args.id}`);\n                    return;\n                }\n                const stat = this.windowIDtoStatsMap.get(args.id.toString());\n                if (typeof stat === \"undefined\")\n                    return;\n                stat.handler = args.handler;\n                debug(`webrtc window: ${args.id} has ${args.handler} open handler`);\n            }\n            catch (e) {\n                debug(e);\n            }\n        });\n        electron_1.ipcMain.on(\"WRTCRelayClose\", (event, args) => {\n            try {\n                this.referenceToWindowMap.delete(args.id.toString());\n            }\n            catch (e) {\n                debug(e);\n            }\n        });\n    }\n    getStringID() {\n        return this.rollingCounter.i.toString();\n    }\n    eval(reference, id, code) {\n        var _a, _b, _c, _d, _e;\n        if (this.referenceToWindowMap.has(reference) && this.windowIDtoStatsMap.has(this.referenceToWindowMap.get(reference))) {\n            debug(`window with id: ${this.referenceToWindowMap.get(reference)} handling reference: ${reference}`);\n            (_a = this.windowIDtoStatsMap.get(this.referenceToWindowMap.get(reference))) === null || _a === void 0 ? void 0 : _a.window.webContents.send(\"WRTCRelayData\", {\n                id,\n                code\n            });\n            return;\n        }\n        this.rollingCounter.i++;\n        if (this.rollingCounter.i >= this.rollingCounter.length)\n            this.rollingCounter.i = 0;\n        if (!this.windowIDtoStatsMap.has(this.getStringID())) {\n            debug(`window with id: ${this.rollingCounter.i} does not exist`);\n            return;\n        }\n        if (((_c = (_b = this === null || this === void 0 ? void 0 : this.windowIDtoStatsMap) === null || _b === void 0 ? void 0 : _b.get(this.getStringID())) === null || _c === void 0 ? void 0 : _c.handler) < 300 + this.internalWindowQueueBuffer) {\n            debug(`window with id: ${this.getStringID()} handling new reference: ${reference}`);\n            (_e = (_d = this === null || this === void 0 ? void 0 : this.windowIDtoStatsMap) === null || _d === void 0 ? void 0 : _d.get(this.getStringID())) === null || _e === void 0 ? void 0 : _e.window.webContents.send(\"WRTCRelayData\", { id, code });\n            this.referenceToWindowMap.set(reference, this.getStringID());\n            return;\n        }\n        let lowestQueue;\n        this.windowIDtoStatsMap.forEach((value, key) => {\n            if (typeof lowestQueue === \"undefined\" || value.handler < lowestQueue.handler)\n                lowestQueue = {\n                    handler: value.handler,\n                    window: value.window,\n                    id: key\n                };\n        });\n        if (typeof lowestQueue === \"undefined\") {\n            debug(\"failed to find lowestQueue\");\n            return;\n        }\n        if (lowestQueue.handler > 250 + this.internalWindowQueueBuffer)\n            this.openWindow();\n        lowestQueue.window.webContents.send(\"WRTCRelayData\", { id, code });\n        this.referenceToWindowMap.set(reference, lowestQueue.id);\n        debug(`window with id, selected by enumeration: ${lowestQueue.id} handling new reference: ${reference}`);\n    }\n}\nexports.default = ResourceManager;\n","'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ResourceManager_1 = __importDefault(require(\"./ResourceManager\"));\nconst { ipcMain } = require('electron');\nconst debugFactory = require('debug');\nconst EventEmitter = require('events');\nconst debug = debugFactory('electron-webrtc-relay:Bridge');\nmodule.exports = class Bridge extends EventEmitter {\n    constructor(opts) {\n        super();\n        this.i = 0;\n        this.queue = [];\n        this.ready = false;\n        this.closing = false;\n        this.opts = { debug: false };\n        this.resourceManager = undefined;\n        if (typeof opts === \"undefined\")\n            opts = { debug: false };\n        this.opts = opts;\n        if (opts.debug)\n            debug.enabled = true;\n    }\n    _debug(msg) {\n        if (!this.opts.debug)\n            return;\n        debug(msg);\n    }\n    init() {\n        this._debug(`Initializing Relay: ${JSON.stringify(this.opts)}`);\n        this.resourceManager = new ResourceManager_1.default(this.opts, () => {\n            debug(\"Bridge ready\");\n            this.ready = true;\n            this._queue();\n        });\n        ipcMain.on(\"WRTCRelayData\", (event, message) => {\n            if (typeof message !== 'object')\n                return;\n            debug(`Received: ${JSON.stringify(message)}`);\n            this.emit(message[0], message[1]);\n        });\n    }\n    _queue() {\n        this.queue.forEach((obj) => {\n            if (this.resourceManager)\n                this.resourceManager.eval(obj.reference, obj.id, obj.code);\n        });\n        this.queue = [];\n    }\n    eval(reference, code, opts = {}, cb) {\n        const inactive = !this.ready;\n        if (typeof opts === 'function') {\n            cb = opts;\n            opts = {};\n        }\n        this._debug(`opts: ${JSON.stringify(opts)} eval: ${JSON.stringify(code)}, BrowserWindow active: ${!inactive}`);\n        const id = (this.i++).toString(36);\n        this.once(id, (res) => {\n            let err = null;\n            if (res.err) {\n                err = new Error(`Error evaluating \"${code}\" ` + `${res.err}`);\n                err.original = res.err;\n            }\n            if (cb) {\n                if (err)\n                    return cb(err);\n                return cb(null, res.res);\n            }\n            if (err)\n                console.error(err);\n        });\n        if (inactive) {\n            this.queue.push({ id, code, reference });\n            return;\n        }\n        if (this.resourceManager)\n            this.resourceManager.eval(reference, id, code);\n    }\n    close() {\n    }\n};\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst debug = require('debug')('RTCDC');\nmodule.exports = function (bridge, wrtc) {\n    return class RTCDataChannel extends events_1.EventEmitter {\n        constructor(pcId, label, opts) {\n            super();\n            this.protocol = \"\";\n            this.addEventListener = this.addListener;\n            if (typeof pcId === 'object') {\n                this._wrap(pcId);\n            }\n            else {\n                this._create(pcId, label, opts);\n            }\n        }\n        _create(pcId, label, opts) {\n            opts = opts || {};\n            this._pcId = pcId;\n            this.label = label;\n            this.ordered = null;\n            this.protocol = '';\n            this.id = this.stream = null;\n            this.readyState = 'connecting';\n            this.bufferedAmount = 0;\n            this._bufferedAmountLowThreshold = 0;\n            this._binaryType = 'blob';\n            this.maxPacketLifeType = null;\n            this.maxRetransmits = null;\n            this.negotiated = false;\n            this.reliable = typeof opts.reliable === 'boolean' ? opts.reliable : true;\n            this.on('error', (err) => wrtc.emit('error', err, this));\n            bridge.eval(JSON.stringify(pcId), `\n        var pc = conns[${JSON.stringify(pcId)}]\n        var dc = pc.createDataChannel(\n          ${JSON.stringify(label)}, ${JSON.stringify(opts)})\n        pc.dataChannels[dc.id] = dc\n        // Queues messages that have been recieved before the message listener has been added\n        dc.msgQueue = []\n        dc.onmessage = function (eMsg) {\n          dc.msgQueue.push(eMsg)\n        }\n        dc.id\n      `, (err, id) => {\n                if (err)\n                    return console.error(err);\n                this.id = this.stream = id;\n                this._registerListeners();\n                this.emit('init');\n            });\n        }\n        _wrap(init) {\n            for (let k in init) {\n                this[k] = init[k];\n            }\n            this.stream = this.id;\n            this._registerListeners();\n            this.on('error', (err) => wrtc.emit('error', err, this));\n        }\n        _registerListeners(cb) {\n            bridge.on(`dc:${this._pcId}:${this.id}`, this.onMessage.bind(this));\n            this._eval(`\n        var id = 'dc:' + ${JSON.stringify(this._pcId)} + ':' + dc.id\n        dc.onopen = function () {\n          send(id, {\n            type: 'open',\n            state: {\n              ordered: dc.ordered,\n              protocol: dc.protocol,\n              maxPacketLifeType: dc.maxPacketLifeType,\n              maxRetransmits: dc.maxRetransmits,\n              negotiated: dc.negotiated,\n              reliable: dc.reliable\n            }\n          })\n        }\n        dc.onmessage = function (e) {\n          send(id, {\n            type: 'message',\n            event: {\n              data: e.data instanceof ArrayBuffer ? arrayBufferToBase64(e.data) : e.data,\n              origin: e.origin\n            },\n            dataType: e.data instanceof ArrayBuffer ? 'binary' : 'string'\n          })\n        }\n        dc.onbufferedamountlow = function () {\n          send(id, { type: 'bufferedamountlow' })\n        }\n        dc.onclose = function () {\n          delete pc.dataChannels[dc.id]\n          send(id, { type: 'close' })\n        }\n        dc.onerror = function () {\n          send(id, { type: 'error' })\n        }\n        if (dc.readyState === 'open') dc.onopen()\n        for (var i = 0; i < dc.msgQueue.length; i++) {\n          dc.onmessage(dc.msgQueue[i])\n        }\n        dc.msgQueue = null\n      `, cb || ((err) => {\n                if (err)\n                    console.error(err);\n            }));\n        }\n        onMessage(message) {\n            const handler = this['on' + message.type];\n            const event = message.event || {};\n            debug('<<', this.id, message.type, message, !!handler);\n            switch (message.type) {\n                case 'open':\n                    this.readyState = 'open';\n                    break;\n                case 'message':\n                    if (message.dataType === 'binary') {\n                        const b = new Buffer(event.data, 'base64');\n                        event.data = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n                    }\n                    break;\n                case 'close':\n                    this.readyState = 'closed';\n                    break;\n            }\n            this.emit(message.type, event);\n            if (handler)\n                handler(event);\n        }\n        close() {\n            this.readyState = 'closing';\n            this._eval('if (dc) dc.close()', (err) => {\n                if (err)\n                    console.error(err);\n            });\n        }\n        send(data) {\n            let convert = '';\n            if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\n                data = toBuffer(data);\n            }\n            if (data instanceof Buffer) {\n                data = data.toString('base64');\n                convert = 'data = base64ToArrayBuffer(data)';\n            }\n            this._eval(`\n        if (dc.readyState === 'open') {\n          var data = ${JSON.stringify(data)}\n          ${convert}\n          dc.send(data)\n        }\n        dc.bufferedAmount\n      `, (err, bufferedAmount) => {\n                if (err)\n                    return console.error(err);\n                this.bufferedAmount = bufferedAmount;\n            });\n        }\n        _eval(code, cb) {\n            if (typeof this._pcId === \"undefined\")\n                return;\n            return bridge.eval(JSON.stringify(this._pcId), `\n        var pc = conns[${JSON.stringify(this._pcId)}]\n        var dc = pc.dataChannels[${JSON.stringify(this.id)}]\n      ` + code, cb || ((err) => {\n                if (err)\n                    console.error(err);\n            }));\n        }\n        _setProp(name, value) {\n            if (this.id == null) {\n                return this.once('init', () => this._setProp(name, value));\n            }\n            return this._eval(`dc[\"${name}\"] = ${JSON.stringify(value)}`);\n        }\n        get bufferedAmountLowThreshold() {\n            return this._bufferedAmountLowThreshold;\n        }\n        set bufferedAmountLowThreshold(value) {\n            this._bufferedAmountLowThreshold = value;\n            this._setProp('bufferedAmountLowThreshold', value);\n        }\n        get binaryType() {\n            return this._binaryType;\n        }\n        set binaryType(value) {\n            this._binaryType = value;\n            this._setProp('binaryType', value);\n        }\n    };\n};\nfunction toBuffer(ab) {\n    const buffer = new Buffer(ab.byteLength);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n    return buffer;\n}\n","'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst debug = require('debug')('RTCPC');\nmodule.exports = function (bridge, wrtc) {\n    const RTCDataChannel = require('./RTCDataChannel.js')(bridge, wrtc);\n    let i = 0;\n    return class RTCPeerConnection extends events_1.EventEmitter {\n        constructor(opts) {\n            super();\n            this.addEventListener = this.addListener;\n            if (bridge.closing) {\n                throw new Error('Cannot create RTCPeerConnection, the electron-webrtc daemon has been closed');\n            }\n            this._id = (i++).toString(36);\n            this._dataChannels = new Map();\n            this._offer = null;\n            this._answer = null;\n            this.iceConnectionState = 'new';\n            this.iceGatheringState = 'new';\n            this.localDescription = null;\n            this.peerIdentity = {\n                catch: (err) => {\n                    console.error(err);\n                }\n            };\n            this.remoteDescription = null;\n            this.signalingState = 'stable';\n            bridge.on(`pc:${this._id}`, this.onMessage.bind(this));\n            bridge.eval(JSON.stringify(this._id), `\n        (function () {\n          var pc = conns[${JSON.stringify(this._id)}] = new webkitRTCPeerConnection(${JSON.stringify(opts)})\n          pc.dataChannels = {}\n          var id = 'pc:' + ${JSON.stringify(this._id)}\n          pc.onaddstream = function (e) {\n            // TODO: send MediaStream info\n            send(id, { type: 'addstream' })\n          }\n          pc.ondatachannel = function (e) {\n            pc.dataChannels[e.channel.id] = e.channel\n            var channel = {}\n            for (var key in e.channel) {\n              if (typeof e.channel[key] === 'function' || e.channel[key] == null) continue\n              channel[key] = e.channel[key]\n            }\n            // Queues messages that have been recieved before the message listener has been added\n            e.channel.msgQueue = []\n            e.channel.onmessage = function (eMsg) {\n              e.channel.msgQueue.push(eMsg)\n            }\n            send(id, {\n              type: 'datachannel',\n              channel: channel\n            })\n          }\n          pc.onicecandidate = function (e) {\n            var event = {}\n            if (e.candidate) {\n              event.candidate = {\n                candidate: e.candidate.candidate,\n                sdpMid: e.candidate.sdpMid,\n                sdpMLineIndex: e.candidate.sdpMLineIndex\n              }\n            }\n            var offer, answer\n            function sendEvent () {\n              send(id, {\n                type: 'icecandidate',\n                event: event,\n                iceGatheringState: pc.iceGatheringState,\n                // offer: offer ? offer.toJSON() : null //is already an object?\n                offer: offer ? offer : null\n              })\n            }\n            pc.createOffer(function (o) {\n              offer = o\n              sendEvent()\n            }, function () {\n              offer = false\n              sendEvent()\n            })\n          }\n          pc.oniceconnectionstatechange = function (e) {\n            send(id, { type: 'iceconnectionstatechange', iceConnectionState: pc.iceConnectionState })\n          }\n          pc.onidentityresult = function (e) {\n            send(id, { type: 'identityresult', event: {\n              assertion: e.assertion\n            }})\n          }\n          pc.onidpassertionerror = function (e) {\n            send(id, {\n              type: 'idpassertionerror',\n              event: {\n                idp: e.idp,\n                loginUrl: e.loginUrl,\n                protocol: e.protocol,\n              }\n            })\n          }\n          pc.onidpvalidationerror = function (e) {\n            send(id, {\n              type: 'idpvalidationerror',\n              event: {\n                idp: e.idp,\n                loginUrl: e.loginUrl,\n                protocol: e.protocol,\n              }\n            })\n          }\n          pc.onnegotiationneeded = function (e) {\n            send(id, { type: 'negotiationneeded' })\n          }\n          pc.onremovestream = function (e) {\n            send(id, {\n              type: 'removestream',\n              event: { id: e.stream.id }\n            })\n          }\n          pc.onsignalingstatechange = function (e) {\n            send(id, {\n              type: 'signalingstatechange',\n              signalingState: pc.signalingState\n            })\n          }\n          \n          invokeGC()\n        })()\n      `, (err) => {\n                if (err)\n                    wrtc.emit('error', err, this);\n            });\n        }\n        onMessage(message) {\n            const handler = this['on' + message.type];\n            const event = message.event || {};\n            debug(this._id + '<<', message.type, message, !!handler);\n            switch (message.type) {\n                case 'addstream':\n                    break;\n                case 'datachannel':\n                    message.channel._pcId = this._id;\n                    event.channel = new RTCDataChannel(message.channel);\n                    this._dataChannels.set(event.channel.id, event.channel);\n                    break;\n                case 'icecandidate':\n                    this.iceGatheringState = message.iceGatheringState;\n                    if (message.offer) {\n                        this._offer = Object.assign(this._offer || {}, message.offer);\n                    }\n                    break;\n                case 'iceconnectionstatechange':\n                    this.iceConnectionState = message.iceConnectionState;\n                    break;\n                case 'removestream':\n                    break;\n                case 'signalingstatechange':\n                    this.signalingState = message.signalingState;\n                    break;\n            }\n            this.emit(message.type, event);\n            if (handler)\n                handler(event);\n        }\n        createDataChannel(label, options) {\n            const dc = new RTCDataChannel(this._id, label, options);\n            dc.once('init', () => this._dataChannels.set(dc.id, dc));\n            return dc;\n        }\n        _getCreateArgs(cb, errCb, options) {\n            if (cb && errCb)\n                return {\n                    cb: cb,\n                    errCb: errCb,\n                    options: options\n                };\n            else\n                return {\n                    options: cb\n                };\n        }\n        createOffer(p1, p2, p3) {\n            let { cb, errCb, options } = this._getCreateArgs(p1, p2, p3);\n            if (this._offer) {\n                if (cb)\n                    cb(this._offer);\n                Promise.resolve(this._offer);\n            }\n            return this._callRemote('createOffer', `onSuccess, onFailure, ${JSON.stringify(options)}`, (offer) => {\n                this._offer = offer;\n                if (cb)\n                    cb(offer);\n            }, errCb);\n        }\n        createAnswer(p1, p2, p3) {\n            let { cb, errCb, options } = this._getCreateArgs(p1, p2, p3);\n            if (this._answer) {\n                if (cb)\n                    cb(this._answer);\n                Promise.resolve(this._answer);\n            }\n            return this._callRemote('createAnswer', `onSuccess, onFailure, ${JSON.stringify(options)}`, (answer) => {\n                this._answer = answer;\n                if (cb)\n                    cb(answer);\n            }, errCb);\n        }\n        setLocalDescription(desc, cb, errCb) {\n            this.localDescription = desc;\n            return this._callRemote('setLocalDescription', `new RTCSessionDescription(${JSON.stringify(desc)}), onSuccess, onFailure`, cb, errCb);\n        }\n        setRemoteDescription(desc, cb, errCb) {\n            this.remoteDescription = desc;\n            return this._callRemote('setRemoteDescription', `new RTCSessionDescription(${JSON.stringify(desc)}), onSuccess, onFailure`, cb, errCb);\n        }\n        addIceCandidate(candidate, cb, errCb) {\n            return this._callRemote('addIceCandidate', `new RTCIceCandidate(${JSON.stringify(candidate)}), onSuccess, onFailure`, cb, errCb);\n        }\n        close() {\n            this._eval(`\n        if (pc && pc.signalingState !== 'closed') pc.close()\n        pc = null\n      `);\n        }\n        getStats(cb) {\n            this._callRemote('getStats', `\n        function (res) {\n          res = res.result()\n          var output = res.map(function (res) {\n            var item = {\n              id: res.id,\n              timestamp: res.timestamp,\n              type: res.type,\n              stats: {}\n            }\n            res.names().forEach(function (name) {\n              item.stats[name] = res.stat(name)\n            })\n            return item\n          })\n          onSuccess(output)\n        }\n      `, (res) => {\n                for (let item of res) {\n                    let stats = item.stats;\n                    delete item.stats;\n                    item.names = () => Object.keys(stats);\n                    item.stat = (name) => stats[name];\n                }\n                cb({ result: () => res });\n            });\n        }\n        _eval(code, cb, errCb) {\n            let _resolve;\n            let _reject;\n            const promise = new Promise((resolve, reject) => {\n                _resolve = resolve;\n                _reject = reject;\n            });\n            const reqId = crypto_1.default.randomBytes(16).toString(\"hex\");\n            bridge.once(reqId, (res) => {\n                if (res.err) {\n                    if (errCb)\n                        errCb(res.err);\n                    _reject(res.err);\n                }\n                else {\n                    if (cb)\n                        cb(res.res);\n                    _resolve(res.res);\n                }\n            });\n            bridge.eval(JSON.stringify(this._id), `\n        (function () {\n          var id = ${JSON.stringify(this._id)}\n          var reqId = ${JSON.stringify(reqId)}\n          var pc = conns[id]\n          var onSuccess = function (res) {\n            send(reqId, { res: res && res.toJSON ? res.toJSON() : res })\n          }\n          var onFailure = function (err) {\n            send(reqId, { err: err })\n          }\n          ${code}\n        })()\n      `, (err) => {\n                if (err)\n                    wrtc.emit('error', err, this);\n            });\n            return promise;\n        }\n        _callRemote(name, args, cb, errCb) {\n            return this._eval(`pc.${name}(${args || ''})`, cb, errCb);\n        }\n    };\n};\n","'use strict';\nmodule.exports = class RTCSessionDescription {\n    constructor(obj) {\n        this.type = obj.type;\n        this.sdp = obj.sdp;\n    }\n    toJSON() {\n        return this;\n    }\n};\n","'use strict';\nmodule.exports = class RTCIceCandidate {\n    constructor(obj) {\n        this.candidate = obj.candidate;\n        this.sdpMid = obj.sdpMid;\n        this.sdpMLineIndex = obj.sdpMLineIndex;\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst Bridge = require('./lib/ElectronBridge');\nmodule.exports = function (opts) {\n    const bridge = new Bridge(opts);\n    const wrtc = new events_1.EventEmitter();\n    return Object.assign(wrtc, {\n        close: bridge.close.bind(bridge),\n        electronDaemon: bridge,\n        init: bridge.init.bind(bridge),\n        RTCPeerConnection: require('./wrtc/RTCPeerConnection.js')(bridge, wrtc),\n        RTCSessionDescription: require('./wrtc/RTCSessionDescription.js'),\n        RTCIceCandidate: require('./wrtc/RTCIceCandidate.js'),\n        RTCDataChannel: require('./wrtc/RTCDataChannel.js')(bridge, wrtc)\n    });\n};\n","import { webSockets } from \"@libp2p/websockets\";\nimport { webRTCDirect } from \"@libp2p/webrtc-direct\";\nimport { webRTCStar } from \"@libp2p/webrtc-star\";\nimport { webTransport } from \"@libp2p/webtransport\";\nimport webRTC from \"@constl/electron-webrtc-relay\";\nimport { ADRESSES_WEBRTC_STAR } from \"./const.js\";\nconst wrtc = webRTC();\nwrtc.init();\nconst webrtc = webRTCStar({\n    wrtc,\n});\n// https://github.com/libp2p/js-libp2p/blob/master/doc/CONFIGURATION.md#setup-webrtc-transport-and-discovery\n// https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs-core-config/src/libp2p.browser\n// https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs-core-config/src/libp2p\nconst config = {\n    libp2p: {\n        transports: [\n            webTransport(),\n            webSockets(),\n            webrtc.transport,\n            webRTCDirect(),\n        ],\n        peerDiscovery: [webrtc.discovery],\n        addresses: {\n            listen: ADRESSES_WEBRTC_STAR,\n        },\n    },\n};\nexport default config;\n//# sourceMappingURL=config%C3%89lectronPrincipal.js.map"],"names":["__dirname","define_process_env_default","RelayWindow","getRelayWindow","preload","debug","ResourceManager_1","electron_1","require$$0","RelayWindow_1","require$$1","debugFactory","require$$2","ResourceManager","opts","onReady","newWindowID","newWindow","file","event","args","stat","e","reference","id","code","_a","_b","_c","_d","_e","lowestQueue","value","key","__importDefault","this","mod","ElectronBridge","ipcMain","EventEmitter","require$$3","ElectronBridgeModule","msg","message","obj","cb","inactive","res","err","RTCDataChannel_1","events_1","RTCDataChannelModule","bridge","wrtc","pcId","label","init","k","handler","b","Buffer","data","convert","toBuffer","bufferedAmount","name","ab","buffer","view","i","RTCPeerConnection_1","crypto_1","RTCPeerConnectionModule","RTCDataChannel","options","dc","errCb","p1","p2","p3","offer","answer","desc","candidate","item","stats","_resolve","_reject","promise","resolve","reject","reqId","RTCSessionDescription_1","RTCIceCandidate_1","dist","Bridge","distModule","require$$4","require$$5","webRTC","webrtc","webRTCStar","config","webTransport","webSockets","webRTCDirect","ADRESSES_WEBRTC_STAR"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10]}