{"version":3,"file":"index-fce67a69.js","sources":["../../../../node_modules/ipfs-core/src/index.js","../../../../node_modules/@constl/ipa/dist/src/sfip/index.js"],"sourcesContent":["import { create as createImport } from './components/index.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\nimport urlSourceImport from 'ipfs-utils/src/files/url-source.js'\n\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn\n * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs\n * @typedef {import('./types').InitOptions} InitOptions\n * @typedef {import('./types').RelayOptions} RelayOptions\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions\n * @typedef {import('./types').Preload} Preload\n * @typedef {import('./types').MfsPreload} MfsPreload\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n */\n\nexport const create = createImport\nexport const globSource = globSourceImport\nexport const urlSource = urlSourceImport\n","import { isBrowser, isElectronMain, isElectronRenderer, isNode, isWebWorker, } from \"wherearewe\";\nimport { mplex } from \"@libp2p/mplex\";\nimport { create } from \"ipfs-core\";\nimport { noise } from \"@chainsafe/libp2p-noise\";\nimport mergeOptions from \"merge-options\";\nimport { FaultTolerance } from \"@libp2p/interface-transport\";\nconst obtConfigPlateforme = async () => {\n    let configPlateforme;\n    if (isBrowser || isElectronRenderer) {\n        configPlateforme = (await import(\"./configNavigateur.js\")).default;\n    }\n    else if (isWebWorker) {\n        configPlateforme = (await import(\"./configTravailleur.js\")).default;\n    }\n    else if (isElectronMain) {\n        configPlateforme = (await import(\"./config\\u00C9lectronPrincipal.js\"))\n            .default;\n    }\n    else if (isNode) {\n        configPlateforme = (await import(\"./configNode.js\")).default;\n    }\n    else {\n        console.warn(\"Plateforme non reconnue. On utilisera la configuration navigateur.\");\n        configPlateforme = (await import(\"./configNavigateur.js\")).default;\n    }\n    return configPlateforme;\n};\n// https://github.com/libp2p/js-libp2p-webrtc-direct/issues/98\nconst obtConfigCommun = () => {\n    return {\n        libp2p: {\n            streamMuxers: [mplex()],\n            connectionEncryption: [noise()],\n            transportManager: {\n                faultTolerance: FaultTolerance.NO_FATAL\n            }\n        },\n        relay: { enabled: true, hop: { enabled: true, active: true } },\n    };\n};\nexport default async function initSFIP(dir = \"./constl/sfip\") {\n    const config = obtConfigCommun();\n    const configPlateforme = await obtConfigPlateforme();\n    config.repo = dir;\n    const configFinale = mergeOptions(config, configPlateforme);\n    return create(configFinale);\n}\n//# sourceMappingURL=index.js.map"],"names":["create","createImport","obtConfigPlateforme","configPlateforme","isBrowser","isElectronRenderer","__vitePreload","isWebWorker","isElectronMain","isNode","obtConfigCommun","mplex","noise","FaultTolerance","initSFIP","dir","config","configFinale","mergeOptions"],"mappings":"8GAqBO,MAAMA,EAASC,ECfhBC,EAAsB,SAAY,CACpC,IAAIC,EACJ,OAAIC,GAAaC,EACbF,GAAoB,MAAKG,EAAA,IAAC,OAAO,gCAAuB,EAAC,kBAAA,GAAE,QAEtDC,EACLJ,GAAoB,MAAMG,EAAA,IAAA,OAAO,iCAAwB,EAAC,kBAAA,GAAE,QAEvDE,EACLL,GAAoB,MAAKG,EAAA,IAAC,OAAO,uCAAmC,uBAC/D,QAEAG,EACLN,GAAoB,MAAKG,EAAA,IAAC,OAAO,0BAAiB,uBAAG,SAGrD,QAAQ,KAAK,oEAAoE,EACjFH,GAAoB,MAAKG,EAAA,IAAC,OAAO,gCAAuB,EAAC,kBAAA,GAAE,SAExDH,CACX,EAEMO,EAAkB,KACb,CACH,OAAQ,CACJ,aAAc,CAACC,GAAO,EACtB,qBAAsB,CAACC,GAAO,EAC9B,iBAAkB,CACd,eAAgBC,EAAe,QAClC,CACJ,EACD,MAAO,CAAE,QAAS,GAAM,IAAK,CAAE,QAAS,GAAM,OAAQ,GAAQ,CACtE,GAEe,eAAeC,EAASC,EAAM,gBAAiB,CAC1D,MAAMC,EAASN,IACTP,EAAmB,MAAMD,IAC/Bc,EAAO,KAAOD,EACd,MAAME,EAAeC,EAAaF,EAAQb,CAAgB,EAC1D,OAAOH,EAAOiB,CAAY,CAC9B"}