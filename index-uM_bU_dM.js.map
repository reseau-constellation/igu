{"version":3,"mappings":"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AAW,KACX,KAAW,GACX,kBACU,CACV,QAAW,SACD,SACV,EAAW,GACX,SAAU,CACV,eACA,cACA,GAAU,GACV,UACA,MAAU,MACV,IAAU,OACV,KAAY,IACZ,QAAW,KACX,QAAa,GACb,SAAY,GACZ,QAAW,MACX,IAAU,KACV,MACA,YAAc,MACd,OAAa,IACb,QACA,IAAS,GACT,eACA,aAAmB,CACnB,eACA,SACA,OAAS,EACT,OAAU,UACD,CACT,QAAU,IACV,KAAS,IACT,SAAa,KACb,OAAW,KACX,UAAe,QACf,CAAS,GACT,aAAgB,OAChB,kBAAyB,GACzB,qBACA,qBAAyB,CACzB,cAAiB,eACjB,SAAoB,CACpB,OAAU,SACA,UACC,EACX,OAAU,EACV,QAAW,KACX,SACA,KAAU,EACV,OAAU,MACV,GAAU,MACV,IAAW,KACX,aACA,KAAW,CACX,WACA,QAAW,GACX,QAAW,OACX,SACA,MAAW,KACX,YACA,OAAW,QACX,GAAW,MACX,KAAW,YACA,WACA,EACX,OAAU,GACV,UAAW,CACX,QAAW,GACX,eACA,UACA,QAAY,GACZ,OAAS,EACT,QAAW,SACX,CAAU,GACV,OAAU,GACV,kBACA,aAAqB,EACrB,uBAA0B,EAC1B,SAAY,KACZ,MAAY,EACZ,OAAU,MACV,cAAqB,MACrB,aACA,cAAiB,MACjB,WAAkB,KAClB,YAAkB,EAClB,iBAAoB,EACpB,iBACA,gBAAmB,KACnB,IAAU,WACV,GAAW,MACX,SAAW,UACX,kBACW,IACX,UAAW,GACX,QAAW,SACX,aACA,SAAW,CACX,SAAU,EACV,gBAAmB,EACnB,SAAY,WACZ,CAAW,MACX,WAAY,CACZ,gBAAe,EACf,aAAa,MACb,eAAc,CACd,SAAU,MACV,QAAW,KACX,SAAY,OACZ,WAAc,IACd,mBACA,CAAW,QACX,IAAW,SACX,GAAW,GACX,QAAW,GACX,QAAW,GACX,QAAW,GACX,cACA,IAAW,EACX,QAAW,EACX,QAAW,OACX,GAAW,EACX,OACA,KAAQ,GACR,eAEA,oBACA,cAAiB,MACjB,mBAA0B,KAC1B,kBACA,2BAAgC,cAChC,WAA0B,EA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","names":["AbortError","message","code","props","base","ALPHABET","name","j","BASE_MAP","i","x","xc","LEADER","iFACTOR","BASE","source","zeroes","length","pbegin","pend","b58","size","carry","it1","it2","str","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","encode","_brrp__multiformats_scope_baseX","src","coerce","o","baseEncode","prefix","bytes","baseDecode","text","decoder","or","decoders","input","ComposedDecoder","left","right","Encoder","Decoder","from","Codec","basex","alphabet","bitsPerChar","codes","end","bits","written","value","out","data","mask","pad","rfc4648","base58btc","baseX","base32","base64","v","createDisabledLogger","logger","trace","obj","abortableSource","options","opts","nextAbortHandler","result","abortMessage","abort","resolve","reject","abortCode","signal","isKnownAborter","p","iterator","err","abortHandler","anySignal","signals","controller","onAbort","clear","key","rlKey","BlockedKeys_1","now","sec","ms","expire","BlockedKeys","require$$0","remainingPoints","msBeforeNext","consumedPoints","isFirstInDuration","RateLimiterAbstract","require$$1","RateLimiterRes","require$$2","changedPoints","storeResult","res","blockPromise","delay","funcName","msDuration","points","secDuration","initPoints","forceExpire","RateLimiterStoreAbstract","resTtlMs","consumed","multi","incrCallback","RateLimiterRedis","client","_client","_v","RateLimiterMongo","conn","collection","doc","docAttrs","where","upsertData","upsertOptions","replaceWhere","replaceTo","errReplace","cb","errConn","row","errBegin","dateNow","q","values","newExpire","errUpsert","errSelect","RateLimiterMySQL","constructorName","queryObj","expireQ","RateLimiterPostgres","expiresAt","timeoutId","Record","durationSec","msBeforeExpires","durationMs","pointsToConsume","RateLimiterMemory","crypto","require$$3","require$$4","worker","msg","type","payload","process","func","promiseId","arg","promise","rejRes","hrtime","pm2","pm2Bus","packet","sendErr","msgData","pm2Message","RateLimiterCluster","RateLimiterClusterMaster","RateLimiterClusterMasterPM2","nowMs","errAddKey","createdNew","nextOptions","resUpsert","errGetExpire","resGetExpireMs","expireMs","errDelExpire","RateLimiterMemcache","limiters","limiter","promises","rej","resObj","rejected","item","extra","limiterFlexible","tokens","rlRes","_this","rateLimiter","burstLimiter","blRes","rlRej","blRej","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","asUint8Array","buf","allocUnsafe","FACTOR","fromString","toString","b","base10","base16","base16upper","base2","alphabetBytesToChars","c","alphabetCharsToBytes","byts","char","byt","base256emoji","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36upper","base58flickr","base64pad","base64urlpad","base8","identity","bases","identityBase","base36","base58","createCodec","ascii","encoding","array","alloc","concat","arrays","curr","acc","output","offset","arr","equals","a","symbol","index","bufs","bufEnd","endExclusive","beginInclusive","list","bufStart","sliceEndsInBuf","start","search","M","needle","radix","rightmostPositions","lastIndex","lastPatIndex","skip","byteOffset","littleEndian","other","MessageTypes","MessageTypeNames","InitiatorMessageTypes","ReceiverMessageTypes","MAX_MSG_SIZE","MAX_MSG_QUEUE_SIZE","maxMessageSize","chunk","id","msgs","readVarInt","h","MSB","shift","counter","REST","isAsyncIterable","DEFAULT_BATCH_SIZE","DEFAULT_SERIALIZE","batchedBytes","defer","timeout","serialize","deferred","ended","encode_1","MSBALL","INT","num","oldOffset","read","N1","N2","N3","N5","N6","N7","N8","N4","N9","varint","POOL_SIZE","pool","header","encoder","minSendBytes","messages","m","log","ERR_STREAM_RESET","ERR_STREAM_ABORT","ERR_SINK_ENDED","ERR_DOUBLE_SINK","init","CodeError","createStream","send","maxMsgSize","onEnd","MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION","MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION","MAX_STREAM_BUFFER_SIZE","DISCONNECT_THRESHOLD","printMessage","uint8ArrayToString","streams","registry","s","stream","maxBufferSize","MplexStreamMuxer","mplex","Mplex","prototype","object","globalThis","this","symbols","keys","merged","config","merge","k","indices","mergeOptions","option","assign","ErrClass","ctx","params","pending","exports","n","b64","t","parts","invalidEncoding","EventEmitter","evt","fn","listeners","args","f32","le","f8b","val","pos","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","sign","exponent","mantissa","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_rev","off0","off1","writeDouble_ieee754","readDouble_ieee754","hi","len","utf8","c1","c2","slice","SIZE","MAX","slab","longbits","util","LongBits","lo","zero","unsigned","charCodeAt","hash","zeroHash","part0","part1","part2","global","prop","Buffer","sizeOrArray","ifNotSet","dst","newError","CustomError","properties","fieldNames","fieldMap","writer","Writer","BufferWriter","noop","create","push","write_uint32","write_bool","write_fixed32","write_fixed64","write_double","write_bytes","write_string","reset","head","tail","finish","writer_buffer","write_string_buffer","reader","Reader","BufferReader","writeLength","create_array","read_uint32_setup","read_bool","read_sfixed32","read_double","read_bytes","nativeBuffer","read_string","wireType","BufferReader_","reader_buffer","service","Service","responseDelimited","requestDelimited","rpcCall","method","requestCtor","callback","self","request","response","responseCtor","endedByRPC","rpc","roots","protobuf","configure","minimal","$Reader","$Writer","$util","$root","Data","ks","w","r","l","d","valuesById","UnixTime","Metadata","Pb.Data","mode","parseMtime","mtime","secs","decoded","blockSizes","hashType","fanout","parsedMode","sum","parsed","pbData","aa","bb","ii","MSB$1","REST$1","_brrp_varint","encodeTo","int","target","encodingLength","digest","sizeOffset","varint.encodingLength","digestOffset","varint.encodeTo","Digest","varint.decode","equalBytes","format","link","version","toStringV1","baseCache","cache","cid","multihash","DAG_PB_CODE","SHA_256_CODE","CID","Digest.create","Digest.equals","unknown","encodeCID","cidSymbol","Digest.decode","remainder","specs","prefixSize","multihashBytes","digestBytes","Digest.Digest","initialBytes","next","digestSize","multihashCode","parseCIDtoBytes","toStringV0","hashOffset","textDecoder","decodeVarint","byteLen","postOffset","wire","fieldNum","links","linksBeforeData","node","textEncoder","nameBytes","abuf","bbuf","y","Hash","e","pbl","pbn","validate","createNode","recurs","Type","is","token","isa","encodeErrPrefix","asU8A","_token","_buf","dp","mapSorter","e1","e2","keyToken2","keyToken1","defaultEncodeOptions","encodeCustom","decodeErrPrefix","startPos","negative","swallow","ch","float","Token","numStr","readUtf8Char","firstByte","bytesPerSequence","secondByte","tempCodePoint","codePoint","thirdByte","fourthByte","chars","ch1","readu4","decodeCodePointsArray","_decode","codec","multihashSize","codeOffset","cidString","bytesString","ab","cborgJson.Tokenizer","keyToken","innerKeyToken","innerValueToken","cborgJson.encode","cborgJson.decode","parse","base64url","fromSplit","protectedHeader","split","signature","encoded","jws","ciphertext","jwe","encRec","recipient","encJwe","jose","signing.fromSplit","encryption.fromSplit","encodedJose","signing.encode","encryption.encode","cbor.encode","cbor.decode","signing.decode","encryption.decode","Hasher","sha256","sha","hashes","sha2","codecs","raw","json","sep","inner","maxDigits","allowZeroPrefix","maxBytes","digitCount","leadingChar","hasLeadingZero","maxValue","digit","ix","readGroups","groups","ipv4","group","headSize","limit","tailSize","parser","names","table","V","proto","createProtocol","resolvable","path","getProtocol","errors","isReactNative","URL","defaultBase","url","hostname","password","pathname","port","protocol","username","userPass","host","URLWithLegacySupport","relative","protocolMap","defaultProtocol","location","urlParsed","URLSearchParams","formatted","convertToString","match","hashMatch","isCID","pattern","protocolMatch","ipnsId","ipfsPath","nanoid","byte","uint8ArrayFromString","clean","list1","list2","ns","anySignalModule","anySignal_2","_","units","isNegative","TimeoutError","optionsArgIndex","parseDuration","TimeoutController","timeoutPromise","maybeThrowTimeoutError","fnRes","it","done","IPFS_PREFIX","errCode","MFS_ROOT_KEY","pathStr","isIpfs.path","resolvePath","lastRemainderPath","remainderPath","repo","lastCid","file","load","dagPB.code","state","deactivate","status","activate","createStart","preload","keychain","ipns","mfsPreload","print","hashers","peerId","createStop","max","update","_cache","maxSize","hashlru","HTTPError","getGlobal","module","globalObject","srcModule","fetch_browser","Response","Request","Headers","fetch","headers","handleEvent","event","line","body","browserReadableStreamToIt","all","entry","isBrowser","abortController","timedOut","timeoutID","after","resource","searchParams","transformSearchParams","lines","iter","HTTP","TLRU","Queue","PQueue","httpQueue","fqdn","query","domain","createDns","createIsOnline","network","net","inspect","baseDecoder","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","uint8ArrayEquals","peerIdFromString","PeerIdImpl","RSAPeerIdImpl","Ed25519PeerIdImpl","Secp256k1PeerIdImpl","peerIdFromBytes","peerIdFromCID","publicKey","privateKey","createResolve","schema","rest","createAdd","addAll","isIterable","thing","normaliseInput","toPin","first","pin","PinTypes","createAddAll","pinAdd","recursive","reason","metadata","release","createLs","parent","pinned","matched","ls","createRm","rmAll","rm","createRmAll","_options","credentials","T","f","g","u","C","D","_0n","Point","_1n","mod","invertBatch","X1","Z1","X2","Y2","Z2","X1Z2","Y1","Y2Z1","X2Z1","Y1Z2","CURVE","A","B","_2n","x1y1","E","G","F","Y3","H","Z3","X3","T3","T1","T2","W","window","windows","affinePoint","precomputes","pointPrecomputes","maxNumber","shiftBy","windowSize","wbits","offset1","offset2","cond2","constTimeNegate","scalar","normalizeScalar","P0","invZ","z","is0","_8n","invert","ax","ay","zz","condition","neg","ep","r0","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","hex","r1","R1","r2","R2","ensureBytes","emsg","u1","u2","u2_2","u1_2","isValid","I","Dx","u2sq","invsqrt","D2","zInv","_x","_y","bytesToHex","one","two","strict","normed","P","POW_2_256","y2","isXOdd","Signature","u8","concatBytes","hexes","uint8a","hexToBytes","hexByte","number","modulo","nums","tmp","lastMultiplied","inverted","pow2","power","_5n","_10n","_20n","_40n","_80n","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","v3","v7","pow","vx2","root1","useRoot1","useRoot2","noRoot","b1","expectedLength","hashed","pointBytes","point","utils","getPublicKey","R","sig","SB","verify","pub","cached","generateKey","ed.utils","ed.getPublicKey","privateKeyRaw","seed","hashAndSign","ed.sign","hashAndVerify","win","nativeCrypto","algorithm","keyLength","saltLength","encrypt","nonceLength","cryptoKey","salt","iterations","runtimeDerivedEmptyPassword","deriveParams","rawKey","aesGcm","decrypt","nonce","plaintext","exporter","encryptedKey","ciphers.create","KeyType","__KeyTypeValues","enumeration","_codec","PublicKey","tag","encodeMessage","decodeMessage","PrivateKey","crypto.publicKeyLength","crypto.hashAndVerify","pbm.PublicKey","pbm.KeyType","crypto.privateKeyLength","crypto.hashAndSign","pbm.PrivateKey","privateKeyBytes","publicKeyBytes","generateKeyPair","crypto.generateKey","crypto.generateKeyFromSeed","uint8ArrayConcat","forge","importer","a2","a1","k2","k1neg","POW_2_128","k2neg","k1","x2","Z1Z1","U1","Z2Z2","S1","S2","U2","x1b","HH","HHH","k1p","k2p","cond1","fake","f1p","f2p","iz1","iz2","isShort","isYOdd","recovery","radj","rinv","Q","isCompressed","aP","rBytesLeft","sBytes","sHexL","sHex","rHexL","rHex","rLen","sLen","_6n","_11n","_22n","_44n","_88n","b3","b6","b9","b11","b22","b88","b44","b176","b220","b223","_23n","t1","rt","scratch","delta","hashLen","qByteLen","sl","lowS","kinv","z2","z1","msgHash","h1","extraEntropy","recSig","recovered","privKey","drbg","sinv","minLen","bytesLength","randomBytes","createHash","ckey","createHmac","tagP","tagH","types","asn1","jwk","pair","unmarshalPrivateKey","jwKey","handle","fkey","fomsg","crypto.utils.jwkToPkix","crypto.encrypt","crypto.getRandomValues","crypto.decrypt","crypto.utils.jwkToPkcs1","crypto.utils.pkcs1ToJwk","crypto.unmarshalPrivateKey","secp.utils","secp.sign","secp.Point","secp.getPublicKey","crypto.validatePublicKey","crypto.compressPublicKey","keysProtobuf.PublicKey","keysProtobuf.KeyType","crypto.computePublicKey","crypto.validatePrivateKey","keysProtobuf.PrivateKey","supported","keysPBM.PublicKey","keysPBM.KeyType","keysPBM.PrivateKey","methods","patchReader","original","patchWriter","CODEC_TYPES","enumValue","findValue","ValidityType","IpnsEntry","__ValidityTypeValues","typeofs","objectTypeNames","typeOf","isBuffer","getObjectType","objectType","terminal","major","encodedLength","useBuffer","utf8Slice","utf8ToBytes","fromArray","chunks","off","compare","leadSurrogate","MAX_ARGUMENTS_LENGTH","codePoints","defaultChunkSize","chunkPos","topChunk","assertEnoughData","need","uintBoundaries","readUint8","readUint16","readUint32","readUint64","decodeUint8","_minor","decodeUint16","decodeUint32","decodeUint64","encodeUint","encodeUintValue","nuint","buint","set","encodedSize","compareTokens","tok1","tok2","decodeNegint8","uint.readUint8","decodeNegint16","uint.readUint16","decodeNegint32","uint.readUint32","neg1b","pos1b","decodeNegint64","uint.readUint64","encodeNegint","negint","uint.encodeUintValue","uint.uintBoundaries","toToken","decodeBytesCompact","minor","decodeBytes8","decodeBytes16","decodeBytes32","decodeBytes64","tokenBytes","encodeBytes","compareBytes","tok","totLength","decodeStringCompact","decodeString8","decodeString16","decodeString32","decodeString64","_data","_pos","decodeArrayCompact","decodeArray8","decodeArray16","decodeArray32","decodeArray64","decodeArrayIndefinite","encodeArray","uint.encodeUint","decodeMapCompact","decodeMap8","decodeMap16","decodeMap32","decodeMap64","decodeMapIndefinite","encodeMap","decodeTagCompact","decodeTag8","decodeTag16","decodeTag32","decodeTag64","encodeTag","MINOR_FALSE","MINOR_TRUE","MINOR_NULL","MINOR_UNDEFINED","decodeUndefined","decodeBreak","createToken","decodeFloat16","readFloat16","decodeFloat32","readFloat32","decodeFloat64","readFloat64","encodeFloat","success","encodeFloat16","ui8a","encodeFloat32","encodeFloat64","dataView","inp","valu32","logicalExponent","half","exp","mant","invalidMinor","errorer","jump","uint.decodeUint8","uint.decodeUint16","uint.decodeUint32","uint.decodeUint64","negint.decodeNegint8","negint.decodeNegint16","negint.decodeNegint32","negint.decodeNegint64","bytes.decodeBytesCompact","bytes.decodeBytes8","bytes.decodeBytes16","bytes.decodeBytes32","bytes.decodeBytes64","string.decodeStringCompact","string.decodeString8","string.decodeString16","string.decodeString32","string.decodeString64","array.decodeArrayCompact","array.decodeArray8","array.decodeArray16","array.decodeArray32","array.decodeArray64","array.decodeArrayIndefinite","map.decodeMapCompact","map.decodeMap8","map.decodeMap16","map.decodeMap32","map.decodeMap64","map.decodeMapIndefinite","tag.decodeTagCompact","tag.decodeTag8","tag.decodeTag16","tag.decodeTag32","tag.decodeTag64","float.decodeUndefined","float.decodeFloat16","float.decodeFloat32","float.decodeFloat64","float.decodeBreak","quick","quickEncodeToken","makeCborEncoders","encoders","encodeString","cborEncoders","Bl","stack","Ref","simpleTokens","typeEncoders","_typ","_refStack","_obj","entries","objectToTokens","refStack","typ","isMap","sortMapEntries","customTypeEncoder","typeEncoder","tcmp","tokensToEncoded","quickBytes","defaultDecodeOptions","DONE","BREAK","tokenToArray","tokeniser","tokensToObject","tokenToMap","useMaps","tagged","Tokeniser","IPNS_PREFIX","parseRFC3339","time","rfc3339Matcher","year","month","date","minute","millisecond","hour","error","ERRORS.ERR_UNDEFINED_PARAMETER","ERRORS.ERR_INVALID_EMBEDDED_KEY","pubKey","validityType","validity","validityTypeBuffer","entryData","sequence","ERRORS.ERR_UNRECOGNIZED_VALIDITY","cborg.encode","ttl","cborg.decode","namespace","seq","lifetime","expirationDate","lifetimeNs","ERRORS.ERR_MISSING_PRIVATE_KEY","signatureV1","sigData","signatureV2","isoValidity","dataForSignature","ERRORS.ERR_SIGNATURE_CREATION","ERR_NOT_FOUND","defaultRecordLifetime","record","errMsg","routingKey","ipns.peerIdToRoutingKey","dsVal","ipns.getLocalKey","ipns.unmarshal","getPublishedOptions","seqNumber","ipns.create","ipns.marshal","publisher","republishHandle","period","pass","timeoutController","pem","peerIdKey","ERRORS.ERR_SIGNATURE_VERIFICATION","ERRORS.ERR_UNRECOGNIZED_FORMAT","validityDate","ERRORS.ERR_IPNS_EXPIRED_RECORD","ERRORS.ERR_INVALID_RECORD_DATA","marshalledData","receivedEntry","Errors.notFoundError","routing","nameSegments","depth","ipnsEntry","datastore","ttEol","sortAll","iterable","sorter","drain","filter","items","dels","puts","stores","store","Errors.dbOpenFailedError","Errors.dbWriteFailedError","Errors.dbDeleteFailedError","pushables","batches","batch","aSeq","bSeq","aValidty","entryBValidityDate","map","topic","pubsub","validator","selector","subscriptionKeyFn","stringifiedTopic","subscriptions","dsKey","currentRecord","localDatastore","subscriber","bufTopic","seconds","milliseconds","nanoseconds","day","second","timeReceived","utils.toRFC3339","rec","recvtime","utils.parseRFC3339","dht","get","ipnsStores","libp2p","offlineDatastore","isIPFS.ipnsPath","createPublish","isOnline","keyName","publish","pubLifetime","results","domainName","rootDot","lastChar","mergeOpts","offline","ipnsName","dns","createCancel","cancel","experimental","createState","createSubs","createRefs","refs","paths","resPath","unique","maxDepth","srcCid","dstCid","seen","traverseLevel","nextLevelDepth","uniqueOnly","rootCid","block","isDagPb","element","elementPath","createLocal","refsLocal","createWantlist","wantlist","bitswap","createWantlistForPeer","createUnwant","unwant","cids","createStat","snapshot","stat","BASES","isV4","isV6","toBytes","ip","sections","isv4","v4Buffer","argv","word","view","bytes2ip","bytes2str","bytes2port","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh2bytes","onion2bytes","onion32bytes","mb2bytes","anybaseDecoder","ip.isIP","ip.toBytes","ipString","ipBuff","ip.toString","varint.encode","mh","mbstr","mb","address","addr","portBuf","portBytes","addrBytes","stringToMultiaddrParts","cleanPath","tuples","stringTuples","ParseError","stringTuplesToString","tuplesToBytes","bytesToMultiaddrParts","sizeForAddr","stringAddr","tup","DNS_CODES","#string","#tuples","#stringTuples","#path","isMultiaddr","family","transport","tcp","udp","ip4","ip6","dns6","ip6zone","zone","Multiaddr","addrString","tuple","peerIdStr","resolvableProto","resolver","resolvers","protos","multiaddr","MultiaddrClass","DNS4","DNS6","DNSADDR","DNS","IP","and","UDP","UTP","QUIC","WebSockets","TCP","WebSocketsSecure","HTTPS","WebRTCStar","WebRTCDirect","Reliable","_P2P","_Circuit","CircuitRecursive","Circuit","IPFS","P2P","makeMatchesFunction","ma","partialMatch","matches","pnames","boostrappers","add","stringToStringTuples","part","protoFromTuple","stringTuplesToTuples","tuplesToStringTuples","fromBytes","bytesToTuples","bytesToString","stringToBytes","validateBytes","__classPrivateFieldGet","kind","receiver","__classPrivateFieldSet","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","DefaultMultiaddr","codec.fromBytes","codec.fromString","codec.bytesToString","codec.sizeForAddr","codec.bytesToTuples","codec.tuplesToStringTuples","codec.tuplesToBytes","createClear","createList","createReset","defaultConfig","createGet","createPut","put","codecName","cidVersion","CustomEvent","resultAvailable","task","ops","concurrency","slotAvailable","op","emitter","sourceErr","yieldOrderedValues","yieldUnOrderedValues","valuesAvailable","sourceFinished","sources","rawPipe","fns","duplexPipelineFn","duplex","pipe","isDuplex","BLOCK_RM_CONCURRENCY","blob","peekableIterator","queue","normaliseContent","browserStreamToIt","itPeekable","peekable","toFileObject","content","things","tasks","empty","_validBytes","_x86Multiply","_x64Multiply","_x64Rotl","_x64Fmix","_x64Xor","library","undefined","blocks","_x86Rotl","h2","k3","c3","c4","h3","h4","k4","_x86Fmix","_x64Add","_x64LeftShift","bytes.fromHex","hamtHashFn","defaultOptions","persist","dagPb","blockstore","reduce","chunked","iteration","root","layer","subTree","distantRelative","nextNode","children","child","unixfs","dagPb.encode","dagTrickle","previous","bufferImporter","bufferImporterFn","count","reducer","leaves","leaf","rawCodec.code","dagBuilder","asModule","polynomial","__release","Int32Array_ID","Uint8Array_ID","pointer","__retain","__allocArray","lengthsPtr","__getInt32Array","processed","rabin","Rabin","ptr","U32","U16","last","baseModule","memory","imports","env","mesg","colm","instance","rawExports","retain","rttiBase","getValueAlign","info","__allocString","__getString","getView","alignLog2","signed","getInfo","align","__getArrayView","__getArray","__getArrayBuffer","getTypedArrayView","bufPtr","getTypedArray","baseId","instantiate","setArgumentsLength","internalName","classElem","ctor","thisValue","className","setter","elem","wasm","imp","avg","min","compiled","sizepow","buffers","sizes","currentLength","emitted","maxChunkSize","newBl","chunker","fixedSize","chunkValidator","dir","Dir","needsSort","mapped","initialValue","finder","found","noCreate","bytePos","previousPopCount","bitPos","bytePopCount","targetLength","randomIndex","pendingBitsForResultingByte","pendingBitsForNewByte","newByte","usingBits","masked","resultingByte","place","asyncMap","asyncReduce","hashValue","bucket","newPlace","onlyChild","nodes","mappedChildren","taking","pendingBits","hashFn","hashing","available","took","availableForUntake","bucketOptions","flush","shardRoot","shard","subShard","labelPrefix","childrenSize","flushedDir","label","threshold","newDir","oldDir","toPathComponents","pathElems","pathElem","currentPath","tree","unwrapped","dagBuilderFn","treeBuilder","treeBuilderFn","candidates","sizeStr","isShardingEnabled","totals","prog","hasher","added","maybePreloadFile","isRootDir","addLinksToHamtBucket","rootBucket","toPrefix","position","toBucketPath","context","bucketPath","entryPrefix","entryName","blockStart","blockLength","blockEnd","requestedEnd","requestedStart","walkQueue","streamPosition","childEnd","childStart","childOps","dagPb.code","dagPb.decode","raw.code","yieldFileContent","fileSize","yieldHamtDirectoryContent","contentFile","contentDirectory","contentHamtShardedDirectory","toResolve","linkCid","nextName","nextPath","rawContent","contentGenerator","dagCbor.decode","subObject","subPath","subObjectCid","mh.decode","dagPbResolver","dagCbor.code","dagCborResolver","entryPath","recurse","createCat","pathComponents","cat","bl","encodePax","pax","Headers.encode","paxHeader","Headers.encodePax","newHeader","partialHeader","extra_base","elems","static_tree","dyn_tree","stat_desc","dist","desc","has_stree","max_length","xbits","overflow","max_code","stree","bl_count","next_code","_n2","_m2","ltree","dtree","lc","sx","prevlen","curlen","nextlen","max_count","min_count","max_blindex","lcodes","dcodes","blcodes","rank","block_mask","stored_len","opt_lenb","static_lenb","adler","s1","crc","errorCode","strm","wsize","prev","best_len","_win","scan_end1","scan","chain_length","nice_match","cur_match","scan_end","strend","more","_w_size","min_block","have","used","hash_head","bflush","max_insert","max_chain","good_length","nice_length","ret","memLevel","strategy","wrap","level","windowBits","level_flags","beg","copy","gzhead_extra","bstate","dictionary","dictLength","tmpDict","avail","__","m_pos","str_len","buf_len","utf16buf","c_len","toString$1","opt","dict","chunkSize","_flush_mode","flush_mode","deflator","_out","whave","wnext","s_window","hold","lmask","dmask","here","_in","dmax","lcode","dcode","top","dolen","dodist","from_source","lens","lens_index","table_index","work","drop","incr","offs","here_bits","here_op","sym","huff","here_val","fill","low","last_bits","last_op","last_val","hbuf","inf_leave","order","dictid","utf8str","next_out_utf8","last_avail_out","inflator","ipfsPathOrCid","Pako","legacyPath","createVersion","repoVersion","createId","pkgversion","peerIdToId","peer","agentVersion","protocolVersion","propsArg","lastProp","thisProp","ConnMgr","Swarm","createConfig","applyProfile","getAll","profileName","profile","oldCfg","newCfg","dryRun","enumerable","configurable","linksWithin","treeWithin","readonly","createUnsafe","maybeValue","Block","seeker","dv","codeLength","lengthLength","requiredCount","readHeader","decodeDagCbor","strictVersion","v2Header","v1Header","headerPromise","v1length","seek","readChunk","currentChunk","bufa","bytesRead","byteLimit","dagCborEncode","varintBytes","headerBytes","chunkQueue","drainer","drainerResolver","outWait","makeDrainer","outWaitResolver","iw","iteratorChannel","_root","b58Cid","json.code","createExport","dagExport","asyncIterable","createImport","dagImport","abortOptions","cars","car","pinErrorMsg","dagNode","storeCodec","dagResolve","isName","sniProtoCode","protocols","interpreter","headProtoCode","restVal","restMa","tailProto","maHasTLS","sni","baseVal","uri","newIndex","apiUris","api","stopped","fallbackApiUris","shuffle","requests","files","preloadMfs","nextRootCid","stats","getDOMException","errorMessage","getAbortedReason","pTimeout","fallback","timer","cancelablePromise","timeoutError","customTimers","comparator","step","run","#queue","#isIntervalIgnored","#intervalCount","#intervalCap","#interval","#intervalEnd","#intervalId","#timeoutId","#queueClass","#pending","#throwOnTimeout","#isPaused","#doesIntervalAllowAnother","#doesConcurrentAllowAnother","#concurrency","#tryToStartAnother","#onInterval","#initializeIntervalIfNeeded","#isIntervalPaused","#carryoverConcurrencyCount","#onResumeInterval","canInitializeInterval","job","#processQueue","newConcurrency","#throwOnAbort","_resolve","operation","function_","#next","functions","#onEvent","listener","masterEvent","grantType","requestEvent","releaseEventListener","releaseEvent","releaseType","requestType","responseEvent","observer","readQueue","localReadQueue","readPromise","masterQueue","repoOwner","lock","mutex","mortice","releaseLock","dagPB.encode","mfsDirectory","cidPath","mfsPath","mfsStat","fsEntry","parentBucket","positionAtParent","linkName","dagPB.decode","subBucket","rootNode","currentBucket","segment","fileName","nextSegment","contents","parentCid","meta","parentLinks","dagPB.prepare","newLink","positionInBucket","trail","createMkdir","emptyDir","addEmptyDir","subPathComponents","newRootCid","mfsMkdir","childName","createCp","mfsCp","destination","missing","destinationIsDirectory","parentFolder","destinationPath","destinationName","destinationTrail","sourceBlock","parentBlock","nodeLink","newName","mfsRm","modification","isDirectory","originalMode","references","ugo","operator","strMode","createChmod","mfsChmod","hashAlg","updatedBlock","updatedCid","parentNode","createFlush","mfsFlush","createMv","to","createTouch","mfsTouch","settings","createRead","createWrite","parentExists","updatedPath","write","bytesWritten","_asyncZeroes","wrote","mfsLs","mfs","operations","readLock","writeLock","createFiles","constructorOptions","isIpfs.ipfsPath","isIpfs.cid","withPreload","createGen","createInfo","createRename","oldName","createData","createLinks","dagCBOR.code","dagJSON.code","createNew","_new","blockSize","linkLength","createAddLink","addLink","createAppendData","newData","createRmLink","createSetData","createGc","gc","mfsRootCid","createBw","interval","createRepo","createBitswap","defaultValue","unwrap","keyToMultihash","keyToCid","mhd.decode","onProgress","keyFunction","backends","newKey","migration","ipfs","Set","cidToKey","rootData","hdrLength","vBytes","hdrSlice","encodedKey","pbh","idx","linkHash","storePins","pins","fanoutLinks","uint8ArrayCompare","rootLinks","headerBuf","bins","storeChild","binIdx","pinRootBuf","pinset.loadSet","pinRoot","recursivePins","pinCount","pinstore","directPins","pinset.storeSet","findLevelJs","db","hasWithFallback","has","req","getWithFallback","levelJs","originalHas","originalGet","datastores","backend","migrated","progress","transaction","loop","handleEnd","err2","handleNext","Protocols","Addresses","Address","$oneOfFields","CertifiedRecord","Peer","Envelope","PeerRecord","AddressInfo","keyStr","peers","addrs","peerRecordEnvelope","envelope","certifiedRecord","migration8","migration9","migration11","versionCheck","configCheck","migrations","toVersion","ignoreLock","repoOptions","currentVersion","repoVersion.getVersion","isDryRun","progressCallback","percent","lastSuccessfullyMigratedVersion","repoVersion.setVersion","reversedMigrationArray","lastSuccessfullyRevertedVersion","migrationCounter","fromVersion","bytesModule"],"sources":["../../../../node_modules/@libp2p/interfaces/dist/src/errors.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/src/bytes.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@libp2p/logger/dist/src/index.js","../../../../node_modules/abortable-iterator/dist/src/abort-error.js","../../../../node_modules/get-iterator/dist/src/index.js","../../../../node_modules/abortable-iterator/dist/src/index.js","../../../../node_modules/any-signal/dist/src/index.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterAbstract.js","../../../../node_modules/rate-limiter-flexible/lib/component/BlockedKeys/BlockedKeys.js","../../../../node_modules/rate-limiter-flexible/lib/component/BlockedKeys/index.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterRes.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterStoreAbstract.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterRedis.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterMongo.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterMySQL.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterPostgres.js","../../../../node_modules/rate-limiter-flexible/lib/component/MemoryStorage/Record.js","../../../../node_modules/rate-limiter-flexible/lib/component/MemoryStorage/MemoryStorage.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterMemory.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterCluster.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterMemcache.js","../../../../node_modules/rate-limiter-flexible/lib/RLWrapperBlackAndWhite.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterUnion.js","../../../../node_modules/rate-limiter-flexible/lib/component/RateLimiterQueueError.js","../../../../node_modules/rate-limiter-flexible/lib/RateLimiterQueue.js","../../../../node_modules/rate-limiter-flexible/lib/BurstyRateLimiter.js","../../../../node_modules/rate-limiter-flexible/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bytes.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/multiformats/src/basics.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/uint8arrays/dist/src/util/bases.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/uint8arrays/dist/src/from-string.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/node_modules/uint8arrays/dist/src/to-string.js","../../../../node_modules/uint8arraylist/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/uint8arraylist/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/uint8arraylist/node_modules/uint8arrays/dist/src/concat.js","../../../../node_modules/uint8arraylist/node_modules/uint8arrays/dist/src/equals.js","../../../../node_modules/uint8arraylist/dist/src/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/message-types.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/decode.js","../../../../node_modules/@constl/ipa/node_modules/it-batched-bytes/dist/src/index.js","../../../../node_modules/varint/encode.js","../../../../node_modules/varint/decode.js","../../../../node_modules/varint/length.js","../../../../node_modules/varint/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/alloc-unsafe-browser.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/encode.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/interface-stream-muxer/dist/src/stream.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/stream.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/mplex.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/mplex/dist/src/index.js","../../../../node_modules/is-plain-obj/index.js","../../../../node_modules/merge-options/index.js","../../../../node_modules/ipfs-utils/src/env.js","../../../../node_modules/err-code/index.js","../../../../node_modules/@protobufjs/aspromise/index.js","../../../../node_modules/@protobufjs/base64/index.js","../../../../node_modules/@protobufjs/eventemitter/index.js","../../../../node_modules/@protobufjs/float/index.js","../../../../node_modules/@protobufjs/inquire/index.js","../../../../node_modules/@protobufjs/utf8/index.js","../../../../node_modules/@protobufjs/pool/index.js","../../../../node_modules/protobufjs/src/util/longbits.js","../../../../node_modules/protobufjs/src/util/minimal.js","../../../../node_modules/protobufjs/src/writer.js","../../../../node_modules/protobufjs/src/writer_buffer.js","../../../../node_modules/protobufjs/src/reader.js","../../../../node_modules/protobufjs/src/reader_buffer.js","../../../../node_modules/protobufjs/src/rpc/service.js","../../../../node_modules/protobufjs/src/rpc.js","../../../../node_modules/protobufjs/src/roots.js","../../../../node_modules/protobufjs/src/index-minimal.js","../../../../node_modules/protobufjs/minimal.js","../../../../node_modules/ipfs-unixfs/src/unixfs.js","../../../../node_modules/ipfs-unixfs/src/index.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@ipld/dag-pb/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/@ipld/dag-pb/src/pb-decode.js","../../../../node_modules/@ipld/dag-pb/src/pb-encode.js","../../../../node_modules/@ipld/dag-pb/src/util.js","../../../../node_modules/@ipld/dag-pb/src/index.js","../../../../node_modules/cborg/lib/json/encode.js","../../../../node_modules/cborg/lib/json/decode.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/@ipld/dag-json/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/@ipld/dag-json/src/index.js","../../../../node_modules/dag-jose/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/bytes.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/bases/base.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/dag-jose/lib/utils.js","../../../../node_modules/dag-jose/node_modules/multiformats/vendor/varint.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/varint.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/dag-jose/node_modules/multiformats/src/cid.js","../../../../node_modules/dag-jose/lib/signing.js","../../../../node_modules/dag-jose/lib/encryption.js","../../../../node_modules/dag-jose/lib/index.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipfs-core/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/varint.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/hashes/identity.js","../../../../node_modules/ipfs-core/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/hashes/hasher.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/hashes/sha2-browser.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/codecs/raw.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/cid.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/basics.js","../../../../node_modules/ipfs-core-config/src/init-assets.browser.js","../../../../node_modules/ipfs-core/src/errors.js","../../../../node_modules/is-ipfs/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bytes.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/is-ipfs/node_modules/multiformats/vendor/varint.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/varint.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/@chainsafe/is-ip/lib/parser.js","../../../../node_modules/@chainsafe/is-ip/lib/parse.js","../../../../node_modules/@chainsafe/is-ip/lib/is-ip.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/cid.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/is-ipfs/node_modules/multiformats/src/basics.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/@libp2p/interface/dist/src/errors.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base10.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base16.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base2.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base256emoji.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base36.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base8.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/identity.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/codecs/json.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/basics.js","../../../../node_modules/uint8-varint/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/uint8-varint/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/uint8-varint/dist/src/index.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/is-ipfs/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js","../../../../node_modules/iso-url/src/url-browser.js","../../../../node_modules/iso-url/src/relative.js","../../../../node_modules/iso-url/index.js","../../../../node_modules/is-ipfs/dist/src/index.js","../../../../node_modules/nanoid/index.browser.js","../../../../node_modules/interface-datastore/dist/src/key.js","../../../../node_modules/ipfs-core-utils/node_modules/any-signal/index.js","../../../../node_modules/parse-duration/index.mjs","../../../../node_modules/ipfs-core-utils/src/errors.js","../../../../node_modules/ipfs-core-utils/src/with-timeout-option.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/varint.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipfs-core-utils/node_modules/multiformats/src/cid.js","../../../../node_modules/ipfs-core-utils/src/to-cid-and-path.js","../../../../node_modules/ipfs-core/src/utils.js","../../../../node_modules/ipfs-core/src/utils/service.js","../../../../node_modules/ipfs-core/src/components/start.js","../../../../node_modules/ipfs-core/src/components/stop.js","../../../../node_modules/hashlru/index.js","../../../../node_modules/ipfs-core-config/src/utils/tlru.js","../../../../node_modules/ipfs-utils/src/http/error.js","../../../../node_modules/node-fetch/browser.js","../../../../node_modules/ipfs-utils/node_modules/native-fetch/src/index.js","../../../../node_modules/ipfs-utils/src/fetch.browser.js","../../../../node_modules/ipfs-utils/src/http/fetch.browser.js","../../../../node_modules/ipfs-utils/node_modules/any-signal/index.js","../../../../node_modules/ipfs-utils/node_modules/browser-readablestream-to-it/index.js","../../../../node_modules/ipfs-utils/node_modules/it-all/index.js","../../../../node_modules/ipfs-utils/src/http.js","../../../../node_modules/ipfs-core-config/src/dns.browser.js","../../../../node_modules/ipfs-core/src/components/dns.js","../../../../node_modules/ipfs-core/src/components/is-online.js","../../../../node_modules/@libp2p/interface-peer-id/dist/src/index.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bytes.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/varint.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/varint.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/hasher.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/sha2-browser.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/identity.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/cid.js","../../../../node_modules/@libp2p/peer-id/node_modules/multiformats/src/basics.js","../../../../node_modules/@libp2p/peer-id/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/resolve.js","../../../../node_modules/it-last/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/pin/add.js","../../../../node_modules/ipfs-core-utils/src/pins/normalise-input.js","../../../../node_modules/ipfs-repo/src/pin-types.js","../../../../node_modules/ipfs-core/src/components/pin/add-all.js","../../../../node_modules/ipfs-core/src/components/pin/ls.js","../../../../node_modules/ipfs-core/src/components/pin/rm.js","../../../../node_modules/ipfs-core/src/components/pin/rm-all.js","../../../../node_modules/ipfs-core/src/components/pin/index.js","../../../../node_modules/datastore-core/src/errors.js","../../../../node_modules/timestamp-nano/dist/timestamp.min.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/bytes.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/vendor/varint.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/varint.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/hashes/identity.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/hashes/hasher.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/hashes/sha2-browser.js","../../../../node_modules/@noble/ed25519/lib/esm/index.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js","../../../../node_modules/@libp2p/crypto/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@libp2p/crypto/dist/src/webcrypto.js","../../../../node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/exporter.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/keys.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js","../../../../node_modules/@libp2p/crypto/dist/src/util.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/importer.js","../../../../node_modules/@noble/secp256k1/lib/esm/index.js","../../../../node_modules/@libp2p/crypto/dist/src/random-bytes.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/jwk2pem.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js","../../../../node_modules/@libp2p/crypto/dist/src/keys/index.js","../../../../node_modules/ipns/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipns/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipns/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipns/dist/src/errors.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/utils.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/decode.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/encode.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/codec.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/codecs/enum.js","../../../../node_modules/ipns/node_modules/protons-runtime/dist/src/codecs/message.js","../../../../node_modules/ipns/dist/src/pb/ipns.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/is.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/token.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/byte-utils.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/bl.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/common.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/0uint.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/1negint.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/2bytes.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/3string.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/4array.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/5map.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/6tag.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/7float.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/jump.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/encode.js","../../../../node_modules/ipns/node_modules/cborg/esm/lib/decode.js","../../../../node_modules/ipns/dist/src/utils.js","../../../../node_modules/ipns/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipns/node_modules/multiformats/src/varint.js","../../../../node_modules/ipns/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipns/node_modules/multiformats/src/hashes/identity.js","../../../../node_modules/ipns/dist/src/index.js","../../../../node_modules/ipfs-core/src/ipns/publisher.js","../../../../node_modules/ipfs-core/src/ipns/republisher.js","../../../../node_modules/ipns/dist/src/validator.js","../../../../node_modules/ipfs-core/src/ipns/resolver.js","../../../../node_modules/ipfs-core/src/utils/tlru.js","../../../../node_modules/ipfs-core/src/ipns/index.js","../../../../node_modules/it-all/dist/src/index.js","../../../../node_modules/datastore-core/src/utils.js","../../../../node_modules/it-drain/dist/src/index.js","../../../../node_modules/it-filter/dist/src/index.js","../../../../node_modules/it-take/dist/src/index.js","../../../../node_modules/datastore-core/src/base.js","../../../../node_modules/datastore-core/src/tiered.js","../../../../node_modules/dlv/dist/dlv.es.js","../../../../node_modules/ipns/dist/src/selector.js","../../../../node_modules/datastore-core/src/shard.js","../../../../node_modules/datastore-core/src/memory.js","../../../../node_modules/it-map/dist/src/index.js","../../../../node_modules/datastore-core/src/sharding.js","../../../../node_modules/datastore-pubsub/src/utils.js","../../../../node_modules/datastore-pubsub/src/index.js","../../../../node_modules/ipfs-core/src/ipns/routing/pubsub-datastore.js","../../../../node_modules/@libp2p/record/dist/src/record.js","../../../../node_modules/@libp2p/record/dist/src/utils.js","../../../../node_modules/@libp2p/record/dist/src/index.js","../../../../node_modules/ipfs-core/src/ipns/routing/offline-datastore.js","../../../../node_modules/ipfs-core/src/ipns/routing/dht-datastore.js","../../../../node_modules/ipfs-core/src/ipns/routing/config.js","../../../../node_modules/ipfs-core/src/components/ipns.js","../../../../node_modules/ipfs-core/src/components/name/utils.js","../../../../node_modules/ipfs-core/src/components/name/publish.js","../../../../node_modules/is-domain-name/index.js","../../../../node_modules/ipfs-core/src/components/name/resolve.js","../../../../node_modules/ipfs-core/src/components/name/pubsub/utils.js","../../../../node_modules/ipfs-core/src/components/name/pubsub/cancel.js","../../../../node_modules/ipfs-core/src/components/name/pubsub/state.js","../../../../node_modules/ipfs-core/src/components/name/pubsub/subs.js","../../../../node_modules/ipfs-core/src/components/name/pubsub/index.js","../../../../node_modules/ipfs-core/src/components/name/index.js","../../../../node_modules/ipfs-core/node_modules/any-signal/index.js","../../../../node_modules/ipfs-core/src/components/refs/index.js","../../../../node_modules/ipfs-core/src/components/refs/local.js","../../../../node_modules/ipfs-core/src/components/bitswap/wantlist.js","../../../../node_modules/ipfs-core/src/components/bitswap/wantlist-for-peer.js","../../../../node_modules/ipfs-core/src/components/bitswap/unwant.js","../../../../node_modules/ipfs-core/src/components/bitswap/stat.js","../../../../node_modules/ipfs-core/src/components/bitswap/index.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/equals.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base10.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base16.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base2.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base256emoji.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base36.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/base8.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/bases/identity.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/codecs/json.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/multiformats/dist/src/basics.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/util/bases.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/to-string.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/concat.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/uint8arrays/dist/src/from-string.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/mafmt/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/bootstrap/utils.js","../../../../node_modules/ipfs-core/src/components/bootstrap/add.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../../../node_modules/ipfs-core/node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/bootstrap/clear.js","../../../../node_modules/ipfs-core/src/components/bootstrap/list.js","../../../../node_modules/ipfs-core-config/src/config.browser.js","../../../../node_modules/ipfs-core/src/components/bootstrap/reset.js","../../../../node_modules/ipfs-core/src/components/bootstrap/rm.js","../../../../node_modules/ipfs-core/src/components/bootstrap/index.js","../../../../node_modules/ipfs-core/src/components/block/get.js","../../../../node_modules/ipfs-core/src/components/block/put.js","../../../../node_modules/it-parallel/dist/src/index.js","../../../../node_modules/ipfs-core/node_modules/it-merge/dist/src/index.js","../../../../node_modules/ipfs-core/node_modules/it-pipe/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/block/utils.js","../../../../node_modules/ipfs-core/src/components/block/rm.js","../../../../node_modules/ipfs-core/src/components/block/stat.js","../../../../node_modules/ipfs-core/src/components/block/index.js","../../../../node_modules/browser-readablestream-to-it/dist/src/index.js","../../../../node_modules/blob-to-it/dist/src/index.js","../../../../node_modules/ipfs-core-utils/node_modules/it-peekable/dist/src/index.js","../../../../node_modules/ipfs-core-utils/src/files/utils.js","../../../../node_modules/ipfs-core-utils/src/files/normalise-content.js","../../../../node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","../../../../node_modules/ipfs-core-utils/src/files/normalise-input-single.js","../../../../node_modules/ipfs-core/src/components/add.js","../../../../node_modules/it-batch/dist/src/index.js","../../../../node_modules/it-parallel-batch/dist/src/index.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/varint.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/hashes/hasher.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/hashes/sha2-browser.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@multiformats/murmur3/node_modules/multiformats/dist/src/hashes/hasher.js","../../../../node_modules/murmurhash3js-revisited/lib/murmurHash3js.js","../../../../node_modules/murmurhash3js-revisited/index.js","../../../../node_modules/@multiformats/murmur3/src/index.js","../../../../node_modules/ipfs-unixfs-importer/src/options.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/cid.js","../../../../node_modules/ipfs-unixfs-importer/src/utils/persist.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/dir.js","../../../../node_modules/ipfs-unixfs-importer/node_modules/multiformats/src/codecs/raw.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/file/flat.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/file/balanced.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/file/trickle.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/file/index.js","../../../../node_modules/rabin-wasm/src/rabin.js","../../../../node_modules/@assemblyscript/loader/index.js","../../../../node_modules/rabin-wasm/dist/rabin-wasm.js","../../../../node_modules/rabin-wasm/src/index.js","../../../../node_modules/ipfs-unixfs-importer/src/chunker/rabin.js","../../../../node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/validate-chunks.js","../../../../node_modules/ipfs-unixfs-importer/src/dag-builder/index.js","../../../../node_modules/ipfs-unixfs-importer/src/dir.js","../../../../node_modules/ipfs-unixfs-importer/src/dir-flat.js","../../../../node_modules/sparse-array/index.js","../../../../node_modules/hamt-sharding/dist/src/bucket.js","../../../../node_modules/hamt-sharding/dist/src/consumable-buffer.js","../../../../node_modules/hamt-sharding/dist/src/consumable-hash.js","../../../../node_modules/hamt-sharding/dist/src/index.js","../../../../node_modules/ipfs-unixfs-importer/src/dir-sharded.js","../../../../node_modules/ipfs-unixfs-importer/src/flat-to-shard.js","../../../../node_modules/ipfs-unixfs-importer/src/utils/to-path-components.js","../../../../node_modules/ipfs-unixfs-importer/src/tree-builder.js","../../../../node_modules/ipfs-unixfs-importer/src/index.js","../../../../node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","../../../../node_modules/ipfs-core-utils/src/files/normalise-input-multiple.js","../../../../node_modules/ipfs-core/src/components/add-all/utils.js","../../../../node_modules/ipfs-core/src/components/add-all/index.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/varint.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/cid.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/codecs/raw.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/multiformats/src/hashes/identity.js","../../../../node_modules/ipfs-unixfs-exporter/src/utils/find-cid-in-shard.js","../../../../node_modules/ipfs-unixfs-exporter/src/utils/extract-data-from-block.js","../../../../node_modules/ipfs-unixfs-exporter/src/utils/validate-offset-and-length.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/it-merge/dist/src/index.js","../../../../node_modules/ipfs-unixfs-exporter/node_modules/it-pipe/dist/src/index.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/file.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/directory.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/index.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/raw.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/identity.js","../../../../node_modules/ipfs-unixfs-exporter/src/resolvers/index.js","../../../../node_modules/ipfs-unixfs-exporter/src/index.js","../../../../node_modules/ipfs-core/src/components/cat.js","../../../../node_modules/it-tar/dist/src/extract-headers.js","../../../../node_modules/it-reader/dist/src/index.js","../../../../node_modules/iso-constants/index.browser.js","../../../../node_modules/it-to-buffer/dist/src/index.js","../../../../node_modules/it-tar/dist/src/pack-headers.js","../../../../node_modules/it-tar/dist/src/pack.js","../../../../node_modules/pako/dist/pako.esm.mjs","../../../../node_modules/ipfs-core/src/components/get.js","../../../../node_modules/ipfs-core/src/components/ls.js","../../../../node_modules/ipfs-core/src/components/root.js","../../../../node_modules/ipfs-core/src/version.js","../../../../node_modules/ipfs-core/src/components/version.js","../../../../node_modules/ipfs-core/src/components/id.js","../../../../node_modules/just-safe-set/index.mjs","../../../../node_modules/ipfs-core/src/components/config/profiles.js","../../../../node_modules/ipfs-core/src/components/config/index.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/block.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@ipld/car/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/@ipld/car/src/decoder-common.js","../../../../node_modules/@ipld/car/src/header-validator.js","../../../../node_modules/@ipld/car/src/decoder.js","../../../../node_modules/@ipld/car/src/encoder.js","../../../../node_modules/@ipld/car/src/iterator-channel.js","../../../../node_modules/@ipld/car/src/writer-browser.js","../../../../node_modules/ipfs-core/node_modules/multiformats/src/traversal.js","../../../../node_modules/ipfs-core/src/components/dag/export.js","../../../../node_modules/ipfs-core/node_modules/it-first/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/dag/get.js","../../../../node_modules/@ipld/car/src/iterator.js","../../../../node_modules/ipfs-core/node_modules/it-peekable/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/dag/import.js","../../../../node_modules/ipfs-core/src/components/dag/put.js","../../../../node_modules/ipfs-core/src/components/dag/resolve.js","../../../../node_modules/ipfs-core/src/components/dag/index.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/equals.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base10.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base16.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base2.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base256emoji.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base36.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base8.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/identity.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/codecs/json.js","../../../../node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/basics.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/util/bases.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/to-string.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/concat.js","../../../../node_modules/@multiformats/multiaddr/node_modules/uint8arrays/dist/src/from-string.js","../../../../node_modules/@multiformats/multiaddr/dist/src/ip.js","../../../../node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/@multiformats/multiaddr/dist/src/codec.js","../../../../node_modules/@multiformats/multiaddr/dist/src/multiaddr.js","../../../../node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js","../../../../node_modules/array-shuffle/index.js","../../../../node_modules/ipfs-core-config/src/preload.browser.js","../../../../node_modules/ipfs-core/src/preload.js","../../../../node_modules/ipfs-core/src/mfs-preload.js","../../../../node_modules/p-timeout/index.js","../../../../node_modules/mortice/node_modules/p-queue/dist/lower-bound.js","../../../../node_modules/mortice/node_modules/p-queue/dist/priority-queue.js","../../../../node_modules/mortice/node_modules/p-queue/dist/index.js","../../../../node_modules/observable-webworkers/dist/src/index.js","../../../../node_modules/mortice/dist/src/constants.js","../../../../node_modules/mortice/dist/src/utils.js","../../../../node_modules/mortice/dist/src/browser.js","../../../../node_modules/mortice/dist/src/index.js","../../../../node_modules/ipfs-core/src/components/files/utils/create-lock.js","../../../../node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js","../../../../node_modules/ipfs-core/src/components/files/utils/to-path-components.js","../../../../node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js","../../../../node_modules/ipfs-core/src/components/files/stat.js","../../../../node_modules/ipfs-core/src/components/files/utils/to-trail.js","../../../../node_modules/ipfs-core/src/components/files/utils/persist.js","../../../../node_modules/ipfs-core/src/components/files/utils/hamt-constants.js","../../../../node_modules/ipfs-core/src/components/files/utils/dir-sharded.js","../../../../node_modules/ipfs-core/src/components/files/utils/hamt-utils.js","../../../../node_modules/ipfs-core/src/components/files/utils/add-link.js","../../../../node_modules/ipfs-core/src/components/files/utils/update-tree.js","../../../../node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js","../../../../node_modules/ipfs-core/src/components/files/utils/create-node.js","../../../../node_modules/ipfs-core/src/components/files/mkdir.js","../../../../node_modules/ipfs-core/src/components/files/cp.js","../../../../node_modules/ipfs-core/src/components/files/utils/remove-link.js","../../../../node_modules/ipfs-core/src/components/files/rm.js","../../../../node_modules/ipfs-core/src/components/files/chmod.js","../../../../node_modules/ipfs-core/src/components/files/flush.js","../../../../node_modules/ipfs-core/src/components/files/mv.js","../../../../node_modules/ipfs-core/src/components/files/touch.js","../../../../node_modules/ipfs-core/src/components/files/read.js","../../../../node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js","../../../../node_modules/ipfs-core/src/components/files/write.js","../../../../node_modules/ipfs-core/src/components/files/ls.js","../../../../node_modules/ipfs-core/src/components/files/index.js","../../../../node_modules/ipfs-core/src/components/key/export.js","../../../../node_modules/ipfs-core/src/components/key/gen.js","../../../../node_modules/ipfs-core/src/components/key/import.js","../../../../node_modules/ipfs-core/src/components/key/info.js","../../../../node_modules/ipfs-core/src/components/key/list.js","../../../../node_modules/ipfs-core/src/components/key/rename.js","../../../../node_modules/ipfs-core/src/components/key/rm.js","../../../../node_modules/ipfs-core/src/components/key/index.js","../../../../node_modules/ipfs-core/src/components/object/get.js","../../../../node_modules/ipfs-core/src/components/object/data.js","../../../../node_modules/ipfs-core/src/components/object/links.js","../../../../node_modules/ipfs-core/src/components/object/new.js","../../../../node_modules/ipfs-core/src/components/object/put.js","../../../../node_modules/ipfs-core/src/components/object/stat.js","../../../../node_modules/ipfs-core/src/components/object/patch/add-link.js","../../../../node_modules/ipfs-core/src/components/object/patch/append-data.js","../../../../node_modules/ipfs-core/src/components/object/patch/rm-link.js","../../../../node_modules/ipfs-core/src/components/object/patch/set-data.js","../../../../node_modules/ipfs-core/src/components/object/patch/index.js","../../../../node_modules/ipfs-core/src/components/object/index.js","../../../../node_modules/ipfs-core/src/components/repo/gc.js","../../../../node_modules/ipfs-core/src/components/repo/stat.js","../../../../node_modules/ipfs-repo/src/constants.js","../../../../node_modules/ipfs-core/src/components/repo/version.js","../../../../node_modules/ipfs-core/src/components/repo/index.js","../../../../node_modules/ipfs-core/src/components/stats/bw.js","../../../../node_modules/ipfs-core/src/components/stats/index.js","../../../../node_modules/just-safe-get/index.mjs","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/vendor/varint.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/varint.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bytes.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/cid.js","../../../../node_modules/it-length/dist/src/index.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/codecs/raw.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-8/index.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/is.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/token.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/byte-utils.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/bl.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/common.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/0uint.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/1negint.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/2bytes.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/3string.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/4array.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/5map.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/6tag.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/7float.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/jump.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/encode.js","../../../../node_modules/ipfs-repo-migrations/node_modules/cborg/esm/lib/decode.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin.js","../../../../node_modules/fnv1a/index.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-9/utils.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/hashes/hasher.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/hashes/sha2-browser.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin-set.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-9/index.js","../../../../node_modules/ipfs-repo-migrations/src/utils.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-10/index.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/proto-book.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/address-book.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/envelope.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer-record.js","../../../../node_modules/ipfs-repo-migrations/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../../../node_modules/ipfs-repo-migrations/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/ipfs-repo-migrations/node_modules/multiformats/src/basics.js","../../../../node_modules/ipfs-repo-migrations/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/ipfs-repo-migrations/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../../../node_modules/ipfs-repo-migrations/node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/migration-12/index.js","../../../../node_modules/ipfs-repo-migrations/src/migrations/index.js","../../../../node_modules/ipfs-repo-migrations/src/errors.js","../../../../node_modules/ipfs-repo-migrations/src/repo/init.js","../../../../node_modules/ipfs-repo-migrations/src/repo/version.js","../../../../node_modules/ipfs-repo-migrations/src/index.js","../../../../node_modules/bytes/index.js","../../../../node_modules/ip-regex/index.js"],"sourcesContent":["/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n    code;\n    type;\n    constructor(message = 'The operation was aborted') {\n        super(message);\n        this.code = AbortError.code;\n        this.type = AbortError.type;\n    }\n    static code = 'ABORT_ERR';\n    static type = 'aborted';\n}\nexport class CodeError extends Error {\n    code;\n    props;\n    constructor(message, code, props) {\n        super(message);\n        this.code = code;\n        this.name = props?.name ?? 'CodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\n//# sourceMappingURL=errors.js.map","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import debug from 'debug';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base64 } from 'multiformats/bases/base64';\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v) => {\n    return v == null ? 'undefined' : base58btc.baseEncode(v);\n};\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v) => {\n    return v == null ? 'undefined' : base32.baseEncode(v);\n};\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v) => {\n    return v == null ? 'undefined' : base64.baseEncode(v);\n};\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v) => {\n    return v == null ? 'undefined' : v.toString();\n};\nfunction createDisabledLogger(namespace) {\n    const logger = () => { };\n    logger.enabled = false;\n    logger.color = '';\n    logger.diff = 0;\n    logger.log = () => { };\n    logger.namespace = namespace;\n    logger.destroy = () => true;\n    logger.extend = () => logger;\n    return logger;\n}\nexport function logger(name) {\n    // trace logging is a no-op by default\n    let trace = createDisabledLogger(`${name}:trace`);\n    // look at all the debug names and see if trace logging has explicitly been enabled\n    if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n        trace = debug(`${name}:trace`);\n    }\n    return Object.assign(debug(name), {\n        error: debug(`${name}:error`),\n        trace\n    });\n}\nexport function disable() {\n    debug.disable();\n}\nexport function enable(namespaces) {\n    debug.enable(namespaces);\n}\nexport function enabled(namespaces) {\n    return debug.enabled(namespaces);\n}\n//# sourceMappingURL=index.js.map","export class AbortError extends Error {\n    constructor(message, code) {\n        super(message ?? 'The operation was aborted');\n        this.type = 'aborted';\n        this.code = code ?? 'ABORT_ERR';\n    }\n}\n//# sourceMappingURL=abort-error.js.map","export function getIterator(obj) {\n    if (obj != null) {\n        if (typeof obj[Symbol.iterator] === 'function') {\n            return obj[Symbol.iterator]();\n        }\n        if (typeof obj[Symbol.asyncIterator] === 'function') {\n            return obj[Symbol.asyncIterator]();\n        }\n        if (typeof obj.next === 'function') {\n            return obj; // probably an iterator\n        }\n    }\n    throw new Error('argument is not an iterator or iterable');\n}\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * @example\n *\n * ```js\n * import { abortableSource } from 'abortable-iterator'\n *\n * async function main () {\n *   // An example function that creates an async iterator that yields an increasing\n *   // number every x milliseconds and NEVER ENDS!\n *   const asyncCounter = async function * (start, delay) {\n *     let i = start\n *     while (true) {\n *       yield new Promise(resolve => setTimeout(() => resolve(i++), delay))\n *     }\n *   }\n *\n *   // Create a counter that'll yield numbers from 0 upwards every second\n *   const everySecond = asyncCounter(0, 1000)\n *\n *   // Make everySecond abortable!\n *   const controller = new AbortController()\n *   const abortableEverySecond = abortableSource(everySecond, controller.signal)\n *\n *   // Abort after 5 seconds\n *   setTimeout(() => controller.abort(), 5000)\n *\n *   try {\n *     // Start the iteration, which will throw after 5 seconds when it is aborted\n *     for await (const n of abortableEverySecond) {\n *       console.log(n)\n *     }\n *   } catch (err) {\n *     if (err.code === 'ERR_ABORTED') {\n *       // Expected - all ok :D\n *     } else {\n *       throw err\n *     }\n *   }\n * }\n *\n * main()\n * ```\n */\nimport { AbortError } from './abort-error.js';\nimport { getIterator } from 'get-iterator';\n/**\n * Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort\n */\nexport function abortableSource(source, signal, options) {\n    const opts = options ?? {};\n    const iterator = getIterator(source);\n    async function* abortable() {\n        let nextAbortHandler;\n        const abortHandler = () => {\n            if (nextAbortHandler != null)\n                nextAbortHandler();\n        };\n        signal.addEventListener('abort', abortHandler);\n        while (true) {\n            let result;\n            try {\n                if (signal.aborted) {\n                    const { abortMessage, abortCode } = opts;\n                    throw new AbortError(abortMessage, abortCode);\n                }\n                const abort = new Promise((resolve, reject) => {\n                    nextAbortHandler = () => {\n                        const { abortMessage, abortCode } = opts;\n                        reject(new AbortError(abortMessage, abortCode));\n                    };\n                });\n                // Race the iterator and the abort signals\n                result = await Promise.race([abort, iterator.next()]);\n                nextAbortHandler = null;\n            }\n            catch (err) {\n                signal.removeEventListener('abort', abortHandler);\n                // Might not have been aborted by a known signal\n                const isKnownAborter = err.type === 'aborted' && signal.aborted;\n                if (isKnownAborter && (opts.onAbort != null)) {\n                    // Do any custom abort handling for the iterator\n                    opts.onAbort(source);\n                }\n                // End the iterator if it is a generator\n                if (typeof iterator.return === 'function') {\n                    try {\n                        const p = iterator.return();\n                        if (p instanceof Promise) { // eslint-disable-line max-depth\n                            p.catch(err => {\n                                if (opts.onReturnError != null) {\n                                    opts.onReturnError(err);\n                                }\n                            });\n                        }\n                    }\n                    catch (err) {\n                        if (opts.onReturnError != null) { // eslint-disable-line max-depth\n                            opts.onReturnError(err);\n                        }\n                    }\n                }\n                if (isKnownAborter && opts.returnOnAbort === true) {\n                    return;\n                }\n                throw err;\n            }\n            if (result.done === true) {\n                break;\n            }\n            yield result.value;\n        }\n        signal.removeEventListener('abort', abortHandler);\n    }\n    return abortable();\n}\nexport function abortableSink(sink, signal, options) {\n    return (source) => sink(abortableSource(source, signal, options));\n}\nexport function abortableDuplex(duplex, signal, options) {\n    return {\n        sink: abortableSink(duplex.sink, signal, {\n            ...options,\n            onAbort: undefined\n        }),\n        source: abortableSource(duplex.source, signal, options)\n    };\n}\nexport { AbortError };\nexport { abortableSink as abortableTransform };\n//# sourceMappingURL=index.js.map","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal(signals) {\n    const controller = new globalThis.AbortController();\n    function onAbort() {\n        controller.abort();\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    for (const signal of signals) {\n        if (signal?.aborted === true) {\n            onAbort();\n            break;\n        }\n        if (signal?.addEventListener != null) {\n            signal.addEventListener('abort', onAbort);\n        }\n    }\n    function clear() {\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    const signal = controller.signal;\n    signal.clear = clear;\n    return signal;\n}\n//# sourceMappingURL=index.js.map","module.exports = class RateLimiterAbstract {\n  /**\n   *\n   * @param opts Object Defaults {\n   *   points: 4, // Number of points\n   *   duration: 1, // Per seconds\n   *   blockDuration: 0, // Block if consumed more than points in current duration for blockDuration seconds\n   *   execEvenly: false, // Execute allowed actions evenly over duration\n   *   execEvenlyMinDelayMs: duration * 1000 / points, // ms, works with execEvenly=true option\n   *   keyPrefix: 'rlflx',\n   * }\n   */\n  constructor(opts = {}) {\n    this.points = opts.points;\n    this.duration = opts.duration;\n    this.blockDuration = opts.blockDuration;\n    this.execEvenly = opts.execEvenly;\n    this.execEvenlyMinDelayMs = opts.execEvenlyMinDelayMs;\n    this.keyPrefix = opts.keyPrefix;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  set points(value) {\n    this._points = value >= 0 ? value : 4;\n  }\n\n  get duration() {\n    return this._duration;\n  }\n\n  set duration(value) {\n    this._duration = typeof value === 'undefined' ? 1 : value;\n  }\n\n  get msDuration() {\n    return this.duration * 1000;\n  }\n\n  get blockDuration() {\n    return this._blockDuration;\n  }\n\n  set blockDuration(value) {\n    this._blockDuration = typeof value === 'undefined' ? 0 : value;\n  }\n\n  get msBlockDuration() {\n    return this.blockDuration * 1000;\n  }\n\n  get execEvenly() {\n    return this._execEvenly;\n  }\n\n  set execEvenly(value) {\n    this._execEvenly = typeof value === 'undefined' ? false : Boolean(value);\n  }\n\n  get execEvenlyMinDelayMs() {\n    return this._execEvenlyMinDelayMs;\n  }\n\n  set execEvenlyMinDelayMs(value) {\n    this._execEvenlyMinDelayMs = typeof value === 'undefined' ? Math.ceil(this.msDuration / this.points) : value;\n  }\n\n  get keyPrefix() {\n    return this._keyPrefix;\n  }\n\n  set keyPrefix(value) {\n    if (typeof value === 'undefined') {\n      value = 'rlflx';\n    }\n    if (typeof value !== 'string') {\n      throw new Error('keyPrefix must be string');\n    }\n    this._keyPrefix = value;\n  }\n\n  _getKeySecDuration(options = {}) {\n    return options && options.customDuration >= 0\n      ? options.customDuration\n      : this.duration;\n  }\n\n  getKey(key) {\n    return this.keyPrefix.length > 0 ? `${this.keyPrefix}:${key}` : key;\n  }\n\n  parseKey(rlKey) {\n    return rlKey.substring(this.keyPrefix.length);\n  }\n\n  consume() {\n    throw new Error(\"You have to implement the method 'consume'!\");\n  }\n\n  penalty() {\n    throw new Error(\"You have to implement the method 'penalty'!\");\n  }\n\n  reward() {\n    throw new Error(\"You have to implement the method 'reward'!\");\n  }\n\n  get() {\n    throw new Error(\"You have to implement the method 'get'!\");\n  }\n\n  set() {\n    throw new Error(\"You have to implement the method 'set'!\");\n  }\n\n  block() {\n    throw new Error(\"You have to implement the method 'block'!\");\n  }\n\n  delete() {\n    throw new Error(\"You have to implement the method 'delete'!\");\n  }\n};\n","module.exports = class BlockedKeys {\n  constructor() {\n    this._keys = {}; // {'key': 1526279430331}\n    this._addedKeysAmount = 0;\n  }\n\n  collectExpired() {\n    const now = Date.now();\n\n    Object.keys(this._keys).forEach((key) => {\n      if (this._keys[key] <= now) {\n        delete this._keys[key];\n      }\n    });\n\n    this._addedKeysAmount = Object.keys(this._keys).length;\n  }\n\n  /**\n   * Add new blocked key\n   *\n   * @param key String\n   * @param sec Number\n   */\n  add(key, sec) {\n    this.addMs(key, sec * 1000);\n  }\n\n  /**\n   * Add new blocked key for ms\n   *\n   * @param key String\n   * @param ms Number\n   */\n  addMs(key, ms) {\n    this._keys[key] = Date.now() + ms;\n    this._addedKeysAmount++;\n    if (this._addedKeysAmount > 999) {\n      this.collectExpired();\n    }\n  }\n\n  /**\n   * 0 means not blocked\n   *\n   * @param key\n   * @returns {number}\n   */\n  msBeforeExpire(key) {\n    const expire = this._keys[key];\n\n    if (expire && expire >= Date.now()) {\n      this.collectExpired();\n      const now = Date.now();\n      return expire >= now ? expire - now : 0;\n    }\n\n    return 0;\n  }\n\n  /**\n   * If key is not given, delete all data in memory\n   * \n   * @param {string|undefined} key\n   */\n  delete(key) {\n    if (key) {\n      delete this._keys[key];\n    } else {\n      Object.keys(this._keys).forEach((key) => {\n        delete this._keys[key];\n      });\n    }\n  }\n};\n","const BlockedKeys = require('./BlockedKeys');\n\nmodule.exports = BlockedKeys;\n","module.exports = class RateLimiterRes {\n  constructor(remainingPoints, msBeforeNext, consumedPoints, isFirstInDuration) {\n    this.remainingPoints = typeof remainingPoints === 'undefined' ? 0 : remainingPoints; // Remaining points in current duration\n    this.msBeforeNext = typeof msBeforeNext === 'undefined' ? 0 : msBeforeNext; // Milliseconds before next action\n    this.consumedPoints = typeof consumedPoints === 'undefined' ? 0 : consumedPoints; // Consumed points in current duration\n    this.isFirstInDuration = typeof isFirstInDuration === 'undefined' ? false : isFirstInDuration;\n  }\n\n  get msBeforeNext() {\n    return this._msBeforeNext;\n  }\n\n  set msBeforeNext(ms) {\n    this._msBeforeNext = ms;\n    return this;\n  }\n\n  get remainingPoints() {\n    return this._remainingPoints;\n  }\n\n  set remainingPoints(p) {\n    this._remainingPoints = p;\n    return this;\n  }\n\n  get consumedPoints() {\n    return this._consumedPoints;\n  }\n\n  set consumedPoints(p) {\n    this._consumedPoints = p;\n    return this;\n  }\n\n  get isFirstInDuration() {\n    return this._isFirstInDuration;\n  }\n\n  set isFirstInDuration(value) {\n    this._isFirstInDuration = Boolean(value);\n  }\n\n  _getDecoratedProperties() {\n    return {\n      remainingPoints: this.remainingPoints,\n      msBeforeNext: this.msBeforeNext,\n      consumedPoints: this.consumedPoints,\n      isFirstInDuration: this.isFirstInDuration,\n    };\n  }\n\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return this._getDecoratedProperties();\n  }\n\n  toString() {\n    return JSON.stringify(this._getDecoratedProperties());\n  }\n\n  toJSON() {\n    return this._getDecoratedProperties();\n  }\n};\n","const RateLimiterAbstract = require('./RateLimiterAbstract');\nconst BlockedKeys = require('./component/BlockedKeys');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nmodule.exports = class RateLimiterStoreAbstract extends RateLimiterAbstract {\n  /**\n   *\n   * @param opts Object Defaults {\n   *   ... see other in RateLimiterAbstract\n   *\n   *   inMemoryBlockOnConsumed: 40, // Number of points when key is blocked\n   *   inMemoryBlockDuration: 10, // Block duration in seconds\n   *   insuranceLimiter: RateLimiterAbstract\n   * }\n   */\n  constructor(opts = {}) {\n    super(opts);\n\n    this.inMemoryBlockOnConsumed = opts.inMemoryBlockOnConsumed || opts.inmemoryBlockOnConsumed;\n    this.inMemoryBlockDuration = opts.inMemoryBlockDuration || opts.inmemoryBlockDuration;\n    this.insuranceLimiter = opts.insuranceLimiter;\n    this._inMemoryBlockedKeys = new BlockedKeys();\n  }\n\n  get client() {\n    return this._client;\n  }\n\n  set client(value) {\n    if (typeof value === 'undefined') {\n      throw new Error('storeClient is not set');\n    }\n    this._client = value;\n  }\n\n  /**\n   * Have to be launched after consume\n   * It blocks key and execute evenly depending on result from store\n   *\n   * It uses _getRateLimiterRes function to prepare RateLimiterRes from store result\n   *\n   * @param resolve\n   * @param reject\n   * @param rlKey\n   * @param changedPoints\n   * @param storeResult\n   * @param {Object} options\n   * @private\n   */\n  _afterConsume(resolve, reject, rlKey, changedPoints, storeResult, options = {}) {\n    const res = this._getRateLimiterRes(rlKey, changedPoints, storeResult);\n\n    if (this.inMemoryBlockOnConsumed > 0 && !(this.inMemoryBlockDuration > 0)\n      && res.consumedPoints >= this.inMemoryBlockOnConsumed\n    ) {\n      this._inMemoryBlockedKeys.addMs(rlKey, res.msBeforeNext);\n      if (res.consumedPoints > this.points) {\n        return reject(res);\n      } else {\n        return resolve(res)\n      }\n    } else if (res.consumedPoints > this.points) {\n      let blockPromise = Promise.resolve();\n      // Block only first time when consumed more than points\n      if (this.blockDuration > 0 && res.consumedPoints <= (this.points + changedPoints)) {\n        res.msBeforeNext = this.msBlockDuration;\n        blockPromise = this._block(rlKey, res.consumedPoints, this.msBlockDuration, options);\n      }\n\n      if (this.inMemoryBlockOnConsumed > 0 && res.consumedPoints >= this.inMemoryBlockOnConsumed) {\n        // Block key for this.inMemoryBlockDuration seconds\n        this._inMemoryBlockedKeys.add(rlKey, this.inMemoryBlockDuration);\n        res.msBeforeNext = this.msInMemoryBlockDuration;\n      }\n\n      blockPromise\n        .then(() => {\n          reject(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    } else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {\n      let delay = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2));\n      if (delay < this.execEvenlyMinDelayMs) {\n        delay = res.consumedPoints * this.execEvenlyMinDelayMs;\n      }\n\n      setTimeout(resolve, delay, res);\n    } else {\n      resolve(res);\n    }\n  }\n\n  _handleError(err, funcName, resolve, reject, key, data = false, options = {}) {\n    if (!(this.insuranceLimiter instanceof RateLimiterAbstract)) {\n      reject(err);\n    } else {\n      this.insuranceLimiter[funcName](key, data, options)\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((res) => {\n          reject(res);\n        });\n    }\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @returns {BlockedKeys}\n   * @private\n   */\n  get _inmemoryBlockedKeys() {\n    return this._inMemoryBlockedKeys\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @param rlKey\n   * @returns {number}\n   */\n  getInmemoryBlockMsBeforeExpire(rlKey) {\n    return this.getInMemoryBlockMsBeforeExpire(rlKey)\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @returns {number|number}\n   */\n  get inmemoryBlockOnConsumed() {\n    return this.inMemoryBlockOnConsumed;\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @param value\n   */\n  set inmemoryBlockOnConsumed(value) {\n    this.inMemoryBlockOnConsumed = value;\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @returns {number|number}\n   */\n  get inmemoryBlockDuration() {\n    return this.inMemoryBlockDuration;\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @param value\n   */\n  set inmemoryBlockDuration(value) {\n    this.inMemoryBlockDuration = value\n  }\n\n  /**\n   * @deprecated Use camelCase version\n   * @returns {number}\n   */\n  get msInmemoryBlockDuration() {\n    return this.inMemoryBlockDuration * 1000;\n  }\n\n  getInMemoryBlockMsBeforeExpire(rlKey) {\n    if (this.inMemoryBlockOnConsumed > 0) {\n      return this._inMemoryBlockedKeys.msBeforeExpire(rlKey);\n    }\n\n    return 0;\n  }\n\n  get inMemoryBlockOnConsumed() {\n    return this._inMemoryBlockOnConsumed;\n  }\n\n  set inMemoryBlockOnConsumed(value) {\n    this._inMemoryBlockOnConsumed = value ? parseInt(value) : 0;\n    if (this.inMemoryBlockOnConsumed > 0 && this.points > this.inMemoryBlockOnConsumed) {\n      throw new Error('inMemoryBlockOnConsumed option must be greater or equal \"points\" option');\n    }\n  }\n\n  get inMemoryBlockDuration() {\n    return this._inMemoryBlockDuration;\n  }\n\n  set inMemoryBlockDuration(value) {\n    this._inMemoryBlockDuration = value ? parseInt(value) : 0;\n    if (this.inMemoryBlockDuration > 0 && this.inMemoryBlockOnConsumed === 0) {\n      throw new Error('inMemoryBlockOnConsumed option must be set up');\n    }\n  }\n\n  get msInMemoryBlockDuration() {\n    return this._inMemoryBlockDuration * 1000;\n  }\n\n  get insuranceLimiter() {\n    return this._insuranceLimiter;\n  }\n\n  set insuranceLimiter(value) {\n    if (typeof value !== 'undefined' && !(value instanceof RateLimiterAbstract)) {\n      throw new Error('insuranceLimiter must be instance of RateLimiterAbstract');\n    }\n    this._insuranceLimiter = value;\n    if (this._insuranceLimiter) {\n      this._insuranceLimiter.blockDuration = this.blockDuration;\n      this._insuranceLimiter.execEvenly = this.execEvenly;\n    }\n  }\n\n  /**\n   * Block any key for secDuration seconds\n   *\n   * @param key\n   * @param secDuration\n   * @param {Object} options\n   *\n   * @return Promise<RateLimiterRes>\n   */\n  block(key, secDuration, options = {}) {\n    const msDuration = secDuration * 1000;\n    return this._block(this.getKey(key), this.points + 1, msDuration, options);\n  }\n\n  /**\n   * Set points by key for any duration\n   *\n   * @param key\n   * @param points\n   * @param secDuration\n   * @param {Object} options\n   *\n   * @return Promise<RateLimiterRes>\n   */\n  set(key, points, secDuration, options = {}) {\n    const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000;\n    return this._block(this.getKey(key), points, msDuration, options);\n  }\n\n  /**\n   *\n   * @param key\n   * @param pointsToConsume\n   * @param {Object} options\n   * @returns Promise<RateLimiterRes>\n   */\n  consume(key, pointsToConsume = 1, options = {}) {\n    return new Promise((resolve, reject) => {\n      const rlKey = this.getKey(key);\n\n      const inMemoryBlockMsBeforeExpire = this.getInMemoryBlockMsBeforeExpire(rlKey);\n      if (inMemoryBlockMsBeforeExpire > 0) {\n        return reject(new RateLimiterRes(0, inMemoryBlockMsBeforeExpire));\n      }\n\n      this._upsert(rlKey, pointsToConsume, this._getKeySecDuration(options) * 1000, false, options)\n        .then((res) => {\n          this._afterConsume(resolve, reject, rlKey, pointsToConsume, res);\n        })\n        .catch((err) => {\n          this._handleError(err, 'consume', resolve, reject, key, pointsToConsume, options);\n        });\n    });\n  }\n\n  /**\n   *\n   * @param key\n   * @param points\n   * @param {Object} options\n   * @returns Promise<RateLimiterRes>\n   */\n  penalty(key, points = 1, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve, reject) => {\n      this._upsert(rlKey, points, this._getKeySecDuration(options) * 1000, false, options)\n        .then((res) => {\n          resolve(this._getRateLimiterRes(rlKey, points, res));\n        })\n        .catch((err) => {\n          this._handleError(err, 'penalty', resolve, reject, key, points, options);\n        });\n    });\n  }\n\n  /**\n   *\n   * @param key\n   * @param points\n   * @param {Object} options\n   * @returns Promise<RateLimiterRes>\n   */\n  reward(key, points = 1, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve, reject) => {\n      this._upsert(rlKey, -points, this._getKeySecDuration(options) * 1000, false, options)\n        .then((res) => {\n          resolve(this._getRateLimiterRes(rlKey, -points, res));\n        })\n        .catch((err) => {\n          this._handleError(err, 'reward', resolve, reject, key, points, options);\n        });\n    });\n  }\n\n  /**\n   *\n   * @param key\n   * @param {Object} options\n   * @returns Promise<RateLimiterRes>|null\n   */\n  get(key, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve, reject) => {\n      this._get(rlKey, options)\n        .then((res) => {\n          if (res === null || typeof res === 'undefined') {\n            resolve(null);\n          } else {\n            resolve(this._getRateLimiterRes(rlKey, 0, res));\n          }\n        })\n        .catch((err) => {\n          this._handleError(err, 'get', resolve, reject, key, options);\n        });\n    });\n  }\n\n  /**\n   *\n   * @param key\n   * @param {Object} options\n   * @returns Promise<boolean>\n   */\n  delete(key, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve, reject) => {\n      this._delete(rlKey, options)\n        .then((res) => {\n          this._inMemoryBlockedKeys.delete(rlKey);\n          resolve(res);\n        })\n        .catch((err) => {\n          this._handleError(err, 'delete', resolve, reject, key, options);\n        });\n    });\n  }\n\n  /**\n   * Cleanup keys no-matter expired or not.\n   */\n  deleteInMemoryBlockedAll() {\n    this._inMemoryBlockedKeys.delete();\n  }\n\n  /**\n   * Get RateLimiterRes object filled depending on storeResult, which specific for exact store\n   *\n   * @param rlKey\n   * @param changedPoints\n   * @param storeResult\n   * @private\n   */\n  _getRateLimiterRes(rlKey, changedPoints, storeResult) { // eslint-disable-line no-unused-vars\n    throw new Error(\"You have to implement the method '_getRateLimiterRes'!\");\n  }\n\n  /**\n   * Block key for this.msBlockDuration milliseconds\n   * Usually, it just prolongs lifetime of key\n   *\n   * @param rlKey\n   * @param initPoints\n   * @param msDuration\n   * @param {Object} options\n   *\n   * @return Promise<any>\n   */\n  _block(rlKey, initPoints, msDuration, options = {}) {\n    return new Promise((resolve, reject) => {\n      this._upsert(rlKey, initPoints, msDuration, true, options)\n        .then(() => {\n          resolve(new RateLimiterRes(0, msDuration > 0 ? msDuration : -1, initPoints));\n        })\n        .catch((err) => {\n          this._handleError(err, 'block', resolve, reject, this.parseKey(rlKey), msDuration / 1000, options);\n        });\n    });\n  }\n\n  /**\n   * Have to be implemented in every limiter\n   * Resolve with raw result from Store OR null if rlKey is not set\n   * or Reject with error\n   *\n   * @param rlKey\n   * @param {Object} options\n   * @private\n   *\n   * @return Promise<any>\n   */\n  _get(rlKey, options = {}) { // eslint-disable-line no-unused-vars\n    throw new Error(\"You have to implement the method '_get'!\");\n  }\n\n  /**\n   * Have to be implemented\n   * Resolve with true OR false if rlKey doesn't exist\n   * or Reject with error\n   *\n   * @param rlKey\n   * @param {Object} options\n   * @private\n   *\n   * @return Promise<any>\n   */\n  _delete(rlKey, options = {}) { // eslint-disable-line no-unused-vars\n    throw new Error(\"You have to implement the method '_delete'!\");\n  }\n\n  /**\n   * Have to be implemented\n   * Resolve with object used for {@link _getRateLimiterRes} to generate {@link RateLimiterRes}\n   *\n   * @param {string} rlKey\n   * @param {number} points\n   * @param {number} msDuration\n   * @param {boolean} forceExpire\n   * @param {Object} options\n   * @abstract\n   *\n   * @return Promise<Object>\n   */\n  _upsert(rlKey, points, msDuration, forceExpire = false, options = {}) {\n    throw new Error(\"You have to implement the method '_upsert'!\");\n  }\n};\n","const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nconst incrTtlLuaScript = `redis.call('set', KEYS[1], 0, 'EX', ARGV[2], 'NX') \\\nlocal consumed = redis.call('incrby', KEYS[1], ARGV[1]) \\\nlocal ttl = redis.call('pttl', KEYS[1]) \\\nif ttl == -1 then \\\n  redis.call('expire', KEYS[1], ARGV[2]) \\\n  ttl = 1000 * ARGV[2] \\\nend \\\nreturn {consumed, ttl} \\\n`;\n\nclass RateLimiterRedis extends RateLimiterStoreAbstract {\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   redis: RedisClient\n   *   rejectIfRedisNotReady: boolean = false - reject / invoke insuranceLimiter immediately when redis connection is not \"ready\"\n   * }\n   */\n  constructor(opts) {\n    super(opts);\n    if (opts.redis) {\n      this.client = opts.redis;\n    } else {\n      this.client = opts.storeClient;\n    }\n\n    this._rejectIfRedisNotReady = !!opts.rejectIfRedisNotReady;\n\n    if (typeof this.client.defineCommand === 'function') {\n      this.client.defineCommand(\"rlflxIncr\", {\n        numberOfKeys: 1,\n        lua: incrTtlLuaScript,\n      });\n    }\n  }\n\n  /**\n   * Prevent actual redis call if redis connection is not ready\n   * Because of different connection state checks for ioredis and node-redis, only this clients would be actually checked.\n   * For any other clients all the requests would be passed directly to redis client\n   * @return {boolean}\n   * @private\n   */\n  _isRedisReady() {\n    if (!this._rejectIfRedisNotReady) {\n      return true;\n    }\n    // ioredis client\n    if (this.client.status && this.client.status !== 'ready') {\n      return false;\n    }\n    // node-redis client\n    if (typeof this.client.isReady === 'function' && !this.client.isReady()) {\n      return false;\n    }\n    return true;\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    let [consumed, resTtlMs] = result;\n    // Support ioredis results format\n    if (Array.isArray(consumed)) {\n      [, consumed] = consumed;\n      [, resTtlMs] = resTtlMs;\n    }\n\n    const res = new RateLimiterRes();\n    res.consumedPoints = parseInt(consumed);\n    res.isFirstInDuration = res.consumedPoints === changedPoints;\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = resTtlMs;\n\n    return res;\n  }\n\n  _upsert(rlKey, points, msDuration, forceExpire = false) {\n    return new Promise((resolve, reject) => {\n      if (!this._isRedisReady()) {\n        return reject(new Error('Redis connection is not ready'));\n      }\n\n      const secDuration = Math.floor(msDuration / 1000);\n      const multi = this.client.multi();\n      if (forceExpire) {\n        if (secDuration > 0) {\n          multi.set(rlKey, points, 'EX', secDuration);\n        } else {\n          multi.set(rlKey, points);\n        }\n\n        multi.pttl(rlKey)\n          .exec((err, res) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve(res);\n          });\n      } else {\n        if (secDuration > 0) {\n          const incrCallback = function(err, result) {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve(result);\n          };\n\n          if (typeof this.client.rlflxIncr === 'function') {\n            this.client.rlflxIncr(rlKey, points, secDuration, incrCallback);\n          } else {\n            this.client.eval(incrTtlLuaScript, 1, rlKey, points, secDuration, incrCallback);\n          }\n        } else {\n          multi.incrby(rlKey, points)\n            .pttl(rlKey)\n            .exec((err, res) => {\n              if (err) {\n                return reject(err);\n              }\n\n              return resolve(res);\n            });\n        }\n      }\n    });\n  }\n\n  _get(rlKey) {\n    return new Promise((resolve, reject) => {\n      if (!this._isRedisReady()) {\n        return reject(new Error('Redis connection is not ready'));\n      }\n\n      this.client\n        .multi()\n        .get(rlKey)\n        .pttl(rlKey)\n        .exec((err, res) => {\n          if (err) {\n            reject(err);\n          } else {\n            const [points] = res;\n            if (points === null) {\n              return resolve(null)\n            }\n\n            resolve(res);\n          }\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    return new Promise((resolve, reject) => {\n      this.client.del(rlKey, (err, res) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(res > 0);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = RateLimiterRedis;\n","const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\n/**\n * Get MongoDB driver version as upsert options differ\n * @params {Object} Client instance\n * @returns {Object} Version Object containing major, feature & minor versions.\n */\nfunction getDriverVersion(client) {\n  try {\n    const _client = client.client ? client.client : client;\n\n    const { version } = _client.topology.s.options.metadata.driver;\n    const _v = version.split('.').map(v => parseInt(v));\n\n    return {\n      major: _v[0],\n      feature: _v[1],\n      patch: _v[2],\n    };\n  } catch (err) {\n    return { major: 0, feature: 0, patch: 0 };\n  }\n}\n\nclass RateLimiterMongo extends RateLimiterStoreAbstract {\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   indexKeyPrefix: {attr1: 1, attr2: 1}\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   mongo: MongoClient\n   * }\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n    this.indexKeyPrefix = opts.indexKeyPrefix;\n\n    if (opts.mongo) {\n      this.client = opts.mongo;\n    } else {\n      this.client = opts.storeClient;\n    }\n    if (typeof this.client.then === 'function') {\n      // If Promise\n      this.client\n        .then((conn) => {\n          this.client = conn;\n          this._initCollection();\n          this._driverVersion = getDriverVersion(this.client);\n        });\n    } else {\n      this._initCollection();\n      this._driverVersion = getDriverVersion(this.client);\n    }\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? RateLimiterMongo.getDbName() : value;\n  }\n\n  static getDbName() {\n    return 'node-rate-limiter-flexible';\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get client() {\n    return this._client;\n  }\n\n  set client(value) {\n    if (typeof value === 'undefined') {\n      throw new Error('mongo is not set');\n    }\n    this._client = value;\n  }\n\n  get indexKeyPrefix() {\n    return this._indexKeyPrefix;\n  }\n\n  set indexKeyPrefix(obj) {\n    this._indexKeyPrefix = obj || {};\n  }\n\n  _initCollection() {\n    const db = typeof this.client.db === 'function'\n      ? this.client.db(this.dbName)\n      : this.client;\n\n    const collection = db.collection(this.tableName);\n    collection.createIndex({ expire: -1 }, { expireAfterSeconds: 0 });\n    collection.createIndex(Object.assign({}, this.indexKeyPrefix, { key: 1 }), { unique: true });\n\n    this._collection = collection;\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n\n    let doc;\n    if (typeof result.value === 'undefined') {\n      doc = result;\n    } else {\n      doc = result.value;\n    }\n\n    res.isFirstInDuration = doc.points === changedPoints;\n    res.consumedPoints = doc.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = doc.expire !== null\n      ? Math.max(new Date(doc.expire).getTime() - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n\n    let where;\n    let upsertData;\n    if (forceExpire) {\n      where = { key };\n      where = Object.assign(where, docAttrs);\n      upsertData = {\n        $set: {\n          key,\n          points,\n          expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n        },\n      };\n      upsertData.$set = Object.assign(upsertData.$set, docAttrs);\n    } else {\n      where = {\n        $or: [\n          { expire: { $gt: new Date() } },\n          { expire: { $eq: null } },\n        ],\n        key,\n      };\n      where = Object.assign(where, docAttrs);\n      upsertData = {\n        $setOnInsert: {\n          key,\n          expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n        },\n        $inc: { points },\n      };\n      upsertData.$setOnInsert = Object.assign(upsertData.$setOnInsert, docAttrs);\n    }\n\n    // Options for collection updates differ between driver versions\n    const upsertOptions = {\n      upsert: true,\n    };\n    if ((this._driverVersion.major >= 4) ||\n        (this._driverVersion.major === 3 &&\n          (this._driverVersion.feature >=7) || \n          (this._driverVersion.feature >= 6 && \n              this._driverVersion.patch >= 7 ))) \n    {\n      upsertOptions.returnDocument = 'after';\n    } else {\n      upsertOptions.returnOriginal = false;\n    }\n\n    /*\n     * 1. Find actual limit and increment points\n     * 2. If limit expired, but Mongo doesn't clean doc by TTL yet, try to replace limit doc completely\n     * 3. If 2 or more Mongo threads try to insert the new limit doc, only the first succeed\n     * 4. Try to upsert from step 1. Actual limit is created now, points are incremented without problems\n     */\n    return new Promise((resolve, reject) => {\n      this._collection.findOneAndUpdate(\n        where,\n        upsertData,\n        upsertOptions\n      ).then((res) => {\n        resolve(res);\n      }).catch((errUpsert) => {\n        if (errUpsert && errUpsert.code === 11000) { // E11000 duplicate key error collection\n          const replaceWhere = Object.assign({ // try to replace OLD limit doc\n            $or: [\n              { expire: { $lte: new Date() } },\n              { expire: { $eq: null } },\n            ],\n            key,\n          }, docAttrs);\n\n          const replaceTo = {\n            $set: Object.assign({\n              key,\n              points,\n              expire: msDuration > 0 ? new Date(Date.now() + msDuration) : null,\n            }, docAttrs)\n          };\n\n          this._collection.findOneAndUpdate(\n            replaceWhere,\n            replaceTo,\n            upsertOptions\n          ).then((res) => {\n            resolve(res);\n          }).catch((errReplace) => {\n            if (errReplace && errReplace.code === 11000) { // E11000 duplicate key error collection\n              this._upsert(key, points, msDuration, forceExpire)\n                .then(res => resolve(res))\n                .catch(err => reject(err));\n            } else {\n              reject(errReplace);\n            }\n          });\n        } else {\n          reject(errUpsert);\n        }\n      });\n    });\n  }\n\n  _get(rlKey, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n\n    const where = Object.assign({\n      key: rlKey,\n      $or: [\n        { expire: { $gt: new Date() } },\n        { expire: { $eq: null } },\n      ],\n    }, docAttrs);\n\n    return this._collection.findOne(where);\n  }\n\n  _delete(rlKey, options = {}) {\n    if (!this._collection) {\n      return Promise.reject(Error('Mongo connection is not established'));\n    }\n\n    const docAttrs = options.attrs || {};\n    const where = Object.assign({ key: rlKey }, docAttrs);\n\n    return this._collection.deleteOne(where)\n      .then(res => res.deletedCount > 0);\n  }\n}\n\nmodule.exports = RateLimiterMongo;\n","const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterMySQL extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: anySqlClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   dbName: 'string',\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createDbAndTable()\n        .then(() => {\n          this.tableCreated = true;\n          if (this.clearExpiredByTimeout) {\n            this._clearExpiredHourAgo();\n          }\n          if (typeof cb === 'function') {\n            cb();\n          }\n        })\n        .catch((err) => {\n          if (typeof cb === 'function') {\n            cb(err);\n          } else {\n            throw err;\n          }\n        });\n    } else {\n      if (this.clearExpiredByTimeout) {\n        this._clearExpiredHourAgo();\n      }\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n\n  clearExpired(expire) {\n    return new Promise((resolve) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`DELETE FROM ??.?? WHERE expire < ?`, [this.dbName, this.tableName, expire], () => {\n            this._releaseConnection(conn);\n            resolve();\n          });\n        })\n        .catch(() => {\n          resolve();\n        });\n    });\n  }\n\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(() => {\n          this._clearExpiredHourAgo();\n        });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return new Promise((resolve, reject) => {\n          this.client.getConnection((errConn, conn) => {\n            if (errConn) {\n              return reject(errConn);\n            }\n\n            resolve(conn);\n          });\n        });\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return conn.release();\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createDbAndTable() {\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`CREATE DATABASE IF NOT EXISTS \\`${this.dbName}\\`;`, (errDb) => {\n            if (errDb) {\n              this._releaseConnection(conn);\n              return reject(errDb);\n            }\n            conn.query(this._getCreateTableStmt(), (err) => {\n              if (err) {\n                this._releaseConnection(conn);\n                return reject(err);\n              }\n              this._releaseConnection(conn);\n              resolve();\n            });\n          });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS \\`${this.dbName}\\`.\\`${this.tableName}\\` (` +\n      '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' +\n      '`points` INT(9) NOT NULL default 0,' +\n      '`expire` BIGINT UNSIGNED,' +\n      'PRIMARY KEY (`key`)' +\n      ') ENGINE = INNODB;';\n  }\n\n  get clientType() {\n    return this._clientType;\n  }\n\n  set clientType(value) {\n    if (typeof value === 'undefined') {\n      if (this.client.constructor.name === 'Connection') {\n        value = 'connection';\n      } else if (this.client.constructor.name === 'Pool') {\n        value = 'pool';\n      } else if (this.client.constructor.name === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n    this._clientType = value.toLowerCase();\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get tableCreated() {\n    return this._tableCreated\n  }\n\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const [row] = result;\n\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire\n      ? Math.max(row.expire - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _upsertTransaction(conn, key, points, msDuration, forceExpire) {\n    return new Promise((resolve, reject) => {\n      conn.query('BEGIN', (errBegin) => {\n        if (errBegin) {\n          conn.rollback();\n\n          return reject(errBegin);\n        }\n\n        const dateNow = Date.now();\n        const newExpire = msDuration > 0 ? dateNow + msDuration : null;\n\n        let q;\n        let values;\n        if (forceExpire) {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = ?, \n            expire = ?;`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            points,\n            newExpire,\n          ];\n        } else {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = IF(expire <= ?, ?, points + (?)), \n            expire = IF(expire <= ?, ?, expire);`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            dateNow, points, points,\n            dateNow, newExpire,\n          ];\n        }\n\n        conn.query(q, values, (errUpsert) => {\n          if (errUpsert) {\n            conn.rollback();\n\n            return reject(errUpsert);\n          }\n          conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [this.dbName, this.tableName, key], (errSelect, res) => {\n            if (errSelect) {\n              conn.rollback();\n\n              return reject(errSelect);\n            }\n\n            conn.query('COMMIT', (err) => {\n              if (err) {\n                conn.rollback();\n\n                return reject(err);\n              }\n\n              resolve(res);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          this._upsertTransaction(conn, key, points, msDuration, forceExpire)\n            .then((res) => {\n              resolve(res);\n              this._releaseConnection(conn);\n            })\n            .catch((err) => {\n              reject(err);\n              this._releaseConnection(conn);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)',\n            [this.dbName, this.tableName, rlKey, Date.now()],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else if (res.length === 0) {\n                resolve(null);\n              } else {\n                resolve(res);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'DELETE FROM ??.?? WHERE `key` = ?',\n            [this.dbName, this.tableName, rlKey],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(res.affectedRows > 0);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nmodule.exports = RateLimiterMySQL;\n","const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterPostgres extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: postgresClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n\n    this.tableName = opts.tableName;\n\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createTable()\n        .then(() => {\n          this.tableCreated = true;\n          if (this.clearExpiredByTimeout) {\n            this._clearExpiredHourAgo();\n          }\n          if (typeof cb === 'function') {\n            cb();\n          }\n        })\n        .catch((err) => {\n          if (typeof cb === 'function') {\n            cb(err);\n          } else {\n            throw err;\n          }\n        });\n    } else {\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n\n  clearExpired(expire) {\n    return new Promise((resolve) => {\n      const q = {\n        name: 'rlflx-clear-expired',\n        text: `DELETE FROM ${this.tableName} WHERE expire < $1`,\n        values: [expire],\n      };\n      this._query(q)\n        .then(() => {\n          resolve();\n        })\n        .catch(() => {\n          // Deleting expired query is not critical\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Delete all rows expired 1 hour ago once per 5 minutes\n   *\n   * @private\n   */\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(() => {\n          this._clearExpiredHourAgo();\n        });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return Promise.resolve(this.client);\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      case 'typeorm':\n        return Promise.resolve(this.client.driver.master);\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return true;\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      case 'typeorm':\n        return true;\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createTable() {\n    return new Promise((resolve, reject) => {\n      this._query({\n        text: this._getCreateTableStmt(),\n      })\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          if (err.code === '23505') {\n            // Error: duplicate key value violates unique constraint \"pg_type_typname_nsp_index\"\n            // Postgres doesn't handle concurrent table creation\n            // It is supposed, that table is created by another worker\n            resolve();\n          } else {\n            reject(err);\n          }\n        });\n    });\n  }\n\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS ${this.tableName} ( \n      key varchar(255) PRIMARY KEY,\n      points integer NOT NULL DEFAULT 0,\n      expire bigint\n    );`;\n  }\n\n  get clientType() {\n    return this._clientType;\n  }\n\n  set clientType(value) {\n    const constructorName = this.client.constructor.name;\n\n    if (typeof value === 'undefined') {\n      if (constructorName === 'Client') {\n        value = 'client';\n      } else if (\n        constructorName === 'Pool' ||\n        constructorName === 'BoundPool'\n      ) {\n        value = 'pool';\n      } else if (constructorName === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n\n    this._clientType = value.toLowerCase();\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get tableCreated() {\n    return this._tableCreated\n  }\n\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const row = result.rows[0];\n\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire\n      ? Math.max(row.expire - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _query(q) {\n    const prefix = this.tableName.toLowerCase();\n    const queryObj = { name: `${prefix}:${q.name}`, text: q.text, values: q.values };\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(queryObj)\n            .then((res) => {\n              resolve(res);\n              this._releaseConnection(conn);\n            })\n            .catch((err) => {\n              reject(err);\n              this._releaseConnection(conn);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    const newExpire = msDuration > 0 ? Date.now() + msDuration : null;\n    const expireQ = forceExpire\n      ? ' $3 '\n      : ` CASE\n             WHEN ${this.tableName}.expire <= $4 THEN $3\n             ELSE ${this.tableName}.expire\n            END `;\n\n    return this._query({\n      name: forceExpire ? 'rlflx-upsert-force' : 'rlflx-upsert',\n      text: `\n            INSERT INTO ${this.tableName} VALUES ($1, $2, $3)\n              ON CONFLICT(key) DO UPDATE SET\n                points = CASE\n                          WHEN (${this.tableName}.expire <= $4 OR 1=${forceExpire ? 1 : 0}) THEN $2\n                          ELSE ${this.tableName}.points + ($2)\n                         END,\n                expire = ${expireQ}\n            RETURNING points, expire;`,\n      values: [key, points, newExpire, Date.now()],\n    });\n  }\n\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._query({\n        name: 'rlflx-get',\n        text: `\n            SELECT points, expire FROM ${this.tableName} WHERE key = $1 AND (expire > $2 OR expire IS NULL);`,\n        values: [rlKey, Date.now()],\n      })\n        .then((res) => {\n          if (res.rowCount === 0) {\n            res = null;\n          }\n          resolve(res);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return this._query({\n      name: 'rlflx-delete',\n      text: `DELETE FROM ${this.tableName} WHERE key = $1`,\n      values: [rlKey],\n    })\n      .then(res => res.rowCount > 0);\n  }\n}\n\nmodule.exports = RateLimiterPostgres;\n","module.exports = class Record {\n  /**\n   *\n   * @param value int\n   * @param expiresAt Date|int\n   * @param timeoutId\n   */\n  constructor(value, expiresAt, timeoutId = null) {\n    this.value = value;\n    this.expiresAt = expiresAt;\n    this.timeoutId = timeoutId;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = parseInt(value);\n  }\n\n  get expiresAt() {\n    return this._expiresAt;\n  }\n\n  set expiresAt(value) {\n    if (!(value instanceof Date) && Number.isInteger(value)) {\n      value = new Date(value);\n    }\n    this._expiresAt = value;\n  }\n\n  get timeoutId() {\n    return this._timeoutId;\n  }\n\n  set timeoutId(value) {\n    this._timeoutId = value;\n  }\n};\n","const Record = require('./Record');\nconst RateLimiterRes = require('../../RateLimiterRes');\n\nmodule.exports = class MemoryStorage {\n  constructor() {\n    /**\n     * @type {Object.<string, Record>}\n     * @private\n     */\n    this._storage = {};\n  }\n\n  incrby(key, value, durationSec) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt\n        ? this._storage[key].expiresAt.getTime() - new Date().getTime()\n        : -1;\n      if (msBeforeExpires !== 0) {\n        // Change value\n        this._storage[key].value = this._storage[key].value + value;\n\n        return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n      }\n\n      return this.set(key, value, durationSec);\n    }\n    return this.set(key, value, durationSec);\n  }\n\n  set(key, value, durationSec) {\n    const durationMs = durationSec * 1000;\n\n    if (this._storage[key] && this._storage[key].timeoutId) {\n      clearTimeout(this._storage[key].timeoutId);\n    }\n\n    this._storage[key] = new Record(\n      value,\n      durationMs > 0 ? new Date(Date.now() + durationMs) : null\n    );\n    if (durationMs > 0) {\n      this._storage[key].timeoutId = setTimeout(() => {\n        delete this._storage[key];\n      }, durationMs);\n      if (this._storage[key].timeoutId.unref) {\n        this._storage[key].timeoutId.unref();\n      }\n    }\n\n    return new RateLimiterRes(0, durationMs === 0 ? -1 : durationMs, this._storage[key].value, true);\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {*}\n   */\n  get(key) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt\n        ? this._storage[key].expiresAt.getTime() - new Date().getTime()\n        : -1;\n      return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n    }\n    return null;\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {boolean}\n   */\n  delete(key) {\n    if (this._storage[key]) {\n      if (this._storage[key].timeoutId) {\n        clearTimeout(this._storage[key].timeoutId);\n      }\n      delete this._storage[key];\n      return true;\n    }\n    return false;\n  }\n};\n","const RateLimiterAbstract = require('./RateLimiterAbstract');\nconst MemoryStorage = require('./component/MemoryStorage/MemoryStorage');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterMemory extends RateLimiterAbstract {\n  constructor(opts = {}) {\n    super(opts);\n\n    this._memoryStorage = new MemoryStorage();\n  }\n  /**\n   *\n   * @param key\n   * @param pointsToConsume\n   * @param {Object} options\n   * @returns {Promise<RateLimiterRes>}\n   */\n  consume(key, pointsToConsume = 1, options = {}) {\n    return new Promise((resolve, reject) => {\n      const rlKey = this.getKey(key);\n      const secDuration = this._getKeySecDuration(options);\n      let res = this._memoryStorage.incrby(rlKey, pointsToConsume, secDuration);\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n\n      if (res.consumedPoints > this.points) {\n        // Block only first time when consumed more than points\n        if (this.blockDuration > 0 && res.consumedPoints <= (this.points + pointsToConsume)) {\n          // Block key\n          res = this._memoryStorage.set(rlKey, res.consumedPoints, this.blockDuration);\n        }\n        reject(res);\n      } else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {\n        // Execute evenly\n        let delay = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2));\n        if (delay < this.execEvenlyMinDelayMs) {\n          delay = res.consumedPoints * this.execEvenlyMinDelayMs;\n        }\n\n        setTimeout(resolve, delay, res);\n      } else {\n        resolve(res);\n      }\n    });\n  }\n\n  penalty(key, points = 1, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve) => {\n      const secDuration = this._getKeySecDuration(options);\n      const res = this._memoryStorage.incrby(rlKey, points, secDuration);\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      resolve(res);\n    });\n  }\n\n  reward(key, points = 1, options = {}) {\n    const rlKey = this.getKey(key);\n    return new Promise((resolve) => {\n      const secDuration = this._getKeySecDuration(options);\n      const res = this._memoryStorage.incrby(rlKey, -points, secDuration);\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n      resolve(res);\n    });\n  }\n\n  /**\n   * Block any key for secDuration seconds\n   *\n   * @param key\n   * @param secDuration\n   */\n  block(key, secDuration) {\n    const msDuration = secDuration * 1000;\n    const initPoints = this.points + 1;\n\n    this._memoryStorage.set(this.getKey(key), initPoints, secDuration);\n    return Promise.resolve(\n      new RateLimiterRes(0, msDuration === 0 ? -1 : msDuration, initPoints)\n    );\n  }\n\n  set(key, points, secDuration) {\n    const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000;\n\n    this._memoryStorage.set(this.getKey(key), points, secDuration);\n    return Promise.resolve(\n      new RateLimiterRes(0, msDuration === 0 ? -1 : msDuration, points)\n    );\n  }\n\n  get(key) {\n    const res = this._memoryStorage.get(this.getKey(key));\n    if (res !== null) {\n      res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    }\n\n    return Promise.resolve(res);\n  }\n\n  delete(key) {\n    return Promise.resolve(this._memoryStorage.delete(this.getKey(key)));\n  }\n}\n\nmodule.exports = RateLimiterMemory;\n\n","/**\n * Implements rate limiting in cluster using built-in IPC\n *\n * Two classes are described here: master and worker\n * Master have to be create in the master process without any options.\n * Any number of rate limiters can be created in workers, but each rate limiter must be with unique keyPrefix\n *\n * Workflow:\n * 1. master rate limiter created in master process\n * 2. worker rate limiter sends 'init' message with necessary options during creating\n * 3. master receives options and adds new rate limiter by keyPrefix if it isn't created yet\n * 4. master sends 'init' back to worker's rate limiter\n * 5. worker can process requests immediately,\n *    but they will be postponed by 'workerWaitInit' until master sends 'init' to worker\n * 6. every request to worker rate limiter creates a promise\n * 7. if master doesn't response for 'timeout', promise is rejected\n * 8. master sends 'resolve' or 'reject' command to worker\n * 9. worker resolves or rejects promise depending on message from master\n *\n */\n\nconst cluster = require('cluster');\nconst crypto = require('crypto');\nconst RateLimiterAbstract = require('./RateLimiterAbstract');\nconst RateLimiterMemory = require('./RateLimiterMemory');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nconst channel = 'rate_limiter_flexible';\nlet masterInstance = null;\n\nconst masterSendToWorker = function (worker, msg, type, res) {\n  let data;\n  if (res === null || res === true || res === false) {\n    data = res;\n  } else {\n    data = {\n      remainingPoints: res.remainingPoints,\n      msBeforeNext: res.msBeforeNext,\n      consumedPoints: res.consumedPoints,\n      isFirstInDuration: res.isFirstInDuration,\n    };\n  }\n  worker.send({\n    channel,\n    keyPrefix: msg.keyPrefix, // which rate limiter exactly\n    promiseId: msg.promiseId,\n    type,\n    data,\n  });\n};\n\nconst workerWaitInit = function (payload) {\n  setTimeout(() => {\n    if (this._initiated) {\n      process.send(payload);\n      // Promise will be removed by timeout if too long\n    } else if (typeof this._promises[payload.promiseId] !== 'undefined') {\n      workerWaitInit.call(this, payload);\n    }\n  }, 30);\n};\n\nconst workerSendToMaster = function (func, promiseId, key, arg, opts) {\n  const payload = {\n    channel,\n    keyPrefix: this.keyPrefix,\n    func,\n    promiseId,\n    data: {\n      key,\n      arg,\n      opts,\n    },\n  };\n\n  if (!this._initiated) {\n    // Wait init before sending messages to master\n    workerWaitInit.call(this, payload);\n  } else {\n    process.send(payload);\n  }\n};\n\nconst masterProcessMsg = function (worker, msg) {\n  if (!msg || msg.channel !== channel || typeof this._rateLimiters[msg.keyPrefix] === 'undefined') {\n    return false;\n  }\n\n  let promise;\n\n  switch (msg.func) {\n    case 'consume':\n      promise = this._rateLimiters[msg.keyPrefix].consume(msg.data.key, msg.data.arg, msg.data.opts);\n      break;\n    case 'penalty':\n      promise = this._rateLimiters[msg.keyPrefix].penalty(msg.data.key, msg.data.arg, msg.data.opts);\n      break;\n    case 'reward':\n      promise = this._rateLimiters[msg.keyPrefix].reward(msg.data.key, msg.data.arg, msg.data.opts);\n      break;\n    case 'block':\n      promise = this._rateLimiters[msg.keyPrefix].block(msg.data.key, msg.data.arg, msg.data.opts);\n      break;\n    case 'get':\n      promise = this._rateLimiters[msg.keyPrefix].get(msg.data.key, msg.data.opts);\n      break;\n    case 'delete':\n      promise = this._rateLimiters[msg.keyPrefix].delete(msg.data.key, msg.data.opts);\n      break;\n    default:\n      return false;\n  }\n\n  if (promise) {\n    promise\n      .then((res) => {\n        masterSendToWorker(worker, msg, 'resolve', res);\n      })\n      .catch((rejRes) => {\n        masterSendToWorker(worker, msg, 'reject', rejRes);\n      });\n  }\n};\n\nconst workerProcessMsg = function (msg) {\n  if (!msg || msg.channel !== channel || msg.keyPrefix !== this.keyPrefix) {\n    return false;\n  }\n\n  if (this._promises[msg.promiseId]) {\n    clearTimeout(this._promises[msg.promiseId].timeoutId);\n    let res;\n    if (msg.data === null || msg.data === true || msg.data === false) {\n      res = msg.data;\n    } else {\n      res = new RateLimiterRes(\n        msg.data.remainingPoints,\n        msg.data.msBeforeNext,\n        msg.data.consumedPoints,\n        msg.data.isFirstInDuration // eslint-disable-line comma-dangle\n      );\n    }\n\n    switch (msg.type) {\n      case 'resolve':\n        this._promises[msg.promiseId].resolve(res);\n        break;\n      case 'reject':\n        this._promises[msg.promiseId].reject(res);\n        break;\n      default:\n        throw new Error(`RateLimiterCluster: no such message type '${msg.type}'`);\n    }\n\n    delete this._promises[msg.promiseId];\n  }\n};\n/**\n * Prepare options to send to master\n * Master will create rate limiter depending on options\n *\n * @returns {{points: *, duration: *, blockDuration: *, execEvenly: *, execEvenlyMinDelayMs: *, keyPrefix: *}}\n */\nconst getOpts = function () {\n  return {\n    points: this.points,\n    duration: this.duration,\n    blockDuration: this.blockDuration,\n    execEvenly: this.execEvenly,\n    execEvenlyMinDelayMs: this.execEvenlyMinDelayMs,\n    keyPrefix: this.keyPrefix,\n  };\n};\n\nconst savePromise = function (resolve, reject) {\n  const hrtime = process.hrtime();\n  let promiseId = hrtime[0].toString() + hrtime[1].toString();\n\n  if (typeof this._promises[promiseId] !== 'undefined') {\n    promiseId += crypto.randomBytes(12).toString('base64');\n  }\n\n  this._promises[promiseId] = {\n    resolve,\n    reject,\n    timeoutId: setTimeout(() => {\n      delete this._promises[promiseId];\n      reject(new Error('RateLimiterCluster timeout: no answer from master in time'));\n    }, this.timeoutMs),\n  };\n\n  return promiseId;\n};\n\nclass RateLimiterClusterMaster {\n  constructor() {\n    if (masterInstance) {\n      return masterInstance;\n    }\n\n    this._rateLimiters = {};\n\n    cluster.setMaxListeners(0);\n\n    cluster.on('message', (worker, msg) => {\n      if (msg && msg.channel === channel && msg.type === 'init') {\n        // If init request, check or create rate limiter by key prefix and send 'init' back to worker\n        if (typeof this._rateLimiters[msg.opts.keyPrefix] === 'undefined') {\n          this._rateLimiters[msg.opts.keyPrefix] = new RateLimiterMemory(msg.opts);\n        }\n\n        worker.send({\n          channel,\n          type: 'init',\n          keyPrefix: msg.opts.keyPrefix,\n        });\n      } else {\n        masterProcessMsg.call(this, worker, msg);\n      }\n    });\n\n    masterInstance = this;\n  }\n}\n\nclass RateLimiterClusterMasterPM2 {\n  constructor(pm2) {\n    if (masterInstance) {\n      return masterInstance;\n    }\n\n    this._rateLimiters = {};\n\n    pm2.launchBus((err, pm2Bus) => {\n      pm2Bus.on('process:msg', (packet) => {\n        const msg = packet.raw;\n        if (msg && msg.channel === channel && msg.type === 'init') {\n          // If init request, check or create rate limiter by key prefix and send 'init' back to worker\n          if (typeof this._rateLimiters[msg.opts.keyPrefix] === 'undefined') {\n            this._rateLimiters[msg.opts.keyPrefix] = new RateLimiterMemory(msg.opts);\n          }\n\n          pm2.sendDataToProcessId(packet.process.pm_id, {\n            data: {},\n            topic: channel,\n            channel,\n            type: 'init',\n            keyPrefix: msg.opts.keyPrefix,\n          }, (sendErr, res) => {\n            if (sendErr) {\n              console.log(sendErr, res);\n            }\n          });\n        } else {\n          const worker = {\n            send: (msgData) => {\n              const pm2Message = msgData;\n              pm2Message.topic = channel;\n              if (typeof pm2Message.data === 'undefined') {\n                pm2Message.data = {};\n              }\n              pm2.sendDataToProcessId(packet.process.pm_id, pm2Message, (sendErr, res) => {\n                if (sendErr) {\n                  console.log(sendErr, res);\n                }\n              });\n            },\n          };\n          masterProcessMsg.call(this, worker, msg);\n        }\n      });\n    });\n\n    masterInstance = this;\n  }\n}\n\nclass RateLimiterClusterWorker extends RateLimiterAbstract {\n  get timeoutMs() {\n    return this._timeoutMs;\n  }\n\n  set timeoutMs(value) {\n    this._timeoutMs = typeof value === 'undefined' ? 5000 : Math.abs(parseInt(value));\n  }\n\n  constructor(opts = {}) {\n    super(opts);\n\n    process.setMaxListeners(0);\n\n    this.timeoutMs = opts.timeoutMs;\n\n    this._initiated = false;\n\n    process.on('message', (msg) => {\n      if (msg && msg.channel === channel && msg.type === 'init' && msg.keyPrefix === this.keyPrefix) {\n        this._initiated = true;\n      } else {\n        workerProcessMsg.call(this, msg);\n      }\n    });\n\n    // Create limiter on master with specific options\n    process.send({\n      channel,\n      type: 'init',\n      opts: getOpts.call(this),\n    });\n\n    this._promises = {};\n  }\n\n  consume(key, pointsToConsume = 1, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'consume', promiseId, key, pointsToConsume, options);\n    });\n  }\n\n  penalty(key, points = 1, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'penalty', promiseId, key, points, options);\n    });\n  }\n\n  reward(key, points = 1, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'reward', promiseId, key, points, options);\n    });\n  }\n\n  block(key, secDuration, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'block', promiseId, key, secDuration, options);\n    });\n  }\n\n  get(key, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'get', promiseId, key, options);\n    });\n  }\n\n  delete(key, options = {}) {\n    return new Promise((resolve, reject) => {\n      const promiseId = savePromise.call(this, resolve, reject);\n\n      workerSendToMaster.call(this, 'delete', promiseId, key, options);\n    });\n  }\n}\n\nmodule.exports = {\n  RateLimiterClusterMaster,\n  RateLimiterClusterMasterPM2,\n  RateLimiterCluster: RateLimiterClusterWorker,\n};\n","const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterMemcache extends RateLimiterStoreAbstract {\n  /**\n   *\n   * @param {Object} opts\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: memcacheClient\n   * }\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.client = opts.storeClient;\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    res.consumedPoints = parseInt(result.consumedPoints);\n    res.isFirstInDuration = result.consumedPoints === changedPoints;\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = result.msBeforeNext;\n\n    return res;\n  }\n\n  _upsert(rlKey, points, msDuration, forceExpire = false, options = {}) {\n    return new Promise((resolve, reject) => {\n      const nowMs = Date.now();\n      const secDuration = Math.floor(msDuration / 1000);\n\n      if (forceExpire) {\n        this.client.set(rlKey, points, secDuration, (err) => {\n          if (!err) {\n            this.client.set(\n              `${rlKey}_expire`,\n              secDuration > 0 ? nowMs + (secDuration * 1000) : -1,\n              secDuration,\n              () => {\n                const res = {\n                  consumedPoints: points,\n                  msBeforeNext: secDuration > 0 ? secDuration * 1000 : -1,\n                };\n                resolve(res);\n              }\n            );\n          } else {\n            reject(err);\n          }\n        });\n      } else {\n        this.client.incr(rlKey, points, (err, consumedPoints) => {\n          if (err || consumedPoints === false) {\n            this.client.add(rlKey, points, secDuration, (errAddKey, createdNew) => {\n              if (errAddKey || !createdNew) {\n                // Try to upsert again in case of race condition\n                if (typeof options.attemptNumber === 'undefined' || options.attemptNumber < 3) {\n                  const nextOptions = Object.assign({}, options);\n                  nextOptions.attemptNumber = nextOptions.attemptNumber ? (nextOptions.attemptNumber + 1) : 1;\n\n                  this._upsert(rlKey, points, msDuration, forceExpire, nextOptions)\n                    .then(resUpsert => resolve(resUpsert))\n                    .catch(errUpsert => reject(errUpsert));\n                } else {\n                  reject(new Error('Can not add key'));\n                }\n              } else {\n                this.client.add(\n                  `${rlKey}_expire`,\n                  secDuration > 0 ? nowMs + (secDuration * 1000) : -1,\n                  secDuration,\n                  () => {\n                    const res = {\n                      consumedPoints: points,\n                      msBeforeNext: secDuration > 0 ? secDuration * 1000 : -1,\n                    };\n                    resolve(res);\n                  }\n                );\n              }\n            });\n          } else {\n            this.client.get(`${rlKey}_expire`, (errGetExpire, resGetExpireMs) => {\n              if (errGetExpire) {\n                reject(errGetExpire);\n              } else {\n                const expireMs = resGetExpireMs === false ? 0 : resGetExpireMs;\n                const res = {\n                  consumedPoints,\n                  msBeforeNext: expireMs >= 0 ? Math.max(expireMs - nowMs, 0) : -1,\n                };\n                resolve(res);\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n\n  _get(rlKey) {\n    return new Promise((resolve, reject) => {\n      const nowMs = Date.now();\n\n      this.client.get(rlKey, (err, consumedPoints) => {\n        if (!consumedPoints) {\n          resolve(null);\n        } else {\n          this.client.get(`${rlKey}_expire`, (errGetExpire, resGetExpireMs) => {\n            if (errGetExpire) {\n              reject(errGetExpire);\n            } else {\n              const expireMs = resGetExpireMs === false ? 0 : resGetExpireMs;\n              const res = {\n                consumedPoints,\n                msBeforeNext: expireMs >= 0 ? Math.max(expireMs - nowMs, 0) : -1,\n              };\n              resolve(res);\n            }\n          });\n        }\n      });\n    });\n  }\n\n  _delete(rlKey) {\n    return new Promise((resolve, reject) => {\n      this.client.del(rlKey, (err, res) => {\n        if (err) {\n          reject(err);\n        } else if (res === false) {\n          resolve(res);\n        } else {\n          this.client.del(`${rlKey}_expire`, (errDelExpire) => {\n            if (errDelExpire) {\n              reject(errDelExpire);\n            } else {\n              resolve(res);\n            }\n          });\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = RateLimiterMemcache;\n","const RateLimiterRes = require('./RateLimiterRes');\n\nmodule.exports = class RLWrapperBlackAndWhite {\n  constructor(opts = {}) {\n    this.limiter = opts.limiter;\n    this.blackList = opts.blackList;\n    this.whiteList = opts.whiteList;\n    this.isBlackListed = opts.isBlackListed;\n    this.isWhiteListed = opts.isWhiteListed;\n    this.runActionAnyway = opts.runActionAnyway;\n  }\n\n  get limiter() {\n    return this._limiter;\n  }\n\n  set limiter(value) {\n    if (typeof value === 'undefined') {\n      throw new Error('limiter is not set');\n    }\n\n    this._limiter = value;\n  }\n\n  get runActionAnyway() {\n    return this._runActionAnyway;\n  }\n\n  set runActionAnyway(value) {\n    this._runActionAnyway = typeof value === 'undefined' ? false : value;\n  }\n\n  get blackList() {\n    return this._blackList;\n  }\n\n  set blackList(value) {\n    this._blackList = Array.isArray(value) ? value : [];\n  }\n\n  get isBlackListed() {\n    return this._isBlackListed;\n  }\n\n  set isBlackListed(func) {\n    if (typeof func === 'undefined') {\n      func = () => false;\n    }\n    if (typeof func !== 'function') {\n      throw new Error('isBlackListed must be function');\n    }\n    this._isBlackListed = func;\n  }\n\n  get whiteList() {\n    return this._whiteList;\n  }\n\n  set whiteList(value) {\n    this._whiteList = Array.isArray(value) ? value : [];\n  }\n\n  get isWhiteListed() {\n    return this._isWhiteListed;\n  }\n\n  set isWhiteListed(func) {\n    if (typeof func === 'undefined') {\n      func = () => false;\n    }\n    if (typeof func !== 'function') {\n      throw new Error('isWhiteListed must be function');\n    }\n    this._isWhiteListed = func;\n  }\n\n  isBlackListedSomewhere(key) {\n    return this.blackList.indexOf(key) >= 0 || this.isBlackListed(key);\n  }\n\n  isWhiteListedSomewhere(key) {\n    return this.whiteList.indexOf(key) >= 0 || this.isWhiteListed(key);\n  }\n\n  getBlackRes() {\n    return new RateLimiterRes(0, Number.MAX_SAFE_INTEGER, 0, false);\n  }\n\n  getWhiteRes() {\n    return new RateLimiterRes(Number.MAX_SAFE_INTEGER, 0, 0, false);\n  }\n\n  rejectBlack() {\n    return Promise.reject(this.getBlackRes());\n  }\n\n  resolveBlack() {\n    return Promise.resolve(this.getBlackRes());\n  }\n\n  resolveWhite() {\n    return Promise.resolve(this.getWhiteRes());\n  }\n\n  consume(key, pointsToConsume = 1) {\n    let res;\n    if (this.isWhiteListedSomewhere(key)) {\n      res = this.resolveWhite();\n    } else if (this.isBlackListedSomewhere(key)) {\n      res = this.rejectBlack();\n    }\n\n    if (typeof res === 'undefined') {\n      return this.limiter.consume(key, pointsToConsume);\n    }\n\n    if (this.runActionAnyway) {\n      this.limiter.consume(key, pointsToConsume).catch(() => {});\n    }\n    return res;\n  }\n\n  block(key, secDuration) {\n    let res;\n    if (this.isWhiteListedSomewhere(key)) {\n      res = this.resolveWhite();\n    } else if (this.isBlackListedSomewhere(key)) {\n      res = this.resolveBlack();\n    }\n\n    if (typeof res === 'undefined') {\n      return this.limiter.block(key, secDuration);\n    }\n\n    if (this.runActionAnyway) {\n      this.limiter.block(key, secDuration).catch(() => {});\n    }\n    return res;\n  }\n\n  penalty(key, points) {\n    let res;\n    if (this.isWhiteListedSomewhere(key)) {\n      res = this.resolveWhite();\n    } else if (this.isBlackListedSomewhere(key)) {\n      res = this.resolveBlack();\n    }\n\n    if (typeof res === 'undefined') {\n      return this.limiter.penalty(key, points);\n    }\n\n    if (this.runActionAnyway) {\n      this.limiter.penalty(key, points).catch(() => {});\n    }\n    return res;\n  }\n\n  reward(key, points) {\n    let res;\n    if (this.isWhiteListedSomewhere(key)) {\n      res = this.resolveWhite();\n    } else if (this.isBlackListedSomewhere(key)) {\n      res = this.resolveBlack();\n    }\n\n    if (typeof res === 'undefined') {\n      return this.limiter.reward(key, points);\n    }\n\n    if (this.runActionAnyway) {\n      this.limiter.reward(key, points).catch(() => {});\n    }\n    return res;\n  }\n\n  get(key) {\n    let res;\n    if (this.isWhiteListedSomewhere(key)) {\n      res = this.resolveWhite();\n    } else if (this.isBlackListedSomewhere(key)) {\n      res = this.resolveBlack();\n    }\n\n    if (typeof res === 'undefined' || this.runActionAnyway) {\n      return this.limiter.get(key);\n    }\n\n    return res;\n  }\n\n  delete(key) {\n    return this.limiter.delete(key);\n  }\n};\n","const RateLimiterAbstract = require('./RateLimiterAbstract');\n\nmodule.exports = class RateLimiterUnion {\n  constructor(...limiters) {\n    if (limiters.length < 1) {\n      throw new Error('RateLimiterUnion: at least one limiter have to be passed');\n    }\n    limiters.forEach((limiter) => {\n      if (!(limiter instanceof RateLimiterAbstract)) {\n        throw new Error('RateLimiterUnion: all limiters have to be instance of RateLimiterAbstract');\n      }\n    });\n\n    this._limiters = limiters;\n  }\n\n  consume(key, points = 1) {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      this._limiters.forEach((limiter) => {\n        promises.push(limiter.consume(key, points).catch(rej => ({ rejected: true, rej })));\n      });\n\n      Promise.all(promises)\n        .then((res) => {\n          const resObj = {};\n          let rejected = false;\n\n          res.forEach((item) => {\n            if (item.rejected === true) {\n              rejected = true;\n            }\n          });\n\n          for (let i = 0; i < res.length; i++) {\n            if (rejected && res[i].rejected === true) {\n              resObj[this._limiters[i].keyPrefix] = res[i].rej;\n            } else if (!rejected) {\n              resObj[this._limiters[i].keyPrefix] = res[i];\n            }\n          }\n\n          if (rejected) {\n            reject(resObj);\n          } else {\n            resolve(resObj);\n          }\n        });\n    });\n  }\n};\n","module.exports = class RateLimiterQueueError extends Error {\n  constructor(message, extra) {\n    super();\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = 'CustomError';\n    this.message = message;\n    if (extra) {\n      this.extra = extra;\n    }\n  }\n};\n","const RateLimiterQueueError = require('./component/RateLimiterQueueError')\nconst MAX_QUEUE_SIZE = 4294967295;\nconst KEY_DEFAULT = 'limiter';\n\nmodule.exports = class RateLimiterQueue {\n  constructor(limiterFlexible, opts = {\n    maxQueueSize: MAX_QUEUE_SIZE,\n  }) {\n    this._queueLimiters = {\n      KEY_DEFAULT: new RateLimiterQueueInternal(limiterFlexible, opts)\n    };\n    this._limiterFlexible = limiterFlexible;\n    this._maxQueueSize = opts.maxQueueSize\n  }\n\n  getTokensRemaining(key = KEY_DEFAULT) {\n    if (this._queueLimiters[key]) {\n      return this._queueLimiters[key].getTokensRemaining()\n    } else {\n      return Promise.resolve(this._limiterFlexible.points)\n    }\n  }\n\n  removeTokens(tokens, key = KEY_DEFAULT) {\n    if (!this._queueLimiters[key]) {\n      this._queueLimiters[key] = new RateLimiterQueueInternal(\n        this._limiterFlexible, {\n          key,\n          maxQueueSize: this._maxQueueSize,\n        })\n    }\n\n    return this._queueLimiters[key].removeTokens(tokens)\n  }\n};\n\nclass RateLimiterQueueInternal {\n\n  constructor(limiterFlexible, opts = {\n    maxQueueSize: MAX_QUEUE_SIZE,\n    key: KEY_DEFAULT,\n  }) {\n    this._key = opts.key;\n    this._waitTimeout = null;\n    this._queue = [];\n    this._limiterFlexible = limiterFlexible;\n\n    this._maxQueueSize = opts.maxQueueSize\n  }\n\n  getTokensRemaining() {\n    return this._limiterFlexible.get(this._key)\n      .then((rlRes) => {\n        return rlRes !== null ? rlRes.remainingPoints : this._limiterFlexible.points;\n      })\n  }\n\n  removeTokens(tokens) {\n    const _this = this;\n\n    return new Promise((resolve, reject) => {\n      if (tokens > _this._limiterFlexible.points) {\n        reject(new RateLimiterQueueError(`Requested tokens ${tokens} exceeds maximum ${_this._limiterFlexible.points} tokens per interval`));\n        return\n      }\n\n      if (_this._queue.length > 0) {\n        _this._queueRequest.call(_this, resolve, reject, tokens);\n      } else {\n        _this._limiterFlexible.consume(_this._key, tokens)\n          .then((res) => {\n            resolve(res.remainingPoints);\n          })\n          .catch((rej) => {\n            if (rej instanceof Error) {\n              reject(rej);\n            } else {\n              _this._queueRequest.call(_this, resolve, reject, tokens);\n              if (_this._waitTimeout === null) {\n                _this._waitTimeout = setTimeout(_this._processFIFO.bind(_this), rej.msBeforeNext);\n              }\n            }\n          });\n      }\n    })\n  }\n\n  _queueRequest(resolve, reject, tokens) {\n    const _this = this;\n    if (_this._queue.length < _this._maxQueueSize) {\n      _this._queue.push({resolve, reject, tokens});\n    } else {\n      reject(new RateLimiterQueueError(`Number of requests reached it's maximum ${_this._maxQueueSize}`))\n    }\n  }\n\n  _processFIFO() {\n    const _this = this;\n\n    if (_this._waitTimeout !== null) {\n      clearTimeout(_this._waitTimeout);\n      _this._waitTimeout = null;\n    }\n\n    if (_this._queue.length === 0) {\n      return;\n    }\n\n    const item = _this._queue.shift();\n    _this._limiterFlexible.consume(_this._key, item.tokens)\n      .then((res) => {\n        item.resolve(res.remainingPoints);\n        _this._processFIFO.call(_this);\n      })\n      .catch((rej) => {\n        if (rej instanceof Error) {\n          item.reject(rej);\n          _this._processFIFO.call(_this);\n        } else {\n          _this._queue.unshift(item);\n          if (_this._waitTimeout === null) {\n            _this._waitTimeout = setTimeout(_this._processFIFO.bind(_this), rej.msBeforeNext);\n          }\n        }\n      });\n  }\n}\n","const RateLimiterRes = require(\"./RateLimiterRes\");\n\n/**\n * Bursty rate limiter exposes only msBeforeNext time and doesn't expose points from bursty limiter by default\n * @type {BurstyRateLimiter}\n */\nmodule.exports = class BurstyRateLimiter {\n  constructor(rateLimiter, burstLimiter) {\n    this._rateLimiter = rateLimiter;\n    this._burstLimiter = burstLimiter\n  }\n\n  /**\n   * Merge rate limiter response objects. Responses can be null\n   *\n   * @param {RateLimiterRes} [rlRes] Rate limiter response\n   * @param {RateLimiterRes} [blRes] Bursty limiter response\n   */\n  _combineRes(rlRes, blRes) {\n    if (!rlRes) {\n      return null\n    }\n\n    return new RateLimiterRes(\n      rlRes.remainingPoints,\n      Math.min(rlRes.msBeforeNext, blRes ? blRes.msBeforeNext : 0),\n      rlRes.consumedPoints,\n      rlRes.isFirstInDuration\n    )\n  }\n\n  /**\n   * @param key\n   * @param pointsToConsume\n   * @param options\n   * @returns {Promise<any>}\n   */\n  consume(key, pointsToConsume = 1, options = {}) {\n    return this._rateLimiter.consume(key, pointsToConsume, options)\n      .catch((rlRej) => {\n        if (rlRej instanceof RateLimiterRes) {\n          return this._burstLimiter.consume(key, pointsToConsume, options)\n            .then((blRes) => {\n              return Promise.resolve(this._combineRes(rlRej, blRes))\n            })\n            .catch((blRej) => {\n                if (blRej instanceof RateLimiterRes) {\n                  return Promise.reject(this._combineRes(rlRej, blRej))\n                } else {\n                  return Promise.reject(blRej)\n                }\n              }\n            )\n        } else {\n          return Promise.reject(rlRej)\n        }\n      })\n  }\n\n  /**\n   * It doesn't expose available points from burstLimiter\n   *\n   * @param key\n   * @returns {Promise<RateLimiterRes>}\n   */\n  get(key) {\n    return Promise.all([\n      this._rateLimiter.get(key),\n      this._burstLimiter.get(key),\n    ]).then(([rlRes, blRes]) => {\n      return this._combineRes(rlRes, blRes);\n    });\n  }\n\n  get points() {\n    return this._rateLimiter.points;\n  }\n};\n","const RateLimiterRedis = require('./lib/RateLimiterRedis');\nconst RateLimiterMongo = require('./lib/RateLimiterMongo');\nconst RateLimiterMySQL = require('./lib/RateLimiterMySQL');\nconst RateLimiterPostgres = require('./lib/RateLimiterPostgres');\nconst {RateLimiterClusterMaster, RateLimiterClusterMasterPM2, RateLimiterCluster} = require('./lib/RateLimiterCluster');\nconst RateLimiterMemory = require('./lib/RateLimiterMemory');\nconst RateLimiterMemcache = require('./lib/RateLimiterMemcache');\nconst RLWrapperBlackAndWhite = require('./lib/RLWrapperBlackAndWhite');\nconst RateLimiterUnion = require('./lib/RateLimiterUnion');\nconst RateLimiterQueue = require('./lib/RateLimiterQueue');\nconst BurstyRateLimiter = require('./lib/BurstyRateLimiter');\nconst RateLimiterRes = require('./lib/RateLimiterRes');\n\nmodule.exports = {\n  RateLimiterRedis,\n  RateLimiterMongo,\n  RateLimiterMySQL,\n  RateLimiterPostgres,\n  RateLimiterMemory,\n  RateLimiterMemcache,\n  RateLimiterClusterMaster,\n  RateLimiterClusterMasterPM2,\n  RateLimiterCluster,\n  RLWrapperBlackAndWhite,\n  RateLimiterUnion,\n  RateLimiterQueue,\n  BurstyRateLimiter,\n  RateLimiterRes,\n};\n","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","// @ts-check\n\nimport { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec('utf8', 'u', (buf) => {\n    const decoder = new TextDecoder('utf8');\n    return 'u' + decoder.decode(buf);\n}, (str) => {\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', (buf) => {\n    let string = 'a';\n    for (let i = 0; i < buf.length; i++) {\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str) => {\n    str = str.substring(1);\n    const buf = allocUnsafe(str.length);\n    for (let i = 0; i < str.length; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    'utf-8': string,\n    hex: bases.base16,\n    latin1: ascii,\n    ascii,\n    binary: ascii,\n    ...bases\n};\nexport default BASES;\n//# sourceMappingURL=bases.js.map","import { asUint8Array } from './util/as-uint8array.js';\nimport bases, {} from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n    }\n    // add multibase prefix\n    return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n//# sourceMappingURL=from-string.js.map","import bases, {} from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat(arrays, length) {\n    if (globalThis.Buffer != null) {\n        return asUint8Array(globalThis.Buffer.concat(arrays, length));\n    }\n    if (length == null) {\n        length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n    }\n    const output = allocUnsafe(length);\n    let offset = 0;\n    for (const arr of arrays) {\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return asUint8Array(output);\n}\n//# sourceMappingURL=concat.js.map","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=equals.js.map","/**\n * @packageDocumentation\n *\n * A class that lets you do operations over a list of Uint8Arrays without\n * copying them.\n *\n * ```js\n * import { Uint8ArrayList } from 'uint8arraylist'\n *\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.subarray()\n * // -> Uint8Array([0, 1, 2, 3, 4, 5])\n *\n * list.consume(3)\n * list.subarray()\n * // -> Uint8Array([3, 4, 5])\n *\n * // you can also iterate over the list\n * for (const buf of list) {\n *   // ..do something with `buf`\n * }\n *\n * list.subarray(0, 1)\n * // -> Uint8Array([0])\n * ```\n *\n * ## Converting Uint8ArrayLists to Uint8Arrays\n *\n * There are two ways to turn a `Uint8ArrayList` into a `Uint8Array` - `.slice` and `.subarray` and one way to turn a `Uint8ArrayList` into a `Uint8ArrayList` with different contents - `.sublist`.\n *\n * ### slice\n *\n * Slice follows the same semantics as [Uint8Array.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice) in that it creates a new `Uint8Array` and copies bytes into it using an optional offset & length.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.slice(0, 1)\n * // -> Uint8Array([0])\n * ```\n *\n * ### subarray\n *\n * Subarray attempts to follow the same semantics as [Uint8Array.subarray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray) with one important different - this is a no-copy operation, unless the requested bytes span two internal buffers in which case it is a copy operation.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.subarray(0, 1)\n * // -> Uint8Array([0]) - no-copy\n *\n * list.subarray(2, 5)\n * // -> Uint8Array([2, 3, 4]) - copy\n * ```\n *\n * ### sublist\n *\n * Sublist creates and returns a new `Uint8ArrayList` that shares the underlying buffers with the original so is always a no-copy operation.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.sublist(0, 1)\n * // -> Uint8ArrayList([0]) - no-copy\n *\n * list.sublist(2, 5)\n * // -> Uint8ArrayList([2], [3, 4]) - no-copy\n * ```\n *\n * ## Inspiration\n *\n * Borrows liberally from [bl](https://www.npmjs.com/package/bl) but only uses native JS types.\n */\nimport { allocUnsafe, alloc } from 'uint8arrays/alloc';\nimport { concat } from 'uint8arrays/concat';\nimport { equals } from 'uint8arrays/equals';\nconst symbol = Symbol.for('@achingbrain/uint8arraylist');\nfunction findBufAndOffset(bufs, index) {\n    if (index == null || index < 0) {\n        throw new RangeError('index is out of bounds');\n    }\n    let offset = 0;\n    for (const buf of bufs) {\n        const bufEnd = offset + buf.byteLength;\n        if (index < bufEnd) {\n            return {\n                buf,\n                index: index - offset\n            };\n        }\n        offset = bufEnd;\n    }\n    throw new RangeError('index is out of bounds');\n}\n/**\n * Check if object is a CID instance\n *\n * @example\n *\n * ```js\n * import { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist'\n *\n * isUint8ArrayList(true) // false\n * isUint8ArrayList([]) // false\n * isUint8ArrayList(new Uint8ArrayList()) // true\n * ```\n */\nexport function isUint8ArrayList(value) {\n    return Boolean(value?.[symbol]);\n}\nexport class Uint8ArrayList {\n    bufs;\n    length;\n    [symbol] = true;\n    constructor(...data) {\n        this.bufs = [];\n        this.length = 0;\n        if (data.length > 0) {\n            this.appendAll(data);\n        }\n    }\n    *[Symbol.iterator]() {\n        yield* this.bufs;\n    }\n    get byteLength() {\n        return this.length;\n    }\n    /**\n     * Add one or more `bufs` to the end of this Uint8ArrayList\n     */\n    append(...bufs) {\n        this.appendAll(bufs);\n    }\n    /**\n     * Add all `bufs` to the end of this Uint8ArrayList\n     */\n    appendAll(bufs) {\n        let length = 0;\n        for (const buf of bufs) {\n            if (buf instanceof Uint8Array) {\n                length += buf.byteLength;\n                this.bufs.push(buf);\n            }\n            else if (isUint8ArrayList(buf)) {\n                length += buf.byteLength;\n                this.bufs.push(...buf.bufs);\n            }\n            else {\n                throw new Error('Could not append value, must be an Uint8Array or a Uint8ArrayList');\n            }\n        }\n        this.length += length;\n    }\n    /**\n     * Add one or more `bufs` to the start of this Uint8ArrayList\n     */\n    prepend(...bufs) {\n        this.prependAll(bufs);\n    }\n    /**\n     * Add all `bufs` to the start of this Uint8ArrayList\n     */\n    prependAll(bufs) {\n        let length = 0;\n        for (const buf of bufs.reverse()) {\n            if (buf instanceof Uint8Array) {\n                length += buf.byteLength;\n                this.bufs.unshift(buf);\n            }\n            else if (isUint8ArrayList(buf)) {\n                length += buf.byteLength;\n                this.bufs.unshift(...buf.bufs);\n            }\n            else {\n                throw new Error('Could not prepend value, must be an Uint8Array or a Uint8ArrayList');\n            }\n        }\n        this.length += length;\n    }\n    /**\n     * Read the value at `index`\n     */\n    get(index) {\n        const res = findBufAndOffset(this.bufs, index);\n        return res.buf[res.index];\n    }\n    /**\n     * Set the value at `index` to `value`\n     */\n    set(index, value) {\n        const res = findBufAndOffset(this.bufs, index);\n        res.buf[res.index] = value;\n    }\n    /**\n     * Copy bytes from `buf` to the index specified by `offset`\n     */\n    write(buf, offset = 0) {\n        if (buf instanceof Uint8Array) {\n            for (let i = 0; i < buf.length; i++) {\n                this.set(offset + i, buf[i]);\n            }\n        }\n        else if (isUint8ArrayList(buf)) {\n            for (let i = 0; i < buf.length; i++) {\n                this.set(offset + i, buf.get(i));\n            }\n        }\n        else {\n            throw new Error('Could not write value, must be an Uint8Array or a Uint8ArrayList');\n        }\n    }\n    /**\n     * Remove bytes from the front of the pool\n     */\n    consume(bytes) {\n        // first, normalize the argument, in accordance with how Buffer does it\n        bytes = Math.trunc(bytes);\n        // do nothing if not a positive number\n        if (Number.isNaN(bytes) || bytes <= 0) {\n            return;\n        }\n        // if consuming all bytes, skip iterating\n        if (bytes === this.byteLength) {\n            this.bufs = [];\n            this.length = 0;\n            return;\n        }\n        while (this.bufs.length > 0) {\n            if (bytes >= this.bufs[0].byteLength) {\n                bytes -= this.bufs[0].byteLength;\n                this.length -= this.bufs[0].byteLength;\n                this.bufs.shift();\n            }\n            else {\n                this.bufs[0] = this.bufs[0].subarray(bytes);\n                this.length -= bytes;\n                break;\n            }\n        }\n    }\n    /**\n     * Extracts a section of an array and returns a new array.\n     *\n     * This is a copy operation as it is with Uint8Arrays and Arrays\n     * - note this is different to the behaviour of Node Buffers.\n     */\n    slice(beginInclusive, endExclusive) {\n        const { bufs, length } = this._subList(beginInclusive, endExclusive);\n        return concat(bufs, length);\n    }\n    /**\n     * Returns a alloc from the given start and end element index.\n     *\n     * In the best case where the data extracted comes from a single Uint8Array\n     * internally this is a no-copy operation otherwise it is a copy operation.\n     */\n    subarray(beginInclusive, endExclusive) {\n        const { bufs, length } = this._subList(beginInclusive, endExclusive);\n        if (bufs.length === 1) {\n            return bufs[0];\n        }\n        return concat(bufs, length);\n    }\n    /**\n     * Returns a allocList from the given start and end element index.\n     *\n     * This is a no-copy operation.\n     */\n    sublist(beginInclusive, endExclusive) {\n        const { bufs, length } = this._subList(beginInclusive, endExclusive);\n        const list = new Uint8ArrayList();\n        list.length = length;\n        // don't loop, just set the bufs\n        list.bufs = [...bufs];\n        return list;\n    }\n    _subList(beginInclusive, endExclusive) {\n        beginInclusive = beginInclusive ?? 0;\n        endExclusive = endExclusive ?? this.length;\n        if (beginInclusive < 0) {\n            beginInclusive = this.length + beginInclusive;\n        }\n        if (endExclusive < 0) {\n            endExclusive = this.length + endExclusive;\n        }\n        if (beginInclusive < 0 || endExclusive > this.length) {\n            throw new RangeError('index is out of bounds');\n        }\n        if (beginInclusive === endExclusive) {\n            return { bufs: [], length: 0 };\n        }\n        if (beginInclusive === 0 && endExclusive === this.length) {\n            return { bufs: this.bufs, length: this.length };\n        }\n        const bufs = [];\n        let offset = 0;\n        for (let i = 0; i < this.bufs.length; i++) {\n            const buf = this.bufs[i];\n            const bufStart = offset;\n            const bufEnd = bufStart + buf.byteLength;\n            // for next loop\n            offset = bufEnd;\n            if (beginInclusive >= bufEnd) {\n                // start after this buf\n                continue;\n            }\n            const sliceStartInBuf = beginInclusive >= bufStart && beginInclusive < bufEnd;\n            const sliceEndsInBuf = endExclusive > bufStart && endExclusive <= bufEnd;\n            if (sliceStartInBuf && sliceEndsInBuf) {\n                // slice is wholly contained within this buffer\n                if (beginInclusive === bufStart && endExclusive === bufEnd) {\n                    // requested whole buffer\n                    bufs.push(buf);\n                    break;\n                }\n                // requested part of buffer\n                const start = beginInclusive - bufStart;\n                bufs.push(buf.subarray(start, start + (endExclusive - beginInclusive)));\n                break;\n            }\n            if (sliceStartInBuf) {\n                // slice starts in this buffer\n                if (beginInclusive === 0) {\n                    // requested whole buffer\n                    bufs.push(buf);\n                    continue;\n                }\n                // requested part of buffer\n                bufs.push(buf.subarray(beginInclusive - bufStart));\n                continue;\n            }\n            if (sliceEndsInBuf) {\n                if (endExclusive === bufEnd) {\n                    // requested whole buffer\n                    bufs.push(buf);\n                    break;\n                }\n                // requested part of buffer\n                bufs.push(buf.subarray(0, endExclusive - bufStart));\n                break;\n            }\n            // slice started before this buffer and ends after it\n            bufs.push(buf);\n        }\n        return { bufs, length: endExclusive - beginInclusive };\n    }\n    indexOf(search, offset = 0) {\n        if (!isUint8ArrayList(search) && !(search instanceof Uint8Array)) {\n            throw new TypeError('The \"value\" argument must be a Uint8ArrayList or Uint8Array');\n        }\n        const needle = search instanceof Uint8Array ? search : search.subarray();\n        offset = Number(offset ?? 0);\n        if (isNaN(offset)) {\n            offset = 0;\n        }\n        if (offset < 0) {\n            offset = this.length + offset;\n        }\n        if (offset < 0) {\n            offset = 0;\n        }\n        if (search.length === 0) {\n            return offset > this.length ? this.length : offset;\n        }\n        // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm\n        const M = needle.byteLength;\n        if (M === 0) {\n            throw new TypeError('search must be at least 1 byte long');\n        }\n        // radix\n        const radix = 256;\n        const rightmostPositions = new Int32Array(radix);\n        // position of the rightmost occurrence of the byte c in the pattern\n        for (let c = 0; c < radix; c++) {\n            // -1 for bytes not in pattern\n            rightmostPositions[c] = -1;\n        }\n        for (let j = 0; j < M; j++) {\n            // rightmost position for bytes in pattern\n            rightmostPositions[needle[j]] = j;\n        }\n        // Return offset of first match, -1 if no match\n        const right = rightmostPositions;\n        const lastIndex = this.byteLength - needle.byteLength;\n        const lastPatIndex = needle.byteLength - 1;\n        let skip;\n        for (let i = offset; i <= lastIndex; i += skip) {\n            skip = 0;\n            for (let j = lastPatIndex; j >= 0; j--) {\n                const char = this.get(i + j);\n                if (needle[j] !== char) {\n                    skip = Math.max(1, j - right[char]);\n                    break;\n                }\n            }\n            if (skip === 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    getInt8(byteOffset) {\n        const buf = this.subarray(byteOffset, byteOffset + 1);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getInt8(0);\n    }\n    setInt8(byteOffset, value) {\n        const buf = allocUnsafe(1);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setInt8(0, value);\n        this.write(buf, byteOffset);\n    }\n    getInt16(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 2);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getInt16(0, littleEndian);\n    }\n    setInt16(byteOffset, value, littleEndian) {\n        const buf = alloc(2);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setInt16(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getInt32(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getInt32(0, littleEndian);\n    }\n    setInt32(byteOffset, value, littleEndian) {\n        const buf = alloc(4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setInt32(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getBigInt64(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getBigInt64(0, littleEndian);\n    }\n    setBigInt64(byteOffset, value, littleEndian) {\n        const buf = alloc(8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setBigInt64(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getUint8(byteOffset) {\n        const buf = this.subarray(byteOffset, byteOffset + 1);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getUint8(0);\n    }\n    setUint8(byteOffset, value) {\n        const buf = allocUnsafe(1);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setUint8(0, value);\n        this.write(buf, byteOffset);\n    }\n    getUint16(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 2);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getUint16(0, littleEndian);\n    }\n    setUint16(byteOffset, value, littleEndian) {\n        const buf = alloc(2);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setUint16(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getUint32(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getUint32(0, littleEndian);\n    }\n    setUint32(byteOffset, value, littleEndian) {\n        const buf = alloc(4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setUint32(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getBigUint64(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getBigUint64(0, littleEndian);\n    }\n    setBigUint64(byteOffset, value, littleEndian) {\n        const buf = alloc(8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setBigUint64(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getFloat32(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getFloat32(0, littleEndian);\n    }\n    setFloat32(byteOffset, value, littleEndian) {\n        const buf = alloc(4);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setFloat32(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    getFloat64(byteOffset, littleEndian) {\n        const buf = this.subarray(byteOffset, byteOffset + 8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        return view.getFloat64(0, littleEndian);\n    }\n    setFloat64(byteOffset, value, littleEndian) {\n        const buf = alloc(8);\n        const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        view.setFloat64(0, value, littleEndian);\n        this.write(buf, byteOffset);\n    }\n    equals(other) {\n        if (other == null) {\n            return false;\n        }\n        if (!(other instanceof Uint8ArrayList)) {\n            return false;\n        }\n        if (other.bufs.length !== this.bufs.length) {\n            return false;\n        }\n        for (let i = 0; i < this.bufs.length; i++) {\n            if (!equals(this.bufs[i], other.bufs[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Create a Uint8ArrayList from a pre-existing list of Uint8Arrays.  Use this\n     * method if you know the total size of all the Uint8Arrays ahead of time.\n     */\n    static fromUint8Arrays(bufs, length) {\n        const list = new Uint8ArrayList();\n        list.bufs = bufs;\n        if (length == null) {\n            length = bufs.reduce((acc, curr) => acc + curr.byteLength, 0);\n        }\n        list.length = length;\n        return list;\n    }\n}\n/*\nfunction indexOf (needle: Uint8Array, haystack: Uint8Array, offset = 0) {\n  for (let i = offset; i < haystack.byteLength; i++) {\n    for (let j = 0; j < needle.length; j++) {\n      if (haystack[i + j] !== needle[j]) {\n        break\n      }\n\n      if (j === needle.byteLength -1) {\n        return i\n      }\n    }\n\n    if (haystack.byteLength - i < needle.byteLength) {\n      break\n    }\n  }\n\n  return -1\n}\n*/\n//# sourceMappingURL=index.js.map","export var MessageTypes;\n(function (MessageTypes) {\n    MessageTypes[MessageTypes[\"NEW_STREAM\"] = 0] = \"NEW_STREAM\";\n    MessageTypes[MessageTypes[\"MESSAGE_RECEIVER\"] = 1] = \"MESSAGE_RECEIVER\";\n    MessageTypes[MessageTypes[\"MESSAGE_INITIATOR\"] = 2] = \"MESSAGE_INITIATOR\";\n    MessageTypes[MessageTypes[\"CLOSE_RECEIVER\"] = 3] = \"CLOSE_RECEIVER\";\n    MessageTypes[MessageTypes[\"CLOSE_INITIATOR\"] = 4] = \"CLOSE_INITIATOR\";\n    MessageTypes[MessageTypes[\"RESET_RECEIVER\"] = 5] = \"RESET_RECEIVER\";\n    MessageTypes[MessageTypes[\"RESET_INITIATOR\"] = 6] = \"RESET_INITIATOR\";\n})(MessageTypes || (MessageTypes = {}));\nexport const MessageTypeNames = Object.freeze({\n    0: 'NEW_STREAM',\n    1: 'MESSAGE_RECEIVER',\n    2: 'MESSAGE_INITIATOR',\n    3: 'CLOSE_RECEIVER',\n    4: 'CLOSE_INITIATOR',\n    5: 'RESET_RECEIVER',\n    6: 'RESET_INITIATOR'\n});\nexport const InitiatorMessageTypes = Object.freeze({\n    NEW_STREAM: MessageTypes.NEW_STREAM,\n    MESSAGE: MessageTypes.MESSAGE_INITIATOR,\n    CLOSE: MessageTypes.CLOSE_INITIATOR,\n    RESET: MessageTypes.RESET_INITIATOR\n});\nexport const ReceiverMessageTypes = Object.freeze({\n    MESSAGE: MessageTypes.MESSAGE_RECEIVER,\n    CLOSE: MessageTypes.CLOSE_RECEIVER,\n    RESET: MessageTypes.RESET_RECEIVER\n});\n//# sourceMappingURL=message-types.js.map","import { Uint8ArrayList } from 'uint8arraylist';\nimport { MessageTypeNames, MessageTypes } from './message-types.js';\nexport const MAX_MSG_SIZE = 1 << 20; // 1MB\nexport const MAX_MSG_QUEUE_SIZE = 4 << 20; // 4MB\nexport class Decoder {\n    _buffer;\n    _headerInfo;\n    _maxMessageSize;\n    _maxUnprocessedMessageQueueSize;\n    constructor(maxMessageSize = MAX_MSG_SIZE, maxUnprocessedMessageQueueSize = MAX_MSG_QUEUE_SIZE) {\n        this._buffer = new Uint8ArrayList();\n        this._headerInfo = null;\n        this._maxMessageSize = maxMessageSize;\n        this._maxUnprocessedMessageQueueSize = maxUnprocessedMessageQueueSize;\n    }\n    write(chunk) {\n        if (chunk == null || chunk.length === 0) {\n            return [];\n        }\n        this._buffer.append(chunk);\n        if (this._buffer.byteLength > this._maxUnprocessedMessageQueueSize) {\n            throw Object.assign(new Error('unprocessed message queue size too large!'), { code: 'ERR_MSG_QUEUE_TOO_BIG' });\n        }\n        const msgs = [];\n        while (this._buffer.length !== 0) {\n            if (this._headerInfo == null) {\n                try {\n                    this._headerInfo = this._decodeHeader(this._buffer);\n                }\n                catch (err) {\n                    if (err.code === 'ERR_MSG_TOO_BIG') {\n                        throw err;\n                    }\n                    break; // We haven't received enough data yet\n                }\n            }\n            const { id, type, length, offset } = this._headerInfo;\n            const bufferedDataLength = this._buffer.length - offset;\n            if (bufferedDataLength < length) {\n                break; // not enough data yet\n            }\n            const msg = {\n                id,\n                type\n            };\n            if (type === MessageTypes.NEW_STREAM || type === MessageTypes.MESSAGE_INITIATOR || type === MessageTypes.MESSAGE_RECEIVER) {\n                msg.data = this._buffer.sublist(offset, offset + length);\n            }\n            msgs.push(msg);\n            this._buffer.consume(offset + length);\n            this._headerInfo = null;\n        }\n        return msgs;\n    }\n    /**\n     * Attempts to decode the message header from the buffer\n     */\n    _decodeHeader(data) {\n        const { value: h, offset } = readVarInt(data);\n        const { value: length, offset: end } = readVarInt(data, offset);\n        const type = h & 7;\n        // @ts-expect-error h is a number not a CODE\n        if (MessageTypeNames[type] == null) {\n            throw new Error(`Invalid type received: ${type}`);\n        }\n        // test message type varint + data length\n        if (length > this._maxMessageSize) {\n            throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' });\n        }\n        // @ts-expect-error h is a number not a CODE\n        return { id: h >> 3, type, offset: offset + end, length };\n    }\n}\nconst MSB = 0x80;\nconst REST = 0x7F;\nfunction readVarInt(buf, offset = 0) {\n    let res = 0;\n    let shift = 0;\n    let counter = offset;\n    let b;\n    const l = buf.length;\n    do {\n        if (counter >= l || shift > 49) {\n            offset = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf.get(counter++);\n        res += shift < 28\n            ? (b & REST) << shift\n            : (b & REST) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB);\n    offset = counter - offset;\n    return {\n        value: res,\n        offset\n    };\n}\n//# sourceMappingURL=decode.js.map","/**\n * @packageDocumentation\n *\n * The final batch may be smaller than the max.\n *\n * @example\n *\n * ```javascript\n * import batch from 'it-batched-bytes'\n * import all from 'it-all'\n *\n * // This can also be an iterator, generator, etc\n * const values = [\n *   Uint8Array.from([0]),\n *   Uint8Array.from([1]),\n *   Uint8Array.from([2]),\n *   Uint8Array.from([3]),\n *   Uint8Array.from([4])\n * ]\n * const batchSize = 2\n *\n * const result = all(batch(values, { size: batchSize }))\n *\n * console.info(result) // [0, 1], [2, 3], [4]\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import batch from 'it-batched-bytes'\n * import all from 'it-all'\n *\n * const values = async function * () {\n *   yield Uint8Array.from([0])\n *   yield Uint8Array.from([1])\n *   yield Uint8Array.from([2])\n *   yield Uint8Array.from([3])\n *   yield Uint8Array.from([4])\n * }\n * const batchSize = 2\n *\n * const result = await all(batch(values, { size: batchSize }))\n *\n * console.info(result) // [0, 1], [2, 3], [4]\n * ```\n */\nimport defer from 'p-defer';\nimport { Uint8ArrayList } from 'uint8arraylist';\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nconst DEFAULT_BATCH_SIZE = 1024 * 1024;\nconst DEFAULT_SERIALIZE = (buf, list) => { list.append(buf); };\nfunction batchedBytes(source, options) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            let buffer = new Uint8ArrayList();\n            let ended = false;\n            let deferred = defer();\n            let size = Number(options?.size ?? DEFAULT_BATCH_SIZE);\n            if (isNaN(size) || size === 0 || size < 0) {\n                size = DEFAULT_BATCH_SIZE;\n            }\n            if (size !== Math.round(size)) {\n                throw new Error('Batch size must be an integer');\n            }\n            const yieldAfter = options?.yieldAfter ?? 0;\n            const serialize = options?.serialize ?? DEFAULT_SERIALIZE;\n            void Promise.resolve().then(async () => {\n                try {\n                    let timeout;\n                    for await (const buf of source) {\n                        // @ts-expect-error - if buf is not `Uint8Array | Uint8ArrayList` we cannot use the default serializer\n                        serialize(buf, buffer);\n                        if (buffer.byteLength >= size) {\n                            clearTimeout(timeout);\n                            deferred.resolve();\n                            continue;\n                        }\n                        timeout = setTimeout(() => {\n                            deferred.resolve();\n                        }, yieldAfter);\n                    }\n                    clearTimeout(timeout);\n                    deferred.resolve();\n                }\n                catch (err) {\n                    deferred.reject(err);\n                }\n                finally {\n                    ended = true;\n                }\n            });\n            while (!ended) { // eslint-disable-line no-unmodified-loop-condition\n                await deferred.promise;\n                deferred = defer();\n                if (buffer.byteLength > 0) {\n                    const b = buffer;\n                    buffer = new Uint8ArrayList();\n                    yield b.subarray();\n                }\n            }\n        })();\n    }\n    return (function* () {\n        const buffer = new Uint8ArrayList();\n        let size = Number(options?.size ?? DEFAULT_BATCH_SIZE);\n        if (isNaN(size) || size === 0 || size < 0) {\n            size = DEFAULT_BATCH_SIZE;\n        }\n        if (size !== Math.round(size)) {\n            throw new Error('Batch size must be an integer');\n        }\n        const serialize = options?.serialize ?? DEFAULT_SERIALIZE;\n        for (const buf of source) {\n            // @ts-expect-error - if buf is not `Uint8Array | Uint8ArrayList` we cannot use the default serializer\n            serialize(buf, buffer);\n            if (buffer.byteLength >= size) {\n                yield buffer.subarray(0, size);\n                buffer.consume(size);\n            }\n        }\n        if (buffer.byteLength > 0) {\n            yield buffer.subarray();\n        }\n    })();\n}\nexport default batchedBytes;\n//# sourceMappingURL=index.js.map","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","export function allocUnsafe(size) {\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc-unsafe-browser.js.map","import batchedBytes from 'it-batched-bytes';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport varint from 'varint';\nimport { allocUnsafe } from './alloc-unsafe.js';\nimport { MessageTypes } from './message-types.js';\nconst POOL_SIZE = 10 * 1024;\nclass Encoder {\n    _pool;\n    _poolOffset;\n    constructor() {\n        this._pool = allocUnsafe(POOL_SIZE);\n        this._poolOffset = 0;\n    }\n    /**\n     * Encodes the given message and adds it to the passed list\n     */\n    write(msg, list) {\n        const pool = this._pool;\n        let offset = this._poolOffset;\n        varint.encode(msg.id << 3 | msg.type, pool, offset);\n        offset += varint.encode.bytes ?? 0;\n        if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            varint.encode(msg.data.length, pool, offset);\n        }\n        else {\n            varint.encode(0, pool, offset);\n        }\n        offset += varint.encode.bytes ?? 0;\n        const header = pool.subarray(this._poolOffset, offset);\n        if (POOL_SIZE - offset < 100) {\n            this._pool = allocUnsafe(POOL_SIZE);\n            this._poolOffset = 0;\n        }\n        else {\n            this._poolOffset = offset;\n        }\n        list.append(header);\n        if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            list.append(msg.data);\n        }\n    }\n}\nconst encoder = new Encoder();\n/**\n * Encode and yield one or more messages\n */\nexport async function* encode(source, minSendBytes = 0) {\n    if (minSendBytes == null || minSendBytes === 0) {\n        // just send the messages\n        for await (const messages of source) {\n            const list = new Uint8ArrayList();\n            for (const msg of messages) {\n                encoder.write(msg, list);\n            }\n            yield list.subarray();\n        }\n        return;\n    }\n    // batch messages up for sending\n    yield* batchedBytes(source, {\n        size: minSendBytes,\n        serialize: (obj, list) => {\n            for (const m of obj) {\n                encoder.write(m, list);\n            }\n        }\n    });\n}\n//# sourceMappingURL=encode.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { logger } from '@libp2p/logger';\nimport { abortableSource } from 'abortable-iterator';\nimport { anySignal } from 'any-signal';\nimport { pushable } from 'it-pushable';\nimport { Uint8ArrayList } from 'uint8arraylist';\nconst log = logger('libp2p:stream');\nconst ERR_STREAM_RESET = 'ERR_STREAM_RESET';\nconst ERR_STREAM_ABORT = 'ERR_STREAM_ABORT';\nconst ERR_SINK_ENDED = 'ERR_SINK_ENDED';\nconst ERR_DOUBLE_SINK = 'ERR_DOUBLE_SINK';\nfunction isPromise(res) {\n    return res != null && typeof res.then === 'function';\n}\nexport class AbstractStream {\n    id;\n    stat;\n    metadata;\n    source;\n    abortController;\n    resetController;\n    closeController;\n    sourceEnded;\n    sinkEnded;\n    sinkSunk;\n    endErr;\n    streamSource;\n    onEnd;\n    maxDataSize;\n    constructor(init) {\n        this.abortController = new AbortController();\n        this.resetController = new AbortController();\n        this.closeController = new AbortController();\n        this.sourceEnded = false;\n        this.sinkEnded = false;\n        this.sinkSunk = false;\n        this.id = init.id;\n        this.metadata = init.metadata ?? {};\n        this.stat = {\n            direction: init.direction,\n            timeline: {\n                open: Date.now()\n            }\n        };\n        this.maxDataSize = init.maxDataSize;\n        this.onEnd = init.onEnd;\n        this.source = this.streamSource = pushable({\n            onEnd: () => {\n                // already sent a reset message\n                if (this.stat.timeline.reset !== null) {\n                    const res = this.sendCloseRead();\n                    if (isPromise(res)) {\n                        res.catch(err => {\n                            log.error('error while sending close read', err);\n                        });\n                    }\n                }\n                this.onSourceEnd();\n            }\n        });\n        // necessary because the libp2p upgrader wraps the sink function\n        this.sink = this.sink.bind(this);\n    }\n    onSourceEnd(err) {\n        if (this.sourceEnded) {\n            return;\n        }\n        this.stat.timeline.closeRead = Date.now();\n        this.sourceEnded = true;\n        log.trace('%s stream %s source end - err: %o', this.stat.direction, this.id, err);\n        if (err != null && this.endErr == null) {\n            this.endErr = err;\n        }\n        if (this.sinkEnded) {\n            this.stat.timeline.close = Date.now();\n            if (this.onEnd != null) {\n                this.onEnd(this.endErr);\n            }\n        }\n    }\n    onSinkEnd(err) {\n        if (this.sinkEnded) {\n            return;\n        }\n        this.stat.timeline.closeWrite = Date.now();\n        this.sinkEnded = true;\n        log.trace('%s stream %s sink end - err: %o', this.stat.direction, this.id, err);\n        if (err != null && this.endErr == null) {\n            this.endErr = err;\n        }\n        if (this.sourceEnded) {\n            this.stat.timeline.close = Date.now();\n            if (this.onEnd != null) {\n                this.onEnd(this.endErr);\n            }\n        }\n    }\n    // Close for both Reading and Writing\n    close() {\n        log.trace('%s stream %s close', this.stat.direction, this.id);\n        this.closeRead();\n        this.closeWrite();\n    }\n    // Close for reading\n    closeRead() {\n        log.trace('%s stream %s closeRead', this.stat.direction, this.id);\n        if (this.sourceEnded) {\n            return;\n        }\n        this.streamSource.end();\n    }\n    // Close for writing\n    closeWrite() {\n        log.trace('%s stream %s closeWrite', this.stat.direction, this.id);\n        if (this.sinkEnded) {\n            return;\n        }\n        this.closeController.abort();\n        try {\n            // need to call this here as the sink method returns in the catch block\n            // when the close controller is aborted\n            const res = this.sendCloseWrite();\n            if (isPromise(res)) {\n                res.catch(err => {\n                    log.error('error while sending close write', err);\n                });\n            }\n        }\n        catch (err) {\n            log.trace('%s stream %s error sending close', this.stat.direction, this.id, err);\n        }\n        this.onSinkEnd();\n    }\n    // Close for reading and writing (local error)\n    abort(err) {\n        log.trace('%s stream %s abort', this.stat.direction, this.id, err);\n        // End the source with the passed error\n        this.streamSource.end(err);\n        this.abortController.abort();\n        this.onSinkEnd(err);\n    }\n    // Close immediately for reading and writing (remote error)\n    reset() {\n        const err = new CodeError('stream reset', ERR_STREAM_RESET);\n        this.resetController.abort();\n        this.streamSource.end(err);\n        this.onSinkEnd(err);\n    }\n    async sink(source) {\n        if (this.sinkSunk) {\n            throw new CodeError('sink already called on stream', ERR_DOUBLE_SINK);\n        }\n        this.sinkSunk = true;\n        if (this.sinkEnded) {\n            throw new CodeError('stream closed for writing', ERR_SINK_ENDED);\n        }\n        const signal = anySignal([\n            this.abortController.signal,\n            this.resetController.signal,\n            this.closeController.signal\n        ]);\n        try {\n            source = abortableSource(source, signal);\n            if (this.stat.direction === 'outbound') { // If initiator, open a new stream\n                const res = this.sendNewStream();\n                if (isPromise(res)) {\n                    await res;\n                }\n            }\n            for await (let data of source) {\n                while (data.length > 0) {\n                    if (data.length <= this.maxDataSize) {\n                        const res = this.sendData(data instanceof Uint8Array ? new Uint8ArrayList(data) : data);\n                        if (isPromise(res)) { // eslint-disable-line max-depth\n                            await res;\n                        }\n                        break;\n                    }\n                    data = data instanceof Uint8Array ? new Uint8ArrayList(data) : data;\n                    const res = this.sendData(data.sublist(0, this.maxDataSize));\n                    if (isPromise(res)) {\n                        await res;\n                    }\n                    data.consume(this.maxDataSize);\n                }\n            }\n        }\n        catch (err) {\n            if (err.type === 'aborted' && err.message === 'The operation was aborted') {\n                if (this.closeController.signal.aborted) {\n                    return;\n                }\n                if (this.resetController.signal.aborted) {\n                    err.message = 'stream reset';\n                    err.code = ERR_STREAM_RESET;\n                }\n                if (this.abortController.signal.aborted) {\n                    err.message = 'stream aborted';\n                    err.code = ERR_STREAM_ABORT;\n                }\n            }\n            // Send no more data if this stream was remotely reset\n            if (err.code === ERR_STREAM_RESET) {\n                log.trace('%s stream %s reset', this.stat.direction, this.id);\n            }\n            else {\n                log.trace('%s stream %s error', this.stat.direction, this.id, err);\n                try {\n                    const res = this.sendReset();\n                    if (isPromise(res)) {\n                        await res;\n                    }\n                    this.stat.timeline.reset = Date.now();\n                }\n                catch (err) {\n                    log.trace('%s stream %s error sending reset', this.stat.direction, this.id, err);\n                }\n            }\n            this.streamSource.end(err);\n            this.onSinkEnd(err);\n            throw err;\n        }\n        finally {\n            signal.clear();\n        }\n        try {\n            const res = this.sendCloseWrite();\n            if (isPromise(res)) {\n                await res;\n            }\n        }\n        catch (err) {\n            log.trace('%s stream %s error sending close', this.stat.direction, this.id, err);\n        }\n        this.onSinkEnd();\n    }\n    /**\n     * When an extending class reads data from it's implementation-specific source,\n     * call this method to allow the stream consumer to read the data.\n     */\n    sourcePush(data) {\n        this.streamSource.push(data);\n    }\n    /**\n     * Returns the amount of unread data - can be used to prevent large amounts of\n     * data building up when the stream consumer is too slow.\n     */\n    sourceReadableLength() {\n        return this.streamSource.readableLength;\n    }\n}\n//# sourceMappingURL=stream.js.map","import { AbstractStream } from '@libp2p/interface-stream-muxer/stream';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { MAX_MSG_SIZE } from './decode.js';\nimport { InitiatorMessageTypes, ReceiverMessageTypes } from './message-types.js';\nclass MplexStream extends AbstractStream {\n    name;\n    streamId;\n    send;\n    types;\n    constructor(init) {\n        super(init);\n        this.types = init.direction === 'outbound' ? InitiatorMessageTypes : ReceiverMessageTypes;\n        this.send = init.send;\n        this.name = init.name;\n        this.streamId = init.streamId;\n    }\n    sendNewStream() {\n        this.send({ id: this.streamId, type: InitiatorMessageTypes.NEW_STREAM, data: new Uint8ArrayList(uint8ArrayFromString(this.name)) });\n    }\n    sendData(data) {\n        this.send({ id: this.streamId, type: this.types.MESSAGE, data });\n    }\n    sendReset() {\n        this.send({ id: this.streamId, type: this.types.RESET });\n    }\n    sendCloseWrite() {\n        this.send({ id: this.streamId, type: this.types.CLOSE });\n    }\n    sendCloseRead() {\n        // mplex does not support close read, only close write\n    }\n}\nexport function createStream(options) {\n    const { id, name, send, onEnd, type = 'initiator', maxMsgSize = MAX_MSG_SIZE } = options;\n    return new MplexStream({\n        id: type === 'initiator' ? (`i${id}`) : `r${id}`,\n        streamId: id,\n        name: `${name == null ? id : name}`,\n        direction: type === 'initiator' ? 'outbound' : 'inbound',\n        maxDataSize: maxMsgSize,\n        onEnd,\n        send\n    });\n}\n//# sourceMappingURL=stream.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { logger } from '@libp2p/logger';\nimport { abortableSource } from 'abortable-iterator';\nimport { anySignal } from 'any-signal';\nimport { pushableV } from 'it-pushable';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { Decoder } from './decode.js';\nimport { encode } from './encode.js';\nimport { MessageTypes, MessageTypeNames } from './message-types.js';\nimport { createStream } from './stream.js';\nconst log = logger('libp2p:mplex');\nconst MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAM_BUFFER_SIZE = 1024 * 1024 * 4; // 4MB\nconst DISCONNECT_THRESHOLD = 5;\nfunction printMessage(msg) {\n    const output = {\n        ...msg,\n        type: `${MessageTypeNames[msg.type]} (${msg.type})`\n    };\n    if (msg.type === MessageTypes.NEW_STREAM) {\n        output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray());\n    }\n    if (msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) {\n        output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray(), 'base16');\n    }\n    return output;\n}\nexport class MplexStreamMuxer {\n    protocol = '/mplex/6.7.0';\n    sink;\n    source;\n    _streamId;\n    _streams;\n    _init;\n    _source;\n    closeController;\n    rateLimiter;\n    constructor(init) {\n        init = init ?? {};\n        this._streamId = 0;\n        this._streams = {\n            /**\n             * Stream to ids map\n             */\n            initiators: new Map(),\n            /**\n             * Stream to ids map\n             */\n            receivers: new Map()\n        };\n        this._init = init;\n        /**\n         * An iterable sink\n         */\n        this.sink = this._createSink();\n        /**\n         * An iterable source\n         */\n        const source = this._createSource();\n        this._source = source;\n        this.source = source;\n        /**\n         * Close controller\n         */\n        this.closeController = new AbortController();\n        this.rateLimiter = new RateLimiterMemory({\n            points: init.disconnectThreshold ?? DISCONNECT_THRESHOLD,\n            duration: 1\n        });\n    }\n    /**\n     * Returns a Map of streams and their ids\n     */\n    get streams() {\n        // Inbound and Outbound streams may have the same ids, so we need to make those unique\n        const streams = [];\n        for (const stream of this._streams.initiators.values()) {\n            streams.push(stream);\n        }\n        for (const stream of this._streams.receivers.values()) {\n            streams.push(stream);\n        }\n        return streams;\n    }\n    /**\n     * Initiate a new stream with the given name. If no name is\n     * provided, the id of the stream will be used.\n     */\n    newStream(name) {\n        if (this.closeController.signal.aborted) {\n            throw new Error('Muxer already closed');\n        }\n        const id = this._streamId++;\n        name = name == null ? id.toString() : name.toString();\n        const registry = this._streams.initiators;\n        return this._newStream({ id, name, type: 'initiator', registry });\n    }\n    /**\n     * Close or abort all tracked streams and stop the muxer\n     */\n    close(err) {\n        if (this.closeController.signal.aborted)\n            return;\n        if (err != null) {\n            this.streams.forEach(s => { s.abort(err); });\n        }\n        else {\n            this.streams.forEach(s => { s.close(); });\n        }\n        this.closeController.abort();\n    }\n    /**\n     * Called whenever an inbound stream is created\n     */\n    _newReceiverStream(options) {\n        const { id, name } = options;\n        const registry = this._streams.receivers;\n        return this._newStream({ id, name, type: 'receiver', registry });\n    }\n    _newStream(options) {\n        const { id, name, type, registry } = options;\n        log('new %s stream %s', type, id);\n        if (type === 'initiator' && this._streams.initiators.size === (this._init.maxOutboundStreams ?? MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION)) {\n            throw new CodeError('Too many outbound streams open', 'ERR_TOO_MANY_OUTBOUND_STREAMS');\n        }\n        if (registry.has(id)) {\n            throw new Error(`${type} stream ${id} already exists!`);\n        }\n        const send = (msg) => {\n            if (log.enabled) {\n                log.trace('%s stream %s send', type, id, printMessage(msg));\n            }\n            this._source.push(msg);\n        };\n        const onEnd = () => {\n            log('%s stream with id %s and protocol %s ended', type, id, stream.stat.protocol);\n            registry.delete(id);\n            if (this._init.onStreamEnd != null) {\n                this._init.onStreamEnd(stream);\n            }\n        };\n        const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._init.maxMsgSize });\n        registry.set(id, stream);\n        return stream;\n    }\n    /**\n     * Creates a sink with an abortable source. Incoming messages will\n     * also have their size restricted. All messages will be varint decoded.\n     */\n    _createSink() {\n        const sink = async (source) => {\n            const signal = anySignal([this.closeController.signal, this._init.signal]);\n            try {\n                source = abortableSource(source, signal);\n                const decoder = new Decoder(this._init.maxMsgSize, this._init.maxUnprocessedMessageQueueSize);\n                for await (const chunk of source) {\n                    for (const msg of decoder.write(chunk)) {\n                        await this._handleIncoming(msg);\n                    }\n                }\n                this._source.end();\n            }\n            catch (err) {\n                log('error in sink', err);\n                this._source.end(err); // End the source with an error\n            }\n            finally {\n                signal.clear();\n            }\n        };\n        return sink;\n    }\n    /**\n     * Creates a source that restricts outgoing message sizes\n     * and varint encodes them\n     */\n    _createSource() {\n        const onEnd = (err) => {\n            this.close(err);\n        };\n        const source = pushableV({\n            objectMode: true,\n            onEnd\n        });\n        return Object.assign(encode(source, this._init.minSendBytes), {\n            push: source.push,\n            end: source.end,\n            return: source.return\n        });\n    }\n    async _handleIncoming(message) {\n        const { id, type } = message;\n        if (log.enabled) {\n            log.trace('incoming message', printMessage(message));\n        }\n        // Create a new stream?\n        if (message.type === MessageTypes.NEW_STREAM) {\n            if (this._streams.receivers.size === (this._init.maxInboundStreams ?? MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION)) {\n                log('too many inbound streams open');\n                // not going to allow this stream, send the reset message manually\n                // instead of setting it up just to tear it down\n                this._source.push({\n                    id,\n                    type: MessageTypes.RESET_RECEIVER\n                });\n                // if we've hit our stream limit, and the remote keeps trying to open\n                // more new streams, if they are doing this very quickly maybe they\n                // are attacking us and we should close the connection\n                try {\n                    await this.rateLimiter.consume('new-stream', 1);\n                }\n                catch {\n                    log('rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection');\n                    // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n                    this._source.end(new Error('Too many open streams'));\n                    return;\n                }\n                return;\n            }\n            const stream = this._newReceiverStream({ id, name: uint8ArrayToString(message.data instanceof Uint8Array ? message.data : message.data.subarray()) });\n            if (this._init.onIncomingStream != null) {\n                this._init.onIncomingStream(stream);\n            }\n            return;\n        }\n        const list = (type & 1) === 1 ? this._streams.initiators : this._streams.receivers;\n        const stream = list.get(id);\n        if (stream == null) {\n            log('missing stream %s for message type %s', id, MessageTypeNames[type]);\n            return;\n        }\n        const maxBufferSize = this._init.maxStreamBufferSize ?? MAX_STREAM_BUFFER_SIZE;\n        switch (type) {\n            case MessageTypes.MESSAGE_INITIATOR:\n            case MessageTypes.MESSAGE_RECEIVER:\n                if (stream.sourceReadableLength() > maxBufferSize) {\n                    // Stream buffer has got too large, reset the stream\n                    this._source.push({\n                        id: message.id,\n                        type: type === MessageTypes.MESSAGE_INITIATOR ? MessageTypes.RESET_RECEIVER : MessageTypes.RESET_INITIATOR\n                    });\n                    // Inform the stream consumer they are not fast enough\n                    const error = new CodeError('Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers', 'ERR_STREAM_INPUT_BUFFER_FULL');\n                    stream.abort(error);\n                    return;\n                }\n                // We got data from the remote, push it into our local stream\n                stream.sourcePush(message.data);\n                break;\n            case MessageTypes.CLOSE_INITIATOR:\n            case MessageTypes.CLOSE_RECEIVER:\n                // We should expect no more data from the remote, stop reading\n                stream.closeRead();\n                break;\n            case MessageTypes.RESET_INITIATOR:\n            case MessageTypes.RESET_RECEIVER:\n                // Stop reading and writing to the stream immediately\n                stream.reset();\n                break;\n            default:\n                log('unknown message type %s', type);\n        }\n    }\n}\n//# sourceMappingURL=mplex.js.map","import { MplexStreamMuxer } from './mplex.js';\nclass Mplex {\n    protocol = '/mplex/6.7.0';\n    _init;\n    constructor(init = {}) {\n        this._init = init;\n    }\n    createStreamMuxer(init = {}) {\n        return new MplexStreamMuxer({\n            ...init,\n            ...this._init\n        });\n    }\n}\nexport function mplex(init = {}) {\n    return () => new Mplex(init);\n}\n//# sourceMappingURL=index.js.map","'use strict';\n\nmodule.exports = value => {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n};\n","'use strict';\nconst isOptionObject = require('is-plain-obj');\n\nconst {hasOwnProperty} = Object.prototype;\nconst {propertyIsEnumerable} = Object;\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\n\tvalue,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOptions = {\n\tconcatArrays: false,\n\tignoreUndefined: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n\tconst keys = [];\n\n\tfor (const key in value) {\n\t\tif (hasOwnProperty.call(value, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\n\t/* istanbul ignore else  */\n\tif (Object.getOwnPropertySymbols) {\n\t\tconst symbols = Object.getOwnPropertySymbols(value);\n\n\t\tfor (const symbol of symbols) {\n\t\t\tif (propertyIsEnumerable.call(value, symbol)) {\n\t\t\t\tkeys.push(symbol);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keys;\n};\n\nfunction clone(value) {\n\tif (Array.isArray(value)) {\n\t\treturn cloneArray(value);\n\t}\n\n\tif (isOptionObject(value)) {\n\t\treturn cloneOptionObject(value);\n\t}\n\n\treturn value;\n}\n\nfunction cloneArray(array) {\n\tconst result = array.slice(0, 0);\n\n\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\n\t\tdefineProperty(result, key, clone(array[key]));\n\t});\n\n\treturn result;\n}\n\nfunction cloneOptionObject(object) {\n\tconst result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\n\n\tgetEnumerableOwnPropertyKeys(object).forEach(key => {\n\t\tdefineProperty(result, key, clone(object[key]));\n\t});\n\n\treturn result;\n}\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nconst mergeKeys = (merged, source, keys, config) => {\n\tkeys.forEach(key => {\n\t\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not recurse into prototype chain of merged\n\t\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n\t\t\tdefineProperty(merged, key, merge(merged[key], source[key], config));\n\t\t} else {\n\t\t\tdefineProperty(merged, key, clone(source[key]));\n\t\t}\n\t});\n\n\treturn merged;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, config) => {\n\tlet result = merged.slice(0, 0);\n\tlet resultIndex = 0;\n\n\t[merged, source].forEach(array => {\n\t\tconst indices = [];\n\n\t\t// `result.concat(array)` with cloning\n\t\tfor (let k = 0; k < array.length; k++) {\n\t\t\tif (!hasOwnProperty.call(array, k)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices.push(String(k));\n\n\t\t\tif (array === merged) {\n\t\t\t\t// Already cloned\n\t\t\t\tdefineProperty(result, resultIndex++, array[k]);\n\t\t\t} else {\n\t\t\t\tdefineProperty(result, resultIndex++, clone(array[k]));\n\t\t\t}\n\t\t}\n\n\t\t// Merge non-index keys\n\t\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\n\t});\n\n\treturn result;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nfunction merge(merged, source, config) {\n\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n\t\treturn concatArrays(merged, source, config);\n\t}\n\n\tif (!isOptionObject(source) || !isOptionObject(merged)) {\n\t\treturn clone(source);\n\t}\n\n\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\n\nmodule.exports = function (...options) {\n\tconst config = merge(clone(defaultMergeOptions), (this !== globalThis && this) || {}, defaultMergeOptions);\n\tlet merged = {_: {}};\n\n\tfor (const option of options) {\n\t\tif (option === undefined) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isOptionObject(option)) {\n\t\t\tthrow new TypeError('`' + option + '` is not an Option Object');\n\t\t}\n\n\t\tmerged = merge(merged, {_: option}, config);\n\t}\n\n\treturn merged._;\n};\n","'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","'use strict';\n\n/**\n * @typedef {{ [key: string]: any }} Extensions\n * @typedef {Error} Err\n * @property {string} message\n */\n\n/**\n *\n * @param {Error} obj\n * @param {Extensions} props\n * @returns {Error & Extensions}\n */\nfunction assign(obj, props) {\n    for (const key in props) {\n        Object.defineProperty(obj, key, {\n            value: props[key],\n            enumerable: true,\n            configurable: true,\n        });\n    }\n\n    return obj;\n}\n\n/**\n *\n * @param {any} err - An Error\n * @param {string|Extensions} code - A string code or props to set on the error\n * @param {Extensions} [props] - Props to set on the error\n * @returns {Error & Extensions}\n */\nfunction createError(err, code, props) {\n    if (!err || typeof err === 'string') {\n        throw new TypeError('Please pass an Error to err-code');\n    }\n\n    if (!props) {\n        props = {};\n    }\n\n    if (typeof code === 'object') {\n        props = code;\n        code = '';\n    }\n\n    if (code) {\n        props.code = code;\n    }\n\n    try {\n        return assign(err, props);\n    } catch (_) {\n        props.message = err.message;\n        props.stack = err.stack;\n\n        const ErrClass = function () {};\n\n        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));\n\n        // @ts-ignore\n        const output = assign(new ErrClass(), props);\n\n        return output;\n    }\n}\n\nmodule.exports = createError;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","const textDecoder = new TextDecoder()\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[number, number]}\n */\nfunction decodeVarint (bytes, offset) {\n  let v = 0\n\n  for (let shift = 0; ; shift += 7) {\n    /* c8 ignore next 3 */\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow')\n    }\n    /* c8 ignore next 3 */\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data')\n    }\n\n    const b = bytes[offset++]\n    v += shift < 28 ? (b & 0x7f) << shift : (b & 0x7f) * (2 ** shift)\n    if (b < 0x80) {\n      break\n    }\n  }\n  return [v, offset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @returns {[Uint8Array, number]}\n */\nfunction decodeBytes (bytes, offset) {\n  let byteLen\n  ;[byteLen, offset] = decodeVarint(bytes, offset)\n  const postOffset = offset + byteLen\n\n  /* c8 ignore next 3 */\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length')\n  }\n  /* c8 ignore next 3 */\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data')\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} index\n * @returns {[number, number, number]}\n */\nfunction decodeKey (bytes, index) {\n  let wire\n  ;[wire, index] = decodeVarint(bytes, index)\n  // [wireType, fieldNum, newIndex]\n  return [wire & 0x7, wire >> 3, index]\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBLink}\n */\nfunction decodeLink (bytes) {\n  /** @type {RawPBLink} */\n  const link = {}\n  const l = bytes.length\n  let index = 0\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`)\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash')\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash')\n      }\n\n      [link.Hash, index] = decodeBytes(bytes, index)\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section')\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`)\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name')\n      }\n\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      link.Name = textDecoder.decode(byts)\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section')\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`)\n      }\n\n      [link.Tsize, index] = decodeVarint(bytes, index)\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data')\n  }\n\n  return link\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {RawPBNode}\n */\nexport function decodeNode (bytes) {\n  const l = bytes.length\n  let index = 0\n  /** @type {RawPBLink[]|void} */\n  let links = undefined // eslint-disable-line no-undef-init\n  let linksBeforeData = false\n  /** @type {Uint8Array|void} */\n  let data = undefined // eslint-disable-line no-undef-init\n\n  while (index < l) {\n    let wireType, fieldNum\n    ;[wireType, fieldNum, index] = decodeKey(bytes, index)\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`)\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section')\n      }\n\n      [data, index] = decodeBytes(bytes, index)\n      if (links) {\n        linksBeforeData = true\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) { // interleaved Links/Data/Links\n        throw new Error('protobuf: (PBNode) duplicate Links section')\n      } else if (!links) {\n        links = []\n      }\n      let byts\n      ;[byts, index] = decodeBytes(bytes, index)\n      links.push(decodeLink(byts))\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`)\n    }\n  }\n\n  /* c8 ignore next 3 */\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data')\n  }\n\n  /** @type {RawPBNode} */\n  const node = {}\n  if (data) {\n    node.Data = data\n  }\n  node.Links = links || []\n  return node\n}\n","const textEncoder = new TextEncoder()\nconst maxInt32 = 2 ** 32\nconst maxUInt32 = 2 ** 31\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\nfunction encodeLink (link, bytes) {\n  let i = bytes.length\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative')\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding')\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1\n    bytes[i] = 0x18\n  }\n\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name)\n    i -= nameBytes.length\n    bytes.set(nameBytes, i)\n    i = encodeVarint(bytes, i, nameBytes.length) - 1\n    bytes[i] = 0x12\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length\n    bytes.set(link.Hash, i)\n    i = encodeVarint(bytes, i, link.Hash.length) - 1\n    bytes[i] = 0xa\n  }\n\n  return bytes.length - i\n}\n\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\nexport function encodeNode (node) {\n  const size = sizeNode(node)\n  const bytes = new Uint8Array(size)\n  let i = size\n\n  if (node.Data) {\n    i -= node.Data.length\n    bytes.set(node.Data, i)\n    i = encodeVarint(bytes, i, node.Data.length) - 1\n    bytes[i] = 0xa\n  }\n\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i))\n      i -= size\n      i = encodeVarint(bytes, i, size) - 1\n      bytes[i] = 0x12\n    }\n  }\n\n  return bytes\n}\n\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\nfunction sizeLink (link) {\n  let n = 0\n\n  if (link.Hash) {\n    const l = link.Hash.length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize)\n  }\n\n  return n\n}\n\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\nfunction sizeNode (node) {\n  let n = 0\n\n  if (node.Data) {\n    const l = node.Data.length\n    n += 1 + l + sov(l)\n  }\n\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link)\n      n += 1 + l + sov(l)\n    }\n  }\n\n  return n\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\nfunction encodeVarint (bytes, offset, v) {\n  offset -= sov(v)\n  const base = offset\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v /= 128\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v >>>= 7\n  }\n\n  bytes[offset] = v\n\n  return base\n}\n\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\nfunction sov (x) {\n  if (x % 2 === 0) {\n    x++\n  }\n  return Math.floor((len64(x) + 6) / 7)\n}\n\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\nfunction len64 (x) {\n  let n = 0\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32)\n    n = 32\n  }\n  if (x >= (1 << 16)) {\n    x >>>= 16\n    n += 16\n  }\n  if (x >= (1 << 8)) {\n    x >>>= 8\n    n += 8\n  }\n  return n + len8tab[x]\n}\n\n// golang math/bits\nconst len8tab = [\n  0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\n]\n","import { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nconst pbNodeProperties = ['Data', 'Links']\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize']\n\nconst textEncoder = new TextEncoder()\n\n/**\n * @param {PBLink} a\n * @param {PBLink} b\n * @returns {number}\n */\nfunction linkComparator (a, b) {\n  if (a === b) {\n    return 0\n  }\n\n  const abuf = a.Name ? textEncoder.encode(a.Name) : []\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : []\n\n  let x = abuf.length\n  let y = bbuf.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i]\n      y = bbuf[i]\n      break\n    }\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0\n}\n\n/**\n * @param {any} node\n * @param {string[]} properties\n * @returns {boolean}\n */\nfunction hasOnlyProperties (node, properties) {\n  return !Object.keys(node).some((p) => !properties.includes(p))\n}\n\n/**\n * Converts a CID, or a PBLink-like object to a PBLink\n *\n * @param {any} link\n * @returns {PBLink}\n */\nfunction asLink (link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link)\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n    return { Hash }\n  }\n\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  const pbl = {}\n\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash)\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash)\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash)\n        }\n      }\n    } catch (/** @type {any} */ e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`)\n    }\n\n    if (cid) {\n      pbl.Hash = cid\n    }\n  }\n\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name\n  }\n\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize\n  }\n\n  return pbl\n}\n\n/**\n * @param {any} node\n * @returns {PBNode}\n */\nexport function prepare (node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node }\n  }\n\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  /** @type {PBNode} */\n  const pbn = {}\n\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data)\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  }\n\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink)\n      pbn.Links.sort(linkComparator)\n    } else {\n      throw new TypeError('Invalid DAG-PB form')\n    }\n  } else {\n    pbn.Links = []\n  }\n\n  return pbn\n}\n\n/**\n * @param {PBNode} node\n */\nexport function validate (node) {\n  /*\n  type PBLink struct {\n    Hash optional Link\n    Name optional String\n    Tsize optional Int\n  }\n\n  type PBNode struct {\n    Links [PBLink]\n    Data optional Bytes\n  }\n  */\n  // @ts-ignore private property for TS\n  if (!node || typeof node !== 'object' || Array.isArray(node) || node instanceof Uint8Array || (node['/'] && node['/'] === node.bytes)) {\n    throw new TypeError('Invalid DAG-PB form')\n  }\n\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)')\n  }\n\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be bytes)')\n  }\n\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be a list)')\n  }\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i]\n    // @ts-ignore private property for TS\n    if (!link || typeof link !== 'object' || Array.isArray(link) || link instanceof Uint8Array || (link['/'] && link['/'] === link.bytes)) {\n      throw new TypeError('Invalid DAG-PB form (bad link)')\n    }\n\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link)')\n    }\n\n    if (link.Hash === undefined) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)')\n    }\n\n    // @ts-ignore private property for TS\n    if (link.Hash == null || !link.Hash['/'] || link.Hash['/'] !== link.Hash.bytes) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)')\n    }\n\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)')\n    }\n\n    if (link.Tsize !== undefined) {\n      if (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)')\n      }\n      if (link.Tsize < 0) {\n        throw new TypeError('Invalid DAG-PB form (link Tsize cannot be negative)')\n      }\n    }\n\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)')\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {PBLink[]} [links=[]]\n * @returns {PBNode}\n */\nexport function createNode (data, links = []) {\n  return prepare({ Data: data, Links: links })\n}\n\n/**\n * @param {string} name\n * @param {number} size\n * @param {CID} cid\n * @returns {PBLink}\n */\nexport function createLink (name, size, cid) {\n  return asLink({ Hash: cid, Name: name, Tsize: size })\n}\n","import { CID } from 'multiformats/cid'\nimport { decodeNode } from './pb-decode.js'\nimport { encodeNode } from './pb-encode.js'\nimport { prepare, validate, createNode, createLink } from './util.js'\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nexport const name = 'dag-pb'\nexport const code = 0x70\n\n/**\n * @param {PBNode} node\n * @returns {ByteView<PBNode>}\n */\nexport function encode (node) {\n  validate(node)\n\n  const pbn = {}\n  if (node.Links) {\n    pbn.Links = node.Links.map((l) => {\n      const link = {}\n      if (l.Hash) {\n        link.Hash = l.Hash.bytes // cid -> bytes\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n  if (node.Data) {\n    pbn.Data = node.Data\n  }\n\n  return encodeNode(pbn)\n}\n\n/**\n * @param {ByteView<PBNode>} bytes\n * @returns {PBNode}\n */\nexport function decode (bytes) {\n  const pbn = decodeNode(bytes)\n\n  const node = {}\n\n  if (pbn.Data) {\n    node.Data = pbn.Data\n  }\n\n  if (pbn.Links) {\n    node.Links = pbn.Links.map((l) => {\n      const link = {}\n      try {\n        link.Hash = CID.decode(l.Hash)\n      } catch (e) {}\n      if (!link.Hash) {\n        throw new Error('Invalid Hash field found in link, expected CID')\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n\n  return node\n}\n\nexport { prepare, validate, createNode, createLink }\n","import { Type } from '../token.js'\nimport { encodeCustom } from '../encode.js'\nimport { encodeErrPrefix } from '../common.js'\nimport { asU8A, fromString } from '../byte-utils.js'\n\n/**\n * @typedef {import('../../interface').EncodeOptions} EncodeOptions\n * @typedef {import('../token').Token} Token\n * @typedef {import('../bl').Bl} Bl\n */\n\nclass JSONEncoder extends Array {\n  constructor () {\n    super()\n    /** @type {{type:Type,elements:number}[]} */\n    this.inRecursive = []\n  }\n\n  /**\n   * @param {Bl} buf\n   */\n  prefix (buf) {\n    const recurs = this.inRecursive[this.inRecursive.length - 1]\n    if (recurs) {\n      if (recurs.type === Type.array) {\n        recurs.elements++\n        if (recurs.elements !== 1) { // >first\n          buf.push([44]) // ','\n        }\n      }\n      if (recurs.type === Type.map) {\n        recurs.elements++\n        if (recurs.elements !== 1) { // >first\n          if (recurs.elements % 2 === 1) { // key\n            buf.push([44]) // ','\n          } else {\n            buf.push([58]) // ':'\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} token\n   */\n  [Type.uint.major] (buf, token) {\n    this.prefix(buf)\n    const is = String(token.value)\n    const isa = []\n    for (let i = 0; i < is.length; i++) {\n      isa[i] = is.charCodeAt(i)\n    }\n    buf.push(isa)\n  }\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} token\n   */\n  [Type.negint.major] (buf, token) {\n    // @ts-ignore hack\n    this[Type.uint.major](buf, token)\n  }\n\n  /**\n   * @param {Bl} _buf\n   * @param {Token} _token\n   */\n  [Type.bytes.major] (_buf, _token) {\n    throw new Error(`${encodeErrPrefix} unsupported type: Uint8Array`)\n  }\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} token\n   */\n  [Type.string.major] (buf, token) {\n    this.prefix(buf)\n    // buf.push(34) // '\"'\n    // encodeUtf8(token.value, byts)\n    // buf.push(34) // '\"'\n    const byts = fromString(JSON.stringify(token.value))\n    buf.push(byts.length > 32 ? asU8A(byts) : byts)\n  }\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} _token\n   */\n  [Type.array.major] (buf, _token) {\n    this.prefix(buf)\n    this.inRecursive.push({ type: Type.array, elements: 0 })\n    buf.push([91]) // '['\n  }\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} _token\n   */\n  [Type.map.major] (buf, _token) {\n    this.prefix(buf)\n    this.inRecursive.push({ type: Type.map, elements: 0 })\n    buf.push([123]) // '{'\n  }\n\n  /**\n   * @param {Bl} _buf\n   * @param {Token} _token\n   */\n  [Type.tag.major] (_buf, _token) {}\n\n  /**\n   * @param {Bl} buf\n   * @param {Token} token\n   */\n  [Type.float.major] (buf, token) {\n    if (token.type.name === 'break') {\n      const recurs = this.inRecursive.pop()\n      if (recurs) {\n        if (recurs.type === Type.array) {\n          buf.push([93]) // ']'\n        } else if (recurs.type === Type.map) {\n          buf.push([125]) // '}'\n        /* c8 ignore next 3 */\n        } else {\n          throw new Error('Unexpected recursive type; this should not happen!')\n        }\n        return\n      }\n      /* c8 ignore next 2 */\n      throw new Error('Unexpected break; this should not happen!')\n    }\n    if (token.value === undefined) {\n      throw new Error(`${encodeErrPrefix} unsupported type: undefined`)\n    }\n\n    this.prefix(buf)\n    if (token.type.name === 'true') {\n      buf.push([116, 114, 117, 101]) // 'true'\n      return\n    } else if (token.type.name === 'false') {\n      buf.push([102, 97, 108, 115, 101]) // 'false'\n      return\n    } else if (token.type.name === 'null') {\n      buf.push([110, 117, 108, 108]) // 'null'\n      return\n    }\n\n    // number\n    const is = String(token.value)\n    const isa = []\n    let dp = false\n    for (let i = 0; i < is.length; i++) {\n      isa[i] = is.charCodeAt(i)\n      if (!dp && (isa[i] === 46 || isa[i] === 101 || isa[i] === 69)) { // '[.eE]'\n        dp = true\n      }\n    }\n    if (!dp) { // need a decimal point for floats\n      isa.push(46) // '.'\n      isa.push(48) // '0'\n    }\n    buf.push(isa)\n  }\n}\n\n// The below code is mostly taken and modified from https://github.com/feross/buffer\n// Licensed MIT. Copyright (c) Feross Aboukhadijeh\n// function encodeUtf8 (string, byts) {\n//   let codePoint\n//   const length = string.length\n//   let leadSurrogate = null\n\n//   for (let i = 0; i < length; ++i) {\n//     codePoint = string.charCodeAt(i)\n\n//     // is surrogate component\n//     if (codePoint > 0xd7ff && codePoint < 0xe000) {\n//       // last char was a lead\n//       if (!leadSurrogate) {\n//         // no lead yet\n//         /* c8 ignore next 9 */\n//         if (codePoint > 0xdbff) {\n//           // unexpected trail\n//           byts.push(0xef, 0xbf, 0xbd)\n//           continue\n//         } else if (i + 1 === length) {\n//           // unpaired lead\n//           byts.push(0xef, 0xbf, 0xbd)\n//           continue\n//         }\n\n//         // valid lead\n//         leadSurrogate = codePoint\n\n//         continue\n//       }\n\n//       // 2 leads in a row\n//       /* c8 ignore next 5 */\n//       if (codePoint < 0xdc00) {\n//         byts.push(0xef, 0xbf, 0xbd)\n//         leadSurrogate = codePoint\n//         continue\n//       }\n\n//       // valid surrogate pair\n//       codePoint = (leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00) + 0x10000\n//     /* c8 ignore next 4 */\n//     } else if (leadSurrogate) {\n//       // valid bmp char, but last char was a lead\n//       byts.push(0xef, 0xbf, 0xbd)\n//     }\n\n//     leadSurrogate = null\n\n//     // encode utf8\n//     if (codePoint < 0x80) {\n//       // special JSON escapes\n//       switch (codePoint) {\n//         case 8: // '\\b'\n//           byts.push(92, 98) // '\\\\b'\n//           continue\n//         case 9: // '\\t'\n//           byts.push(92, 116) // '\\\\t'\n//           continue\n//         case 10: // '\\n'\n//           byts.push(92, 110) // '\\\\n'\n//           continue\n//         case 12: // '\\f'\n//           byts.push(92, 102) // '\\\\f'\n//           continue\n//         case 13: // '\\r'\n//           byts.push(92, 114) // '\\\\r'\n//           continue\n//         case 34: // '\"'\n//           byts.push(92, 34) // '\\\\\"'\n//           continue\n//         case 92: // '\\\\'\n//           byts.push(92, 92) // '\\\\\\\\'\n//           continue\n//       }\n\n//       byts.push(codePoint)\n//     } else if (codePoint < 0x800) {\n//       /* c8 ignore next 1 */\n//       byts.push(\n//         codePoint >> 0x6 | 0xc0,\n//         codePoint & 0x3f | 0x80\n//       )\n//     } else if (codePoint < 0x10000) {\n//       /* c8 ignore next 1 */\n//       byts.push(\n//         codePoint >> 0xc | 0xe0,\n//         codePoint >> 0x6 & 0x3f | 0x80,\n//         codePoint & 0x3f | 0x80\n//       )\n//     /* c8 ignore next 9 */\n//     } else if (codePoint < 0x110000) {\n//       byts.push(\n//         codePoint >> 0x12 | 0xf0,\n//         codePoint >> 0xc & 0x3f | 0x80,\n//         codePoint >> 0x6 & 0x3f | 0x80,\n//         codePoint & 0x3f | 0x80\n//       )\n//     } else {\n//       /* c8 ignore next 2 */\n//       throw new Error('Invalid code point')\n//     }\n//   }\n// }\n\n/**\n * @param {(Token|Token[])[]} e1\n * @param {(Token|Token[])[]} e2\n * @returns {number}\n */\nfunction mapSorter (e1, e2) {\n  if (Array.isArray(e1[0]) || Array.isArray(e2[0])) {\n    throw new Error(`${encodeErrPrefix} complex map keys are not supported`)\n  }\n  const keyToken1 = e1[0]\n  const keyToken2 = e2[0]\n  if (keyToken1.type !== Type.string || keyToken2.type !== Type.string) {\n    throw new Error(`${encodeErrPrefix} non-string map keys are not supported`)\n  }\n  if (keyToken1 < keyToken2) {\n    return -1\n  }\n  if (keyToken1 > keyToken2) {\n    return 1\n  }\n  /* c8 ignore next 1 */\n  throw new Error(`${encodeErrPrefix} unexpected duplicate map keys, this is not supported`)\n}\n\nconst defaultEncodeOptions = { addBreakTokens: true, mapSorter }\n\n/**\n * @param {any} data\n * @param {EncodeOptions} [options]\n * @returns {Uint8Array}\n */\nfunction encode (data, options) {\n  options = Object.assign({}, defaultEncodeOptions, options)\n  return encodeCustom(data, new JSONEncoder(), options)\n}\n\nexport { encode }\n","import { decode as _decode, decodeFirst as _decodeFirst } from '../decode.js'\nimport { Token, Type } from '../token.js'\nimport { decodeCodePointsArray } from '../byte-utils.js'\nimport { decodeErrPrefix } from '../common.js'\n\n/**\n * @typedef {import('../../interface').DecodeOptions} DecodeOptions\n * @typedef {import('../../interface').DecodeTokenizer} DecodeTokenizer\n */\n\n/**\n * @implements {DecodeTokenizer}\n */\nclass Tokenizer {\n  /**\n   * @param {Uint8Array} data\n   * @param {DecodeOptions} options\n   */\n  constructor (data, options = {}) {\n    this._pos = 0\n    this.data = data\n    this.options = options\n    /** @type {string[]} */\n    this.modeStack = ['value']\n    this.lastToken = ''\n  }\n\n  pos () {\n    return this._pos\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  done () {\n    return this._pos >= this.data.length\n  }\n\n  /**\n   * @returns {number}\n   */\n  ch () {\n    return this.data[this._pos]\n  }\n\n  /**\n   * @returns {string}\n   */\n  currentMode () {\n    return this.modeStack[this.modeStack.length - 1]\n  }\n\n  skipWhitespace () {\n    let c = this.ch()\n    // @ts-ignore\n    while (c === 32 /* ' ' */ || c === 9 /* '\\t' */ || c === 13 /* '\\r' */ || c === 10 /* '\\n' */) {\n      c = this.data[++this._pos]\n    }\n  }\n\n  /**\n   * @param {number[]} str\n   */\n  expect (str) {\n    if (this.data.length - this._pos < str.length) {\n      throw new Error(`${decodeErrPrefix} unexpected end of input at position ${this._pos}`)\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this._pos++] !== str[i]) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}, expected to find '${String.fromCharCode(...str)}'`)\n      }\n    }\n  }\n\n  parseNumber () {\n    const startPos = this._pos\n    let negative = false\n    let float = false\n\n    /**\n     * @param {number[]} chars\n     */\n    const swallow = (chars) => {\n      while (!this.done()) {\n        const ch = this.ch()\n        if (chars.includes(ch)) {\n          this._pos++\n        } else {\n          break\n        }\n      }\n    }\n\n    // lead\n    if (this.ch() === 45) { // '-'\n      negative = true\n      this._pos++\n    }\n    if (this.ch() === 48) { // '0'\n      this._pos++\n      if (this.ch() === 46) { // '.'\n        this._pos++\n        float = true\n      } else {\n        return new Token(Type.uint, 0, this._pos - startPos)\n      }\n    }\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    if (negative && this._pos === startPos + 1) {\n      throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`)\n    }\n    if (!this.done() && this.ch() === 46) { // '.'\n      if (float) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`)\n      }\n      float = true\n      this._pos++\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    }\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) { // '[eE]'\n      float = true\n      this._pos++\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) { // '+', '-'\n        this._pos++\n      }\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    }\n    // @ts-ignore\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this._pos))\n    const num = parseFloat(numStr)\n    if (float) {\n      return new Token(Type.float, num, this._pos - startPos)\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this._pos - startPos)\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this._pos - startPos)\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseString () {\n    /* c8 ignore next 4 */\n    if (this.ch() !== 34) { // '\"'\n      // this would be a programming error\n      throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}; this shouldn't happen`)\n    }\n    this._pos++\n\n    // check for simple fast-path, all printable ascii, no escapes\n    // >0x10000 elements may fail fn.apply() (http://stackoverflow.com/a/22747272/680742)\n    for (let i = this._pos, l = 0; i < this.data.length && l < 0x10000; i++, l++) {\n      const ch = this.data[i]\n      if (ch === 92 || ch < 32 || ch >= 128) { // '\\', ' ', control-chars or non-trivial\n        break\n      }\n      if (ch === 34) { // '\"'\n        // @ts-ignore\n        const str = String.fromCharCode.apply(null, this.data.subarray(this._pos, i))\n        this._pos = i + 1\n        return new Token(Type.string, str, l)\n      }\n    }\n\n    const startPos = this._pos\n    const chars = []\n\n    const readu4 = () => {\n      if (this._pos + 4 >= this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected end of unicode escape sequence at position ${this._pos}`)\n      }\n      let u4 = 0\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch()\n        if (ch >= 48 && ch <= 57) { // '0' && '9'\n          ch -= 48\n        } else if (ch >= 97 && ch <= 102) { // 'a' && 'f'\n          ch = ch - 97 + 10\n        } else if (ch >= 65 && ch <= 70) { // 'A' && 'F'\n          ch = ch - 65 + 10\n        } else {\n          throw new Error(`${decodeErrPrefix} unexpected unicode escape character at position ${this._pos}`)\n        }\n        u4 = u4 * 16 + ch\n        this._pos++\n      }\n      return u4\n    }\n\n    // mostly taken from feross/buffer and adjusted to fit\n    const readUtf8Char = () => {\n      const firstByte = this.ch()\n      let codePoint = null\n      /* c8 ignore next 1 */\n      let bytesPerSequence = (firstByte > 0xef) ? 4 : (firstByte > 0xdf) ? 3 : (firstByte > 0xbf) ? 2 : 1\n\n      if (this._pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected unicode sequence at position ${this._pos}`)\n      }\n\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        /* c8 ignore next 6 */\n        // this case is dealt with by the caller function\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = this.data[this._pos + 1]\n          if ((secondByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1f) << 0x6 | (secondByte & 0x3f)\n            if (tempCodePoint > 0x7f) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = this.data[this._pos + 1]\n          thirdByte = this.data[this._pos + 2]\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | (thirdByte & 0x3f)\n            /* c8 ignore next 3 */\n            if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = this.data[this._pos + 1]\n          thirdByte = this.data[this._pos + 2]\n          fourthByte = this.data[this._pos + 3]\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | (fourthByte & 0x3f)\n            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n\n      /* c8 ignore next 5 */\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xfffd\n        bytesPerSequence = 1\n      } else if (codePoint > 0xffff) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000\n        chars.push(codePoint >>> 10 & 0x3ff | 0xd800)\n        codePoint = 0xdc00 | codePoint & 0x3ff\n      }\n\n      chars.push(codePoint)\n      this._pos += bytesPerSequence\n    }\n\n    // TODO: could take the approach of a quick first scan for special chars like encoding/json/decode.go#unquoteBytes\n    // and converting all of the ascii chars from the base array in bulk\n    while (!this.done()) {\n      const ch = this.ch()\n      let ch1\n      switch (ch) {\n        case 92: // '\\'\n          this._pos++\n          if (this.done()) {\n            throw new Error(`${decodeErrPrefix} unexpected string termination at position ${this._pos}`)\n          }\n          ch1 = this.ch()\n          this._pos++\n          switch (ch1) {\n            case 34: // '\"'\n            case 39: // '\\''\n            case 92: // '\\'\n            case 47: // '/'\n              chars.push(ch1)\n              break\n            case 98: // 'b'\n              chars.push(8)\n              break\n            case 116: // 't'\n              chars.push(9)\n              break\n            case 110: // 'n'\n              chars.push(10)\n              break\n            case 102: // 'f'\n              chars.push(12)\n              break\n            case 114: // 'r'\n              chars.push(13)\n              break\n            case 117: // 'u'\n              chars.push(readu4())\n              break\n            default:\n              throw new Error(`${decodeErrPrefix} unexpected string escape character at position ${this._pos}`)\n          }\n          break\n        case 34: // '\"'\n          this._pos++\n          return new Token(Type.string, decodeCodePointsArray(chars), this._pos - startPos)\n        default:\n          if (ch < 32) { // ' '\n            throw new Error(`${decodeErrPrefix} invalid control character at position ${this._pos}`)\n          } else if (ch < 0x80) {\n            chars.push(ch)\n            this._pos++\n          } else {\n            readUtf8Char()\n          }\n      }\n    }\n\n    throw new Error(`${decodeErrPrefix} unexpected end of string at position ${this._pos}`)\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseValue () {\n    switch (this.ch()) {\n      case 123: // '{'\n        this.modeStack.push('obj-start')\n        this._pos++\n        return new Token(Type.map, Infinity, 1)\n      case 91: // '['\n        this.modeStack.push('array-start')\n        this._pos++\n        return new Token(Type.array, Infinity, 1)\n      case 34: { // '\"'\n        return this.parseString()\n      }\n      case 110: // 'n' / null\n        this.expect([110, 117, 108, 108]) // 'null'\n        return new Token(Type.null, null, 4)\n      case 102: // 'f' / // false\n        this.expect([102, 97, 108, 115, 101]) // 'false'\n        return new Token(Type.false, false, 5)\n      case 116: // 't' / // true\n        this.expect([116, 114, 117, 101]) // 'true'\n        return new Token(Type.true, true, 4)\n      case 45: // '-'\n      case 48: // '0'\n      case 49: // '1'\n      case 50: // '2'\n      case 51: // '3'\n      case 52: // '4'\n      case 53: // '5'\n      case 54: // '6'\n      case 55: // '7'\n      case 56: // '8'\n      case 57: // '9'\n        return this.parseNumber()\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}`)\n    }\n  }\n\n  /**\n   * @returns {Token}\n   */\n  next () {\n    this.skipWhitespace()\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop()\n        return this.parseValue()\n      case 'array-value': {\n        this.modeStack.pop()\n        if (this.ch() === 93) { // ']'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        if (this.ch() !== 44) { // ','\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.modeStack.push('array-value')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      case 'array-start': {\n        this.modeStack.pop()\n        if (this.ch() === 93) { // ']'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        this.modeStack.push('array-value')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      // @ts-ignore\n      case 'obj-key':\n        if (this.ch() === 125) { // '}'\n          this.modeStack.pop()\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        if (this.ch() !== 44) { // ','\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.skipWhitespace()\n      case 'obj-start': { // eslint-disable-line no-fallthrough\n        this.modeStack.pop()\n        if (this.ch() === 125) { // '}'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        const token = this.parseString()\n        this.skipWhitespace()\n        if (this.ch() !== 58) { // ':'\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.modeStack.push('obj-value')\n        return token\n      }\n      case 'obj-value': {\n        this.modeStack.pop()\n        this.modeStack.push('obj-key')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      /* c8 ignore next 2 */\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected parse state at position ${this._pos}; this shouldn't happen`)\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {any}\n */\nfunction decode (data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options)\n  return _decode(data, options)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {[any, Uint8Array]}\n */\nfunction decodeFirst (data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options)\n  return _decodeFirst(data, options)\n}\n\nexport { decode, decodeFirst, Tokenizer }\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","/* eslint max-depth: [\"error\", 7] */\nimport { Token, Type } from 'cborg'\nimport * as cborgJson from 'cborg/json'\nimport { CID } from 'multiformats'\nimport { base64 } from 'multiformats/bases/base64'\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n/**\n * @template T\n * @typedef {import('multiformats').ToString<T>} ToString\n */\n/**\n * @typedef {import('cborg/interface').DecodeTokenizer} DecodeTokenizer\n */\n\n/**\n * cidEncoder will receive all Objects during encode, it needs to filter out\n * anything that's not a CID and return `null` for that so it's encoded as\n * normal. Encoding a CID means replacing it with a `{\"/\":\"<CidString>}`\n * object as per the DAG-JSON spec.\n *\n * @param {any} obj\n * @returns {Token[]|null}\n */\nfunction cidEncoder (obj) {\n  if (obj.asCID !== obj && obj['/'] !== obj.bytes) {\n    return null // any other kind of object\n  }\n  const cid = CID.asCID(obj)\n  /* c8 ignore next 4 */\n  // very unlikely case, and it'll probably throw a recursion error in cborg\n  if (!cid) {\n    return null\n  }\n  const cidString = cid.toString()\n\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1), // key\n    new Token(Type.string, cidString, cidString.length), // value\n    new Token(Type.break, undefined, 1)\n  ]\n}\n\n/**\n * bytesEncoder will receive all Uint8Arrays (and friends) during encode, it\n * needs to replace it with a `{\"/\":{\"bytes\":\"Base64ByteString\"}}` object as\n * per the DAG-JSON spec.\n *\n * @param {Uint8Array} bytes\n * @returns {Token[]|null}\n */\nfunction bytesEncoder (bytes) {\n  const bytesString = base64.encode(bytes).slice(1) // no mbase prefix\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1), // key\n    new Token(Type.map, Infinity, 1), // value\n    new Token(Type.string, 'bytes', 5), // inner key\n    new Token(Type.string, bytesString, bytesString.length), // inner value\n    new Token(Type.break, undefined, 1),\n    new Token(Type.break, undefined, 1)\n  ]\n}\n\n/**\n * taBytesEncoder wraps bytesEncoder() but for the more exotic typed arrays so\n * that we access the underlying ArrayBuffer data\n *\n * @param {Int8Array|Uint16Array|Int16Array|Uint32Array|Int32Array|Float32Array|Float64Array|Uint8ClampedArray|BigInt64Array|BigUint64Array} obj\n * @returns {Token[]|null}\n */\nfunction taBytesEncoder (obj) {\n  return bytesEncoder(new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength))\n}\n\n/**\n * abBytesEncoder wraps bytesEncoder() but for plain ArrayBuffers\n *\n * @param {ArrayBuffer} ab\n * @returns {Token[]|null}\n */\nfunction abBytesEncoder (ab) {\n  return bytesEncoder(new Uint8Array(ab))\n}\n\n// eslint-disable-next-line jsdoc/require-returns-check\n/**\n * Intercept all `undefined` values from an object walk and reject the entire\n * object if we find one.\n *\n * @returns {null}\n */\nfunction undefinedEncoder () {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded')\n}\n\n/**\n * Intercept all `number` values from an object walk and reject the entire\n * object if we find something that doesn't fit the IPLD data model (NaN &\n * Infinity).\n *\n * @param {number} num\n * @returns {null}\n */\nfunction numberEncoder (num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded')\n  }\n  return null // process with standard number encoder\n}\n\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Buffer: bytesEncoder,\n    Uint8Array: bytesEncoder,\n    Int8Array: taBytesEncoder,\n    Uint16Array: taBytesEncoder,\n    Int16Array: taBytesEncoder,\n    Uint32Array: taBytesEncoder,\n    Int32Array: taBytesEncoder,\n    Float32Array: taBytesEncoder,\n    Float64Array: taBytesEncoder,\n    Uint8ClampedArray: taBytesEncoder,\n    BigInt64Array: taBytesEncoder,\n    BigUint64Array: taBytesEncoder,\n    DataView: taBytesEncoder,\n    ArrayBuffer: abBytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n}\n\n/**\n * @implements {DecodeTokenizer}\n */\nclass DagJsonTokenizer extends cborgJson.Tokenizer {\n  /**\n   * @param {Uint8Array} data\n   * @param {object} [options]\n   */\n  constructor (data, options) {\n    super(data, options)\n    /** @type {Token[]} */\n    this.tokenBuffer = []\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  done () {\n    return this.tokenBuffer.length === 0 && super.done()\n  }\n\n  /**\n   * @returns {Token}\n   */\n  _next () {\n    if (this.tokenBuffer.length > 0) {\n      // @ts-ignore https://github.com/Microsoft/TypeScript/issues/30406\n      return this.tokenBuffer.pop()\n    }\n    return super.next()\n  }\n\n  /**\n   * Implements rules outlined in https://github.com/ipld/specs/pull/356\n   *\n   * @returns {Token}\n   */\n  next () {\n    const token = this._next()\n\n    if (token.type === Type.map) {\n      const keyToken = this._next()\n      if (keyToken.type === Type.string && keyToken.value === '/') {\n        const valueToken = this._next()\n        if (valueToken.type === Type.string) { // *must* be a CID\n          const breakToken = this._next() // swallow the end-of-map token\n          if (breakToken.type !== Type.break) {\n            throw new Error('Invalid encoded CID form')\n          }\n          this.tokenBuffer.push(valueToken) // CID.parse will pick this up after our tag token\n          return new Token(Type.tag, 42, 0)\n        }\n        if (valueToken.type === Type.map) {\n          const innerKeyToken = this._next()\n          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next()\n            if (innerValueToken.type === Type.string) { // *must* be Bytes\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next() // swallow two end-of-map tokens\n                if (breakToken.type !== Type.break) {\n                  throw new Error('Invalid encoded Bytes form')\n                }\n              }\n              const bytes = base64.decode(`m${innerValueToken.value}`)\n              return new Token(Type.bytes, bytes, innerValueToken.value.length)\n            }\n            this.tokenBuffer.push(innerValueToken) // bail\n          }\n          this.tokenBuffer.push(innerKeyToken) // bail\n        }\n        this.tokenBuffer.push(valueToken) // bail\n      }\n      this.tokenBuffer.push(keyToken) // bail\n    }\n    return token\n  }\n}\n\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true, // this will lead to BigInt for ints outside of\n  // safe-integer range, which may surprise users\n  strict: true,\n  useMaps: false,\n  rejectDuplicateMapKeys: true,\n  /** @type {import('cborg').TagDecoder[]} */\n  tags: []\n}\n\n// we're going to get TAG(42)STRING(\"bafy...\") from the tokenizer so we only need\n// to deal with the STRING(\"bafy...\") at this point\ndecodeOptions.tags[42] = CID.parse\n\nexport const name = 'dag-json'\nexport const code = 0x0129\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => cborgJson.encode(node, encodeOptions)\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => {\n  // the tokenizer is stateful so we need a single instance of it\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) })\n  return cborgJson.decode(data, options)\n}\n\n/**\n * @template T\n * @param {T} node\n * @returns {ToString<T>}\n */\nexport const format = (node) => utf8Decoder.decode(encode(node))\nexport { format as stringify }\nconst utf8Decoder = new TextDecoder()\n\n/**\n * @template T\n * @param {ToString<T>} data\n * @returns {T}\n */\nexport const parse = (data) => decode(utf8Encoder.encode(data))\nconst utf8Encoder = new TextEncoder()\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { base64url } from 'multiformats/bases/base64';\nexport function toBase64url(b) {\n    return base64url.encode(b).slice(1);\n}\nexport function fromBase64url(s) {\n    return base64url.decode(`u${s}`);\n}\n//# sourceMappingURL=utils.js.map","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import { fromBase64url, toBase64url } from './utils.js';\nimport { CID } from 'multiformats/cid';\nexport function fromSplit(split) {\n    const [protectedHeader, payload, signature] = split;\n    return {\n        payload,\n        signatures: [{ protected: protectedHeader, signature }],\n        link: CID.decode(fromBase64url(payload)),\n    };\n}\nfunction encodeSignature(signature) {\n    const encoded = {\n        signature: fromBase64url(signature.signature),\n    };\n    if (signature.header)\n        encoded.header = signature.header;\n    if (signature.protected)\n        encoded.protected = fromBase64url(signature.protected);\n    return encoded;\n}\nexport function encode(jws) {\n    const payload = fromBase64url(jws.payload);\n    try {\n        CID.decode(payload);\n    }\n    catch (e) {\n        throw new Error('Not a valid DagJWS');\n    }\n    return {\n        payload,\n        signatures: jws.signatures.map(encodeSignature),\n    };\n}\nfunction decodeSignature(encoded) {\n    const sign = {\n        signature: toBase64url(encoded.signature),\n    };\n    if (encoded.header)\n        sign.header = encoded.header;\n    if (encoded.protected)\n        sign.protected = toBase64url(encoded.protected);\n    return sign;\n}\nexport function decode(encoded) {\n    const decoded = {\n        payload: toBase64url(encoded.payload),\n        signatures: encoded.signatures.map(decodeSignature),\n    };\n    decoded.link = CID.decode(new Uint8Array(encoded.payload));\n    return decoded;\n}\n//# sourceMappingURL=signing.js.map","import { fromBase64url, toBase64url } from './utils.js';\nexport function fromSplit(split) {\n    const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;\n    const jwe = {\n        ciphertext,\n        iv,\n        protected: protectedHeader,\n        tag,\n    };\n    if (encrypted_key)\n        jwe.recipients = [{ encrypted_key }];\n    return jwe;\n}\nfunction encodeRecipient(recipient) {\n    const encRec = {};\n    if (recipient.encrypted_key)\n        encRec.encrypted_key = fromBase64url(recipient.encrypted_key);\n    if (recipient.header)\n        encRec.header = recipient.header;\n    return encRec;\n}\nexport function encode(jwe) {\n    const encJwe = {\n        ciphertext: fromBase64url(jwe.ciphertext),\n        protected: fromBase64url(jwe.protected),\n        iv: fromBase64url(jwe.iv),\n        tag: fromBase64url(jwe.tag),\n    };\n    if (jwe.aad)\n        encJwe.aad = fromBase64url(jwe.aad);\n    if (jwe.recipients)\n        encJwe.recipients = jwe.recipients.map(encodeRecipient);\n    if (jwe.unprotected)\n        encJwe.unprotected = jwe.unprotected;\n    return encJwe;\n}\nfunction decodeRecipient(encoded) {\n    const recipient = {};\n    if (encoded.encrypted_key)\n        recipient.encrypted_key = toBase64url(encoded.encrypted_key);\n    if (encoded.header)\n        recipient.header = encoded.header;\n    return recipient;\n}\nexport function decode(encoded) {\n    const jwe = {\n        ciphertext: toBase64url(encoded.ciphertext),\n        protected: toBase64url(encoded.protected),\n        iv: toBase64url(encoded.iv),\n        tag: toBase64url(encoded.tag),\n    };\n    if (encoded.aad)\n        jwe.aad = toBase64url(encoded.aad);\n    if (encoded.recipients)\n        jwe.recipients = encoded.recipients.map(decodeRecipient);\n    if (encoded.unprotected)\n        jwe.unprotected = encoded.unprotected;\n    return jwe;\n}\n//# sourceMappingURL=encryption.js.map","import * as signing from './signing.js';\nimport * as encryption from './encryption.js';\nimport * as cbor from '@ipld/dag-cbor';\nexport const name = 'dag-jose';\nexport const code = 133;\nfunction isDagJWS(jose) {\n    return ('payload' in jose &&\n        typeof jose.payload === 'string' &&\n        'signatures' in jose &&\n        Array.isArray(jose.signatures));\n}\nfunction isEncodedJWS(jose) {\n    return ('payload' in jose &&\n        jose.payload instanceof Uint8Array &&\n        'signatures' in jose &&\n        Array.isArray(jose.signatures));\n}\nfunction isEncodedJWE(jose) {\n    return ('ciphertext' in jose &&\n        jose.ciphertext instanceof Uint8Array &&\n        'iv' in jose &&\n        jose.iv instanceof Uint8Array &&\n        'protected' in jose &&\n        jose.protected instanceof Uint8Array &&\n        'tag' in jose &&\n        jose.tag instanceof Uint8Array);\n}\nfunction isDagJWE(jose) {\n    return ('ciphertext' in jose &&\n        typeof jose.ciphertext === 'string' &&\n        'iv' in jose &&\n        typeof jose.iv === 'string' &&\n        'protected' in jose &&\n        typeof jose.protected === 'string' &&\n        'tag' in jose &&\n        typeof jose.tag === 'string');\n}\nexport function toGeneral(jose) {\n    if (typeof jose === 'string') {\n        const split = jose.split('.');\n        if (split.length === 3) {\n            return signing.fromSplit(split);\n        }\n        else if (split.length === 5) {\n            return encryption.fromSplit(split);\n        }\n        throw new Error('Not a valid JOSE string');\n    }\n    if (isDagJWS(jose) || isDagJWE(jose)) {\n        return jose;\n    }\n    throw new Error('Not a valid unencoded JOSE object');\n}\nexport function encode(obj) {\n    if (typeof obj === 'string') {\n        obj = toGeneral(obj);\n    }\n    let encodedJose;\n    if (isDagJWS(obj)) {\n        encodedJose = signing.encode(obj);\n    }\n    else if (isDagJWE(obj)) {\n        encodedJose = encryption.encode(obj);\n    }\n    else {\n        throw new Error('Not a valid JOSE object');\n    }\n    return new Uint8Array(cbor.encode(encodedJose));\n}\nexport function decode(data) {\n    let encoded;\n    try {\n        encoded = cbor.decode(data);\n    }\n    catch (e) {\n        throw new Error('Not a valid DAG-JOSE object');\n    }\n    if (isEncodedJWS(encoded)) {\n        return signing.decode(encoded);\n    }\n    else if (isEncodedJWE(encoded)) {\n        return encryption.decode(encoded);\n    }\n    else {\n        throw new Error('Not a valid DAG-JOSE object');\n    }\n}\n//# sourceMappingURL=index.js.map","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","\nexport function initAssets () {}\n","\nexport class NotInitializedError extends Error {\n  constructor (message = 'not initialized') {\n    super(message)\n    this.name = 'NotInitializedError'\n    this.code = NotInitializedError.code\n  }\n}\nNotInitializedError.code = 'ERR_NOT_INITIALIZED'\n\nexport class AlreadyInitializingError extends Error {\n  constructor (message = 'cannot initialize an initializing node') {\n    super(message)\n    this.name = 'AlreadyInitializingError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializingError.code = 'ERR_ALREADY_INITIALIZING'\n\nexport class AlreadyInitializedError extends Error {\n  constructor (message = 'cannot re-initialize an initialized node') {\n    super(message)\n    this.name = 'AlreadyInitializedError'\n    this.code = AlreadyInitializedError.code\n  }\n}\nAlreadyInitializedError.code = 'ERR_ALREADY_INITIALIZED'\n\nexport class NotStartedError extends Error {\n  constructor (message = 'not started') {\n    super(message)\n    this.name = 'NotStartedError'\n    this.code = NotStartedError.code\n  }\n}\nNotStartedError.code = 'ERR_NOT_STARTED'\n\nexport class AlreadyStartingError extends Error {\n  constructor (message = 'cannot start, already startin') {\n    super(message)\n    this.name = 'AlreadyStartingError'\n    this.code = AlreadyStartingError.code\n  }\n}\nAlreadyStartingError.code = 'ERR_ALREADY_STARTING'\n\nexport class AlreadyStartedError extends Error {\n  constructor (message = 'cannot start, already started') {\n    super(message)\n    this.name = 'AlreadyStartedError'\n    this.code = AlreadyStartedError.code\n  }\n}\nAlreadyStartedError.code = 'ERR_ALREADY_STARTED'\n\nexport class NotEnabledError extends Error {\n  constructor (message = 'not enabled') {\n    super(message)\n    this.name = 'NotEnabledError'\n    this.code = NotEnabledError.code\n  }\n}\nNotEnabledError.code = 'ERR_NOT_ENABLED'\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\nexport class Parser {\n    index = 0;\n    input = \"\";\n    new(input) {\n        this.index = 0;\n        this.input = input;\n        return this;\n    }\n    /** Run a parser, and restore the pre-parse state if it fails. */\n    readAtomically(fn) {\n        const index = this.index;\n        const result = fn();\n        if (result === undefined) {\n            this.index = index;\n        }\n        return result;\n    }\n    /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n    parseWith(fn) {\n        const result = fn();\n        if (this.index !== this.input.length) {\n            return undefined;\n        }\n        return result;\n    }\n    /** Peek the next character from the input */\n    peekChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index];\n    }\n    /** Read the next character from the input */\n    readChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index++];\n    }\n    /** Read the next character from the input if it matches the target. */\n    readGivenChar(target) {\n        return this.readAtomically(() => {\n            const char = this.readChar();\n            if (char !== target) {\n                return undefined;\n            }\n            return char;\n        });\n    }\n    /**\n     * Helper for reading separators in an indexed loop. Reads the separator\n     * character iff index > 0, then runs the parser. When used in a loop,\n     * the separator character will only be read on index > 0 (see\n     * readIPv4Addr for an example)\n     */\n    readSeparator(sep, index, inner) {\n        return this.readAtomically(() => {\n            if (index > 0) {\n                if (this.readGivenChar(sep) === undefined) {\n                    return undefined;\n                }\n            }\n            return inner();\n        });\n    }\n    /**\n     * Read a number off the front of the input in the given radix, stopping\n     * at the first non-digit character or eof. Fails if the number has more\n     * digits than max_digits or if there is no number.\n     */\n    readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n        return this.readAtomically(() => {\n            let result = 0;\n            let digitCount = 0;\n            const leadingChar = this.peekChar();\n            if (leadingChar === undefined) {\n                return undefined;\n            }\n            const hasLeadingZero = leadingChar === \"0\";\n            const maxValue = 2 ** (8 * maxBytes) - 1;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const digit = this.readAtomically(() => {\n                    const char = this.readChar();\n                    if (char === undefined) {\n                        return undefined;\n                    }\n                    const num = Number.parseInt(char, radix);\n                    if (Number.isNaN(num)) {\n                        return undefined;\n                    }\n                    return num;\n                });\n                if (digit === undefined) {\n                    break;\n                }\n                result *= radix;\n                result += digit;\n                if (result > maxValue) {\n                    return undefined;\n                }\n                digitCount += 1;\n                if (maxDigits !== undefined) {\n                    if (digitCount > maxDigits) {\n                        return undefined;\n                    }\n                }\n            }\n            if (digitCount === 0) {\n                return undefined;\n            }\n            else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n                return undefined;\n            }\n            else {\n                return result;\n            }\n        });\n    }\n    /** Read an IPv4 address. */\n    readIPv4Addr() {\n        return this.readAtomically(() => {\n            const out = new Uint8Array(4);\n            for (let i = 0; i < out.length; i++) {\n                const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n                if (ix === undefined) {\n                    return undefined;\n                }\n                out[i] = ix;\n            }\n            return out;\n        });\n    }\n    /** Read an IPv6 Address. */\n    readIPv6Addr() {\n        /**\n         * Read a chunk of an IPv6 address into `groups`. Returns the number\n         * of groups read, along with a bool indicating if an embedded\n         * trailing IPv4 address was read. Specifically, read a series of\n         * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n         * trailing embedded IPv4 address.\n         */\n        const readGroups = (groups) => {\n            for (let i = 0; i < groups.length / 2; i++) {\n                const ix = i * 2;\n                // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n                if (i < groups.length - 3) {\n                    const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n                    if (ipv4 !== undefined) {\n                        groups[ix] = ipv4[0];\n                        groups[ix + 1] = ipv4[1];\n                        groups[ix + 2] = ipv4[2];\n                        groups[ix + 3] = ipv4[3];\n                        return [ix + 4, true];\n                    }\n                }\n                const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n                if (group === undefined) {\n                    return [ix, false];\n                }\n                groups[ix] = group >> 8;\n                groups[ix + 1] = group & 255;\n            }\n            return [groups.length, false];\n        };\n        return this.readAtomically(() => {\n            // Read the front part of the address; either the whole thing, or up to the first ::\n            const head = new Uint8Array(16);\n            const [headSize, headIp4] = readGroups(head);\n            if (headSize === 16) {\n                return head;\n            }\n            // IPv4 part is not allowed before `::`\n            if (headIp4) {\n                return undefined;\n            }\n            // Read `::` if previous code parsed less than 8 groups.\n            // `::` indicates one or more groups of 16 bits of zeros.\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            // Read the back part of the address. The :: must contain at least one\n            // set of zeroes, so our max length is 7.\n            const tail = new Uint8Array(14);\n            const limit = 16 - (headSize + 2);\n            const [tailSize] = readGroups(tail.subarray(0, limit));\n            // Concat the head and tail of the IP address\n            head.set(tail.subarray(0, tailSize), 16 - tailSize);\n            return head;\n        });\n    }\n    /** Read an IP Address, either IPv4 or IPv6. */\n    readIPAddr() {\n        return this.readIPv4Addr() ?? this.readIPv6Addr();\n    }\n}\n//# sourceMappingURL=parser.js.map","import { Parser } from \"./parser.js\";\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\nconst parser = new Parser();\n/** Parse `input` into IPv4 bytes. */\nexport function parseIPv4(input) {\n    if (input.length > MAX_IPV4_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv4Addr());\n}\n/** Parse `input` into IPv6 bytes. */\nexport function parseIPv6(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv6Addr());\n}\n/** Parse `input` into IPv4 or IPv6 bytes. */\nexport function parseIP(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPAddr());\n}\n//# sourceMappingURL=parse.js.map","import { parseIP, parseIPv4, parseIPv6 } from \"./parse.js\";\n/** Check if `input` is IPv4. */\nexport function isIPv4(input) {\n    return Boolean(parseIPv4(input));\n}\n/** Check if `input` is IPv6. */\nexport function isIPv6(input) {\n    return Boolean(parseIPv6(input));\n}\n/** Check if `input` is IPv4 or IPv6. */\nexport function isIP(input) {\n    return Boolean(parseIP(input));\n}\n/**\n * @returns `6` if `input` is IPv6, `4` if `input` is IPv4, or `undefined` if `input` is neither.\n */\nexport function ipVersion(input) {\n    if (isIPv4(input)) {\n        return 4;\n    }\n    else if (isIPv6(input)) {\n        return 6;\n    }\n    else {\n        return undefined;\n    }\n}\n//# sourceMappingURL=is-ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc'],\n    [281, 0, 'webrtc-w3c'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n    code;\n    type;\n    constructor(message = 'The operation was aborted') {\n        super(message);\n        this.code = AbortError.code;\n        this.type = AbortError.type;\n    }\n    static code = 'ABORT_ERR';\n    static type = 'aborted';\n}\nexport class CodeError extends Error {\n    code;\n    props;\n    constructor(message, code, props) {\n        super(message);\n        this.code = code;\n        this.name = props?.name ?? 'CodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\nexport class AggregateCodeError extends AggregateError {\n    code;\n    props;\n    constructor(errors, message, code, props) {\n        super(errors, message);\n        this.code = code;\n        this.name = props?.name ?? 'AggregateCodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\nexport class UnexpectedPeerError extends Error {\n    code;\n    constructor(message = 'Unexpected Peer') {\n        super(message);\n        this.code = UnexpectedPeerError.code;\n    }\n    static code = 'ERR_UNEXPECTED_PEER';\n}\nexport class InvalidCryptoExchangeError extends Error {\n    code;\n    constructor(message = 'Invalid crypto exchange') {\n        super(message);\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_EXCHANGE';\n}\nexport class InvalidCryptoTransmissionError extends Error {\n    code;\n    constructor(message = 'Invalid crypto transmission') {\n        super(message);\n        this.code = InvalidCryptoTransmissionError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_TRANSMISSION';\n}\n// Error codes\nexport const ERR_TIMEOUT = 'ERR_TIMEOUT';\nexport const ERR_INVALID_PARAMETERS = 'ERR_INVALID_PARAMETERS';\nexport const ERR_NOT_FOUND = 'ERR_NOT_FOUND';\nexport const ERR_INVALID_MESSAGE = 'ERR_INVALID_MESSAGE';\n//# sourceMappingURL=errors.js.map","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base10 = baseX({\n    prefix: '9',\n    name: 'base10',\n    alphabet: '0123456789'\n});\n//# sourceMappingURL=base10.js.map","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n    prefix: 'f',\n    name: 'base16',\n    alphabet: '0123456789abcdef',\n    bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n    prefix: 'F',\n    name: 'base16upper',\n    alphabet: '0123456789ABCDEF',\n    bitsPerChar: 4\n});\n//# sourceMappingURL=base16.js.map","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n    prefix: '0',\n    name: 'base2',\n    alphabet: '01',\n    bitsPerChar: 1\n});\n//# sourceMappingURL=base2.js.map","import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = (alphabet.reduce((p, c, i) => { p[i] = c; return p; }, ([])));\nconst alphabetCharsToBytes = (alphabet.reduce((p, c, i) => { p[c.codePointAt(0)] = i; return p; }, ([])));\nfunction encode(data) {\n    return data.reduce((p, c) => {\n        p += alphabetBytesToChars[c];\n        return p;\n    }, '');\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str) {\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(`Non-base256emoji character: ${char}`);\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n    prefix: '🚀',\n    name: 'base256emoji',\n    encode,\n    decode\n});\n//# sourceMappingURL=base256emoji.js.map","import { baseX } from './base.js';\nexport const base36 = baseX({\n    prefix: 'k',\n    name: 'base36',\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n    prefix: 'K',\n    name: 'base36upper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base36.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n    prefix: '7',\n    name: 'base8',\n    alphabet: '01234567',\n    bitsPerChar: 3\n});\n//# sourceMappingURL=base8.js.map","import { fromString, toString } from '../bytes.js';\nimport { from } from './base.js';\nexport const identity = from({\n    prefix: '\\x00',\n    name: 'identity',\n    encode: (buf) => toString(buf),\n    decode: (str) => fromString(str)\n});\n//# sourceMappingURL=identity.js.map","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 0x0200;\nexport function encode(node) {\n    return textEncoder.encode(JSON.stringify(node));\n}\nexport function decode(data) {\n    return JSON.parse(textDecoder.decode(data));\n}\n//# sourceMappingURL=json.js.map","import * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base2 from './bases/base2.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base8 from './bases/base8.js';\nimport * as identityBase from './bases/identity.js';\nimport * as json from './codecs/json.js';\nimport * as raw from './codecs/raw.js';\nimport * as identity from './hashes/identity.js';\nimport * as sha2 from './hashes/sha2.js';\nimport { CID, hasher, digest, varint, bytes } from './index.js';\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji };\nexport const hashes = { ...sha2, ...identity };\nexport const codecs = { raw, json };\nexport { CID, hasher, digest, varint, bytes };\n//# sourceMappingURL=basics.js.map","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\n/** Most significant bit of a byte */\nconst MSB = 0x80;\n/** Rest of the bits in a byte */\nconst REST = 0x7f;\nexport function encodingLength(value) {\n    if (value < N1) {\n        return 1;\n    }\n    if (value < N2) {\n        return 2;\n    }\n    if (value < N3) {\n        return 3;\n    }\n    if (value < N4) {\n        return 4;\n    }\n    if (value < N5) {\n        return 5;\n    }\n    if (value < N6) {\n        return 6;\n    }\n    if (value < N7) {\n        return 7;\n    }\n    if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n        throw new RangeError('Could not encode varint');\n    }\n    return 8;\n}\nexport function encodeUint8Array(value, buf, offset = 0) {\n    switch (encodingLength(value)) {\n        case 8: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 7: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 6: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 5: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 4: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 3: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 2: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 1: {\n            buf[offset++] = (value & 0xFF);\n            value >>>= 7;\n            break;\n        }\n        default: throw new Error('unreachable');\n    }\n    return buf;\n}\nexport function encodeUint8ArrayList(value, buf, offset = 0) {\n    switch (encodingLength(value)) {\n        case 8: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 7: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 6: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 5: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 4: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 3: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 2: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 1: {\n            buf.set(offset++, (value & 0xFF));\n            value >>>= 7;\n            break;\n        }\n        default: throw new Error('unreachable');\n    }\n    return buf;\n}\nexport function decodeUint8Array(buf, offset) {\n    let b = buf[offset];\n    let res = 0;\n    res += b & REST;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 1];\n    res += (b & REST) << 7;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 2];\n    res += (b & REST) << 14;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 3];\n    res += (b & REST) << 21;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 4];\n    res += (b & REST) * N4;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 5];\n    res += (b & REST) * N5;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 6];\n    res += (b & REST) * N6;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 7];\n    res += (b & REST) * N7;\n    if (b < MSB) {\n        return res;\n    }\n    throw new RangeError('Could not decode varint');\n}\nexport function decodeUint8ArrayList(buf, offset) {\n    let b = buf.get(offset);\n    let res = 0;\n    res += b & REST;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 1);\n    res += (b & REST) << 7;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 2);\n    res += (b & REST) << 14;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 3);\n    res += (b & REST) << 21;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 4);\n    res += (b & REST) * N4;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 5);\n    res += (b & REST) * N5;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 6);\n    res += (b & REST) * N6;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 7);\n    res += (b & REST) * N7;\n    if (b < MSB) {\n        return res;\n    }\n    throw new RangeError('Could not decode varint');\n}\nexport function encode(value, buf, offset = 0) {\n    if (buf == null) {\n        buf = allocUnsafe(encodingLength(value));\n    }\n    if (buf instanceof Uint8Array) {\n        return encodeUint8Array(value, buf, offset);\n    }\n    else {\n        return encodeUint8ArrayList(value, buf, offset);\n    }\n}\nexport function decode(buf, offset = 0) {\n    if (buf instanceof Uint8Array) {\n        return decodeUint8Array(buf, offset);\n    }\n    else {\n        return decodeUint8ArrayList(buf, offset);\n    }\n}\n//# sourceMappingURL=index.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport { IpNet } from '@chainsafe/netmask';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.encodingLength(size));\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.encodingLength(size));\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.encodingLength(size));\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        let parts;\n        if (addr instanceof Uint8Array) {\n            parts = bytesToMultiaddrParts(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            parts = stringToMultiaddrParts(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            parts = bytesToMultiaddrParts(addr.bytes);\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n        this.bytes = parts.bytes;\n        this.#string = parts.string;\n        this.#tuples = parts.tuples;\n        this.#stringTuples = parts.stringTuples;\n        this.#path = parts.path;\n    }\n    toString() {\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        return this.#tuples.map(([code]) => code);\n    }\n    protoNames() {\n        return this.#tuples.map(([code]) => getProtocol(code).name);\n    }\n    tuples() {\n        return this.#tuples;\n    }\n    stringTuples() {\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new Multiaddr(addr);\n        return new Multiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new Multiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            let tuples = [];\n            this.stringTuples().forEach(([code, name]) => {\n                if (code === names.p2p.code) {\n                    tuples.push([code, name]);\n                }\n                // if this is a p2p-circuit address, return the target peer id if present\n                // not the peer id of the relay\n                if (code === names['p2p-circuit'].code) {\n                    tuples = [];\n                }\n            });\n            // Get the last ipfs tuple ['p2p', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        return this.#path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new Multiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${this.#string})`;\n    }\n}\n//# sourceMappingURL=multiaddr.js.map","'use strict'\n\nconst isReactNative =\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative'\n\nfunction getDefaultBase () {\n  if (isReactNative) {\n    return 'http://localhost'\n  }\n  // in some environments i.e. cloudflare workers location is not available\n  if (!self.location) {\n    return ''\n  }\n\n  return self.location.protocol + '//' + self.location.host\n}\n\nconst URL = self.URL\nconst defaultBase = getDefaultBase()\n\nclass URLWithLegacySupport {\n  constructor (url = '', base = defaultBase) {\n    this.super = new URL(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  get hash () {\n    return this.super.hash\n  }\n\n  get host () {\n    return this.super.host\n  }\n\n  get hostname () {\n    return this.super.hostname\n  }\n\n  get href () {\n    return this.super.href\n  }\n\n  get origin () {\n    return this.super.origin\n  }\n\n  get password () {\n    return this.super.password\n  }\n\n  get pathname () {\n    return this.super.pathname\n  }\n\n  get port () {\n    return this.super.port\n  }\n\n  get protocol () {\n    return this.super.protocol\n  }\n\n  get search () {\n    return this.super.search\n  }\n\n  get searchParams () {\n    return this.super.searchParams\n  }\n\n  get username () {\n    return this.super.username\n  }\n\n  set hash (hash) {\n    this.super.hash = hash\n  }\n\n  set host (host) {\n    this.super.host = host\n  }\n\n  set hostname (hostname) {\n    this.super.hostname = hostname\n  }\n\n  set href (href) {\n    this.super.href = href\n  }\n\n  set password (password) {\n    this.super.password = password\n  }\n\n  set pathname (pathname) {\n    this.super.pathname = pathname\n  }\n\n  set port (port) {\n    this.super.port = port\n  }\n\n  set protocol (protocol) {\n    this.super.protocol = protocol\n  }\n\n  set search (search) {\n    this.super.search = search\n  }\n\n  set username (username) {\n    this.super.username = username\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL (o) {\n    return URL.createObjectURL(o)\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL (o) {\n    URL.revokeObjectURL(o)\n  }\n\n  toJSON () {\n    return this.super.toJSON()\n  }\n\n  toString () {\n    return this.super.toString()\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format (obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj)\n\n    return url.toString()\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass =\n            // @ts-ignore its not supported in node but we normalise\n            obj.username && obj.password\n              // @ts-ignore its not supported in node but we normalise\n              ? `${obj.username}:${obj.password}@`\n              : ''\n    const auth = obj.auth ? obj.auth + '@' : ''\n    const port = obj.port ? ':' + obj.port : ''\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\n    const host = obj.host || ''\n    const hostname = obj.hostname || ''\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\n    const hash = obj.hash || ''\n    const pathname = obj.pathname || ''\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search\n\n    return `${protocol}${userPass || auth}${\n            host || hostname + port\n        }${path}${hash}`\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n}\n","'use strict'\n\nconst { URLWithLegacySupport, format } = require('./url')\n\n/**\n * @param {string | undefined} url\n * @param {any} [location]\n * @param {any} [protocolMap]\n * @param {any} [defaultProtocol]\n */\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol\n    ? location.protocol.replace(':', '')\n    : 'http'\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\n  let urlParsed\n\n  try {\n    urlParsed = new URLWithLegacySupport(url)\n  } catch (err) {\n    urlParsed = {}\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  })\n\n  return new URLWithLegacySupport(url, format(base)).toString()\n}\n","'use strict'\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url')\nconst relative = require('./src/relative')\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n}\n","import { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CID } from 'multiformats/cid';\nimport { URL } from 'iso-url';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nexport const pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 2;\n// CID, libp2p-key or DNSLink\nexport const subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nconst subdomainIdMatch = 1;\nconst subdomainProtocolMatch = 2;\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\nfunction isMultihash(hash) {\n    const formatted = convertToString(hash);\n    if (formatted === false) {\n        return false;\n    }\n    try {\n        Digest.decode(base58btc.decode('z' + formatted));\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isMultiaddr(input) {\n    try {\n        return Boolean(multiaddr(input));\n    }\n    catch {\n        return false;\n    }\n}\nfunction isBase32EncodedMultibase(hash) {\n    try {\n        let cid;\n        if (isString(hash)) {\n            cid = CID.parse(hash);\n        }\n        else {\n            cid = CID.asCID(hash);\n        }\n        if (cid == null) {\n            return false;\n        }\n        base32.decode(cid.toString());\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\nfunction isCID(hash) {\n    try {\n        if (isString(hash)) {\n            return Boolean(CID.parse(hash));\n        }\n        if (hash instanceof Uint8Array) {\n            return Boolean(CID.decode(hash));\n        }\n        return Boolean(CID.asCID(hash)); // eslint-disable-line no-new\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr(input) {\n    return isMultiaddr(input) && mafmt.P2P.matches(input);\n}\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipfs') {\n        return false;\n    }\n    let hash = match[hashMatch];\n    if (hash != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure hash is case-insensitive\n        // (browsers force-lowercase authority component anyway)\n        hash = hash.toLowerCase();\n    }\n    return isCID(hash);\n}\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n    const formatted = convertToString(input);\n    if (formatted === false) {\n        return false;\n    }\n    const match = formatted.match(pattern);\n    if (match == null) {\n        return false;\n    }\n    if (match[protocolMatch] !== 'ipns') {\n        return false;\n    }\n    let ipnsId = match[hashMatch];\n    if (ipnsId != null && pattern === subdomainGatewayPattern) {\n        // when doing checks for subdomain context\n        // ensure ipnsId is case-insensitive\n        // (browsers force-lowercase authority compotent anyway)\n        ipnsId = ipnsId.toLowerCase();\n        // Check if it is cidv1\n        if (isCID(ipnsId))\n            return true;\n        // Check if it looks like FQDN\n        try {\n            if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n                // name without tld, assuming its inlined into a single DNS label\n                // (https://github.com/ipfs/in-web-browsers/issues/169)\n                // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n                ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');\n            }\n            // URL implementation in web browsers forces lowercase of the hostname\n            const { hostname } = new URL(`http://${ipnsId}`); // eslint-disable-line no-new\n            // Check if potential FQDN has an explicit TLD\n            return fqdnWithTld.test(hostname);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {any} input\n */\nfunction isString(input) {\n    return typeof input === 'string';\n}\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString(input) {\n    if (input instanceof Uint8Array) {\n        return uint8ArrayToString(input, 'base58btc');\n    }\n    if (isString(input)) {\n        return input;\n    }\n    return false;\n}\nexport const ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url);\nexport const ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\nexport const ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\nexport const url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);\nexport const path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern);\nexport { isMultihash as multihash };\nexport { isMultiaddr as multiaddr };\nexport { isPeerMultiaddr as peerMultiaddr };\nexport { isCID as cid };\nexport const base32cid = (cid) => (isCID(cid) && isBase32EncodedMultibase(cid));\nexport const ipfsPath = (path) => isIpfs(path, pathPattern);\nexport const ipnsPath = (path) => isIpns(path, pathPattern);\nexport const urlOrPath = (x) => url(x) || path(x);\nexport const cidPath = (path) => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern);\n//# sourceMappingURL=index.js.map","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nexport class Key {\n    /**\n     * @param {string | Uint8Array} s\n     * @param {boolean} [clean]\n     */\n    constructor(s, clean) {\n        if (typeof s === 'string') {\n            this._buf = uint8ArrayFromString(s);\n        }\n        else if (s instanceof Uint8Array) {\n            this._buf = s;\n        }\n        else {\n            throw new Error('Invalid key, should be String of Uint8Array');\n        }\n        if (clean == null) {\n            clean = true;\n        }\n        if (clean) {\n            this.clean();\n        }\n        if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n            throw new Error('Invalid key');\n        }\n    }\n    /**\n     * Convert to the string representation\n     *\n     * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n     * @returns {string}\n     */\n    toString(encoding = 'utf8') {\n        return uint8ArrayToString(this._buf, encoding);\n    }\n    /**\n     * Return the Uint8Array representation of the key\n     *\n     * @returns {Uint8Array}\n     */\n    uint8Array() {\n        return this._buf;\n    }\n    /**\n     * Return string representation of the key\n     *\n     * @returns {string}\n     */\n    get [Symbol.toStringTag]() {\n        return `Key(${this.toString()})`;\n    }\n    /**\n     * Constructs a key out of a namespace array.\n     *\n     * @param {Array<string>} list - The array of namespaces\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.withNamespaces(['one', 'two'])\n     * // => Key('/one/two')\n     * ```\n     */\n    static withNamespaces(list) {\n        return new Key(list.join(pathSepS));\n    }\n    /**\n     * Returns a randomly (uuid) generated key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.random()\n     * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n     * ```\n     */\n    static random() {\n        return new Key(nanoid().replace(/-/g, ''));\n    }\n    /**\n     * @param {*} other\n     */\n    static asKey(other) {\n        if (other instanceof Uint8Array || typeof other === 'string') {\n            // we can create a key from this\n            return new Key(other);\n        }\n        if (typeof other.uint8Array === 'function') {\n            // this is an older version or may have crossed the esm/cjs boundary\n            return new Key(other.uint8Array());\n        }\n        return null;\n    }\n    /**\n     * Cleanup the current key\n     *\n     * @returns {void}\n     */\n    clean() {\n        if (this._buf == null || this._buf.byteLength === 0) {\n            this._buf = pathSepB;\n        }\n        if (this._buf[0] !== pathSep) {\n            const bytes = new Uint8Array(this._buf.byteLength + 1);\n            bytes.fill(pathSep, 0, 1);\n            bytes.set(this._buf, 1);\n            this._buf = bytes;\n        }\n        // normalize does not remove trailing slashes\n        while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n            this._buf = this._buf.subarray(0, -1);\n        }\n    }\n    /**\n     * Check if the given key is sorted lower than ourself.\n     *\n     * @param {Key} key - The other Key to check against\n     * @returns {boolean}\n     */\n    less(key) {\n        const list1 = this.list();\n        const list2 = key.list();\n        for (let i = 0; i < list1.length; i++) {\n            if (list2.length < i + 1) {\n                return false;\n            }\n            const c1 = list1[i];\n            const c2 = list2[i];\n            if (c1 < c2) {\n                return true;\n            }\n            else if (c1 > c2) {\n                return false;\n            }\n        }\n        return list1.length < list2.length;\n    }\n    /**\n     * Returns the key with all parts in reversed order.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n     * ```\n     */\n    reverse() {\n        return Key.withNamespaces(this.list().slice().reverse());\n    }\n    /**\n     * Returns the `namespaces` making up this Key.\n     *\n     * @returns {Array<string>}\n     */\n    namespaces() {\n        return this.list();\n    }\n    /** Returns the \"base\" namespace of this key.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n     * // => 'Actor:JohnCleese'\n     * ```\n     */\n    baseNamespace() {\n        const ns = this.namespaces();\n        return ns[ns.length - 1];\n    }\n    /**\n     * Returns the `list` representation of this key.\n     *\n     * @returns {Array<string>}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n     * ```\n     */\n    list() {\n        return this.toString().split(pathSepS).slice(1);\n    }\n    /**\n     * Returns the \"type\" of this key (value of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n     * // => 'Actor'\n     * ```\n     */\n    type() {\n        return namespaceType(this.baseNamespace());\n    }\n    /**\n     * Returns the \"name\" of this key (field of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n     * // => 'JohnCleese'\n     * ```\n     */\n    name() {\n        return namespaceValue(this.baseNamespace());\n    }\n    /**\n     * Returns an \"instance\" of this type key (appends value to namespace).\n     *\n     * @param {string} s - The string to append.\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n    instance(s) {\n        return new Key(this.toString() + ':' + s);\n    }\n    /**\n     * Returns the \"path\" of this key (parent + type).\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n     * // => Key('/Comedy/MontyPython/Actor')\n     * ```\n     */\n    path() {\n        let p = this.parent().toString();\n        if (!p.endsWith(pathSepS)) {\n            p += pathSepS;\n        }\n        p += this.type();\n        return new Key(p);\n    }\n    /**\n     * Returns the `parent` Key of this Key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n     * // => Key(\"/Comedy/MontyPython\")\n     * ```\n     */\n    parent() {\n        const list = this.list();\n        if (list.length === 1) {\n            return new Key(pathSepS);\n        }\n        return new Key(list.slice(0, -1).join(pathSepS));\n    }\n    /**\n     * Returns the `child` Key of this Key.\n     *\n     * @param {Key} key - The child Key to add\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n    child(key) {\n        if (this.toString() === pathSepS) {\n            return key;\n        }\n        else if (key.toString() === pathSepS) {\n            return this;\n        }\n        return new Key(this.toString() + key.toString(), false);\n    }\n    /**\n     * Returns whether this key is a prefix of `other`\n     *\n     * @param {Key} other - The other key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n     * // => true\n     * ```\n     */\n    isAncestorOf(other) {\n        if (other.toString() === this.toString()) {\n            return false;\n        }\n        return other.toString().startsWith(this.toString());\n    }\n    /**\n     * Returns whether this key is a contains another as prefix.\n     *\n     * @param {Key} other - The other Key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n     * // => true\n     * ```\n     */\n    isDecendantOf(other) {\n        if (other.toString() === this.toString()) {\n            return false;\n        }\n        return this.toString().startsWith(other.toString());\n    }\n    /**\n     * Checks if this key has only one namespace.\n     *\n     * @returns {boolean}\n     *\n     */\n    isTopLevel() {\n        return this.list().length === 1;\n    }\n    /**\n     * Concats one or more Keys into one new Key.\n     *\n     * @param {Array<Key>} keys - The array of keys to concatenate\n     * @returns {Key}\n     */\n    concat(...keys) {\n        return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);\n    }\n}\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType(ns) {\n    const parts = ns.split(':');\n    if (parts.length < 2) {\n        return '';\n    }\n    return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue(ns) {\n    const parts = ns.split(':');\n    return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten(arr) {\n    return ([]).concat(...arr);\n}\n//# sourceMappingURL=key.js.map","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig\n\n\n/**\n * conversion ratios\n */\n\nparse.nanosecond =\nparse.ns = 1 / 1e6\n\nparse['µs'] =\nparse['μs'] =\nparse.us =\nparse.microsecond = 1 / 1e3\n\nparse.millisecond =\nparse.ms =\nparse[''] = 1\n\nparse.second =\nparse.sec =\nparse.s = parse.ms * 1000\n\nparse.minute =\nparse.min =\nparse.m = parse.s * 60\n\nparse.hour =\nparse.hr =\nparse.h = parse.m * 60\n\nparse.day =\nparse.d = parse.h * 24\n\nparse.week =\nparse.wk =\nparse.w = parse.d * 7\n\nparse.month =\nparse.b =\nparse.d * (365.25 / 12)\n\nparse.year =\nparse.yr =\nparse.y = parse.d * 365.25\n\n/**\n * convert `str` to ms\n *\n * @param {String} str\n * @param {String} format\n * @return {Number}\n */\n\nfunction parse(str='', format='ms'){\n  var result = null\n  // ignore commas/placeholders\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2')\n  var isNegative = str[0] === '-';\n  str.replace(durationRE, function(_, n, units){\n    units = unitRatio(units)\n    if (units) result = (result || 0) + Math.abs(parseFloat(n, 10)) * units\n  })\n\n  return result && ((result / (unitRatio(format) || 1)) * (isNegative ? -1 : 1))\n}\n\nfunction unitRatio(str) {\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\n}\n\nexport default parse\n","\nexport class TimeoutError extends Error {\n  constructor (message = 'request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n    this.code = TimeoutError.code\n  }\n}\n\nTimeoutError.code = 'ERR_TIMEOUT'\n","/* eslint-disable no-unreachable */\n\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\nimport parseDuration from 'parse-duration'\nimport { TimeoutError } from './errors.js'\n\n/**\n * @template {any[]} Args\n * @template {Promise<any> | AsyncIterable<any>} R - The return type of `fn`\n * @param {(...args:Args) => R} fn\n * @param {number} [optionsArgIndex]\n * @returns {(...args:Args) => R}\n */\nexport function withTimeoutOption (fn, optionsArgIndex) {\n  // eslint-disable-next-line\n  return /** @returns {R} */(/** @type {Args} */...args) => {\n    const options = args[optionsArgIndex == null ? args.length - 1 : optionsArgIndex]\n    if (!options || !options.timeout) return fn(...args)\n\n    const timeout = typeof options.timeout === 'string'\n      ? parseDuration(options.timeout)\n      : options.timeout\n\n    const controller = new TimeoutController(timeout)\n\n    options.signal = anySignal([options.signal, controller.signal])\n\n    const fnRes = fn(...args)\n    // eslint-disable-next-line promise/param-names\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      controller.signal.addEventListener('abort', () => {\n        reject(new TimeoutError())\n      })\n    })\n\n    const start = Date.now()\n\n    const maybeThrowTimeoutError = () => {\n      if (controller.signal.aborted) {\n        throw new TimeoutError()\n      }\n\n      const timeTaken = Date.now() - start\n\n      // if we have starved the event loop by adding microtasks, we could have\n      // timed out already but the TimeoutController will never know because it's\n      // setTimeout will not fire until we stop adding microtasks\n      if (timeTaken > timeout) {\n        controller.abort()\n        throw new TimeoutError()\n      }\n    }\n\n    // @ts-expect-error\n    if (fnRes[Symbol.asyncIterator]) {\n      // @ts-expect-error\n      return (async function * () {\n        // @ts-expect-error\n        const it = fnRes[Symbol.asyncIterator]()\n\n        try {\n          while (true) {\n            const { value, done } = await Promise.race([it.next(), timeoutPromise])\n\n            if (done) {\n              break\n            }\n\n            maybeThrowTimeoutError()\n\n            yield value\n          }\n        } catch (/** @type {any} */ err) {\n          maybeThrowTimeoutError()\n\n          throw err\n        } finally {\n          controller.clear()\n\n          if (it.return) {\n            it.return()\n          }\n        }\n      })()\n    }\n\n    // @ts-expect-error\n    return (async () => {\n      try {\n        const res = await Promise.race([fnRes, timeoutPromise])\n\n        maybeThrowTimeoutError()\n\n        return res\n      } catch (/** @type {any} */ err) {\n        maybeThrowTimeoutError()\n\n        throw err\n      } finally {\n        controller.clear()\n      }\n    })()\n  }\n}\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath (string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n","/* eslint-disable no-unreachable */\n\nimport * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport * as dagPB from '@ipld/dag-pb'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\n\nexport const OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\nexport const MFS_ROOT_KEY = new Key('/local/filesroot')\nexport const MFS_MAX_CHUNK_SIZE = 262144\nexport const MFS_MAX_LINKS = 174\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n *\n * @param  {string | CID} pathStr - An ipfs-path, or ipns-path or a cid\n * @returns {string} - ipfs-path or ipns-path\n * @throws on an invalid @param pathStr\n */\nexport const normalizePath = (pathStr) => {\n  const cid = CID.asCID(pathStr)\n\n  if (cid) {\n    return `/ipfs/${pathStr}`\n  }\n\n  const str = pathStr.toString()\n\n  try {\n    return `/ipfs/${CID.parse(str)}`\n  } catch {}\n\n  if (isIpfs.path(str)) {\n    return str\n  } else {\n    throw errCode(new Error(`invalid path: ${pathStr}`), ERR_BAD_PATH)\n  }\n}\n\n// TODO: do we need both normalizePath and normalizeCidPath?\n// TODO: don't forget ipfs-core-utils/src/to-cid-and-path\n/**\n * @param {Uint8Array|CID|string} path\n */\nexport const normalizeCidPath = (path) => {\n  if (path instanceof Uint8Array) {\n    return CID.decode(path).toString()\n  }\n\n  path = path.toString()\n\n  if (path.indexOf('/ipfs/') === 0) {\n    path = path.substring('/ipfs/'.length)\n  }\n\n  if (path.charAt(path.length - 1) === '/') {\n    path = path.substring(0, path.length - 1)\n  }\n\n  return path\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID | string | Uint8Array} ipfsPath - A CID or IPFS path\n * @param {{ path?: string, signal?: AbortSignal }} [options] - Optional options passed directly to dag.resolve\n * @returns {Promise<{ cid: CID, remainderPath: string}>}\n */\nexport const resolvePath = async function (repo, codecs, ipfsPath, options = {}) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (path) {\n    options.path = path\n  }\n\n  let lastCid = cid\n  let lastRemainderPath = options.path || ''\n\n  if (lastRemainderPath.startsWith('/')) {\n    lastRemainderPath = lastRemainderPath.substring(1)\n  }\n\n  if (options.path) {\n    try {\n      for await (const { value, remainderPath } of resolve(cid, options.path, codecs, repo, {\n        signal: options.signal\n      })) {\n        if (!CID.asCID(value)) {\n          break\n        }\n\n        lastRemainderPath = remainderPath\n        lastCid = value\n      }\n    } catch (/** @type {any} */ err) {\n      // TODO: add error codes to IPLD\n      if (err.message.startsWith('Object has no property')) {\n        err.message = `no link named \"${lastRemainderPath.split('/')[0]}\" under ${lastCid}`\n        err.code = 'ERR_NO_LINK'\n      }\n      throw err\n    }\n  }\n\n  return {\n    cid: lastCid,\n    remainderPath: lastRemainderPath || ''\n  }\n}\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n *\n * @param {UnixFSEntry} file\n */\nexport const mapFile = (file) => {\n  if (file.type !== 'file' && file.type !== 'directory' && file.type !== 'raw') {\n    // file.type === object | identity not supported yet\n    throw new Error(`Unknown node type '${file.type}'`)\n  }\n\n  /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n  const output = {\n    cid: file.cid,\n    path: file.path,\n    name: file.name,\n    size: file.size,\n    type: 'file'\n  }\n\n  if (file.type === 'directory') {\n    // @ts-expect-error - TS type can't be changed from File to Directory\n    output.type = 'dir'\n  }\n\n  if (file.type === 'file') {\n    output.size = file.unixfs.fileSize()\n  }\n\n  if (file.type === 'file' || file.type === 'directory') {\n    output.mode = file.unixfs.mode\n\n    if (file.unixfs.mtime !== undefined) {\n      output.mtime = file.unixfs.mtime\n    }\n  }\n\n  return output\n}\n\nexport const withTimeout = withTimeoutOption(\n  /**\n   * @template T\n   * @param {Promise<T>|T} promise\n   * @param {AbortOptions} [_options]\n   * @returns {Promise<T>}\n   */\n  async (promise, _options) => await promise\n)\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} codecs\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {AbortOptions} [options]\n */\nexport const resolve = async function * (cid, path, codecs, repo, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    // special case for dag-pb, use the link name as the path segment\n    if (cid.code === dagPB.code && Array.isArray(value.Links)) {\n      const link = value.Links.find((/** @type {PBLink} */ l) => l.Name === key)\n\n      if (link) {\n        yield {\n          value: link.Hash,\n          remainderPath: parts.join('/')\n        }\n\n        value = await load(link.Hash)\n        lastCid = link.Hash\n\n        continue\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    if (CID.asCID(value)) {\n      lastCid = value\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { NotStartedError, AlreadyStartingError, AlreadyStartedError } from '../errors.js'\nimport { withTimeout } from '../utils.js'\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nexport class Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create ({ start, stop }) {\n    return new Service(start, stop)\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start (service, options) {\n    const { state, activate } = service\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped': {\n        try {\n          const promise = activate(options)\n          service.state = { status: 'starting', ready: promise }\n          // Note: MUST await after state transition above otherwise race\n          // condition may occur.\n          const result = await promise\n          service.state = { status: 'started', value: result }\n          return result\n        // If failed to start, transiton from 'starting' to 'stopped'\n        // state.\n        } catch (/** @type {any} */ error) {\n          service.state = { status: 'stopped' }\n          throw error\n        }\n      }\n      case 'starting': {\n        throw new AlreadyStartingError()\n      }\n      case 'started': {\n        throw new AlreadyStartedError()\n      }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping': {\n        await state.ready\n        return await Service.start(service, options)\n      }\n      default: {\n        return Service.panic(service)\n      }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop (service) {\n    const { state, deactivate } = service\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped': {\n        break\n      }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting': {\n        // We do not want to error stop if start failed.\n        try { await state.ready } catch (/** @type {any} */ _) {}\n        return await Service.stop(service)\n      }\n      // if service is stopping we just await for it to complete.\n      case 'stopping': {\n        return await state.ready\n      }\n      case 'started': {\n        if (deactivate) {\n          await deactivate(state.value)\n        }\n        service.state = { status: 'stopped' }\n        break\n      }\n      default: {\n        Service.panic(state)\n      }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try ({ state }) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use ({ state }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      case 'starting':\n        return await withTimeout(state.ready, options)\n      default:\n        throw new NotStartedError()\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic ({ state }) {\n    const status = JSON.stringify({ status: state.status })\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`)\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor (activate, deactivate) {\n    this.activate = activate\n    this.deactivate = deactivate\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = { status: 'stopped' }\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use (options) {\n    return await Service.use(this, options)\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try () {\n    return Service.try(this)\n  }\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n","import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop ({ network, preload, ipns, repo, mfsPreload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop()\n    ])\n\n    await Service.stop(network)\n\n    // must be closed after stopping services as some of them\n    // will write into the datastore\n    await repo.close()\n  }\n\n  return stop\n}\n","module.exports = function (max) {\n\n  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')\n\n  var size = 0, cache = Object.create(null), _cache = Object.create(null)\n\n  function update (key, value) {\n    cache[key] = value\n    size ++\n    if(size >= max) {\n      size = 0\n      _cache = cache\n      cache = Object.create(null)\n    }\n  }\n\n  return {\n    has: function (key) {\n      return cache[key] !== undefined || _cache[key] !== undefined\n    },\n    remove: function (key) {\n      if(cache[key] !== undefined)\n        cache[key] = undefined\n      if(_cache[key] !== undefined)\n        _cache[key] = undefined\n    },\n    get: function (key) {\n      var v = cache[key]\n      if(v !== undefined) return v\n      if((v = _cache[key]) !== undefined) {\n        update(key, v)\n        return v\n      }\n    },\n    set: function (key, value) {\n      if(cache[key] !== undefined) cache[key] = value\n      else update(key, value)\n    },\n    clear: function () {\n      cache = Object.create(null)\n      _cache = Object.create(null)\n    }\n  }\n}\n\n\n\n\n\n\n\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n","'use strict'\n\nif (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) {\n  module.exports = {\n    default: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Request: globalThis.Request,\n    Response: globalThis.Response\n  }\n} else {\n  module.exports = {\n    default: require('node-fetch').default,\n    Headers: require('node-fetch').Headers,\n    Request: require('node-fetch').Request,\n    Response: require('node-fetch').Response\n  }\n}\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n","'use strict'\n\n/**\n * Collects all values from an (async) iterable into an array and returns it.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nconst all = async (source) => {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nmodule.exports = all\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js'\nimport PQueue from 'p-queue'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport async function resolveDnslink (fqdn, opts) { // eslint-disable-line require-await\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async (fqdn, opts = {}) => {\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolve(fqdn, opts)\n}\n","// dns-nodejs gets replaced by dns-browser when bundled\nimport { resolveDnslink } from 'ipfs-core-config/dns'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nexport function createDns () {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return resolveDnslink(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n","\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createIsOnline ({ network }) {\n  /**\n   * @returns {boolean}\n   */\n  return () => {\n    const net = network.try()\n    return net != null && Boolean(net.libp2p.isStarted())\n  }\n}\n","export const symbol = Symbol.for('@libp2p/peer-id');\nexport function isPeerId(other) {\n    return other != null && Boolean(other[symbol]);\n}\n//# sourceMappingURL=index.js.map","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","import { symbol } from '@libp2p/interface-peer-id';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst baseDecoder = Object\n    .values(bases)\n    .map(codec => codec.decoder)\n    // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n    .reduce((acc, curr) => acc.or(curr), bases.identity.decoder);\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\nclass PeerIdImpl {\n    type;\n    multihash;\n    privateKey;\n    publicKey;\n    string;\n    constructor(init) {\n        this.type = init.type;\n        this.multihash = init.multihash;\n        this.privateKey = init.privateKey;\n        // mark string cache as non-enumerable\n        Object.defineProperty(this, 'string', {\n            enumerable: false,\n            writable: true\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return `PeerId(${this.toString()})`;\n    }\n    [symbol] = true;\n    toString() {\n        if (this.string == null) {\n            this.string = base58btc.encode(this.multihash.bytes).slice(1);\n        }\n        return this.string;\n    }\n    // return self-describing String representation\n    // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n    toCID() {\n        return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n    }\n    toBytes() {\n        return this.multihash.bytes;\n    }\n    /**\n     * Returns Multiaddr as a JSON string\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Checks the equality of `this` peer against a given PeerId\n     */\n    equals(id) {\n        if (id instanceof Uint8Array) {\n            return uint8ArrayEquals(this.multihash.bytes, id);\n        }\n        else if (typeof id === 'string') {\n            return peerIdFromString(id).equals(this);\n        }\n        else if (id?.multihash?.bytes != null) {\n            return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n        }\n        else {\n            throw new Error('not valid Id');\n        }\n    }\n    /**\n     * Returns PeerId as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { peerIdFromString } from '@libp2p/peer-id'\n     *\n     * console.info(peerIdFromString('QmFoo'))\n     * // 'PeerId(QmFoo)'\n     * ```\n     */\n    [inspect]() {\n        return `PeerId(${this.toString()})`;\n    }\n}\nclass RSAPeerIdImpl extends PeerIdImpl {\n    type = 'RSA';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'RSA' });\n        this.publicKey = init.publicKey;\n    }\n}\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n    type = 'Ed25519';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'Ed25519' });\n        this.publicKey = init.multihash.digest;\n    }\n}\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n    type = 'secp256k1';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'secp256k1' });\n        this.publicKey = init.multihash.digest;\n    }\n}\nexport function createPeerId(init) {\n    if (init.type === 'RSA') {\n        return new RSAPeerIdImpl(init);\n    }\n    if (init.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(init);\n    }\n    if (init.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(init);\n    }\n    throw new CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromPeerId(other) {\n    if (other.type === 'RSA') {\n        return new RSAPeerIdImpl(other);\n    }\n    if (other.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(other);\n    }\n    if (other.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(other);\n    }\n    throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromString(str, decoder) {\n    decoder = decoder ?? baseDecoder;\n    if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n        // identity hash ed25519/secp256k1 key or sha2-256 hash of\n        // rsa public key - base58btc encoded either way\n        const multihash = Digest.decode(base58btc.decode(`z${str}`));\n        if (str.startsWith('12D')) {\n            return new Ed25519PeerIdImpl({ multihash });\n        }\n        else if (str.startsWith('16U')) {\n            return new Secp256k1PeerIdImpl({ multihash });\n        }\n        else {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n    try {\n        const multihash = Digest.decode(buf);\n        if (multihash.code === identity.code) {\n            if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n                return new Ed25519PeerIdImpl({ multihash });\n            }\n            else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n                return new Secp256k1PeerIdImpl({ multihash });\n            }\n        }\n        if (multihash.code === sha256.code) {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    catch {\n        return peerIdFromCID(CID.decode(buf));\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n    if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n        throw new Error('Supplied PeerID CID is invalid');\n    }\n    const multihash = cid.multihash;\n    if (multihash.code === sha256.code) {\n        return new RSAPeerIdImpl({ multihash: cid.multihash });\n    }\n    else if (multihash.code === identity.code) {\n        if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n            return new Ed25519PeerIdImpl({ multihash: cid.multihash });\n        }\n        else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n            return new Secp256k1PeerIdImpl({ multihash: cid.multihash });\n        }\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys(publicKey, privateKey) {\n    if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey });\n    }\n    if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey });\n    }\n    return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey });\n}\n//# sourceMappingURL=index.js.map","import * as isIpfs from 'is-ipfs'\nimport { CID } from 'multiformats/cid'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolve as res } from '../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/src/multibases').Multibases} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\nexport function createResolve ({ repo, codecs, bases, name }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]}\n   */\n  async function resolve (path, opts = {}) {\n    if (!isIpfs.path(path)) {\n      throw new Error('invalid argument ' + path)\n    }\n\n    if (isIpfs.ipnsPath(path)) {\n      for await (const resolvedPath of name.resolve(path, opts)) {\n        path = resolvedPath\n      }\n    }\n\n    const [, schema, hash, ...rest] = path.split('/') // ['', 'ipfs', 'hash', ...path]\n    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined\n    const bytes = parseBytes(hash)\n\n    // nothing to resolve return the input\n    if (rest.length === 0) {\n      const str = base ? base.encoder.encode(bytes) : hash\n\n      return `/${schema}/${str}`\n    }\n\n    const cid = CID.decode(bytes)\n\n    path = rest.join('/')\n\n    const results = res(cid, path, codecs, repo, opts)\n    let value = cid\n    let remainderPath = path\n\n    for await (const result of results) {\n      if (CID.asCID(result.value)) {\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    }\n\n    return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\nfunction parseBytes (str) {\n  try {\n    return peerIdFromString(str).toBytes()\n  } catch {\n    return CID.parse(str).bytes\n  }\n}\n","/**\n * Returns the last item of an (async) iterable, unless empty, in which case\n * return `undefined`\n */\nexport default async function last(source) {\n    let res;\n    for await (const entry of source) {\n        res = entry;\n    }\n    return res;\n}\n//# sourceMappingURL=index.js.map","import last from 'it-last'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {ReturnType<typeof import('./add-all').createAddAll>} config.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"add\"]}\n   */\n  return (path, options = {}) => {\n    let iter\n\n    const cid = CID.asCID(path)\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options)\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options)\n    }\n\n    // @ts-expect-error return value of last can be undefined\n    return last(iter)\n  }\n}\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","\nexport const PinTypes = {\n  /** @type {'direct'} */\n  direct: 'direct',\n  /** @type {'recursive'} */\n  recursive: 'recursive',\n  /** @type {'indirect'} */\n  indirect: 'indirect',\n  /** @type {'all'} */\n  all: 'all'\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Source} Source\n * @typedef {import('ipfs-core-utils/src/pins/normalise-input').Pin} PinTarget\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @template T\n * @typedef {Iterable<T>|AsyncIterable<T>} AwaitIterable\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAddAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    /**\n     * @returns {AsyncIterable<CID>}\n     */\n    const pinAdd = async function * () {\n      for await (const { path, recursive, metadata } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n\n        // verify that each hash can be pinned\n        const { reason } = await repo.pins.isPinnedWithType(cid, [PinTypes.recursive, PinTypes.direct])\n\n        if (reason === 'recursive' && !recursive) {\n          // only disallow trying to override recursive pins\n          throw new Error(`${cid} already pinned recursively`)\n        }\n\n        if (recursive) {\n          await repo.pins.pinRecursively(cid, { metadata })\n        } else {\n          await repo.pins.pinDirectly(cid, { metadata })\n        }\n\n        yield cid\n      }\n    }\n\n    // When adding a file, we take a lock that gets released after pinning\n    // is complete, so don't take a second lock here\n    const lock = Boolean(options.lock)\n\n    if (!lock) {\n      yield * pinAdd()\n      return\n    }\n\n    const release = await repo.gcLock.readLock()\n\n    try {\n      yield * pinAdd()\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLs ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE')\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { reason, pinned, parent, metadata } = await repo.pins.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED')\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n","import last from 'it-last'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]} config.rmAll\n */\nexport function createRm ({ rmAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    // @ts-expect-error return value of last can be undefined\n    const cid = await last(rmAll([{ path, ...options }], options))\n\n    if (!cid) {\n      throw new Error('CID expected')\n    }\n\n    return cid\n  }\n\n  return rm\n}\n","import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\n\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n","import errCode from 'err-code'\n\n/**\n * @param {Error} [err]\n */\nexport function dbOpenFailedError (err) {\n  err = err || new Error('Cannot open database')\n  return errCode(err, 'ERR_DB_OPEN_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbDeleteFailedError (err) {\n  err = err || new Error('Delete failed')\n  return errCode(err, 'ERR_DB_DELETE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function dbWriteFailedError (err) {\n  err = err || new Error('Write failed')\n  return errCode(err, 'ERR_DB_WRITE_FAILED')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function notFoundError (err) {\n  err = err || new Error('Not Found')\n  return errCode(err, 'ERR_NOT_FOUND')\n}\n\n/**\n * @param {Error} [err]\n */\nexport function abortedError (err) {\n  err = err || new Error('Aborted')\n  return errCode(err, 'ERR_ABORTED')\n}\n","var Timestamp=function(){\"undefined\"!=typeof module&&(module.exports=d);var l=86400,s=3200,T=146097*s/400,e=l*T,f=1e3*e,c=864e13,g=4294967296,h=1e6,u=\"000000000\",m=Math.trunc||function(n){var t=n-n%1;return 0==t&&(n<0||0===n&&1/n!=1/0)?-0:t},n=d.prototype,o=(d.fromDate=function(n){return new d(+n)},d.fromInt64BE=r(0,1,2,3,0,4),d.fromInt64LE=r(3,2,1,0,4,0),d.fromString=function(n){var e,r=new d,n=(n+=\"\").replace(/^\\s*[+\\-]?\\d+/,function(n){var n=+n,t=1970+(n-1970)%400;return r.year=n-t,t}).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/,function(n,t,r){return t<0&&(r*=-1),e=6e4*(60*+t+ +r),\"\"}).replace(/\\.\\d+$/,function(n){return r.nano=+(n+u).substr(1,9),\"\"}).split(/\\D+/);1<n.length?n[1]--:n[1]=0;if(r.time=e=Date.UTC.apply(Date,n)-(e||0),isNaN(e))throw new TypeError(\"Invalid Date\");return p(r)},d.fromTimeT=function(n){return y(n,0)},n.year=0,n.time=0,n.nano=0,n.addNano=function(n){return this.nano+=+n||0,this},n.getNano=function(){var n=p(this);return(n.time%1e3*h+ +n.nano+1e9)%1e9},n.getTimeT=function(){var n=p(this),t=Math.floor(n.time/1e3),n=n.year;n&&(t+=n*T*l/s);return t},n.getYear=function(){return this.toDate().getUTCFullYear()+this.year},n.toDate=function(){return M(p(this).time)},n.toJSON=function(){return this.toString().replace(/0{1,6}Z$/,\"Z\")},n.toString=function(n){var t=this,r=t.toDate(),u={H:function(){return C(r.getUTCHours())},L:function(){return D(r.getUTCMilliseconds(),3)},M:function(){return C(r.getUTCMinutes())},N:function(){return D(t.getNano(),9)},S:function(){return C(r.getUTCSeconds())},Y:function(){var n=t.getYear();return 999999<n?\"+\"+n:9999<n?\"+\"+D(n,6):0<=n?D(n,4):-999999<=n?\"-\"+D(-n,6):n},a:function(){return a[r.getUTCDay()]},b:function(){return i[r.getUTCMonth()]},d:function(){return C(r.getUTCDate())},e:function(){return function(n){return(9<n?\"\":\" \")+(0|n)}(r.getUTCDate())},m:function(){return C(r.getUTCMonth()+1)}};return function e(n){return n.replace(/%./g,function(n){var t=n[1],r=v[t],t=u[t];return r?e(r):t?t():n})}(n||o)},n.writeInt64BE=t(0,1,2,3,0,4),n.writeInt64LE=t(3,2,1,0,4,0),\"%Y-%m-%dT%H:%M:%S.%NZ\"),i=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],a=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],v={\"%\":\"%\",F:\"%Y-%m-%d\",n:\"\\n\",R:\"%H:%M\",T:\"%H:%M:%S\",t:\"\\t\",X:\"%T\",Z:\"GMT\",z:\"+0000\"};return d;function d(n,t,r){var e=this;if(!(e instanceof d))return new d(n,t,r);e.time=+n||0,e.nano=+t||0,e.year=+r||0,p(e)}function p(n){var t,r,e,u=n.year,o=n.time,i=n.nano,a=((i<0||h<=i)&&(i-=(r=Math.floor(i/h))*h,o+=r,r=1),u%s);return(o<-c||c<o||a)&&((t=m(o/f))&&(u+=t*s,o-=t*f),(e=M(o)).setUTCFullYear(a+e.getUTCFullYear()),e=(o=+e)+(t=m((u-=a)/s))*f,t&&-c<=e&&e<=c&&(u-=t*s,o=e),r=1),r&&(n.year=u,n.time=o,n.nano=i),n}function M(n){var t=new Date(0);return t.setTime(n),t}function y(n,t){n=+n||0;var r=m((t=(t|0)*g)/e)+m(n/e),t=t%e+n%e,n=m(t/e);return n&&(r+=n,t-=n*e),new d(1e3*t,0,r*s)}function t(e,u,o,i,a,f){return function(n,t){var r=p(this);n=n||new Array(8);w(n,t|=0);var e=Math.floor(r.time/1e3),r=r.year*(T*l/s),u=m(r/g)+m(e/g),r=r%g+e%g,e=Math.floor(r/g);e&&(u+=e,r-=e*g);return c(n,t+a,u),c(n,t+f,r),n};function c(n,t,r){n[t+e]=r>>24&255,n[t+u]=r>>16&255,n[t+o]=r>>8&255,n[t+i]=255&r}}function r(r,e,u,o,i,a){return function(n,t){w(n,t|=0);var r=f(n,t+i);return y(f(n,t+a),r)};function f(n,t){return 16777216*n[t+r]+(n[t+e]<<16|n[t+u]<<8|n[t+o])}}function w(n,t){n=n&&n.length;if(null==n)throw new TypeError(\"Invalid Buffer\");if(n<t+8)throw new RangeError(\"Out of range\")}function C(n){return(9<n?\"\":\"0\")+(0|n)}function D(n,t){return(u+(0|n)).substr(-t)}}();","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import * as ed from '@noble/ed25519';\nconst PUBLIC_KEY_BYTE_LENGTH = 32;\nconst PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys\nconst KEYS_BYTE_LENGTH = 32;\nexport { PUBLIC_KEY_BYTE_LENGTH as publicKeyLength };\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport async function generateKey() {\n    // the actual private key (32 bytes)\n    const privateKeyRaw = ed.utils.randomPrivateKey();\n    const publicKey = await ed.getPublicKey(privateKeyRaw);\n    // concatenated the public key to the private key\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\n/**\n * Generate keypair from a 32 byte uint8array\n */\nexport async function generateKeyFromSeed(seed) {\n    if (seed.length !== KEYS_BYTE_LENGTH) {\n        throw new TypeError('\"seed\" must be 32 bytes in length.');\n    }\n    else if (!(seed instanceof Uint8Array)) {\n        throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.');\n    }\n    // based on node forges algorithm, the seed is used directly as private key\n    const privateKeyRaw = seed;\n    const publicKey = await ed.getPublicKey(privateKeyRaw);\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\nexport async function hashAndSign(privateKey, msg) {\n    const privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH);\n    return ed.sign(msg, privateKeyRaw);\n}\nexport async function hashAndVerify(publicKey, sig, msg) {\n    return ed.verify(sig, msg, publicKey);\n}\nfunction concatKeys(privateKeyRaw, publicKey) {\n    const privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH);\n    for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {\n        privateKey[i] = privateKeyRaw[i];\n        privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];\n    }\n    return privateKey;\n}\n//# sourceMappingURL=ed25519-browser.js.map","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","/* eslint-env browser */\n// Check native crypto exists and is enabled (In insecure context `self.crypto`\n// exists but `self.crypto.subtle` does not).\nexport default {\n    get(win = globalThis) {\n        const nativeCrypto = win.crypto;\n        if (nativeCrypto == null || nativeCrypto.subtle == null) {\n            throw Object.assign(new Error('Missing Web Crypto API. ' +\n                'The most likely cause of this error is that this page is being accessed ' +\n                'from an insecure context (i.e. not HTTPS). For more information and ' +\n                'possible resolutions see ' +\n                'https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api'), { code: 'ERR_MISSING_WEB_CRYPTO' });\n        }\n        return nativeCrypto;\n    }\n};\n//# sourceMappingURL=webcrypto.js.map","import { concat } from 'uint8arrays/concat';\nimport { fromString } from 'uint8arrays/from-string';\nimport webcrypto from '../webcrypto.js';\n// WebKit on Linux does not support deriving a key from an empty PBKDF2 key.\n// So, as a workaround, we provide the generated key as a constant. We test that\n// this generated key is accurate in test/workaround.spec.ts\n// Generated via:\n// await crypto.subtle.exportKey('jwk',\n//   await crypto.subtle.deriveKey(\n//     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },\n//     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),\n//     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])\n// )\nexport const derivedEmptyPasswordKey = { alg: 'A128GCM', ext: true, k: 'scm9jmO_4BJAgdwWGVulLg', key_ops: ['encrypt', 'decrypt'], kty: 'oct' };\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nexport function create(opts) {\n    const algorithm = opts?.algorithm ?? 'AES-GCM';\n    let keyLength = opts?.keyLength ?? 16;\n    const nonceLength = opts?.nonceLength ?? 12;\n    const digest = opts?.digest ?? 'SHA-256';\n    const saltLength = opts?.saltLength ?? 16;\n    const iterations = opts?.iterations ?? 32767;\n    const crypto = webcrypto.get();\n    keyLength *= 8; // Browser crypto uses bits instead of bytes\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to encrypt the data.\n     */\n    async function encrypt(data, password) {\n        const salt = crypto.getRandomValues(new Uint8Array(saltLength));\n        const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = fromString(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['encrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            }\n        }\n        else {\n            // Derive a key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt']);\n        }\n        // Encrypt the string.\n        const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);\n        return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)]);\n    }\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to decrypt the data. The options used to create\n     * this decryption cipher must be the same as those used to create\n     * the encryption cipher.\n     */\n    async function decrypt(data, password) {\n        const salt = data.subarray(0, saltLength);\n        const nonce = data.subarray(saltLength, saltLength + nonceLength);\n        const ciphertext = data.subarray(saltLength + nonceLength);\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = fromString(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['decrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['decrypt']);\n            }\n        }\n        else {\n            // Derive the key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt']);\n        }\n        // Decrypt the string.\n        const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);\n        return new Uint8Array(plaintext);\n    }\n    const cipher = {\n        encrypt,\n        decrypt\n    };\n    return cipher;\n}\n//# sourceMappingURL=aes-gcm.browser.js.map","import { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nexport async function exporter(privateKey, password) {\n    const cipher = ciphers.create();\n    const encryptedKey = await cipher.encrypt(privateKey, password);\n    return base64.encode(encryptedKey);\n}\n//# sourceMappingURL=exporter.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var KeyType;\n(function (KeyType) {\n    KeyType[\"RSA\"] = \"RSA\";\n    KeyType[\"Ed25519\"] = \"Ed25519\";\n    KeyType[\"Secp256k1\"] = \"Secp256k1\";\n})(KeyType || (KeyType = {}));\nvar __KeyTypeValues;\n(function (__KeyTypeValues) {\n    __KeyTypeValues[__KeyTypeValues[\"RSA\"] = 0] = \"RSA\";\n    __KeyTypeValues[__KeyTypeValues[\"Ed25519\"] = 1] = \"Ed25519\";\n    __KeyTypeValues[__KeyTypeValues[\"Secp256k1\"] = 2] = \"Secp256k1\";\n})(__KeyTypeValues || (__KeyTypeValues = {}));\n(function (KeyType) {\n    KeyType.codec = () => {\n        return enumeration(__KeyTypeValues);\n    };\n})(KeyType || (KeyType = {}));\nexport var PublicKey;\n(function (PublicKey) {\n    let _codec;\n    PublicKey.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PublicKey.encode = (obj) => {\n        return encodeMessage(obj, PublicKey.codec());\n    };\n    PublicKey.decode = (buf) => {\n        return decodeMessage(buf, PublicKey.codec());\n    };\n})(PublicKey || (PublicKey = {}));\nexport var PrivateKey;\n(function (PrivateKey) {\n    let _codec;\n    PrivateKey.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PrivateKey.encode = (obj) => {\n        return encodeMessage(obj, PrivateKey.codec());\n    };\n    PrivateKey.decode = (buf) => {\n        return decodeMessage(buf, PrivateKey.codec());\n    };\n})(PrivateKey || (PrivateKey = {}));\n//# sourceMappingURL=keys.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { identity } from 'multiformats/hashes/identity';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport * as crypto from './ed25519.js';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nexport class Ed25519PublicKey {\n    _key;\n    constructor(key) {\n        this._key = ensureKey(key, crypto.publicKeyLength);\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return pbm.PublicKey.encode({\n            Type: pbm.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class Ed25519PrivateKey {\n    _key;\n    _publicKey;\n    // key       - 64 byte Uint8Array containing private key\n    // publicKey - 32 byte Uint8Array containing public key\n    constructor(key, publicKey) {\n        this._key = ensureKey(key, crypto.privateKeyLength);\n        this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Ed25519PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return pbm.PrivateKey.encode({\n            Type: pbm.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the identity multihash containing its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n    async id() {\n        const encoding = identity.digest(this.public.bytes);\n        return base58btc.encode(encoding.bytes).substring(1);\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport function unmarshalEd25519PrivateKey(bytes) {\n    // Try the old, redundant public key version\n    if (bytes.length > crypto.privateKeyLength) {\n        bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n        const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n        const publicKeyBytes = bytes.subarray(crypto.privateKeyLength, bytes.length);\n        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n    }\n    bytes = ensureKey(bytes, crypto.privateKeyLength);\n    const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n    const publicKeyBytes = bytes.subarray(crypto.publicKeyLength);\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nexport function unmarshalEd25519PublicKey(bytes) {\n    bytes = ensureKey(bytes, crypto.publicKeyLength);\n    return new Ed25519PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n    const { privateKey, publicKey } = await crypto.generateKey();\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nexport async function generateKeyPairFromSeed(seed) {\n    const { privateKey, publicKey } = await crypto.generateKeyFromSeed(seed);\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nfunction ensureKey(key, length) {\n    key = Uint8Array.from(key ?? []);\n    if (key.length !== length) {\n        throw new CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE');\n    }\n    return key;\n}\n//# sourceMappingURL=ed25519-class.js.map","import 'node-forge/lib/util.js';\nimport 'node-forge/lib/jsbn.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport function bigIntegerToUintBase64url(num, len) {\n    // Call `.abs()` to convert to unsigned\n    let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n    // toByteArray() gives us back a signed array, which will include a leading 0\n    // byte if the most significant bit of the number is 1:\n    // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n    // Our number will always be positive so we should remove the leading padding.\n    buf = buf[0] === 0 ? buf.subarray(1) : buf;\n    if (len != null) {\n        if (buf.length > len)\n            throw new Error('byte array longer than desired length');\n        buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n    }\n    return uint8ArrayToString(buf, 'base64url');\n}\n// Convert a base64url encoded string to a BigInteger\nexport function base64urlToBigInteger(str) {\n    const buf = base64urlToBuffer(str);\n    return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n}\nexport function base64urlToBuffer(str, len) {\n    let buf = uint8ArrayFromString(str, 'base64urlpad');\n    if (len != null) {\n        if (buf.length > len)\n            throw new Error('byte array longer than desired length');\n        buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n    }\n    return buf;\n}\n//# sourceMappingURL=util.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64urlToBuffer } from '../util.js';\nimport webcrypto from '../webcrypto.js';\nconst bits = {\n    'P-256': 256,\n    'P-384': 384,\n    'P-521': 521\n};\nconst curveTypes = Object.keys(bits);\nconst names = curveTypes.join(' / ');\nexport async function generateEphmeralKeyPair(curve) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const pair = await webcrypto.get().subtle.generateKey({\n        name: 'ECDH',\n        namedCurve: curve\n    }, true, ['deriveBits']);\n    // forcePrivate is used for testing only\n    const genSharedKey = async (theirPub, forcePrivate) => {\n        let privateKey;\n        if (forcePrivate != null) {\n            privateKey = await webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                name: 'ECDH',\n                namedCurve: curve\n            }, false, ['deriveBits']);\n        }\n        else {\n            privateKey = pair.privateKey;\n        }\n        const key = await webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n            name: 'ECDH',\n            namedCurve: curve\n        }, false, []);\n        const buffer = await webcrypto.get().subtle.deriveBits({\n            name: 'ECDH',\n            // @ts-expect-error namedCurve is missing from the types\n            namedCurve: curve,\n            public: key\n        }, privateKey, bits[curve]);\n        return new Uint8Array(buffer, 0, buffer.byteLength);\n    };\n    const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n    const ecdhKey = {\n        key: marshalPublicKey(publicKey),\n        genSharedKey\n    };\n    return ecdhKey;\n}\nconst curveLengths = {\n    'P-256': 32,\n    'P-384': 48,\n    'P-521': 66\n};\n// Marshal converts a jwk encoded ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey(jwk) {\n    if (jwk.crv == null || jwk.x == null || jwk.y == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    if (jwk.crv !== 'P-256' && jwk.crv !== 'P-384' && jwk.crv !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${jwk.crv}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[jwk.crv];\n    return uint8ArrayConcat([\n        Uint8Array.from([4]),\n        base64urlToBuffer(jwk.x, byteLen),\n        base64urlToBuffer(jwk.y, byteLen)\n    ], 1 + byteLen * 2);\n}\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey(curve, key) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[curve];\n    if (!uint8ArrayEquals(key.subarray(0, 1), Uint8Array.from([4]))) {\n        throw new CodeError('Cannot unmarshal public key - invalid key format', 'ERR_INVALID_KEY_FORMAT');\n    }\n    return {\n        kty: 'EC',\n        crv: curve,\n        x: uint8ArrayToString(key.subarray(1, byteLen + 1), 'base64url'),\n        y: uint8ArrayToString(key.subarray(1 + byteLen), 'base64url'),\n        ext: true\n    };\n}\nconst unmarshalPrivateKey = (curve, key) => ({\n    ...unmarshalPublicKey(curve, key.public),\n    d: uint8ArrayToString(key.private, 'base64url')\n});\n//# sourceMappingURL=ecdh-browser.js.map","import { base64 } from 'multiformats/bases/base64';\nimport * as ciphers from '../ciphers/aes-gcm.js';\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nexport async function importer(privateKey, password) {\n    const encryptedKey = base64.decode(privateKey);\n    const cipher = ciphers.create();\n    return cipher.decrypt(encryptedKey, password);\n}\n//# sourceMappingURL=importer.js.map","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import { CodeError } from '@libp2p/interfaces/errors';\nimport { utils } from '@noble/secp256k1';\nexport default function randomBytes(length) {\n    if (isNaN(length) || length <= 0) {\n        throw new CodeError('random bytes length must be a Number bigger than 0', 'ERR_INVALID_LENGTH');\n    }\n    return utils.randomBytes(length);\n}\n//# sourceMappingURL=random-bytes.js.map","import 'node-forge/lib/rsa.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { base64urlToBigInteger } from '../util.js';\nfunction convert(key, types) {\n    return types.map(t => base64urlToBigInteger(key[t]));\n}\nexport function jwk2priv(key) {\n    return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));\n}\nexport function jwk2pub(key) {\n    return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']));\n}\n//# sourceMappingURL=jwk2pem.js.map","import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/rsa.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js';\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexport function pkcs1ToJwk(bytes) {\n    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n    const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n    // https://tools.ietf.org/html/rfc7518#section-6.3.1\n    return {\n        kty: 'RSA',\n        n: bigIntegerToUintBase64url(privateKey.n),\n        e: bigIntegerToUintBase64url(privateKey.e),\n        d: bigIntegerToUintBase64url(privateKey.d),\n        p: bigIntegerToUintBase64url(privateKey.p),\n        q: bigIntegerToUintBase64url(privateKey.q),\n        dp: bigIntegerToUintBase64url(privateKey.dP),\n        dq: bigIntegerToUintBase64url(privateKey.dQ),\n        qi: bigIntegerToUintBase64url(privateKey.qInv),\n        alg: 'RS256'\n    };\n}\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexport function jwkToPkcs1(jwk) {\n    if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const asn1 = forge.pki.privateKeyToAsn1({\n        n: base64urlToBigInteger(jwk.n),\n        e: base64urlToBigInteger(jwk.e),\n        d: base64urlToBigInteger(jwk.d),\n        p: base64urlToBigInteger(jwk.p),\n        q: base64urlToBigInteger(jwk.q),\n        dP: base64urlToBigInteger(jwk.dp),\n        dQ: base64urlToBigInteger(jwk.dq),\n        qInv: base64urlToBigInteger(jwk.qi)\n    });\n    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexport function pkixToJwk(bytes) {\n    const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n    const publicKey = forge.pki.publicKeyFromAsn1(asn1);\n    return {\n        kty: 'RSA',\n        n: bigIntegerToUintBase64url(publicKey.n),\n        e: bigIntegerToUintBase64url(publicKey.e)\n    };\n}\n// Convert a JWK key to PKCIX in ASN1 DER format\nexport function jwkToPkix(jwk) {\n    if (jwk.n == null || jwk.e == null) {\n        throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const asn1 = forge.pki.publicKeyToAsn1({\n        n: base64urlToBigInteger(jwk.n),\n        e: base64urlToBigInteger(jwk.e)\n    });\n    return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}\n//# sourceMappingURL=rsa-utils.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport randomBytes from '../random-bytes.js';\nimport webcrypto from '../webcrypto.js';\nimport { jwk2pub, jwk2priv } from './jwk2pem.js';\nimport * as utils from './rsa-utils.js';\nexport { utils };\nexport async function generateKey(bits) {\n    const pair = await webcrypto.get().subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: { name: 'SHA-256' }\n    }, true, ['sign', 'verify']);\n    const keys = await exportKey(pair);\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\n// Takes a jwk key\nexport async function unmarshalPrivateKey(key) {\n    const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['sign']);\n    const pair = [\n        privateKey,\n        await derivePublicFromPrivate(key)\n    ];\n    const keys = await exportKey({\n        privateKey: pair[0],\n        publicKey: pair[1]\n    });\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\nexport { randomBytes as getRandomValues };\nexport async function hashAndSign(key, msg) {\n    const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['sign']);\n    const sig = await webcrypto.get().subtle.sign({ name: 'RSASSA-PKCS1-v1_5' }, privateKey, Uint8Array.from(msg));\n    return new Uint8Array(sig, 0, sig.byteLength);\n}\nexport async function hashAndVerify(key, sig, msg) {\n    const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['verify']);\n    return webcrypto.get().subtle.verify({ name: 'RSASSA-PKCS1-v1_5' }, publicKey, sig, msg);\n}\nasync function exportKey(pair) {\n    if (pair.privateKey == null || pair.publicKey == null) {\n        throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');\n    }\n    return Promise.all([\n        webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n        webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n    ]);\n}\nasync function derivePublicFromPrivate(jwKey) {\n    return webcrypto.get().subtle.importKey('jwk', {\n        kty: jwKey.kty,\n        n: jwKey.n,\n        e: jwKey.e\n    }, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workaround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\nfunction convertKey(key, pub, msg, handle) {\n    const fkey = pub ? jwk2pub(key) : jwk2priv(key);\n    const fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii');\n    const fomsg = handle(fmsg, fkey);\n    return uint8ArrayFromString(fomsg, 'ascii');\n}\nexport function encrypt(key, msg) {\n    return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));\n}\nexport function decrypt(key, msg) {\n    return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));\n}\n//# sourceMappingURL=rsa-browser.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport 'node-forge/lib/sha512.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nimport * as crypto from './rsa.js';\nexport class RsaPublicKey {\n    _key;\n    constructor(key) {\n        this._key = key;\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return crypto.utils.jwkToPkix(this._key);\n    }\n    get bytes() {\n        return pbm.PublicKey.encode({\n            Type: pbm.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    encrypt(bytes) {\n        return crypto.encrypt(this._key, bytes);\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class RsaPrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey;\n    }\n    genSecret() {\n        return crypto.getRandomValues(16);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        if (this._publicKey == null) {\n            throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');\n        }\n        return new RsaPublicKey(this._publicKey);\n    }\n    decrypt(bytes) {\n        return crypto.decrypt(this._key, bytes);\n    }\n    marshal() {\n        return crypto.utils.jwkToPkcs1(this._key);\n    }\n    get bytes() {\n        return pbm.PrivateKey.encode({\n            Type: pbm.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return uint8ArrayToString(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected PEM format\n     */\n    async export(password, format = 'pkcs-8') {\n        if (format === 'pkcs-8') {\n            const buffer = new forge.util.ByteBuffer(this.marshal());\n            const asn1 = forge.asn1.fromDer(buffer);\n            const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n            const options = {\n                algorithm: 'aes256',\n                count: 10000,\n                saltSize: 128 / 8,\n                prfAlgorithm: 'sha512'\n            };\n            return forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n        }\n        else if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport async function unmarshalRsaPrivateKey(bytes) {\n    const jwk = crypto.utils.pkcs1ToJwk(bytes);\n    const keys = await crypto.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport function unmarshalRsaPublicKey(bytes) {\n    const jwk = crypto.utils.pkixToJwk(bytes);\n    return new RsaPublicKey(jwk);\n}\nexport async function fromJwk(jwk) {\n    const keys = await crypto.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport async function generateKeyPair(bits) {\n    const keys = await crypto.generateKey(bits);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\n//# sourceMappingURL=rsa-class.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport * as secp from '@noble/secp256k1';\nimport { sha256 } from 'multiformats/hashes/sha2';\nconst PRIVATE_KEY_BYTE_LENGTH = 32;\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport function generateKey() {\n    return secp.utils.randomPrivateKey();\n}\n/**\n * Hash and sign message with private key\n */\nexport async function hashAndSign(key, msg) {\n    const { digest } = await sha256.digest(msg);\n    try {\n        return await secp.sign(digest, key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\n/**\n * Hash message and verify signature with public key\n */\nexport async function hashAndVerify(key, sig, msg) {\n    try {\n        const { digest } = await sha256.digest(msg);\n        return secp.verify(sig, digest, key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\nexport function compressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(true);\n    return point;\n}\nexport function decompressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(false);\n    return point;\n}\nexport function validatePrivateKey(key) {\n    try {\n        secp.getPublicKey(key, true);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\nexport function validatePublicKey(key) {\n    try {\n        secp.Point.fromHex(key);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PUBLIC_KEY');\n    }\n}\nexport function computePublicKey(privateKey) {\n    try {\n        return secp.getPublicKey(privateKey, true);\n    }\n    catch (err) {\n        throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\n//# sourceMappingURL=secp256k1.js.map","import { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as keysProtobuf from './keys.js';\nimport * as crypto from './secp256k1.js';\nexport class Secp256k1PublicKey {\n    _key;\n    constructor(key) {\n        crypto.validatePublicKey(key);\n        this._key = key;\n    }\n    async verify(data, sig) {\n        return crypto.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return crypto.compressPublicKey(this._key);\n    }\n    get bytes() {\n        return keysProtobuf.PublicKey.encode({\n            Type: keysProtobuf.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n}\nexport class Secp256k1PrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey ?? crypto.computePublicKey(key);\n        crypto.validatePrivateKey(this._key);\n        crypto.validatePublicKey(this._publicKey);\n    }\n    async sign(message) {\n        return crypto.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Secp256k1PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return keysProtobuf.PrivateKey.encode({\n            Type: keysProtobuf.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n    async hash() {\n        const { bytes } = await sha256.digest(this.bytes);\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return uint8ArrayToString(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return exporter(this.bytes, password);\n        }\n        else {\n            throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nexport function unmarshalSecp256k1PrivateKey(bytes) {\n    return new Secp256k1PrivateKey(bytes);\n}\nexport function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n    const privateKeyBytes = crypto.generateKey();\n    return new Secp256k1PrivateKey(privateKeyBytes);\n}\n//# sourceMappingURL=secp256k1-class.js.map","import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/pbe.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport * as Ed25519 from './ed25519-class.js';\nimport generateEphemeralKeyPair from './ephemeral-keys.js';\nimport { importer } from './importer.js';\nimport { keyStretcher } from './key-stretcher.js';\nimport * as keysPBM from './keys.js';\nimport * as RSA from './rsa-class.js';\nimport * as Secp256k1 from './secp256k1-class.js';\nexport { keyStretcher };\nexport { generateEphemeralKeyPair };\nexport { keysPBM };\nexport const supportedKeys = {\n    rsa: RSA,\n    ed25519: Ed25519,\n    secp256k1: Secp256k1\n};\nfunction unsupportedKey(type) {\n    const supported = Object.keys(supportedKeys).join(' / ');\n    return new CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, 'ERR_UNSUPPORTED_KEY_TYPE');\n}\nfunction typeToKey(type) {\n    type = type.toLowerCase();\n    if (type === 'rsa' || type === 'ed25519' || type === 'secp256k1') {\n        return supportedKeys[type];\n    }\n    throw unsupportedKey(type);\n}\n// Generates a keypair of the given type and bitsize\nexport async function generateKeyPair(type, bits) {\n    return typeToKey(type).generateKeyPair(bits ?? 2048);\n}\n// Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\nexport async function generateKeyPairFromSeed(type, seed, bits) {\n    if (type.toLowerCase() !== 'ed25519') {\n        throw new CodeError('Seed key derivation is unimplemented for RSA or secp256k1', 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n    }\n    return Ed25519.generateKeyPairFromSeed(seed);\n}\n// Converts a protobuf serialized public key into its\n// representative object\nexport function unmarshalPublicKey(buf) {\n    const decoded = keysPBM.PublicKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case keysPBM.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n        case keysPBM.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n        case keysPBM.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'RSA');\n    }\n}\n// Converts a public key object into a protobuf serialized public key\nexport function marshalPublicKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n// Converts a protobuf serialized private key into its\n// representative object\nexport async function unmarshalPrivateKey(buf) {\n    const decoded = keysPBM.PrivateKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case keysPBM.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n        case keysPBM.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n        case keysPBM.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'RSA');\n    }\n}\n// Converts a private key object into a protobuf serialized private key\nexport function marshalPrivateKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\nexport async function importKey(encryptedKey, password) {\n    try {\n        const key = await importer(encryptedKey, password);\n        return await unmarshalPrivateKey(key);\n    }\n    catch (_) {\n        // Ignore and try the old pem decrypt\n    }\n    // Only rsa supports pem right now\n    const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);\n    if (key === null) {\n        throw new CodeError('Cannot read the key, most likely the password is wrong or not a RSA key', 'ERR_CANNOT_DECRYPT_PEM');\n    }\n    let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n    der = uint8ArrayFromString(der.getBytes(), 'ascii');\n    return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n}\n//# sourceMappingURL=index.js.map","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","export const ERR_IPNS_EXPIRED_RECORD = 'ERR_IPNS_EXPIRED_RECORD';\nexport const ERR_UNRECOGNIZED_VALIDITY = 'ERR_UNRECOGNIZED_VALIDITY';\nexport const ERR_SIGNATURE_CREATION = 'ERR_SIGNATURE_CREATION';\nexport const ERR_SIGNATURE_VERIFICATION = 'ERR_SIGNATURE_VERIFICATION';\nexport const ERR_UNRECOGNIZED_FORMAT = 'ERR_UNRECOGNIZED_FORMAT';\nexport const ERR_PEER_ID_FROM_PUBLIC_KEY = 'ERR_PEER_ID_FROM_PUBLIC_KEY';\nexport const ERR_PUBLIC_KEY_FROM_ID = 'ERR_PUBLIC_KEY_FROM_ID';\nexport const ERR_UNDEFINED_PARAMETER = 'ERR_UNDEFINED_PARAMETER';\nexport const ERR_INVALID_RECORD_DATA = 'ERR_INVALID_RECORD_DATA';\nexport const ERR_INVALID_EMBEDDED_KEY = 'ERR_INVALID_EMBEDDED_KEY';\nexport const ERR_MISSING_PRIVATE_KEY = 'ERR_MISSING_PRIVATE_KEY';\n//# sourceMappingURL=errors.js.map","// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js';\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js';\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js';\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js';\nfunction configure() {\n    util._configure();\n    ReaderClass._configure(ReaderBufferClass);\n    WriterClass._configure(WriterBufferClass);\n}\n// Set up buffer utility according to the environment\nconfigure();\n// monkey patch the reader to add native bigint support\nconst methods = [\n    'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n];\nfunction patchReader(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function () {\n            return BigInt(original.call(this).toString());\n        };\n    }\n    return obj;\n}\nexport function reader(buf) {\n    return patchReader(new ReaderClass(buf));\n}\nfunction patchWriter(obj) {\n    for (const method of methods) {\n        if (obj[method] == null) {\n            continue;\n        }\n        const original = obj[method];\n        obj[method] = function (val) {\n            return original.call(this, val.toString());\n        };\n    }\n    return obj;\n}\nexport function writer() {\n    return patchWriter(WriterClass.create());\n}\n//# sourceMappingURL=utils.js.map","import { reader } from './utils.js';\nexport function decodeMessage(buf, codec) {\n    const r = reader(buf instanceof Uint8Array ? buf : buf.subarray());\n    return codec.decode(r);\n}\n//# sourceMappingURL=decode.js.map","import { writer } from './utils.js';\nexport function encodeMessage(message, codec) {\n    const w = writer();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n}\n//# sourceMappingURL=encode.js.map","// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport var CODEC_TYPES;\n(function (CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nexport function createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n}\n//# sourceMappingURL=codec.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function enumeration(v) {\n    function findValue(val) {\n        // Use the reverse mapping to look up the enum key for the stored value\n        // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n        if (v[val.toString()] == null) {\n            throw new Error('Invalid enum value');\n        }\n        return v[val];\n    }\n    const encode = function enumEncode(val, writer) {\n        const enumValue = findValue(val);\n        writer.int32(enumValue);\n    };\n    const decode = function enumDecode(reader) {\n        const val = reader.int32();\n        return findValue(val);\n    };\n    // @ts-expect-error yeah yeah\n    return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);\n}\n//# sourceMappingURL=enum.js.map","import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function message(encode, decode) {\n    return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n}\n//# sourceMappingURL=message.js.map","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var IpnsEntry;\n(function (IpnsEntry) {\n    let ValidityType;\n    (function (ValidityType) {\n        ValidityType[\"EOL\"] = \"EOL\";\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let __ValidityTypeValues;\n    (function (__ValidityTypeValues) {\n        __ValidityTypeValues[__ValidityTypeValues[\"EOL\"] = 0] = \"EOL\";\n    })(__ValidityTypeValues || (__ValidityTypeValues = {}));\n    (function (ValidityType) {\n        ValidityType.codec = () => {\n            return enumeration(__ValidityTypeValues);\n        };\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let _codec;\n    IpnsEntry.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.value != null) {\n                    w.uint32(10);\n                    w.bytes(obj.value);\n                }\n                if (obj.signature != null) {\n                    w.uint32(18);\n                    w.bytes(obj.signature);\n                }\n                if (obj.validityType != null) {\n                    w.uint32(24);\n                    IpnsEntry.ValidityType.codec().encode(obj.validityType, w);\n                }\n                if (obj.validity != null) {\n                    w.uint32(34);\n                    w.bytes(obj.validity);\n                }\n                if (obj.sequence != null) {\n                    w.uint32(40);\n                    w.uint64(obj.sequence);\n                }\n                if (obj.ttl != null) {\n                    w.uint32(48);\n                    w.uint64(obj.ttl);\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(58);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.signatureV2 != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signatureV2);\n                }\n                if (obj.data != null) {\n                    w.uint32(74);\n                    w.bytes(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.value = reader.bytes();\n                            break;\n                        case 2:\n                            obj.signature = reader.bytes();\n                            break;\n                        case 3:\n                            obj.validityType = IpnsEntry.ValidityType.codec().decode(reader);\n                            break;\n                        case 4:\n                            obj.validity = reader.bytes();\n                            break;\n                        case 5:\n                            obj.sequence = reader.uint64();\n                            break;\n                        case 6:\n                            obj.ttl = reader.uint64();\n                            break;\n                        case 7:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 8:\n                            obj.signatureV2 = reader.bytes();\n                            break;\n                        case 9:\n                            obj.data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    IpnsEntry.encode = (obj) => {\n        return encodeMessage(obj, IpnsEntry.codec());\n    };\n    IpnsEntry.decode = (buf) => {\n        return decodeMessage(buf, IpnsEntry.codec());\n    };\n})(IpnsEntry || (IpnsEntry = {}));\n//# sourceMappingURL=ipns.js.map","const typeofs = [\n  'string',\n  'number',\n  'bigint',\n  'symbol'\n];\nconst objectTypeNames = [\n  'Function',\n  'Generator',\n  'AsyncGenerator',\n  'GeneratorFunction',\n  'AsyncGeneratorFunction',\n  'AsyncFunction',\n  'Observable',\n  'Array',\n  'Buffer',\n  'Object',\n  'RegExp',\n  'Date',\n  'Error',\n  'Map',\n  'Set',\n  'WeakMap',\n  'WeakSet',\n  'ArrayBuffer',\n  'SharedArrayBuffer',\n  'DataView',\n  'Promise',\n  'URL',\n  'HTMLElement',\n  'Int8Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Int16Array',\n  'Uint16Array',\n  'Int32Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'BigInt64Array',\n  'BigUint64Array'\n];\nexport function is(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value === undefined) {\n    return 'undefined';\n  }\n  if (value === true || value === false) {\n    return 'boolean';\n  }\n  const typeOf = typeof value;\n  if (typeofs.includes(typeOf)) {\n    return typeOf;\n  }\n  if (typeOf === 'function') {\n    return 'Function';\n  }\n  if (Array.isArray(value)) {\n    return 'Array';\n  }\n  if (isBuffer(value)) {\n    return 'Buffer';\n  }\n  const objectType = getObjectType(value);\n  if (objectType) {\n    return objectType;\n  }\n  return 'Object';\n}\nfunction isBuffer(value) {\n  return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);\n}\nfunction getObjectType(value) {\n  const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);\n  if (objectTypeNames.includes(objectTypeName)) {\n    return objectTypeName;\n  }\n  return undefined;\n}","class Type {\n  constructor(major, name, terminal) {\n    this.major = major;\n    this.majorEncoded = major << 5;\n    this.name = name;\n    this.terminal = terminal;\n  }\n  toString() {\n    return `Type[${ this.major }].${ this.name }`;\n  }\n  compare(typ) {\n    return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;\n  }\n}\nType.uint = new Type(0, 'uint', true);\nType.negint = new Type(1, 'negint', true);\nType.bytes = new Type(2, 'bytes', true);\nType.string = new Type(3, 'string', true);\nType.array = new Type(4, 'array', false);\nType.map = new Type(5, 'map', false);\nType.tag = new Type(6, 'tag', false);\nType.float = new Type(7, 'float', true);\nType.false = new Type(7, 'false', true);\nType.true = new Type(7, 'true', true);\nType.null = new Type(7, 'null', true);\nType.undefined = new Type(7, 'undefined', true);\nType.break = new Type(7, 'break', true);\nclass Token {\n  constructor(type, value, encodedLength) {\n    this.type = type;\n    this.value = value;\n    this.encodedLength = encodedLength;\n    this.encodedBytes = undefined;\n    this.byteValue = undefined;\n  }\n  toString() {\n    return `Token[${ this.type }].${ this.value }`;\n  }\n}\nexport {\n  Type,\n  Token\n};","export const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === 'function';\nconst textDecoder = new TextDecoder();\nconst textEncoder = new TextEncoder();\nfunction isBuffer(buf) {\n  return useBuffer && globalThis.Buffer.isBuffer(buf);\n}\nexport function asU8A(buf) {\n  if (!(buf instanceof Uint8Array)) {\n    return Uint8Array.from(buf);\n  }\n  return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;\n}\nexport const toString = useBuffer ? (bytes, start, end) => {\n  return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);\n} : (bytes, start, end) => {\n  return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);\n};\nexport const fromString = useBuffer ? string => {\n  return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);\n} : string => {\n  return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);\n};\nexport const fromArray = arr => {\n  return Uint8Array.from(arr);\n};\nexport const slice = useBuffer ? (bytes, start, end) => {\n  if (isBuffer(bytes)) {\n    return new Uint8Array(bytes.subarray(start, end));\n  }\n  return bytes.slice(start, end);\n} : (bytes, start, end) => {\n  return bytes.slice(start, end);\n};\nexport const concat = useBuffer ? (chunks, length) => {\n  chunks = chunks.map(c => c instanceof Uint8Array ? c : globalThis.Buffer.from(c));\n  return asU8A(globalThis.Buffer.concat(chunks, length));\n} : (chunks, length) => {\n  const out = new Uint8Array(length);\n  let off = 0;\n  for (let b of chunks) {\n    if (off + b.length > out.length) {\n      b = b.subarray(0, out.length - off);\n    }\n    out.set(b, off);\n    off += b.length;\n  }\n  return out;\n};\nexport const alloc = useBuffer ? size => {\n  return globalThis.Buffer.allocUnsafe(size);\n} : size => {\n  return new Uint8Array(size);\n};\nexport const toHex = useBuffer ? d => {\n  if (typeof d === 'string') {\n    return d;\n  }\n  return globalThis.Buffer.from(toBytes(d)).toString('hex');\n} : d => {\n  if (typeof d === 'string') {\n    return d;\n  }\n  return Array.prototype.reduce.call(toBytes(d), (p, c) => `${ p }${ c.toString(16).padStart(2, '0') }`, '');\n};\nexport const fromHex = useBuffer ? hex => {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n  return globalThis.Buffer.from(hex, 'hex');\n} : hex => {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n  if (!hex.length) {\n    return new Uint8Array(0);\n  }\n  return new Uint8Array(hex.split('').map((c, i, d) => i % 2 === 0 ? `0x${ c }${ d[i + 1] }` : '').filter(Boolean).map(e => parseInt(e, 16)));\n};\nfunction toBytes(obj) {\n  if (obj instanceof Uint8Array && obj.constructor.name === 'Uint8Array') {\n    return obj;\n  }\n  if (obj instanceof ArrayBuffer) {\n    return new Uint8Array(obj);\n  }\n  if (ArrayBuffer.isView(obj)) {\n    return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n}\nexport function compare(b1, b2) {\n  if (isBuffer(b1) && isBuffer(b2)) {\n    return b1.compare(b2);\n  }\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] === b2[i]) {\n      continue;\n    }\n    return b1[i] < b2[i] ? -1 : 1;\n  }\n  return 0;\n}\nfunction utf8ToBytes(string, units = Infinity) {\n  let codePoint;\n  const length = string.length;\n  let leadSurrogate = null;\n  const bytes = [];\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n    if (codePoint > 55295 && codePoint < 57344) {\n      if (!leadSurrogate) {\n        if (codePoint > 56319) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n          continue;\n        } else if (i + 1 === length) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n          continue;\n        }\n        leadSurrogate = codePoint;\n        continue;\n      }\n      if (codePoint < 56320) {\n        if ((units -= 3) > -1)\n          bytes.push(239, 191, 189);\n        leadSurrogate = codePoint;\n        continue;\n      }\n      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n    } else if (leadSurrogate) {\n      if ((units -= 3) > -1)\n        bytes.push(239, 191, 189);\n    }\n    leadSurrogate = null;\n    if (codePoint < 128) {\n      if ((units -= 1) < 0)\n        break;\n      bytes.push(codePoint);\n    } else if (codePoint < 2048) {\n      if ((units -= 2) < 0)\n        break;\n      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n    } else if (codePoint < 65536) {\n      if ((units -= 3) < 0)\n        break;\n      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else if (codePoint < 1114112) {\n      if ((units -= 4) < 0)\n        break;\n      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n  return bytes;\n}\nfunction utf8Slice(buf, offset, end) {\n  const res = [];\n  while (offset < end) {\n    const firstByte = buf[offset];\n    let codePoint = null;\n    let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n    if (offset + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n      case 1:\n        if (firstByte < 128) {\n          codePoint = firstByte;\n        }\n        break;\n      case 2:\n        secondByte = buf[offset + 1];\n        if ((secondByte & 192) === 128) {\n          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n          if (tempCodePoint > 127) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 3:\n        secondByte = buf[offset + 1];\n        thirdByte = buf[offset + 2];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 4:\n        secondByte = buf[offset + 1];\n        thirdByte = buf[offset + 2];\n        fourthByte = buf[offset + 3];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n            codePoint = tempCodePoint;\n          }\n        }\n      }\n    }\n    if (codePoint === null) {\n      codePoint = 65533;\n      bytesPerSequence = 1;\n    } else if (codePoint > 65535) {\n      codePoint -= 65536;\n      res.push(codePoint >>> 10 & 1023 | 55296);\n      codePoint = 56320 | codePoint & 1023;\n    }\n    res.push(codePoint);\n    offset += bytesPerSequence;\n  }\n  return decodeCodePointsArray(res);\n}\nconst MAX_ARGUMENTS_LENGTH = 4096;\nexport function decodeCodePointsArray(codePoints) {\n  const len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints);\n  }\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n  return res;\n}","import {\n  alloc,\n  concat,\n  slice\n} from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor(chunkSize = defaultChunkSize) {\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  reset() {\n    this.cursor = 0;\n    this.maxCursor = -1;\n    if (this.chunks.length) {\n      this.chunks = [];\n    }\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n    this.cursor += bytes.length;\n  }\n  toBytes(reset = false) {\n    let byts;\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n    if (reset) {\n      this.reset();\n    }\n    return byts;\n  }\n}","const decodeErrPrefix = 'CBOR decode error:';\nconst encodeErrPrefix = 'CBOR encode error:';\nconst uintMinorPrefixBytes = [];\nuintMinorPrefixBytes[23] = 1;\nuintMinorPrefixBytes[24] = 2;\nuintMinorPrefixBytes[25] = 3;\nuintMinorPrefixBytes[26] = 5;\nuintMinorPrefixBytes[27] = 9;\nfunction assertEnoughData(data, pos, need) {\n  if (data.length - pos < need) {\n    throw new Error(`${ decodeErrPrefix } not enough data for type`);\n  }\n}\nexport {\n  decodeErrPrefix,\n  encodeErrPrefix,\n  uintMinorPrefixBytes,\n  assertEnoughData\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  decodeErrPrefix,\n  assertEnoughData\n} from './common.js';\nexport const uintBoundaries = [\n  24,\n  256,\n  65536,\n  4294967296,\n  BigInt('18446744073709551616')\n];\nexport function readUint8(data, offset, options) {\n  assertEnoughData(data, offset, 1);\n  const value = data[offset];\n  if (options.strict === true && value < uintBoundaries[0]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint16(data, offset, options) {\n  assertEnoughData(data, offset, 2);\n  const value = data[offset] << 8 | data[offset + 1];\n  if (options.strict === true && value < uintBoundaries[1]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint32(data, offset, options) {\n  assertEnoughData(data, offset, 4);\n  const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n  if (options.strict === true && value < uintBoundaries[2]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint64(data, offset, options) {\n  assertEnoughData(data, offset, 8);\n  const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n  const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];\n  const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);\n  if (options.strict === true && value < uintBoundaries[3]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  if (value <= Number.MAX_SAFE_INTEGER) {\n    return Number(value);\n  }\n  if (options.allowBigInt === true) {\n    return value;\n  }\n  throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);\n}\nexport function decodeUint8(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint8(data, pos + 1, options), 2);\n}\nexport function decodeUint16(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint16(data, pos + 1, options), 3);\n}\nexport function decodeUint32(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint32(data, pos + 1, options), 5);\n}\nexport function decodeUint64(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint64(data, pos + 1, options), 9);\n}\nexport function encodeUint(buf, token) {\n  return encodeUintValue(buf, 0, token.value);\n}\nexport function encodeUintValue(buf, major, uint) {\n  if (uint < uintBoundaries[0]) {\n    const nuint = Number(uint);\n    buf.push([major | nuint]);\n  } else if (uint < uintBoundaries[1]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 24,\n      nuint\n    ]);\n  } else if (uint < uintBoundaries[2]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 25,\n      nuint >>> 8,\n      nuint & 255\n    ]);\n  } else if (uint < uintBoundaries[3]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 26,\n      nuint >>> 24 & 255,\n      nuint >>> 16 & 255,\n      nuint >>> 8 & 255,\n      nuint & 255\n    ]);\n  } else {\n    const buint = BigInt(uint);\n    if (buint < uintBoundaries[4]) {\n      const set = [\n        major | 27,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ];\n      let lo = Number(buint & BigInt(4294967295));\n      let hi = Number(buint >> BigInt(32) & BigInt(4294967295));\n      set[8] = lo & 255;\n      lo = lo >> 8;\n      set[7] = lo & 255;\n      lo = lo >> 8;\n      set[6] = lo & 255;\n      lo = lo >> 8;\n      set[5] = lo & 255;\n      set[4] = hi & 255;\n      hi = hi >> 8;\n      set[3] = hi & 255;\n      hi = hi >> 8;\n      set[2] = hi & 255;\n      hi = hi >> 8;\n      set[1] = hi & 255;\n      buf.push(set);\n    } else {\n      throw new Error(`${ decodeErrPrefix } encountered BigInt larger than allowable range`);\n    }\n  }\n}\nencodeUint.encodedSize = function encodedSize(token) {\n  return encodeUintValue.encodedSize(token.value);\n};\nencodeUintValue.encodedSize = function encodedSize(uint) {\n  if (uint < uintBoundaries[0]) {\n    return 1;\n  }\n  if (uint < uintBoundaries[1]) {\n    return 2;\n  }\n  if (uint < uintBoundaries[2]) {\n    return 3;\n  }\n  if (uint < uintBoundaries[3]) {\n    return 5;\n  }\n  return 9;\n};\nencodeUint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nexport function decodeNegint8(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeNegint16(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeNegint32(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint32(data, pos + 1, options), 5);\n}\nconst neg1b = BigInt(-1);\nconst pos1b = BigInt(1);\nexport function decodeNegint64(data, pos, _minor, options) {\n  const int = uint.readUint64(data, pos + 1, options);\n  if (typeof int !== 'bigint') {\n    const value = -1 - int;\n    if (value >= Number.MIN_SAFE_INTEGER) {\n      return new Token(Type.negint, value, 9);\n    }\n  }\n  if (options.allowBigInt !== true) {\n    throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);\n  }\n  return new Token(Type.negint, neg1b - BigInt(int), 9);\n}\nexport function encodeNegint(buf, token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  uint.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\nencodeNegint.encodedSize = function encodedSize(token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  if (unsigned < uint.uintBoundaries[0]) {\n    return 1;\n  }\n  if (unsigned < uint.uintBoundaries[1]) {\n    return 2;\n  }\n  if (unsigned < uint.uintBoundaries[2]) {\n    return 3;\n  }\n  if (unsigned < uint.uintBoundaries[3]) {\n    return 5;\n  }\n  return 9;\n};\nencodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport {\n  compare,\n  fromString,\n  slice\n} from './byte-utils.js';\nfunction toToken(data, pos, prefix, length) {\n  assertEnoughData(data, pos, prefix + length);\n  const buf = slice(data, pos + prefix, pos + prefix + length);\n  return new Token(Type.bytes, buf, prefix + length);\n}\nexport function decodeBytesCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeBytes8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeBytes16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeBytes32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeBytes64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer bytes lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nfunction tokenBytes(token) {\n  if (token.encodedBytes === undefined) {\n    token.encodedBytes = token.type === Type.string ? fromString(token.value) : token.value;\n  }\n  return token.encodedBytes;\n}\nexport function encodeBytes(buf, token) {\n  const bytes = tokenBytes(token);\n  uint.encodeUintValue(buf, token.type.majorEncoded, bytes.length);\n  buf.push(bytes);\n}\nencodeBytes.encodedSize = function encodedSize(token) {\n  const bytes = tokenBytes(token);\n  return uint.encodeUintValue.encodedSize(bytes.length) + bytes.length;\n};\nencodeBytes.compareTokens = function compareTokens(tok1, tok2) {\n  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));\n};\nexport function compareBytes(b1, b2) {\n  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);\n}","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport {\n  toString,\n  slice\n} from './byte-utils.js';\nfunction toToken(data, pos, prefix, length, options) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength);\n  }\n  return tok;\n}\nexport function decodeStringCompact(data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options);\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options);\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options);\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l, options);\n}\nexport const encodeString = encodeBytes;","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.array, length, prefix);\n}\nexport function decodeArrayCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeArray8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeArray16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeArray32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeArray64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer array lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeArrayIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeArray(buf, token) {\n  uint.encodeUintValue(buf, Type.array.majorEncoded, token.value);\n}\nencodeArray.compareTokens = uint.encodeUint.compareTokens;\nencodeArray.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.map, length, prefix);\n}\nexport function decodeMapCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeMap8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeMap16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeMap32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeMap64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer map lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeMapIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeMap(buf, token) {\n  uint.encodeUintValue(buf, Type.map.majorEncoded, token.value);\n}\nencodeMap.compareTokens = uint.encodeUint.compareTokens;\nencodeMap.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nexport function decodeTagCompact(_data, _pos, minor, _options) {\n  return new Token(Type.tag, minor, 1);\n}\nexport function decodeTag8(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeTag16(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeTag32(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint32(data, pos + 1, options), 5);\n}\nexport function decodeTag64(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint64(data, pos + 1, options), 9);\n}\nexport function encodeTag(buf, token) {\n  uint.encodeUintValue(buf, Type.tag.majorEncoded, token.value);\n}\nencodeTag.compareTokens = uint.encodeUint.compareTokens;\nencodeTag.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport { decodeErrPrefix } from './common.js';\nimport { encodeUint } from './0uint.js';\nconst MINOR_FALSE = 20;\nconst MINOR_TRUE = 21;\nconst MINOR_NULL = 22;\nconst MINOR_UNDEFINED = 23;\nexport function decodeUndefined(_data, _pos, _minor, options) {\n  if (options.allowUndefined === false) {\n    throw new Error(`${ decodeErrPrefix } undefined values are not supported`);\n  } else if (options.coerceUndefinedToNull === true) {\n    return new Token(Type.null, null, 1);\n  }\n  return new Token(Type.undefined, undefined, 1);\n}\nexport function decodeBreak(_data, _pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return new Token(Type.break, undefined, 1);\n}\nfunction createToken(value, bytes, options) {\n  if (options) {\n    if (options.allowNaN === false && Number.isNaN(value)) {\n      throw new Error(`${ decodeErrPrefix } NaN values are not supported`);\n    }\n    if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {\n      throw new Error(`${ decodeErrPrefix } Infinity values are not supported`);\n    }\n  }\n  return new Token(Type.float, value, bytes);\n}\nexport function decodeFloat16(data, pos, _minor, options) {\n  return createToken(readFloat16(data, pos + 1), 3, options);\n}\nexport function decodeFloat32(data, pos, _minor, options) {\n  return createToken(readFloat32(data, pos + 1), 5, options);\n}\nexport function decodeFloat64(data, pos, _minor, options) {\n  return createToken(readFloat64(data, pos + 1), 9, options);\n}\nexport function encodeFloat(buf, token, options) {\n  const float = token.value;\n  if (float === false) {\n    buf.push([Type.float.majorEncoded | MINOR_FALSE]);\n  } else if (float === true) {\n    buf.push([Type.float.majorEncoded | MINOR_TRUE]);\n  } else if (float === null) {\n    buf.push([Type.float.majorEncoded | MINOR_NULL]);\n  } else if (float === undefined) {\n    buf.push([Type.float.majorEncoded | MINOR_UNDEFINED]);\n  } else {\n    let decoded;\n    let success = false;\n    if (!options || options.float64 !== true) {\n      encodeFloat16(float);\n      decoded = readFloat16(ui8a, 1);\n      if (float === decoded || Number.isNaN(float)) {\n        ui8a[0] = 249;\n        buf.push(ui8a.slice(0, 3));\n        success = true;\n      } else {\n        encodeFloat32(float);\n        decoded = readFloat32(ui8a, 1);\n        if (float === decoded) {\n          ui8a[0] = 250;\n          buf.push(ui8a.slice(0, 5));\n          success = true;\n        }\n      }\n    }\n    if (!success) {\n      encodeFloat64(float);\n      decoded = readFloat64(ui8a, 1);\n      ui8a[0] = 251;\n      buf.push(ui8a.slice(0, 9));\n    }\n  }\n}\nencodeFloat.encodedSize = function encodedSize(token, options) {\n  const float = token.value;\n  if (float === false || float === true || float === null || float === undefined) {\n    return 1;\n  }\n  if (!options || options.float64 !== true) {\n    encodeFloat16(float);\n    let decoded = readFloat16(ui8a, 1);\n    if (float === decoded || Number.isNaN(float)) {\n      return 3;\n    }\n    encodeFloat32(float);\n    decoded = readFloat32(ui8a, 1);\n    if (float === decoded) {\n      return 5;\n    }\n  }\n  return 9;\n};\nconst buffer = new ArrayBuffer(9);\nconst dataView = new DataView(buffer, 1);\nconst ui8a = new Uint8Array(buffer, 0);\nfunction encodeFloat16(inp) {\n  if (inp === Infinity) {\n    dataView.setUint16(0, 31744, false);\n  } else if (inp === -Infinity) {\n    dataView.setUint16(0, 64512, false);\n  } else if (Number.isNaN(inp)) {\n    dataView.setUint16(0, 32256, false);\n  } else {\n    dataView.setFloat32(0, inp);\n    const valu32 = dataView.getUint32(0);\n    const exponent = (valu32 & 2139095040) >> 23;\n    const mantissa = valu32 & 8388607;\n    if (exponent === 255) {\n      dataView.setUint16(0, 31744, false);\n    } else if (exponent === 0) {\n      dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);\n    } else {\n      const logicalExponent = exponent - 127;\n      if (logicalExponent < -24) {\n        dataView.setUint16(0, 0);\n      } else if (logicalExponent < -14) {\n        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);\n      } else {\n        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);\n      }\n    }\n  }\n}\nfunction readFloat16(ui8a, pos) {\n  if (ui8a.length - pos < 2) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float16`);\n  }\n  const half = (ui8a[pos] << 8) + ui8a[pos + 1];\n  if (half === 31744) {\n    return Infinity;\n  }\n  if (half === 64512) {\n    return -Infinity;\n  }\n  if (half === 32256) {\n    return NaN;\n  }\n  const exp = half >> 10 & 31;\n  const mant = half & 1023;\n  let val;\n  if (exp === 0) {\n    val = mant * 2 ** -24;\n  } else if (exp !== 31) {\n    val = (mant + 1024) * 2 ** (exp - 25);\n  } else {\n    val = mant === 0 ? Infinity : NaN;\n  }\n  return half & 32768 ? -val : val;\n}\nfunction encodeFloat32(inp) {\n  dataView.setFloat32(0, inp, false);\n}\nfunction readFloat32(ui8a, pos) {\n  if (ui8a.length - pos < 4) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float32`);\n  }\n  const offset = (ui8a.byteOffset || 0) + pos;\n  return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);\n}\nfunction encodeFloat64(inp) {\n  dataView.setFloat64(0, inp, false);\n}\nfunction readFloat64(ui8a, pos) {\n  if (ui8a.length - pos < 8) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float64`);\n  }\n  const offset = (ui8a.byteOffset || 0) + pos;\n  return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);\n}\nencodeFloat.compareTokens = encodeUint.compareTokens;","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport * as negint from './1negint.js';\nimport * as bytes from './2bytes.js';\nimport * as string from './3string.js';\nimport * as array from './4array.js';\nimport * as map from './5map.js';\nimport * as tag from './6tag.js';\nimport * as float from './7float.js';\nimport { decodeErrPrefix } from './common.js';\nimport { fromArray } from './byte-utils.js';\nfunction invalidMinor(data, pos, minor) {\n  throw new Error(`${ decodeErrPrefix } encountered invalid minor (${ minor }) for major ${ data[pos] >>> 5 }`);\n}\nfunction errorer(msg) {\n  return () => {\n    throw new Error(`${ decodeErrPrefix } ${ msg }`);\n  };\n}\nexport const jump = [];\nfor (let i = 0; i <= 23; i++) {\n  jump[i] = invalidMinor;\n}\njump[24] = uint.decodeUint8;\njump[25] = uint.decodeUint16;\njump[26] = uint.decodeUint32;\njump[27] = uint.decodeUint64;\njump[28] = invalidMinor;\njump[29] = invalidMinor;\njump[30] = invalidMinor;\njump[31] = invalidMinor;\nfor (let i = 32; i <= 55; i++) {\n  jump[i] = invalidMinor;\n}\njump[56] = negint.decodeNegint8;\njump[57] = negint.decodeNegint16;\njump[58] = negint.decodeNegint32;\njump[59] = negint.decodeNegint64;\njump[60] = invalidMinor;\njump[61] = invalidMinor;\njump[62] = invalidMinor;\njump[63] = invalidMinor;\nfor (let i = 64; i <= 87; i++) {\n  jump[i] = bytes.decodeBytesCompact;\n}\njump[88] = bytes.decodeBytes8;\njump[89] = bytes.decodeBytes16;\njump[90] = bytes.decodeBytes32;\njump[91] = bytes.decodeBytes64;\njump[92] = invalidMinor;\njump[93] = invalidMinor;\njump[94] = invalidMinor;\njump[95] = errorer('indefinite length bytes/strings are not supported');\nfor (let i = 96; i <= 119; i++) {\n  jump[i] = string.decodeStringCompact;\n}\njump[120] = string.decodeString8;\njump[121] = string.decodeString16;\njump[122] = string.decodeString32;\njump[123] = string.decodeString64;\njump[124] = invalidMinor;\njump[125] = invalidMinor;\njump[126] = invalidMinor;\njump[127] = errorer('indefinite length bytes/strings are not supported');\nfor (let i = 128; i <= 151; i++) {\n  jump[i] = array.decodeArrayCompact;\n}\njump[152] = array.decodeArray8;\njump[153] = array.decodeArray16;\njump[154] = array.decodeArray32;\njump[155] = array.decodeArray64;\njump[156] = invalidMinor;\njump[157] = invalidMinor;\njump[158] = invalidMinor;\njump[159] = array.decodeArrayIndefinite;\nfor (let i = 160; i <= 183; i++) {\n  jump[i] = map.decodeMapCompact;\n}\njump[184] = map.decodeMap8;\njump[185] = map.decodeMap16;\njump[186] = map.decodeMap32;\njump[187] = map.decodeMap64;\njump[188] = invalidMinor;\njump[189] = invalidMinor;\njump[190] = invalidMinor;\njump[191] = map.decodeMapIndefinite;\nfor (let i = 192; i <= 215; i++) {\n  jump[i] = tag.decodeTagCompact;\n}\njump[216] = tag.decodeTag8;\njump[217] = tag.decodeTag16;\njump[218] = tag.decodeTag32;\njump[219] = tag.decodeTag64;\njump[220] = invalidMinor;\njump[221] = invalidMinor;\njump[222] = invalidMinor;\njump[223] = invalidMinor;\nfor (let i = 224; i <= 243; i++) {\n  jump[i] = errorer('simple values are not supported');\n}\njump[244] = invalidMinor;\njump[245] = invalidMinor;\njump[246] = invalidMinor;\njump[247] = float.decodeUndefined;\njump[248] = errorer('simple values are not supported');\njump[249] = float.decodeFloat16;\njump[250] = float.decodeFloat32;\njump[251] = float.decodeFloat64;\njump[252] = invalidMinor;\njump[253] = invalidMinor;\njump[254] = invalidMinor;\njump[255] = float.decodeBreak;\nexport const quick = [];\nfor (let i = 0; i < 24; i++) {\n  quick[i] = new Token(Type.uint, i, 1);\n}\nfor (let i = -1; i >= -24; i--) {\n  quick[31 - i] = new Token(Type.negint, i, 1);\n}\nquick[64] = new Token(Type.bytes, new Uint8Array(0), 1);\nquick[96] = new Token(Type.string, '', 1);\nquick[128] = new Token(Type.array, 0, 1);\nquick[160] = new Token(Type.map, 0, 1);\nquick[244] = new Token(Type.false, false, 1);\nquick[245] = new Token(Type.true, true, 1);\nquick[246] = new Token(Type.null, null, 1);\nexport function quickEncodeToken(token) {\n  switch (token.type) {\n  case Type.false:\n    return fromArray([244]);\n  case Type.true:\n    return fromArray([245]);\n  case Type.null:\n    return fromArray([246]);\n  case Type.bytes:\n    if (!token.value.length) {\n      return fromArray([64]);\n    }\n    return;\n  case Type.string:\n    if (token.value === '') {\n      return fromArray([96]);\n    }\n    return;\n  case Type.array:\n    if (token.value === 0) {\n      return fromArray([128]);\n    }\n    return;\n  case Type.map:\n    if (token.value === 0) {\n      return fromArray([160]);\n    }\n    return;\n  case Type.uint:\n    if (token.value < 24) {\n      return fromArray([Number(token.value)]);\n    }\n    return;\n  case Type.negint:\n    if (token.value >= -24) {\n      return fromArray([31 - Number(token.value)]);\n    }\n  }\n}","import { is } from './is.js';\nimport {\n  Token,\n  Type\n} from './token.js';\nimport { Bl } from './bl.js';\nimport { encodeErrPrefix } from './common.js';\nimport { quickEncodeToken } from './jump.js';\nimport { asU8A } from './byte-utils.js';\nimport { encodeUint } from './0uint.js';\nimport { encodeNegint } from './1negint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { encodeString } from './3string.js';\nimport { encodeArray } from './4array.js';\nimport { encodeMap } from './5map.js';\nimport { encodeTag } from './6tag.js';\nimport { encodeFloat } from './7float.js';\nconst defaultEncodeOptions = {\n  float64: false,\n  mapSorter,\n  quickEncodeToken\n};\nexport function makeCborEncoders() {\n  const encoders = [];\n  encoders[Type.uint.major] = encodeUint;\n  encoders[Type.negint.major] = encodeNegint;\n  encoders[Type.bytes.major] = encodeBytes;\n  encoders[Type.string.major] = encodeString;\n  encoders[Type.array.major] = encodeArray;\n  encoders[Type.map.major] = encodeMap;\n  encoders[Type.tag.major] = encodeTag;\n  encoders[Type.float.major] = encodeFloat;\n  return encoders;\n}\nconst cborEncoders = makeCborEncoders();\nconst buf = new Bl();\nclass Ref {\n  constructor(obj, parent) {\n    this.obj = obj;\n    this.parent = parent;\n  }\n  includes(obj) {\n    let p = this;\n    do {\n      if (p.obj === obj) {\n        return true;\n      }\n    } while (p = p.parent);\n    return false;\n  }\n  static createCheck(stack, obj) {\n    if (stack && stack.includes(obj)) {\n      throw new Error(`${ encodeErrPrefix } object contains circular references`);\n    }\n    return new Ref(obj, stack);\n  }\n}\nconst simpleTokens = {\n  null: new Token(Type.null, null),\n  undefined: new Token(Type.undefined, undefined),\n  true: new Token(Type.true, true),\n  false: new Token(Type.false, false),\n  emptyArray: new Token(Type.array, 0),\n  emptyMap: new Token(Type.map, 0)\n};\nconst typeEncoders = {\n  number(obj, _typ, _options, _refStack) {\n    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {\n      return new Token(Type.float, obj);\n    } else if (obj >= 0) {\n      return new Token(Type.uint, obj);\n    } else {\n      return new Token(Type.negint, obj);\n    }\n  },\n  bigint(obj, _typ, _options, _refStack) {\n    if (obj >= BigInt(0)) {\n      return new Token(Type.uint, obj);\n    } else {\n      return new Token(Type.negint, obj);\n    }\n  },\n  Uint8Array(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, obj);\n  },\n  string(obj, _typ, _options, _refStack) {\n    return new Token(Type.string, obj);\n  },\n  boolean(obj, _typ, _options, _refStack) {\n    return obj ? simpleTokens.true : simpleTokens.false;\n  },\n  null(_obj, _typ, _options, _refStack) {\n    return simpleTokens.null;\n  },\n  undefined(_obj, _typ, _options, _refStack) {\n    return simpleTokens.undefined;\n  },\n  ArrayBuffer(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, new Uint8Array(obj));\n  },\n  DataView(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));\n  },\n  Array(obj, _typ, options, refStack) {\n    if (!obj.length) {\n      if (options.addBreakTokens === true) {\n        return [\n          simpleTokens.emptyArray,\n          new Token(Type.break)\n        ];\n      }\n      return simpleTokens.emptyArray;\n    }\n    refStack = Ref.createCheck(refStack, obj);\n    const entries = [];\n    let i = 0;\n    for (const e of obj) {\n      entries[i++] = objectToTokens(e, options, refStack);\n    }\n    if (options.addBreakTokens) {\n      return [\n        new Token(Type.array, obj.length),\n        entries,\n        new Token(Type.break)\n      ];\n    }\n    return [\n      new Token(Type.array, obj.length),\n      entries\n    ];\n  },\n  Object(obj, typ, options, refStack) {\n    const isMap = typ !== 'Object';\n    const keys = isMap ? obj.keys() : Object.keys(obj);\n    const length = isMap ? obj.size : keys.length;\n    if (!length) {\n      if (options.addBreakTokens === true) {\n        return [\n          simpleTokens.emptyMap,\n          new Token(Type.break)\n        ];\n      }\n      return simpleTokens.emptyMap;\n    }\n    refStack = Ref.createCheck(refStack, obj);\n    const entries = [];\n    let i = 0;\n    for (const key of keys) {\n      entries[i++] = [\n        objectToTokens(key, options, refStack),\n        objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)\n      ];\n    }\n    sortMapEntries(entries, options);\n    if (options.addBreakTokens) {\n      return [\n        new Token(Type.map, length),\n        entries,\n        new Token(Type.break)\n      ];\n    }\n    return [\n      new Token(Type.map, length),\n      entries\n    ];\n  }\n};\ntypeEncoders.Map = typeEncoders.Object;\ntypeEncoders.Buffer = typeEncoders.Uint8Array;\nfor (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')) {\n  typeEncoders[`${ typ }Array`] = typeEncoders.DataView;\n}\nfunction objectToTokens(obj, options = {}, refStack) {\n  const typ = is(obj);\n  const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];\n  if (typeof customTypeEncoder === 'function') {\n    const tokens = customTypeEncoder(obj, typ, options, refStack);\n    if (tokens != null) {\n      return tokens;\n    }\n  }\n  const typeEncoder = typeEncoders[typ];\n  if (!typeEncoder) {\n    throw new Error(`${ encodeErrPrefix } unsupported type: ${ typ }`);\n  }\n  return typeEncoder(obj, typ, options, refStack);\n}\nfunction sortMapEntries(entries, options) {\n  if (options.mapSorter) {\n    entries.sort(options.mapSorter);\n  }\n}\nfunction mapSorter(e1, e2) {\n  const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];\n  const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];\n  if (keyToken1.type !== keyToken2.type) {\n    return keyToken1.type.compare(keyToken2.type);\n  }\n  const major = keyToken1.type.major;\n  const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);\n  if (tcmp === 0) {\n    console.warn('WARNING: complex key types used, CBOR key sorting guarantees are gone');\n  }\n  return tcmp;\n}\nfunction tokensToEncoded(buf, tokens, encoders, options) {\n  if (Array.isArray(tokens)) {\n    for (const token of tokens) {\n      tokensToEncoded(buf, token, encoders, options);\n    }\n  } else {\n    encoders[tokens.type.major](buf, tokens, options);\n  }\n}\nfunction encodeCustom(data, encoders, options) {\n  const tokens = objectToTokens(data, options);\n  if (!Array.isArray(tokens) && options.quickEncodeToken) {\n    const quickBytes = options.quickEncodeToken(tokens);\n    if (quickBytes) {\n      return quickBytes;\n    }\n    const encoder = encoders[tokens.type.major];\n    if (encoder.encodedSize) {\n      const size = encoder.encodedSize(tokens, options);\n      const buf = new Bl(size);\n      encoder(buf, tokens, options);\n      if (buf.chunks.length !== 1) {\n        throw new Error(`Unexpected error: pre-calculated length for ${ tokens } was wrong`);\n      }\n      return asU8A(buf.chunks[0]);\n    }\n  }\n  buf.reset();\n  tokensToEncoded(buf, tokens, encoders, options);\n  return buf.toBytes(true);\n}\nfunction encode(data, options) {\n  options = Object.assign({}, defaultEncodeOptions, options);\n  return encodeCustom(data, cborEncoders, options);\n}\nexport {\n  objectToTokens,\n  encode,\n  encodeCustom,\n  Ref\n};","import { decodeErrPrefix } from './common.js';\nimport { Type } from './token.js';\nimport {\n  jump,\n  quick\n} from './jump.js';\nconst defaultDecodeOptions = {\n  strict: false,\n  allowIndefinite: true,\n  allowUndefined: true,\n  allowBigInt: true\n};\nclass Tokeniser {\n  constructor(data, options = {}) {\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n  }\n  done() {\n    return this.pos >= this.data.length;\n  }\n  next() {\n    const byt = this.data[this.pos];\n    let token = quick[byt];\n    if (token === undefined) {\n      const decoder = jump[byt];\n      if (!decoder) {\n        throw new Error(`${ decodeErrPrefix } no decoder for major type ${ byt >>> 5 } (byte 0x${ byt.toString(16).padStart(2, '0') })`);\n      }\n      const minor = byt & 31;\n      token = decoder(this.data, this.pos, minor, this.options);\n    }\n    this.pos += token.encodedLength;\n    return token;\n  }\n}\nconst DONE = Symbol.for('DONE');\nconst BREAK = Symbol.for('BREAK');\nfunction tokenToArray(token, tokeniser, options) {\n  const arr = [];\n  for (let i = 0; i < token.value; i++) {\n    const value = tokensToObject(tokeniser, options);\n    if (value === BREAK) {\n      if (token.value === Infinity) {\n        break;\n      }\n      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed array`);\n    }\n    if (value === DONE) {\n      throw new Error(`${ decodeErrPrefix } found array but not enough entries (got ${ i }, expected ${ token.value })`);\n    }\n    arr[i] = value;\n  }\n  return arr;\n}\nfunction tokenToMap(token, tokeniser, options) {\n  const useMaps = options.useMaps === true;\n  const obj = useMaps ? undefined : {};\n  const m = useMaps ? new Map() : undefined;\n  for (let i = 0; i < token.value; i++) {\n    const key = tokensToObject(tokeniser, options);\n    if (key === BREAK) {\n      if (token.value === Infinity) {\n        break;\n      }\n      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed map`);\n    }\n    if (key === DONE) {\n      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no key], expected ${ token.value })`);\n    }\n    if (useMaps !== true && typeof key !== 'string') {\n      throw new Error(`${ decodeErrPrefix } non-string keys not supported (got ${ typeof key })`);\n    }\n    if (options.rejectDuplicateMapKeys === true) {\n      if (useMaps && m.has(key) || !useMaps && key in obj) {\n        throw new Error(`${ decodeErrPrefix } found repeat map key \"${ key }\"`);\n      }\n    }\n    const value = tokensToObject(tokeniser, options);\n    if (value === DONE) {\n      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no value], expected ${ token.value })`);\n    }\n    if (useMaps) {\n      m.set(key, value);\n    } else {\n      obj[key] = value;\n    }\n  }\n  return useMaps ? m : obj;\n}\nfunction tokensToObject(tokeniser, options) {\n  if (tokeniser.done()) {\n    return DONE;\n  }\n  const token = tokeniser.next();\n  if (token.type === Type.break) {\n    return BREAK;\n  }\n  if (token.type.terminal) {\n    return token.value;\n  }\n  if (token.type === Type.array) {\n    return tokenToArray(token, tokeniser, options);\n  }\n  if (token.type === Type.map) {\n    return tokenToMap(token, tokeniser, options);\n  }\n  if (token.type === Type.tag) {\n    if (options.tags && typeof options.tags[token.value] === 'function') {\n      const tagged = tokensToObject(tokeniser, options);\n      return options.tags[token.value](tagged);\n    }\n    throw new Error(`${ decodeErrPrefix } tag not supported (${ token.value })`);\n  }\n  throw new Error('unsupported');\n}\nfunction decode(data, options) {\n  if (!(data instanceof Uint8Array)) {\n    throw new Error(`${ decodeErrPrefix } data to decode must be a Uint8Array`);\n  }\n  options = Object.assign({}, defaultDecodeOptions, options);\n  const tokeniser = options.tokenizer || new Tokeniser(data, options);\n  const decoded = tokensToObject(tokeniser, options);\n  if (decoded === DONE) {\n    throw new Error(`${ decodeErrPrefix } did not find any content to decode`);\n  }\n  if (decoded === BREAK) {\n    throw new Error(`${ decodeErrPrefix } got unexpected break`);\n  }\n  if (!tokeniser.done()) {\n    throw new Error(`${ decodeErrPrefix } too many terminals, data makes no sense`);\n  }\n  return decoded;\n}\nexport {\n  Tokeniser,\n  tokensToObject,\n  decode\n};","import errCode from 'err-code';\nimport * as ERRORS from './errors.js';\nimport { unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { peerIdFromBytes, peerIdFromKeys } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport * as cborg from 'cborg';\nconst log = logger('ipns:utils');\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/');\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n    const year = time.getUTCFullYear();\n    const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(time.getUTCDate()).padStart(2, '0');\n    const hour = String(time.getUTCHours()).padStart(2, '0');\n    const minute = String(time.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n    const milliseconds = time.getUTCMilliseconds();\n    const nanoseconds = milliseconds * 1000 * 1000;\n    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n    const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n        // 15:04:05\n        '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n        // .999999999Z\n        '\\\\.(\\\\d+)Z');\n    const m = String(time).trim().match(rfc3339Matcher);\n    if (m == null) {\n        throw new Error('Invalid format');\n    }\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const date = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    const millisecond = parseInt(m[7].slice(0, -6), 10);\n    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n/**\n * Extracts a public key from the passed PeerId, falling\n * back to the pubKey embedded in the ipns record\n */\nexport const extractPublicKey = async (peerId, entry) => {\n    if (entry == null || peerId == null) {\n        const error = new Error('one or more of the provided parameters are not defined');\n        log.error(error);\n        throw errCode(error, ERRORS.ERR_UNDEFINED_PARAMETER);\n    }\n    let pubKey;\n    if (entry.pubKey != null) {\n        try {\n            pubKey = unmarshalPublicKey(entry.pubKey);\n        }\n        catch (err) {\n            log.error(err);\n            throw err;\n        }\n        const otherId = await peerIdFromKeys(entry.pubKey);\n        if (!otherId.equals(peerId)) {\n            throw errCode(new Error('Embedded public key did not match PeerID'), ERRORS.ERR_INVALID_EMBEDDED_KEY);\n        }\n    }\n    else if (peerId.publicKey != null) {\n        pubKey = unmarshalPublicKey(peerId.publicKey);\n    }\n    if (pubKey != null) {\n        return pubKey;\n    }\n    throw errCode(new Error('no public key is available'), ERRORS.ERR_UNDEFINED_PARAMETER);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV1Sig = (value, validityType, validity) => {\n    const validityTypeBuffer = uint8ArrayFromString(validityType);\n    return uint8ArrayConcat([value, validity, validityTypeBuffer]);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV2Sig = (data) => {\n    const entryData = uint8ArrayFromString('ipns-signature:');\n    return uint8ArrayConcat([entryData, data]);\n};\nexport const marshal = (obj) => {\n    return IpnsEntry.encode(obj);\n};\nexport const unmarshal = (buf) => {\n    const message = IpnsEntry.decode(buf);\n    // protobufjs returns bigints as numbers\n    if (message.sequence != null) {\n        message.sequence = BigInt(message.sequence);\n    }\n    // protobufjs returns bigints as numbers\n    if (message.ttl != null) {\n        message.ttl = BigInt(message.ttl);\n    }\n    return {\n        value: message.value ?? new Uint8Array(0),\n        signature: message.signature ?? new Uint8Array(0),\n        validityType: message.validityType ?? IpnsEntry.ValidityType.EOL,\n        validity: message.validity ?? new Uint8Array(0),\n        sequence: message.sequence ?? 0n,\n        pubKey: message.pubKey,\n        ttl: message.ttl ?? undefined,\n        signatureV2: message.signatureV2,\n        data: message.data\n    };\n};\nexport const peerIdToRoutingKey = (peerId) => {\n    return uint8ArrayConcat([\n        IPNS_PREFIX,\n        peerId.toBytes()\n    ]);\n};\nexport const peerIdFromRoutingKey = (key) => {\n    return peerIdFromBytes(key.slice(IPNS_PREFIX.length));\n};\nexport const createCborData = (value, validity, validityType, sequence, ttl) => {\n    let ValidityType;\n    if (validityType === IpnsEntry.ValidityType.EOL) {\n        ValidityType = 0;\n    }\n    else {\n        throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    const data = {\n        Value: value,\n        Validity: validity,\n        ValidityType,\n        Sequence: sequence,\n        TTL: ttl\n    };\n    return cborg.encode(data);\n};\nexport const parseCborData = (buf) => {\n    const data = cborg.decode(buf);\n    if (data.ValidityType === 0) {\n        data.ValidityType = IpnsEntry.ValidityType.EOL;\n    }\n    else {\n        throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    if (Number.isInteger(data.Sequence)) {\n        // sequence must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.Sequence = BigInt(data.Sequence);\n    }\n    if (Number.isInteger(data.TTL)) {\n        // ttl must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.TTL = BigInt(data.TTL);\n    }\n    return data;\n};\n//# sourceMappingURL=utils.js.map","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","import NanoDate from 'timestamp-nano';\nimport { Key } from 'interface-datastore/key';\nimport { unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport errCode from 'err-code';\nimport { base32upper } from 'multiformats/bases/base32';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { logger } from '@libp2p/logger';\nimport { createCborData, ipnsEntryDataForV1Sig, ipnsEntryDataForV2Sig } from './utils.js';\nimport * as ERRORS from './errors.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { IpnsEntry } from './pb/ipns.js';\nconst log = logger('ipns');\nconst ID_MULTIHASH_CODE = identity.code;\nexport const namespace = '/ipns/';\nexport const namespaceLength = namespace.length;\n/**\n * Creates a new ipns entry and signs it with the given private key.\n * The ipns entry validity should follow the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n * Note: This function does not embed the public key. If you want to do that, use `EmbedPublicKey`.\n *\n * @param {PeerId} peerId - peer id containing private key for signing the record.\n * @param {Uint8Array} value - value to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {number} lifetime - lifetime of the record (in milliseconds).\n */\nexport const create = async (peerId, value, seq, lifetime) => {\n    // Validity in ISOString with nanoseconds precision and validity type EOL\n    const expirationDate = new NanoDate(Date.now() + Number(lifetime));\n    const validityType = IpnsEntry.ValidityType.EOL;\n    const [ms, ns] = lifetime.toString().split('.');\n    const lifetimeNs = (BigInt(ms) * BigInt(100000)) + BigInt(ns ?? '0');\n    return await _create(peerId, value, seq, validityType, expirationDate, lifetimeNs);\n};\n/**\n * Same as create(), but instead of generating a new Date, it receives the intended expiration time\n * WARNING: nano precision is not standard, make sure the value in seconds is 9 orders of magnitude lesser than the one provided.\n *\n * @param {PeerId} peerId - PeerId containing private key for signing the record.\n * @param {Uint8Array} value - value to be stored in the record.\n * @param {number | bigint} seq - number representing the current version of the record.\n * @param {string} expiration - expiration datetime for record in the [RFC3339]{@link https://www.ietf.org/rfc/rfc3339.txt} with nanoseconds precision.\n */\nexport const createWithExpiration = async (peerId, value, seq, expiration) => {\n    const expirationDate = NanoDate.fromString(expiration);\n    const validityType = IpnsEntry.ValidityType.EOL;\n    const ttlMs = expirationDate.toDate().getTime() - Date.now();\n    const ttlNs = (BigInt(ttlMs) * BigInt(100000)) + BigInt(expirationDate.getNano());\n    return await _create(peerId, value, seq, validityType, expirationDate, ttlNs);\n};\nconst _create = async (peerId, value, seq, validityType, expirationDate, ttl) => {\n    seq = BigInt(seq);\n    const isoValidity = uint8ArrayFromString(expirationDate.toString());\n    if (peerId.privateKey == null) {\n        throw errCode(new Error('Missing private key'), ERRORS.ERR_MISSING_PRIVATE_KEY);\n    }\n    const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n    const signatureV1 = await signLegacyV1(privateKey, value, validityType, isoValidity);\n    const data = createCborData(value, isoValidity, validityType, seq, ttl);\n    const sigData = ipnsEntryDataForV2Sig(data);\n    const signatureV2 = await privateKey.sign(sigData);\n    const entry = {\n        value,\n        signature: signatureV1,\n        validityType,\n        validity: isoValidity,\n        sequence: seq,\n        ttl,\n        signatureV2,\n        data\n    };\n    // if we cannot derive the public key from the PeerId (e.g. RSA PeerIDs),\n    // we have to embed it in the IPNS record\n    if (peerId.publicKey != null) {\n        const digest = Digest.decode(peerId.toBytes());\n        if (digest.code !== ID_MULTIHASH_CODE || !uint8ArrayEquals(peerId.publicKey, digest.digest)) {\n            entry.pubKey = peerId.publicKey;\n        }\n    }\n    log('ipns entry for %b created', value);\n    return entry;\n};\n/**\n * rawStdEncoding with RFC4648\n */\nconst rawStdEncoding = (key) => base32upper.encode(key).slice(1);\n/**\n * Get key for storing the record locally.\n * Format: /ipns/${base32(<HASH>)}\n *\n * @param {Uint8Array} key - peer identifier object.\n */\nexport const getLocalKey = (key) => new Key(`/ipns/${rawStdEncoding(key)}`);\nexport { unmarshal } from './utils.js';\nexport { marshal } from './utils.js';\nexport { peerIdToRoutingKey } from './utils.js';\nexport { peerIdFromRoutingKey } from './utils.js';\n/**\n * Sign ipns record data using the legacy V1 signature scheme\n */\nconst signLegacyV1 = async (privateKey, value, validityType, validity) => {\n    try {\n        const dataForSignature = ipnsEntryDataForV1Sig(value, validityType, validity);\n        return await privateKey.sign(dataForSignature);\n    }\n    catch (error) {\n        log.error('record signature creation failed', error);\n        throw errCode(new Error('record signature creation failed'), ERRORS.ERR_SIGNATURE_CREATION);\n    }\n};\n//# sourceMappingURL=index.js.map","import { isPeerId } from '@libp2p/interface-peer-id'\nimport { notFoundError } from 'datastore-core/errors'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport * as ipns from 'ipns'\n\nconst log = logger('ipfs:ipns:publisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-keys').PublicKey} PublicKey\n * @typedef {import('ipns').IPNSEntry} IPNSEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst ERR_NOT_FOUND = notFoundError().code\nconst defaultRecordLifetime = 60 * 60 * 1000\n\n// IpnsPublisher is capable of publishing and resolving names to the IPFS routing system.\nexport class IpnsPublisher {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (routing, datastore) {\n    this._routing = routing\n    this._datastore = datastore\n  }\n\n  /**\n   * Publish record with a eol\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publishWithEOL (peerId, value, lifetime, options) {\n    const record = await this._updateOrCreateRecord(peerId, value, lifetime, options)\n\n    return this._putRecordToRouting(record, peerId, options)\n  }\n\n  /**\n   * Accepts a keypair, as well as a value (ipfsPath), and publishes it out to the routing system\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} options\n   */\n  publish (peerId, value, options) {\n    return this.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n  }\n\n  /**\n   * @param {Uint8Array} record\n   * @param {PeerId} peerId\n   * @param {AbortOptions} [options]\n   */\n  async _putRecordToRouting (record, peerId, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    if (peerId.publicKey == null) {\n      throw errcode(new Error('Public key was missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n\n    await this._publishEntry(routingKey, record, options)\n\n    return record\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} entry\n   * @param {AbortOptions} [options]\n   */\n  async _publishEntry (key, entry, options) {\n    // Add record to routing (buffer key)\n    try {\n      const res = await this._routing.put(key, entry, options)\n      log(`ipns record for ${uint8ArrayToString(key, 'base32')} was stored in the routing`)\n\n      return res\n    } catch (/** @type {any} */err) {\n      const errMsg = `ipns record for ${uint8ArrayToString(key, 'base32')} could not be stored in the routing - ${err.stack}`\n      log.error(errMsg)\n      log.error(err)\n\n      throw errcode(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING')\n    }\n  }\n\n  /**\n   * Returns the record this node has published corresponding to the given peer ID.\n   *\n   * If `checkRouting` is true and we have no existing record, this method will check the routing system for any existing records.\n   *\n   * @param {PeerId} peerId\n   * @param {object} options\n   * @param {boolean} [options.checkRouting]\n   */\n  async _getPublished (peerId, options = {}) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const checkRouting = options.checkRouting !== false\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      // unmarshal data\n      return this._unmarshalData(dsVal)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error getting the ipns record ${peerId.toString()} from datastore`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_UNEXPECTED_DATASTORE_RESPONSE')\n      }\n\n      if (!checkRouting) {\n        throw errcode(err, 'ERR_NOT_FOUND_AND_CHECK_ROUTING_NOT_ENABLED')\n      }\n\n      // Try to get from routing\n      try {\n        const routingKey = ipns.peerIdToRoutingKey(peerId)\n        const res = await this._routing.get(routingKey)\n\n        // unmarshal data\n        return this._unmarshalData(res)\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n\n        throw err\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  _unmarshalData (data) {\n    try {\n      return ipns.unmarshal(data)\n    } catch (/** @type {any} */ err) {\n      throw errcode(err, 'ERR_INVALID_RECORD_DATA')\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async _updateOrCreateRecord (peerId, value, lifetime, options) {\n    if (!(isPeerId(peerId))) {\n      const errMsg = 'peerId received is not valid'\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_INVALID_PEER_ID')\n    }\n\n    const getPublishedOptions = {\n      checkRouting: true\n    }\n\n    /** @type {IPNSEntry | undefined} */\n    let record\n\n    try {\n      record = await this._getPublished(peerId, getPublishedOptions)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== ERR_NOT_FOUND) {\n        const errMsg = `unexpected error when determining the last published IPNS record for ${peerId.toString()} ${err.stack}`\n        log.error(errMsg)\n\n        throw errcode(new Error(errMsg), 'ERR_DETERMINING_PUBLISHED_RECORD')\n      }\n    }\n\n    // Determinate the record sequence number\n    let seqNumber = 0n\n\n    if (record && record.sequence !== undefined) {\n      // Increment if the published value is different\n      seqNumber = uint8ArrayEquals(record.value, value) ? record.sequence : record.sequence + BigInt(1)\n    }\n\n    /** @type {IPNSEntry} */\n    let entryData\n\n    try {\n      // Create record\n      entryData = await ipns.create(peerId, value, seqNumber, lifetime)\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be created`\n\n      log.error(err)\n      throw errcode(new Error(errMsg), 'ERR_CREATING_IPNS_RECORD')\n    }\n\n    // TODO IMPROVEMENT - set ttl (still experimental feature for go)\n\n    try {\n      // Marshal record\n      const data = ipns.marshal(entryData)\n\n      // Store the new record\n      await this._datastore.put(ipns.getLocalKey(peerId.toBytes()), data, options)\n\n      log(`ipns record for ${uint8ArrayToString(value, 'base32')} was stored in the datastore`)\n\n      return data\n    } catch (/** @type {any} */ err) {\n      const errMsg = `ipns record for ${value} could not be stored in the datastore`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_STORING_IN_DATASTORE')\n    }\n  }\n}\n\nIpnsPublisher.defaultRecordLifetime = defaultRecordLifetime\n","import * as ipns from 'ipns'\nimport { importKey } from '@libp2p/crypto/keys'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { TimeoutController } from 'timeout-abort-controller'\n\nconst log = logger('ipfs:ipns:republisher')\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\n\nconst defaultBroadcastInterval = 4 * hour\nconst defaultRecordLifetime = 24 * hour\n\nexport class IpnsRepublisher {\n  /**\n   * @param {import('./publisher').IpnsPublisher} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (publisher, datastore, peerId, keychain, options = { pass: '' }) {\n    this._publisher = publisher\n    this._datastore = datastore\n    this._peerId = peerId\n    this._keychain = keychain\n    this._options = options\n    this._republishHandle = null\n  }\n\n  async start () { // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING')\n    }\n\n    // TODO: this handler should be isolated in another module\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: (period) => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null\n\n          try {\n            // @ts-expect-error - _task could be null\n            republishHandle._inflightTask = republishHandle._task()\n            await republishHandle._inflightTask\n\n            // Schedule next\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period)\n            }\n          } catch (/** @type {any} */ err) {\n            log.error(err)\n          }\n        }, period())\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId)\n        }\n        republishHandle._task = null\n\n        // wait for the currently in flight task to complete\n        await republishHandle._inflightTask\n      }\n    }\n\n    const { pass } = this._options\n    let firstRun = true\n\n    republishHandle._task = async () => {\n      const timeoutController = new TimeoutController(30000)\n\n      try {\n        await this._republishEntries(this._peerId, pass, {\n          signal: timeoutController.signal\n        })\n      } finally {\n        timeoutController.clear()\n      }\n    }\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false\n        return this._options.initialBroadcastInterval || minute\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval\n    })\n\n    this._republishHandle = republishHandle\n  }\n\n  async stop () {\n    const republishHandle = this._republishHandle\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING')\n    }\n\n    this._republishHandle = null\n\n    await republishHandle.cancel()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {string} pass\n   * @param {AbortOptions} options\n   */\n  async _republishEntries (peerId, pass, options) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(peerId, options)\n    } catch (/** @type {any} */ err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key'\n\n      log.error(errMsg)\n      return\n    }\n\n    // keychain needs pass to get the cryptographic keys\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys()\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue\n          }\n\n          const pem = await this._keychain.exportKey(key.name, pass)\n          const privKey = await importKey(pem, pass)\n          const peerIdKey = await peerIdFromKeys(privKey.public.bytes, privKey.bytes)\n\n          await this._republishEntry(peerIdKey, options)\n        }\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {AbortOptions} options\n   */\n  async _republishEntry (peerId, options) {\n    try {\n      const value = await this._getPreviousValue(peerId)\n      await this._publisher.publishWithEOL(peerId, value, defaultRecordLifetime, options)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _getPreviousValue (peerId) {\n    if (!(isPeerId(peerId))) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID')\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.toBytes()))\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD')\n      }\n\n      // unmarshal data\n      try {\n        const record = ipns.unmarshal(dsVal)\n\n        return record.value\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD')\n      }\n    } catch (/** @type {any} */ err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.toString()}`), 'ERR_NO_ENTRY_FOUND')\n      }\n\n      throw err\n    }\n  }\n}\n","import errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { parseRFC3339, extractPublicKey, ipnsEntryDataForV2Sig, unmarshal, peerIdFromRoutingKey, parseCborData } from './utils.js';\nimport * as ERRORS from './errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('ipns:validator');\n/**\n * Validates the given ipns entry against the given public key\n */\nexport const validate = async (publicKey, entry) => {\n    const { value, validityType, validity } = entry;\n    let dataForSignature;\n    let signature;\n    // Check v2 signature if it's available, otherwise use the v1 signature\n    if ((entry.signatureV2 != null) && (entry.data != null)) {\n        signature = entry.signatureV2;\n        dataForSignature = ipnsEntryDataForV2Sig(entry.data);\n        validateCborDataMatchesPbData(entry);\n    }\n    else {\n        throw errCode(new Error('missing data or signatureV2'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    // Validate Signature\n    let isValid;\n    try {\n        isValid = await publicKey.verify(dataForSignature, signature);\n    }\n    catch (err) {\n        isValid = false;\n    }\n    if (!isValid) {\n        log.error('record signature verification failed');\n        throw errCode(new Error('record signature verification failed'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    // Validate according to the validity type\n    if (validity != null && validityType === IpnsEntry.ValidityType.EOL) {\n        let validityDate;\n        try {\n            validityDate = parseRFC3339(uint8ArrayToString(validity));\n        }\n        catch (e) {\n            log.error('unrecognized validity format (not an rfc3339 format)');\n            throw errCode(new Error('unrecognized validity format (not an rfc3339 format)'), ERRORS.ERR_UNRECOGNIZED_FORMAT);\n        }\n        if (validityDate.getTime() < Date.now()) {\n            log.error('record has expired');\n            throw errCode(new Error('record has expired'), ERRORS.ERR_IPNS_EXPIRED_RECORD);\n        }\n    }\n    else if (validityType != null) {\n        log.error('unrecognized validity type');\n        throw errCode(new Error('unrecognized validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    log('ipns entry for %b is valid', value);\n};\nconst validateCborDataMatchesPbData = (entry) => {\n    if (entry.data == null) {\n        throw errCode(new Error('Record data is missing'), ERRORS.ERR_INVALID_RECORD_DATA);\n    }\n    const data = parseCborData(entry.data);\n    if (!uint8ArrayEquals(data.Value, entry.value)) {\n        throw errCode(new Error('Field \"value\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (!uint8ArrayEquals(data.Validity, entry.validity)) {\n        throw errCode(new Error('Field \"validity\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.ValidityType !== entry.validityType) {\n        throw errCode(new Error('Field \"validityType\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.Sequence !== entry.sequence) {\n        throw errCode(new Error('Field \"sequence\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.TTL !== entry.ttl) {\n        throw errCode(new Error('Field \"ttl\" did not match between protobuf and CBOR'), ERRORS.ERR_SIGNATURE_VERIFICATION);\n    }\n};\nexport const ipnsValidator = async (key, marshalledData) => {\n    const peerId = peerIdFromRoutingKey(key);\n    const receivedEntry = unmarshal(marshalledData);\n    // extract public key\n    const pubKey = await extractPublicKey(peerId, receivedEntry);\n    // Record validation\n    await validate(pubKey, receivedEntry);\n};\n//# sourceMappingURL=validator.js.map","import * as ipns from 'ipns'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport * as Errors from 'datastore-core/errors'\nimport { ipnsValidator } from 'ipns/validator'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nconst log = logger('ipfs:ipns:resolver')\n\nconst ERR_NOT_FOUND = Errors.notFoundError().code\n\nconst defaultMaximumRecursiveDepth = 32\n\nexport class IpnsResolver {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   */\n  constructor (routing) {\n    this._routing = routing\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const recursive = options.recursive && options.recursive.toString() === 'true'\n\n    const nameSegments = name.split('/')\n\n    if (nameSegments.length !== 3 || nameSegments[0] !== '') {\n      throw errcode(new Error('invalid name'), 'ERR_INVALID_NAME')\n    }\n\n    const key = nameSegments[2]\n\n    // Define a maximum depth if recursive option enabled\n    let depth = Infinity\n\n    if (recursive) {\n      depth = defaultMaximumRecursiveDepth\n    }\n\n    const res = await this.resolver(key, depth, options)\n\n    log(`${name} was locally resolved correctly`)\n    return res\n  }\n\n  /**\n   * Recursive resolver according to the specified depth\n   *\n   * @param {string} name\n   * @param {number} depth\n   * @param {AbortOptions} options\n   * @returns {Promise<string>}\n   */\n  async resolver (name, depth, options) {\n    // Exceeded recursive maximum depth\n    if (depth === 0) {\n      const errMsg = `could not resolve name (recursion limit of ${defaultMaximumRecursiveDepth} exceeded)`\n      log.error(errMsg)\n\n      throw errcode(new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT')\n    }\n\n    const res = await this._resolveName(name, options)\n    const nameSegments = res.split('/')\n\n    // If obtained a ipfs cid or recursive option is disabled\n    if (nameSegments[1] === 'ipfs' || !depth) {\n      return res\n    }\n\n    // continue recursively until depth equals 0\n    return this.resolver(nameSegments[2], depth - 1, options)\n  }\n\n  /**\n   * Resolve ipns entries from the provided routing\n   *\n   * @param {string} name\n   * @param {AbortOptions} options\n   */\n  async _resolveName (name, options) {\n    const peerId = peerIdFromString(name)\n    const routingKey = ipns.peerIdToRoutingKey(peerId)\n    let record\n\n    try {\n      record = await this._routing.get(routingKey, options)\n    } catch (/** @type {any} */ err) {\n      log.error('could not get record from routing', err)\n\n      if (err.code === ERR_NOT_FOUND) {\n        throw errcode(new Error(`record requested for ${name} was not found in the network`), 'ERR_NO_RECORD_FOUND')\n      }\n\n      throw errcode(new Error(`unexpected error getting the ipns record ${peerId.toString()}`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD')\n    }\n\n    // We should have the public key by now (inline, or in the entry)\n    return this._validateRecord(peerId, record)\n  }\n\n  /**\n   * Validate a resolved record\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} record\n   */\n  async _validateRecord (peerId, record) {\n    // IPNS entry validation\n    await ipnsValidator(uint8ArrayConcat([\n      uint8ArrayFromString('/ipns/'),\n      peerId.toBytes()\n    ]), record)\n\n    const ipnsEntry = ipns.unmarshal(record)\n\n    return uint8ArrayToString(ipnsEntry.value)\n  }\n}\n","import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n","import errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { IpnsPublisher } from './publisher.js'\nimport { IpnsRepublisher } from './republisher.js'\nimport { IpnsResolver } from './resolver.js'\nimport { TLRU } from '../utils/tlru.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns')\nconst defaultRecordTtl = 60 * 1000\n\n/**\n * @typedef {import('@libp2p/interface-keys').PrivateKey} PrivateKey\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class IPNS {\n  /**\n   * @param {import('ipfs-core-types/src/utils').BufferStore} routing\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (routing, datastore, peerId, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore)\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options)\n    this.resolver = new IpnsResolver(routing)\n    this.cache = new TLRU(1000)\n    this.routing = routing\n  }\n\n  /**\n   * Publish\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  async publish (peerId, value, lifetime = IpnsPublisher.defaultRecordLifetime, options) {\n    try {\n      await this.publisher.publishWithEOL(peerId, value, lifetime, options)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was published correctly`)\n\n      // // Add to cache\n      const id = peerId.toString()\n      // @ts-expect-error - parseFloat expects string\n      const ttEol = parseFloat(lifetime)\n      const ttl = (ttEol < defaultRecordTtl) ? ttEol : defaultRecordTtl\n\n      this.cache.set(id, value, ttl)\n\n      log(`IPNS value ${uint8ArrayToString(value, 'base32')} was cached correctly`)\n\n      return {\n        name: id,\n        value: value\n      }\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Resolve\n   *\n   * @param {string} name\n   * @param {object} options\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  async resolve (name, options = {}) {\n    if (typeof name !== 'string') {\n      throw errcode(new Error('name received is not valid'), 'ERR_INVALID_NAME')\n    }\n\n    // If recursive, we should not try to get the cached value\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2]\n      const result = this.cache.get(id)\n\n      if (result) {\n        return result\n      }\n    }\n\n    try {\n      const result = await this.resolver.resolve(name, options)\n\n      log(`IPNS record from ${name} was resolved correctly`)\n\n      return result\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n\n      throw err\n    }\n  }\n\n  /**\n   * Initialize keyspace\n   *\n   * Sets the ipns record for the given key to point to an empty directory\n   *\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  async initializeKeyspace (peerId, value, options) { // eslint-disable-line require-await\n    return this.publish(peerId, value, IpnsPublisher.defaultRecordLifetime, options)\n  }\n}\n","/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all(source) {\n    const arr = [];\n    for await (const entry of source) {\n        arr.push(entry);\n    }\n    return arr;\n}\n//# sourceMappingURL=index.js.map","\nimport all from 'it-all'\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nexport const sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @param {string} s\n * @param {string} r\n */\nexport const replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r)\n  return s.replace(matcher, '')\n}\n","/**\n * Drains an (async) iterable discarding its' content and does not return\n * anything\n */\nexport default async function drain(source) {\n    for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n}\n//# sourceMappingURL=index.js.map","/**\n * Filters the passed (async) iterable by using the filter function\n */\nexport default async function* filter(source, fn) {\n    for await (const entry of source) {\n        if (await fn(entry)) {\n            yield entry;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * Stop iteration after n items have been received\n */\nexport default async function* take(source, limit) {\n    let items = 0;\n    if (limit < 1) {\n        return;\n    }\n    for await (const entry of source) {\n        yield entry;\n        items++;\n        if (items === limit) {\n            return;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { sortAll } from './utils.js'\nimport drain from 'it-drain'\nimport filter from 'it-filter'\nimport take from 'it-take'\n\n/**\n * @typedef {import('interface-store').Options} Options\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Batch} Batch\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Datastore}\n */\nexport class BaseDatastore {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {Key[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (e) =>\n        e.key.toString().startsWith(/** @type {string} */ (q.prefix))\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (key) =>\n        key.toString().startsWith(/** @type {string} */ (q.prefix))\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n","import { BaseDatastore } from './base.js'\nimport * as Errors from './errors.js'\nimport { logger } from '@libp2p/logger'\nimport { pushable } from 'it-pushable'\nimport drain from 'it-drain'\n\nconst log = logger('datastore:core:tiered')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore that can combine multiple stores. Puts and deletes\n * will write through to all datastores. Has and get will\n * try each store sequentially. Query will always try the\n * last one first.\n *\n */\nexport class TieredDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore[]} stores\n   */\n  constructor (stores) {\n    super()\n\n    this.stores = stores.slice()\n  }\n\n  async open () {\n    try {\n      await Promise.all(this.stores.map((store) => store.open()))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbOpenFailedError(err)\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value, options)))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbWriteFailedError(err)\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async get (key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options)\n        if (res) return res\n      } catch (err) {\n        log.error(err)\n      }\n    }\n    throw Errors.notFoundError()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async has (key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async delete (key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)))\n    } catch (/** @type {any} */ err) {\n      throw Errors.dbDeleteFailedError(err)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable({\n        objectMode: true\n      })\n\n      drain(store.putMany(source, options))\n        .catch(err => {\n          // store threw while putting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(pair))\n\n        yield pair\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable({\n        objectMode: true\n      })\n\n      drain(store.deleteMany(source, options))\n        .catch(err => {\n          // store threw while deleting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(key))\n\n        yield key\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  async close () {\n    await Promise.all(this.stores.map(store => store.close()))\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const batches = this.stores.map(store => store.batch())\n\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value))\n      },\n      delete: (key) => {\n        batches.forEach(b => b.delete(key))\n      },\n      commit: async (options) => {\n        for (const batch of batches) {\n          await batch.commit(options)\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    return this.stores[this.stores.length - 1].query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options)\n  }\n}\n","export default function(t,e,l,n,r){for(e=e.split?e.split(\".\"):e,n=0;n<e.length;n++)t=t?t[e[n]]:r;return t===r?l:t}\n//# sourceMappingURL=dlv.es.js.map\n","import { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { parseRFC3339 } from './utils.js';\nexport const ipnsSelector = (key, data) => {\n    const entries = data.map((buf, index) => ({\n        entry: IpnsEntry.decode(buf),\n        index\n    }));\n    entries.sort((a, b) => {\n        // having a newer signature version is better than an older signature version\n        if (a.entry.signatureV2 != null && b.entry.signatureV2 == null) {\n            return -1;\n        }\n        else if (a.entry.signatureV2 == null && b.entry.signatureV2 != null) {\n            return 1;\n        }\n        const aSeq = a.entry.sequence ?? 0n;\n        const bSeq = b.entry.sequence ?? 0n;\n        // choose later sequence number\n        if (aSeq > bSeq) {\n            return -1;\n        }\n        else if (aSeq < bSeq) {\n            return 1;\n        }\n        const aValidty = a.entry.validity ?? new Uint8Array(0);\n        const bValidty = b.entry.validity ?? new Uint8Array(0);\n        // choose longer lived record if sequence numbers the same\n        const entryAValidityDate = parseRFC3339(uint8ArrayToString(aValidty));\n        const entryBValidityDate = parseRFC3339(uint8ArrayToString(bValidty));\n        if (entryAValidityDate.getTime() > entryBValidityDate.getTime()) {\n            return -1;\n        }\n        if (entryAValidityDate.getTime() < entryBValidityDate.getTime()) {\n            return 1;\n        }\n        return 0;\n    });\n    return entries[0].index;\n};\n//# sourceMappingURL=selector.js.map","import { Key } from 'interface-datastore/key'\n// @ts-expect-error readme is unused\n// eslint-disable-next-line no-unused-vars\nimport readme from './shard-readme.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('./types').Shard} Shard\n */\n\nexport const PREFIX = '/repo/flatfs/shard/'\nexport const SHARDING_FN = 'SHARDING'\nexport const README_FN = '_README'\n\n/**\n * @implements {Shard}\n */\nexport class ShardBase {\n  /**\n   * @param {any} param\n   */\n  constructor (param) {\n    this.param = param\n    this.name = 'base'\n    this._padding = ''\n  }\n\n  /**\n   * @param {string} s\n   */\n  fun (s) {\n    return 'implement me'\n  }\n\n  toString () {\n    return `${PREFIX}v1/${this.name}/${this.param}`\n  }\n}\n/**\n * @implements {Shard}\n */\nexport class Prefix extends ShardBase {\n  /**\n   * @param {number} prefixLen\n   */\n  constructor (prefixLen) {\n    super(prefixLen)\n    this._padding = ''.padStart(prefixLen, '_')\n    this.name = 'prefix'\n  }\n\n  /**\n   * @param {string} noslash\n   */\n  fun (noslash) {\n    return (noslash + this._padding).slice(0, this.param)\n  }\n}\n\nexport class Suffix extends ShardBase {\n  /**\n   * @param {number} suffixLen\n   */\n  constructor (suffixLen) {\n    super(suffixLen)\n    this._padding = ''.padStart(suffixLen, '_')\n    this.name = 'suffix'\n  }\n\n  /**\n   * @param {string} noslash\n   */\n  fun (noslash) {\n    const s = this._padding + noslash\n    return s.slice(s.length - this.param)\n  }\n}\n\nexport class NextToLast extends ShardBase {\n  /**\n   * @param {number} suffixLen\n   */\n  constructor (suffixLen) {\n    super(suffixLen)\n    this._padding = ''.padStart(suffixLen + 1, '_')\n    this.name = 'next-to-last'\n  }\n\n  /**\n   * @param {string} noslash\n   */\n  fun (noslash) {\n    const s = this._padding + noslash\n    const offset = s.length - this.param - 1\n    return s.slice(offset, offset + this.param)\n  }\n}\n\n/**\n * Convert a given string to the matching sharding function.\n *\n * @param {string} str\n * @returns {Shard}\n */\nexport function parseShardFun (str) {\n  str = str.trim()\n\n  if (str.length === 0) {\n    throw new Error('empty shard string')\n  }\n\n  if (!str.startsWith(PREFIX)) {\n    throw new Error(`invalid or no path prefix: ${str}`)\n  }\n\n  const parts = str.slice(PREFIX.length).split('/')\n  const version = parts[0]\n\n  if (version !== 'v1') {\n    throw new Error(`expect 'v1' version, got '${version}'`)\n  }\n\n  const name = parts[1]\n\n  if (!parts[2]) {\n    throw new Error('missing param')\n  }\n\n  const param = parseInt(parts[2], 10)\n\n  switch (name) {\n    case 'prefix':\n      return new Prefix(param)\n    case 'suffix':\n      return new Suffix(param)\n    case 'next-to-last':\n      return new NextToLast(param)\n    default:\n      throw new Error(`unkown sharding function: ${name}`)\n  }\n}\n\n/**\n * @param {string | Uint8Array} path\n * @param {Datastore} store\n */\nexport const readShardFun = async (path, store) => {\n  const key = new Key(path).child(new Key(SHARDING_FN))\n  // @ts-ignore\n  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store)\n  const res = await get(key)\n  return parseShardFun(new TextDecoder().decode(res || '').trim())\n}\n\nexport { default as readme } from './shard-readme.js'\n","import { BaseDatastore } from './base.js'\nimport { Key } from 'interface-datastore/key'\nimport * as Errors from './errors.js'\n\n/**\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryDatastore\n * @implements {Datastore}\n */\nexport class MemoryDatastore extends BaseDatastore {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[key.toString()] = val\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[key.toString()]\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[key.toString()] !== undefined\n  }\n\n  /**\n   * @param {Key} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[key.toString()]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: new Key(key), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => new Key(key))\n  }\n}\n","/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function\n */\nexport default async function* map(source, func) {\n    for await (const val of source) {\n        yield func(val);\n    }\n}\n//# sourceMappingURL=index.js.map","import { Key } from 'interface-datastore'\nimport {\n  readShardFun,\n  SHARDING_FN,\n  README_FN,\n  readme\n} from './shard.js'\nimport { BaseDatastore } from './base.js'\nimport { KeyTransformDatastore } from './keytransform.js'\nimport * as Errors from './errors.js'\n\nconst shardKey = new Key(SHARDING_FN)\nconst shardReadmeKey = new Key(README_FN)\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').QueryFilter} QueryFilter\n * @typedef {import('interface-datastore').QueryOrder} QueryOrder\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').KeyQueryFilter} KeyQueryFilter\n * @typedef {import('interface-datastore').KeyQueryOrder} KeyQueryOrder\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').Shard} Shard\n *\n */\n/**\n * @template TValue\n * @typedef {import('interface-store').Await<TValue> } Await\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * Backend independent abstraction of go-ds-flatfs.\n *\n * Wraps another datastore such that all values are stored\n * sharded according to the given sharding function.\n */\nexport class ShardingDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore} store\n   * @param {Shard} shard\n   */\n  constructor (store, shard) {\n    super()\n\n    this.child = new KeyTransformDatastore(store, {\n      convert: this._convertKey.bind(this),\n      invert: this._invertKey.bind(this)\n    })\n    this.shard = shard\n  }\n\n  async open () {\n    await this.child.open()\n\n    this.shard = await ShardingDatastore.create(this.child, this.shard)\n  }\n\n  /**\n   * @param {Key} key\n   */\n  _convertKey (key) {\n    const s = key.toString()\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key\n    }\n\n    const parent = new Key(this.shard.fun(s))\n    return parent.child(key)\n  }\n\n  /**\n   * @param {Key} key\n   */\n  _invertKey (key) {\n    const s = key.toString()\n    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {\n      return key\n    }\n    return Key.withNamespaces(key.list().slice(1))\n  }\n\n  /**\n   * @deprecated\n   * @param {Datastore} store\n   * @param {Shard} shard\n   */\n  static async createOrOpen (store, shard) {\n    try {\n      await ShardingDatastore.create(store, shard)\n    } catch (/** @type {any} */ err) {\n      if (err && err.message !== 'datastore exists') throw err\n    }\n    return ShardingDatastore.open(store)\n  }\n\n  /**\n   * @deprecated\n   * @param {Datastore} store\n   */\n  static async open (store) {\n    const shard = await readShardFun('/', store)\n    return new ShardingDatastore(store, shard)\n  }\n\n  /**\n   * @param {Datastore} store\n   * @param {Shard} shard\n   */\n  static async create (store, shard) {\n    const hasShard = await store.has(shardKey)\n    if (!hasShard && !shard) {\n      throw Errors.dbOpenFailedError(Error('Shard is required when datastore doesn\\'t have a shard key already.'))\n    }\n    if (!hasShard) {\n      // @ts-ignore i have no idea what putRaw is or saw any implementation\n      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store)\n      await Promise.all([\n        put(shardKey, new TextEncoder().encode(shard.toString() + '\\n')),\n        put(shardReadmeKey, new TextEncoder().encode(readme))\n      ])\n\n      return shard\n    }\n\n    // test shards\n    const diskShard = await readShardFun('/', store)\n    const a = (diskShard || '').toString()\n    const b = shard.toString()\n    if (a !== b) {\n      throw new Error(`specified fun ${b} does not match repo shard fun ${a}`)\n    }\n    return diskShard\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put (key, val, options) {\n    return this.child.put(key, val, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    return this.child.get(key, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    return this.child.has(key, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    return this.child.delete(key, options)\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    yield * this.child.putMany(source, options)\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    yield * this.child.getMany(source, options)\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    yield * this.child.deleteMany(source, options)\n  }\n\n  batch () {\n    return this.child.batch()\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    /** @type {Query} */\n    const tq = {\n      ...q,\n      filters: [\n        /** @type {QueryFilter} */\n        ({ key }) => key.toString() !== shardKey.toString(),\n        /** @type {QueryFilter} */\n        ({ key }) => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    }\n\n    return this.child.query(tq, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    /** @type {KeyQuery} */\n    const tq = {\n      ...q,\n      filters: [\n        /** @type {KeyQueryFilter} */\n        key => key.toString() !== shardKey.toString(),\n        /** @type {KeyQueryFilter} */\n        key => key.toString() !== shardReadmeKey.toString()\n      ].concat(q.filters || [])\n    }\n\n    return this.child.queryKeys(tq, options)\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n","import { CodeError } from '@libp2p/interfaces/errors'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('interface-datastore').Key} Key\n */\n\nconst namespace = '/record/'\n\n/**\n * @param {Uint8Array} buf\n */\nexport function encodeBase32 (buf) {\n  return uint8ArrayToString(buf, 'base32')\n}\n\n/**\n * converts a binary record key to a pubsub topic key\n *\n * @param {Uint8Array | string} key\n */\nexport function keyToTopic (key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  if (typeof key === 'string' || key instanceof String) {\n    key = uint8ArrayFromString(key.toString())\n  }\n\n  const b64url = uint8ArrayToString(key, 'base64url')\n\n  return `${namespace}${b64url}`\n}\n\n/**\n * converts a pubsub topic key to a binary record key\n *\n * @param {string} topic\n */\nexport function topicToKey (topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw new CodeError('topic received is not from a record', 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE')\n  }\n\n  const key = topic.substring(namespace.length)\n\n  return uint8ArrayFromString(key, 'base64url')\n}\n","import { Key } from 'interface-datastore'\nimport { BaseDatastore } from 'datastore-core'\nimport { encodeBase32, keyToTopic, topicToKey } from './utils.js'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('datastore-pubsub:publisher')\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('./types').SubscriptionKeyFn} SubscriptionKeyFn\n * @typedef {import('@libp2p/interface-pubsub').Message} PubSubMessage\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// DatastorePubsub is responsible for providing an api for pubsub to be used as a datastore with\n// [TieredDatastore]{@link https://github.com/ipfs/js-datastore-core/blob/master/src/tiered.js}\nexport class PubSubDatastore extends BaseDatastore {\n  /**\n   * Creates an instance of DatastorePubsub.\n   *\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub - pubsub implementation\n   * @param {import('interface-datastore').Datastore} datastore - datastore instance\n   * @param {PeerId} peerId - peer-id instance\n   * @param {import('@libp2p/interface-dht').ValidateFn} validator - validator function\n   * @param {import('@libp2p/interface-dht').SelectFn} selector - selector function\n   * @param {SubscriptionKeyFn} [subscriptionKeyFn] - function to manipulate the key topic received before processing it\n   * @memberof DatastorePubsub\n   */\n  constructor (pubsub, datastore, peerId, validator, selector, subscriptionKeyFn) {\n    super()\n\n    if (!validator) {\n      throw new CodeError('missing validator', 'ERR_INVALID_PARAMETERS')\n    }\n\n    if (typeof validator !== 'function') {\n      throw new CodeError('missing validate function', 'ERR_INVALID_PARAMETERS')\n    }\n\n    if (typeof selector !== 'function') {\n      throw new CodeError('missing select function', 'ERR_INVALID_PARAMETERS')\n    }\n\n    if (subscriptionKeyFn && typeof subscriptionKeyFn !== 'function') {\n      throw new CodeError('invalid subscriptionKeyFn received', 'ERR_INVALID_PARAMETERS')\n    }\n\n    this._pubsub = pubsub\n    this._datastore = datastore\n    this._peerId = peerId\n    this._validator = validator\n    this._selector = selector\n    this._handleSubscriptionKeyFn = subscriptionKeyFn\n\n    // Bind _onMessage function, which is called by pubsub.\n    this._onMessage = this._onMessage.bind(this)\n    this._pubsub.addEventListener('message', this._onMessage)\n  }\n\n  /**\n   * Publishes a value through pubsub.\n   *\n   * @param {Uint8Array} key - identifier of the value to be published.\n   * @param {Uint8Array} val - value to be propagated.\n   * @param {AbortOptions} [options]\n   */\n  // @ts-ignore Datastores take keys as Keys, this one takes Uint8Arrays\n  async put (key, val, options) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format'\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_INVALID_DATASTORE_KEY')\n    }\n\n    if (!(val instanceof Uint8Array)) {\n      const errMsg = 'received value is not a Uint8Array'\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_INVALID_VALUE_RECEIVED')\n    }\n\n    const stringifiedTopic = keyToTopic(key)\n\n    log(`publish value for topic ${stringifiedTopic}`)\n\n    // Publish record to pubsub\n    await this._pubsub.publish(stringifiedTopic, val)\n  }\n\n  /**\n   * Try to subscribe a topic with Pubsub and returns the local value if available.\n   *\n   * @param {Uint8Array} key - identifier of the value to be subscribed.\n   * @param {AbortOptions} [options]\n   */\n  // @ts-ignore Datastores take keys as Keys, this one takes Uint8Arrays\n  async get (key, options) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format'\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_INVALID_DATASTORE_KEY')\n    }\n\n    const stringifiedTopic = keyToTopic(key)\n    const subscriptions = await this._pubsub.getTopics()\n\n    // If already subscribed, just try to get it\n    if (subscriptions && Array.isArray(subscriptions) && subscriptions.indexOf(stringifiedTopic) > -1) {\n      return this._getLocal(key, options)\n    }\n\n    // subscribe\n    try {\n      await this._pubsub.subscribe(stringifiedTopic)\n    } catch (/** @type {any} */ err) {\n      const errMsg = `cannot subscribe topic ${stringifiedTopic}`\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_SUBSCRIBING_TOPIC')\n    }\n    log(`subscribed values for key ${stringifiedTopic}`)\n\n    return this._getLocal(key)\n  }\n\n  /**\n   * Unsubscribe topic.\n   *\n   * @param {Uint8Array} key - identifier of the value to unsubscribe.\n   * @returns {void}\n   */\n  unsubscribe (key) {\n    const stringifiedTopic = keyToTopic(key)\n\n    return this._pubsub.unsubscribe(stringifiedTopic)\n  }\n\n  /**\n   * Get record from local datastore\n   *\n   * @private\n   * @param {Uint8Array} key\n   * @param {AbortOptions} [options]\n   */\n  async _getLocal (key, options) {\n    // encode key - base32(/ipns/{cid})\n    const routingKey = new Key('/' + encodeBase32(key), false)\n    let dsVal\n\n    try {\n      dsVal = await this._datastore.get(routingKey, options)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        const errMsg = `unexpected error getting the ipns record for ${routingKey.toString()}`\n\n        log.error(errMsg)\n        throw new CodeError(errMsg, 'ERR_UNEXPECTED_ERROR_GETTING_RECORD')\n      }\n      const errMsg = `local record requested was not found for ${routingKey.toString()}`\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_NOT_FOUND')\n    }\n\n    if (!(dsVal instanceof Uint8Array)) {\n      const errMsg = 'found record that we couldn\\'t convert to a value'\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_INVALID_RECORD_RECEIVED')\n    }\n\n    return dsVal\n  }\n\n  /**\n   * handles pubsub subscription messages\n   *\n   * @param {CustomEvent<PubSubMessage>} evt\n   */\n  async _onMessage (evt) {\n    const msg = evt.detail\n\n    if (msg.type !== 'signed') {\n      log.error('unsigned message received, this module can only work with signed messages')\n      return\n    }\n\n    const { data, from, topic } = msg\n    let key\n    try {\n      key = topicToKey(topic)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      return\n    }\n\n    log(`message received for topic ${topic}`)\n\n    // Stop if the message is from the peer (it already stored it while publishing to pubsub)\n    if (this._peerId.equals(from)) {\n      log('message discarded as it is from the same peer')\n      return\n    }\n\n    if (this._handleSubscriptionKeyFn) {\n      let res\n\n      try {\n        res = await this._handleSubscriptionKeyFn(key)\n      } catch (/** @type {any} */ err) {\n        log.error('message discarded by the subscriptionKeyFn')\n        return\n      }\n\n      key = res\n    }\n\n    try {\n      await this._storeIfSubscriptionIsBetter(key, data)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * Store the received record if it is better than the current stored\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} data\n   * @param {AbortOptions} [options]\n   */\n  async _storeIfSubscriptionIsBetter (key, data, options) {\n    let isBetter = false\n\n    try {\n      isBetter = await this._isBetter(key, data)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== 'ERR_NOT_VALID_RECORD') {\n        throw err\n      }\n    }\n\n    if (isBetter) {\n      await this._storeRecord(key, data, options)\n    }\n  }\n\n  /**\n   * Validate record according to the received validation function\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   */\n  async _validateRecord (key, value) { // eslint-disable-line require-await\n    return this._validator(key, value)\n  }\n\n  /**\n   * Select the best record according to the received select function\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array[]} records\n   */\n  async _selectRecord (key, records) {\n    const res = await this._selector(key, records)\n\n    // If the selected was the first (0), it should be stored (true)\n    return res === 0\n  }\n\n  /**\n   * Verify if the record received through pubsub is valid and better than the one currently stored\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} val\n   */\n  async _isBetter (key, val) {\n    try {\n      await this._validateRecord(key, val)\n    } catch (/** @type {any} */ err) {\n      // If not valid, it is not better than the one currently available\n      const errMsg = 'record received through pubsub is not valid'\n\n      log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_NOT_VALID_RECORD')\n    }\n\n    // Get Local record\n    const dsKey = new Key(key)\n    let currentRecord\n\n    try {\n      currentRecord = await this._getLocal(dsKey.uint8Array())\n    } catch (/** @type {any} */ err) {\n      // if the old one is invalid, the new one is *always* better\n      return true\n    }\n\n    // if the same record, do not need to store\n    if (uint8ArrayEquals(currentRecord, val)) {\n      return false\n    }\n\n    // verify if the received record should replace the current one\n    return this._selectRecord(key, [currentRecord, val])\n  }\n\n  /**\n   * add record to datastore\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} data\n   * @param {AbortOptions} [options]\n   */\n  async _storeRecord (key, data, options) {\n    // encode key - base32(/ipns/{cid})\n    const routingKey = new Key('/' + encodeBase32(key), false)\n\n    await this._datastore.put(routingKey, data, options)\n    log(`record for ${keyToTopic(key)} was stored in the datastore`)\n  }\n}\n","import { namespaceLength, namespace, peerIdToRoutingKey } from 'ipns'\nimport { ipnsValidator } from 'ipns/validator'\nimport { ipnsSelector } from 'ipns/selector'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { PubSubDatastore } from 'datastore-pubsub'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:ipns:pubsub')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Pubsub datastore aims to manage the pubsub subscriptions for IPNS\nexport class IpnsPubsubDatastore {\n  /**\n   * @param {import('@libp2p/interface-pubsub').PubSub} pubsub\n   * @param {import('interface-datastore').Datastore} localDatastore\n   * @param {import('@libp2p/interface-peer-id').PeerId} peerId\n   */\n  constructor (pubsub, localDatastore, peerId) {\n    /** @type {Record<string, string>} */\n    this._subscriptions = {}\n\n    // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this)\n\n    this._pubsubDs = new PubSubDatastore(pubsub, localDatastore, peerId, ipnsValidator, ipnsSelector, this._handleSubscriptionKey)\n  }\n\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await this._pubsubDs.put(key, value, options)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get a value from the pubsub datastore indexed by the received key properly encoded.\n   * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n   * updated once new publishes occur.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    let res\n    let err\n\n    try {\n      res = await this._pubsubDs.get(key, options)\n    } catch (/** @type {any} */ e) {\n      err = e\n    }\n\n    // Add topic subscribed\n    const ns = key.slice(0, namespaceLength)\n\n    if (uint8ArrayToString(ns) === namespace) {\n      const stringifiedTopic = base58btc.encode(key).substring(1)\n      const id = base58btc.encode(key.slice(namespaceLength)).substring(1)\n\n      this._subscriptions[stringifiedTopic] = id\n\n      log(`subscribed to pubsub topic ${stringifiedTopic}, id ${id}`)\n    }\n\n    // If no data was obtained, after storing the subscription, return the error.\n    if (err) {\n      throw err\n    }\n\n    return res\n  }\n\n  /**\n   * Modify subscription key to have a proper encoding\n   *\n   * @param {Uint8Array | string} key\n   */\n  _handleSubscriptionKey (key) {\n    if (key instanceof Uint8Array) {\n      key = uint8ArrayToString(key, 'base58btc')\n    }\n\n    const subscriber = this._subscriptions[key]\n\n    if (!subscriber) {\n      throw errcode(new Error(`key ${key} does not correspond to a subscription`), 'ERR_INVALID_KEY')\n    }\n\n    try {\n      const k = peerIdToRoutingKey(peerIdFromString(subscriber))\n      return k\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * Get pubsub subscriptions related to ipns.\n   */\n  getSubscriptions () {\n    const subscriptions = Object.values(this._subscriptions).filter(Boolean)\n\n    return subscriptions.map((sub) => `${namespace}${sub}`)\n  }\n\n  /**\n   * Cancel pubsub subscriptions related to ipns.\n   *\n   * @param {string} name - ipns path to cancel the pubsub subscription.\n   */\n  async cancel (name) { // eslint-disable-line require-await\n    if (typeof name !== 'string') {\n      throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME')\n    }\n\n    // Trim /ipns/ prefix from the name\n    if (name.startsWith(namespace)) {\n      name = name.substring(namespaceLength)\n    }\n\n    const stringifiedTopic = Object.keys(this._subscriptions).find((key) => this._subscriptions[key] === name)\n\n    // Not found topic\n    if (!stringifiedTopic) {\n      return {\n        canceled: false\n      }\n    }\n\n    // Unsubscribe topic\n    const bufTopic = uint8ArrayFromString(stringifiedTopic)\n\n    this._pubsubDs.unsubscribe(bufTopic)\n\n    delete this._subscriptions[stringifiedTopic]\n    log(`unsubscribed pubsub ${stringifiedTopic}: ${name}`)\n\n    return {\n      canceled: true\n    }\n  }\n}\n","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = message((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.key != null && obj.key.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if ((obj.value != null && obj.value.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if ((obj.timeReceived != null && obj.timeReceived !== '')) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    key: new Uint8Array(0),\n                    value: new Uint8Array(0),\n                    timeReceived: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.key = reader.bytes();\n                            break;\n                        case 2:\n                            obj.value = reader.bytes();\n                            break;\n                        case 5:\n                            obj.timeReceived = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return encodeMessage(obj, Record.codec());\n    };\n    Record.decode = (buf) => {\n        return decodeMessage(buf, Record.codec());\n    };\n})(Record || (Record = {}));\n//# sourceMappingURL=record.js.map","/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n    const year = time.getUTCFullYear();\n    const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(time.getUTCDate()).padStart(2, '0');\n    const hour = String(time.getUTCHours()).padStart(2, '0');\n    const minute = String(time.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n    const milliseconds = time.getUTCMilliseconds();\n    const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0');\n    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n    const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n        // 15:04:05\n        '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n        // .999999999Z\n        '\\\\.(\\\\d+)Z');\n    const m = String(time).trim().match(rfc3339Matcher);\n    if (m == null) {\n        throw new Error('Invalid format');\n    }\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const date = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    const millisecond = parseInt(m[7].slice(0, -6), 10);\n    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n//# sourceMappingURL=utils.js.map","import { Record } from './record.js';\nimport * as utils from './utils.js';\nexport class Libp2pRecord {\n    key;\n    value;\n    timeReceived;\n    constructor(key, value, timeReceived) {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error('key must be a Uint8Array');\n        }\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('value must be a Uint8Array');\n        }\n        this.key = key;\n        this.value = value;\n        this.timeReceived = timeReceived;\n    }\n    serialize() {\n        return Record.encode(this.prepareSerialize());\n    }\n    /**\n     * Return the object format ready to be given to the protobuf library.\n     */\n    prepareSerialize() {\n        return {\n            key: this.key,\n            value: this.value,\n            timeReceived: utils.toRFC3339(this.timeReceived)\n        };\n    }\n    /**\n     * Decode a protobuf encoded record\n     */\n    static deserialize(raw) {\n        const rec = Record.decode(raw);\n        return new Libp2pRecord(rec.key, rec.value, new Date(rec.timeReceived));\n    }\n    /**\n     * Create a record from the raw object returned from the protobuf library\n     */\n    static fromDeserialized(obj) {\n        const recvtime = utils.parseRFC3339(obj.timeReceived);\n        if (obj.key == null) {\n            throw new Error('key missing from deserialized object');\n        }\n        if (obj.value == null) {\n            throw new Error('value missing from deserialized object');\n        }\n        const rec = new Libp2pRecord(obj.key, obj.value, recvtime);\n        return rec;\n    }\n}\n//# sourceMappingURL=index.js.map","import { Key } from 'interface-datastore/key'\nimport { Libp2pRecord } from '@libp2p/record'\nimport errcode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst log = logger('ipfs:ipns:offline-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nexport class OfflineDatastore {\n  /**\n   * @param {import('interface-datastore').Datastore} datastore\n   */\n  constructor (datastore) {\n    this._datastore = datastore\n    /** @type {any[]} */\n    this.stores = []\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) { // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Libp2pRecord(key, value, new Date())\n\n    await this._datastore.put(routingKey, record.serialize(), options)\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    const res = await this._datastore.get(routingKey, options)\n\n    // Unmarshal libp2p record as the DHT does\n    let record\n    try {\n      record = Libp2pRecord.deserialize(res)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    return record.value\n  }\n\n  /**\n   * encode key properly - base32(/ipns/{cid})\n   *\n   * @param {Uint8Array} key\n   */\n  _routingKey (key) {\n    return new Key('/dht/record/' + uint8ArrayToString(key, 'base32'), false)\n  }\n}\n","import drain from 'it-drain'\nimport { notFoundError } from 'datastore-core/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:ipns:dht-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw notFoundError()\n  }\n}\n","import { TieredDatastore } from 'datastore-core/tiered'\nimport get from 'dlv'\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js'\nimport { OfflineDatastore } from './offline-datastore.js'\nimport { DHTDatastore } from './dht-datastore.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting ({ libp2p, repo, peerId, options }) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht))\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore)\n    ipnsStores.push(offlineDatastore)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n","import { IPNS } from '../ipns/index.js'\nimport { createRouting } from '../ipns/routing/config.js'\nimport { OfflineDatastore } from '../ipns/routing/offline-datastore.js'\nimport { NotInitializedError, AlreadyInitializedError } from '../errors.js'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:ipns')\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n *\n * @typedef {object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub]\n *\n * @typedef {object} LibP2POptions\n * @property {DHTConfig} [config]\n *\n * @typedef {object} DHTConfig\n * @property {boolean} [enabled]\n */\n\nexport class IPNSAPI {\n  /**\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {boolean} [options.offline]\n   * @param {LibP2POptions} [options.libp2p]\n   * @param {ExperimentalOptions} [options.EXPERIMENTAL]\n   */\n  constructor (options = { pass: '' }) {\n    this.options = options\n\n    /** @type {IPNS | null} */\n    this.offline = null\n\n    /** @type {IPNS | null} */\n    this.online = null\n  }\n\n  getIPNS () {\n    const ipns = this.online || this.offline\n    if (ipns) {\n      return ipns\n    } else {\n      throw new NotInitializedError()\n    }\n  }\n\n  get routing () {\n    return this.getIPNS().routing\n  }\n\n  /**\n   * Activates IPNS subsystem in an ofline mode. If it was started once already\n   * it will throw an exception.\n   *\n   * This is primarily used for offline ipns modifications, such as the\n   * initializeKeyspace feature.\n   *\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  startOffline ({ repo, peerId, keychain }) {\n    if (this.offline != null) {\n      throw new AlreadyInitializedError()\n    }\n\n    log('initializing IPNS keyspace (offline)')\n\n    const routing = new OfflineDatastore(repo.datastore)\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n\n    this.offline = ipns\n  }\n\n  /**\n   * @param {object} config\n   * @param {import('libp2p').Libp2p} config.libp2p\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   */\n  async startOnline ({ libp2p, repo, peerId, keychain }) {\n    if (this.online != null) {\n      throw new AlreadyInitializedError()\n    }\n    const routing = createRouting({ libp2p, repo, peerId, options: this.options })\n\n    // @ts-expect-error routing is a TieredDatastore which wants keys to be Keys, IPNS needs keys to be Uint8Arrays\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n    await ipns.republisher.start()\n    this.online = ipns\n  }\n\n  async stop () {\n    const ipns = this.online\n    if (ipns) {\n      await ipns.republisher.stop()\n      this.online = null\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   * @param {AbortOptions} [options]\n   */\n  publish (peerId, value, lifetime, options) {\n    return this.getIPNS().publish(peerId, value, lifetime, options)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.nocache]\n   * @param {boolean} [options.recursive]\n   * @param {AbortSignal} [options.signal]\n   */\n  resolve (name, options) {\n    return this.getIPNS().resolve(name, options)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Uint8Array} value\n   * @param {AbortOptions} [options]\n   */\n  initializeKeyspace (peerId, value, options) {\n    return this.getIPNS().initializeKeyspace(peerId, value, options)\n  }\n}\n","import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n","import { logger } from '@libp2p/logger'\nimport parseDuration from 'parse-duration'\nimport { importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport errcode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR, normalizePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { resolvePath } from './utils.js'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\n\nconst log = logger('ipfs:name:publish')\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createPublish ({ ipns, repo, codecs, peerId, isOnline, keychain }) {\n  /**\n   * @param {string} keyName\n   */\n  const lookupKey = async keyName => {\n    /** @type {import('@libp2p/interface-keys').PrivateKey} */\n    let privateKey\n\n    if (keyName === 'self' && peerId.privateKey != null) {\n      privateKey = await unmarshalPrivateKey(peerId.privateKey)\n    } else {\n      try {\n        // We're exporting and immediately importing the key, so we can just use a throw away password\n        const pem = await keychain.exportKey(keyName, 'temp')\n        privateKey = await importKey(pem, 'temp')\n      } catch (/** @type {any} */ err) {\n        log.error(err)\n        throw errcode(err, 'ERR_CANNOT_GET_KEY')\n      }\n    }\n\n    return peerIdFromKeys(privateKey.public.bytes, privateKey.bytes)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"publish\"]}\n   */\n  async function publish (value, options = {}) {\n    const resolve = !(options.resolve === false)\n    const lifetime = options.lifetime || '24h'\n    const key = options.key || 'self'\n\n    if (!isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    // TODO: params related logic should be in the core implementation\n    // Normalize path value\n    try {\n      value = normalizePath(value)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    let pubLifetime = 0\n    try {\n      pubLifetime = parseDuration(lifetime) || 0\n\n      // Calculate lifetime with nanoseconds precision\n      pubLifetime = parseFloat(pubLifetime.toFixed(6))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n\n    // TODO: ttl human for cache\n    const results = await Promise.all([\n      // verify if the path exists, if not, an error will stop the execution\n      lookupKey(key),\n      // if resolving, do a get so we make sure we have the blocks\n      resolve ? resolvePath({ ipns, repo, codecs }, value) : Promise.resolve()\n    ])\n\n    const bytes = uint8ArrayFromString(value)\n\n    // Start publishing process\n    const result = await ipns.publish(results[0], bytes, pubLifetime, options)\n\n    return {\n      name: result.name,\n      value: uint8ArrayToString(result.value)\n    }\n  }\n\n  return withTimeoutOption(publish)\n}\n","'use strict'\n\n// Adapted from RFC 2181 (See section 11)\n//\n// The RFC defines a Domain Name to be at most 255 chars including seperators\n// between labels.\n// Subdomains are labels plus a seperator. A label is a string starting and\n// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.\n//\n// We make some assumptions below that go beyond the RFC. We assume the TLD\n// to be at least 2 chars. The regex also allows domains longer than 255 chars,\n// but allows at most 127 subdomains, as assuming a lower-bound of one char per\n// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.\n/*\n(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)\n  [a-z0-9]\n  (?:\n    [a-z0-9\\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)\n    [a-z0-9]\n  )?\n  \\.                  // Label seperator\n){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars\n(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)\n  [a-z0-9]\n  [a-z0-9\\-]{0,61}\n  [a-z0-9]\n)\n\\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree\n */\nvar domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.){0,126}(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9]))\\.?$/i\n\n/**\n * Test whether a string is a valid domain name, optionally checking for a root dot as well\n * @param  {String}  domainName\n * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false\n * @return {Boolean}\n */\nmodule.exports = function isDomainName (domainName, rootDot) {\n  if (rootDot == null) rootDot = false\n\n  if (domainName.length < 2) return false\n  if (domainName.length > 255) return false\n\n  var lastChar = domainName[domainName.length - 1]\n  if (rootDot) {\n    if (lastChar !== '.') return false\n  } else {\n    if (lastChar === '.') return false\n  }\n\n  return domainNameRegex.test(domainName)\n}\n","import { logger } from '@libp2p/logger'\nimport errcode from 'err-code'\nimport mergeOpts from 'merge-options'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { base36 } from 'multiformats/bases/base36'\nimport { peerIdFromString } from '@libp2p/peer-id'\n// @ts-expect-error no types\nimport isDomain from 'is-domain-name'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { OFFLINE_ERROR } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\nconst log = logger('ipfs:name:resolve')\n\n/**\n *\n * @param {string} result\n * @param {string[]} remainder\n * @returns {string}\n */\nconst appendRemainder = (result, remainder) =>\n  remainder.length > 0\n    ? result + '/' + remainder.join('/')\n    : result\n\n/**\n * IPNS - Inter-Planetary Naming System\n *\n * @param {object} config\n * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n * @param {import('../ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n * @param {import('../../types').Options} config.options\n */\nexport function createResolve ({ dns, ipns, isOnline, options: { offline } }) {\n  /**\n   * @type {import('ipfs-core-types/src/name').API<{}>[\"resolve\"]}\n   */\n  async function * resolve (name, options = {}) { // eslint-disable-line require-await\n    options = mergeOptions({\n      nocache: false,\n      recursive: true\n    }, options)\n\n    // TODO: params related logic should be in the core implementation\n    if (offline && options && options.nocache) {\n      throw errcode(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE')\n    }\n\n    // IPNS resolve needs a online daemon\n    if (!isOnline() && !offline) {\n      throw errcode(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR')\n    }\n\n    let ipnsName = name.toString()\n\n    if (!ipnsName.startsWith('/ipns/')) {\n      ipnsName = `/ipns/${ipnsName}`\n    }\n\n    let [namespace, hash, ...remainder] = ipnsName.slice(1).split('/')\n\n    try {\n      if (hash.substring(0, 1) === '1') {\n        const id = peerIdFromString(hash)\n        const digest = Digest.decode(id.toBytes())\n        const libp2pKey = CID.createV1(0x72, digest)\n        hash = libp2pKey.toString(base36)\n      } else {\n        const cid = CID.parse(hash)\n\n        if (cid.version === 1) {\n          hash = cid.toString(base36)\n        }\n      }\n    } catch (/** @type {any} */ err) {\n      // lets check if we have a domain ex. /ipns/ipfs.io and resolve with dns\n      if (isDomain(hash)) {\n        yield appendRemainder(await dns(hash, options), remainder)\n        return\n      }\n\n      log.error(err)\n      throw errcode(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME')\n    }\n\n    // multihash is valid lets resolve with IPNS\n    // TODO: convert ipns.resolve to return an iterator\n    const value = await ipns.resolve(`/${namespace}/${hash}`, options)\n    yield appendRemainder(value instanceof Uint8Array ? uint8ArrayToString(value) : value, remainder)\n  }\n\n  return withTimeoutOption(resolve)\n}\n","import { IpnsPubsubDatastore } from '../../../ipns/routing/pubsub-datastore.js'\nimport errcode from 'err-code'\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns').IPNSAPI} ipns\n * @param {ExperimentalOptions} [options]\n */\nexport function getPubsubRouting (ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createCancel ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.cancel(name, options)\n  }\n\n  return withTimeoutOption(cancel)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createState ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"state\"]}\n   */\n  async function state (_options = {}) { // eslint-disable-line require-await\n    try {\n      return { enabled: Boolean(getPubsubRouting(ipns, experimental)) }\n    } catch (/** @type {any} */ err) {\n      return { enabled: false }\n    }\n  }\n\n  return withTimeoutOption(state)\n}\n","import { getPubsubRouting } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../ipns').IPNSAPI} config.ipns\n * @param {import('../../../types').Options} config.options\n */\nexport function createSubs ({ ipns, options }) {\n  const experimental = options.EXPERIMENTAL\n\n  /**\n   * @type {import('ipfs-core-types/src/name/pubsub').API<{}>[\"subs\"]}\n   */\n  async function subs (options = {}) { // eslint-disable-line require-await\n    const pubsub = getPubsubRouting(ipns, experimental)\n    return pubsub.getSubscriptions(options)\n  }\n\n  return withTimeoutOption(subs)\n}\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\nexport class PubSubAPI {\n  /**\n   * @param {object} config\n   * @param {import('../../ipns').IPNSAPI} config.ipns\n   * @param {import('../../../types').Options} config.options\n   */\n  constructor ({ ipns, options }) {\n    this.cancel = createCancel({ ipns, options })\n    this.state = createState({ ipns, options })\n    this.subs = createSubs({ ipns, options })\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","import * as dagPB from '@ipld/dag-pb'\nimport { notFoundError } from 'datastore-core/errors'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { CID } from 'multiformats/cid'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\n\nconst ERR_NOT_FOUND = notFoundError().code\n\nexport const Format = {\n  default: '<dst>',\n  edges: '<src> -> <dst>'\n}\n\n/**\n * @typedef {object} Node\n * @property {string} [name]\n * @property {CID} cid\n *\n * @typedef {object} TraversalResult\n * @property {Node} parent\n * @property {Node} node\n * @property {boolean} isDuplicate\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} config.resolve\n * @param {import('../../types').Preload} config.preload\n */\nexport function createRefs ({ repo, codecs, resolve, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"refs\"]}\n   */\n  async function * refs (ipfsPath, options = {}) {\n    if (options.maxDepth === 0) {\n      return\n    }\n\n    if (options.edges && options.format && options.format !== Format.default) {\n      throw new Error('Cannot set edges to true and also specify format')\n    }\n\n    options.format = options.edges ? Format.edges : options.format\n\n    if (typeof options.maxDepth !== 'number') {\n      options.maxDepth = options.recursive ? Infinity : 1\n    }\n\n    if (options.timeout) {\n      const controller = new TimeoutController(options.timeout)\n      const signals = [controller.signal]\n\n      if (options.signal) {\n        signals.push(options.signal)\n      }\n\n      options.signal = anySignal(signals)\n    }\n\n    /** @type {(string|CID)[]} */\n    const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath]\n\n    const paths = rawPaths.map(p => getFullPath(preload, p, options))\n\n    for (const path of paths) {\n      try {\n        yield * refsStream(resolve, repo, codecs, path, options)\n      } catch (/** @type {any} */ err) {\n        yield {\n          ref: '',\n          err: err.message\n        }\n      }\n    }\n  }\n\n  return refs\n}\n\n/**\n * @param {import('../../types').Preload} preload\n * @param {string | CID} ipfsPath\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nfunction getFullPath (preload, ipfsPath, options) {\n  const {\n    cid,\n    path\n  } = toCidAndPath(ipfsPath)\n\n  if (options.preload !== false) {\n    preload(cid)\n  }\n\n  return `/ipfs/${cid}${path || ''}`\n}\n\n/**\n * Get a stream of refs at the given path\n *\n * @param {import('ipfs-core-types/src/root').API<{}>[\"resolve\"]} resolve\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {string} path\n * @param {import('ipfs-core-types/src/refs').RefsOptions} options\n */\nasync function * refsStream (resolve, repo, codecs, path, options) {\n  // Resolve to the target CID of the path\n  const resPath = await resolve(path, options)\n  const {\n    cid\n  } = toCidAndPath(resPath)\n\n  const maxDepth = options.maxDepth != null ? options.maxDepth : Infinity\n  const unique = options.unique || false\n\n  // Traverse the DAG, converting it into a stream\n  for await (const obj of objectStream(repo, codecs, cid, maxDepth, unique, options)) {\n    // Root object will not have a parent\n    if (!obj.parent) {\n      continue\n    }\n\n    // Filter out duplicates (isDuplicate flag is only set if options.unique is set)\n    if (obj.isDuplicate) {\n      continue\n    }\n\n    // Format the links\n    // Clients expect refs to be in the format { ref: <ref> }\n    yield {\n      ref: formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format)\n    }\n  }\n}\n\n/**\n * Get formatted link\n *\n * @param {CID} srcCid\n * @param {CID} dstCid\n * @param {string} [linkName]\n * @param {string} [format]\n */\nfunction formatLink (srcCid, dstCid, linkName = '', format = Format.default) {\n  let out = format.replace(/<src>/g, srcCid.toString())\n  out = out.replace(/<dst>/g, dstCid.toString())\n  out = out.replace(/<linkname>/g, linkName)\n  return out\n}\n\n/**\n * Do a depth first search of the DAG, starting from the given root cid\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} rootCid\n * @param {number} maxDepth\n * @param {boolean} uniqueOnly\n * @param {AbortOptions} options\n */\nasync function * objectStream (repo, codecs, rootCid, maxDepth, uniqueOnly, options) { // eslint-disable-line require-await\n  const seen = new Set()\n\n  /**\n   * @param {Node} parent\n   * @param {number} depth\n   * @returns {AsyncGenerator<TraversalResult, void, undefined>}\n   */\n  async function * traverseLevel (parent, depth) {\n    const nextLevelDepth = depth + 1\n\n    // Check the depth\n    if (nextLevelDepth > maxDepth) {\n      return\n    }\n\n    // Get this object's links\n    try {\n      // Look at each link, parent and the new depth\n      for await (const link of getLinks(repo, codecs, parent.cid, options)) {\n        yield {\n          parent: parent,\n          node: link,\n          isDuplicate: uniqueOnly && seen.has(link.cid.toString())\n        }\n\n        if (uniqueOnly) {\n          seen.add(link.cid.toString())\n        }\n\n        yield * traverseLevel(link, nextLevelDepth)\n      }\n    } catch (/** @type {any} */ err) {\n      if (err.code === ERR_NOT_FOUND) {\n        err.message = `Could not find object with CID: ${parent.cid}`\n      }\n\n      throw err\n    }\n  }\n\n  yield * traverseLevel({ cid: rootCid }, 0)\n}\n\n/**\n * Fetch a node and then get all its links\n *\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {CID} cid\n * @param {AbortOptions} options\n * @returns {AsyncGenerator<{ name: string, cid: CID }, void, undefined>}\n */\nasync function * getLinks (repo, codecs, cid, options) {\n  const block = await repo.blocks.get(cid, options)\n  const codec = await codecs.getCodec(cid.code)\n  const value = codec.decode(block)\n  const isDagPb = cid.code === dagPB.code\n  /** @type {Array<string|number>} */\n  const base = []\n\n  for (const [name, cid] of links(value, base)) {\n    // special case for dag-pb - use the name of the link\n    // instead of the path within the object\n    if (isDagPb) {\n      const match = name.match(/^Links\\/(\\d+)\\/Hash$/)\n\n      if (match) {\n        const index = Number(match[1])\n\n        if (index < value.Links.length) {\n          yield {\n            name: value.Links[index].Name,\n            cid\n          }\n\n          continue\n        }\n      }\n    }\n\n    yield {\n      name,\n      cid\n    }\n  }\n}\n\n/**\n * @param {*} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nconst links = function * (source, base) {\n  if (source == null) {\n    return\n  }\n\n  if (source instanceof Uint8Array) {\n    return\n  }\n\n  for (const [key, value] of Object.entries(source)) {\n    const path = [...base, key]\n\n    if (value != null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        for (const [index, element] of value.entries()) {\n          const elementPath = [...path, index]\n          const cid = CID.asCID(element)\n\n          // eslint-disable-next-line max-depth\n          if (cid) {\n            yield [elementPath.join('/'), cid]\n          } else if (typeof element === 'object') {\n            yield * links(element, elementPath)\n          }\n        }\n      } else {\n        const cid = CID.asCID(value)\n\n        if (cid) {\n          yield [path.join('/'), cid]\n        } else {\n          yield * links(value, path)\n        }\n      }\n    }\n  }\n\n  // ts requires a @returns annotation when a function is recursive,\n  // eslint requires a return when you use a @returns annotation.\n  return []\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createLocal ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/refs').API<{}>[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    for await (const cid of repo.blocks.queryKeys({}, { signal: options.signal })) {\n      yield { ref: cid.toString() }\n    }\n  }\n\n  return withTimeoutOption(refsLocal)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlist ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.getWantlist()\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlist)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.wantlistForPeer(peerId)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createUnwant ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"unwant\"]}\n   */\n  async function unwant (cids, options = {}) {\n    const { bitswap } = await network.use(options)\n\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    return bitswap.unwant(cids)\n  }\n\n  return withTimeoutOption(unwant)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createUnwant } from './unwant.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').NetworkService} NetworkService\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class BitswapAPI {\n  /**\n   * @param {object} config\n   * @param {NetworkService} config.network\n   */\n  constructor ({ network }) {\n    this.wantlist = createWantlist({ network })\n    this.wantlistForPeer = createWantlistForPeer({ network })\n    this.unwant = createUnwant({ network })\n    this.stat = createStat({ network })\n  }\n}\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=equals.js.map","import { baseX } from './base.js';\nexport const base10 = baseX({\n    prefix: '9',\n    name: 'base10',\n    alphabet: '0123456789'\n});\n//# sourceMappingURL=base10.js.map","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n    prefix: 'f',\n    name: 'base16',\n    alphabet: '0123456789abcdef',\n    bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n    prefix: 'F',\n    name: 'base16upper',\n    alphabet: '0123456789ABCDEF',\n    bitsPerChar: 4\n});\n//# sourceMappingURL=base16.js.map","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n    prefix: '0',\n    name: 'base2',\n    alphabet: '01',\n    bitsPerChar: 1\n});\n//# sourceMappingURL=base2.js.map","import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = (alphabet.reduce((p, c, i) => { p[i] = c; return p; }, ([])));\nconst alphabetCharsToBytes = (alphabet.reduce((p, c, i) => { p[c.codePointAt(0)] = i; return p; }, ([])));\nfunction encode(data) {\n    return data.reduce((p, c) => {\n        p += alphabetBytesToChars[c];\n        return p;\n    }, '');\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str) {\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(`Non-base256emoji character: ${char}`);\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n    prefix: '🚀',\n    name: 'base256emoji',\n    encode,\n    decode\n});\n//# sourceMappingURL=base256emoji.js.map","import { baseX } from './base.js';\nexport const base36 = baseX({\n    prefix: 'k',\n    name: 'base36',\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n    prefix: 'K',\n    name: 'base36upper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base36.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n    prefix: '7',\n    name: 'base8',\n    alphabet: '01234567',\n    bitsPerChar: 3\n});\n//# sourceMappingURL=base8.js.map","import { fromString, toString } from '../bytes.js';\nimport { from } from './base.js';\nexport const identity = from({\n    prefix: '\\x00',\n    name: 'identity',\n    encode: (buf) => toString(buf),\n    decode: (str) => fromString(str)\n});\n//# sourceMappingURL=identity.js.map","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 0x0200;\nexport function encode(node) {\n    return textEncoder.encode(JSON.stringify(node));\n}\nexport function decode(data) {\n    return JSON.parse(textDecoder.decode(data));\n}\n//# sourceMappingURL=json.js.map","import * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base2 from './bases/base2.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base8 from './bases/base8.js';\nimport * as identityBase from './bases/identity.js';\nimport * as json from './codecs/json.js';\nimport * as raw from './codecs/raw.js';\nimport * as identity from './hashes/identity.js';\nimport * as sha2 from './hashes/sha2.js';\nimport { CID, hasher, digest, varint, bytes } from './index.js';\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji };\nexport const hashes = { ...sha2, ...identity };\nexport const codecs = { raw, json };\nexport { CID, hasher, digest, varint, bytes };\n//# sourceMappingURL=basics.js.map","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec('utf8', 'u', (buf) => {\n    const decoder = new TextDecoder('utf8');\n    return 'u' + decoder.decode(buf);\n}, (str) => {\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', (buf) => {\n    let string = 'a';\n    for (let i = 0; i < buf.length; i++) {\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str) => {\n    str = str.substring(1);\n    const buf = allocUnsafe(str.length);\n    for (let i = 0; i < str.length; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    'utf-8': string,\n    hex: bases.base16,\n    latin1: ascii,\n    ascii,\n    binary: ascii,\n    ...bases\n};\nexport default BASES;\n//# sourceMappingURL=bases.js.map","import bases, {} from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map","import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat(arrays, length) {\n    if (globalThis.Buffer != null) {\n        return asUint8Array(globalThis.Buffer.concat(arrays, length));\n    }\n    if (length == null) {\n        length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n    }\n    const output = allocUnsafe(length);\n    let offset = 0;\n    for (const arr of arrays) {\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return asUint8Array(output);\n}\n//# sourceMappingURL=concat.js.map","import { asUint8Array } from './util/as-uint8array.js';\nimport bases, {} from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n    }\n    // add multibase prefix\n    return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n//# sourceMappingURL=from-string.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport { IpNet } from '@chainsafe/netmask';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.encodingLength(size));\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.encodingLength(size));\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.encodingLength(size));\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nexport function stringToMultiaddrParts(str) {\n    str = cleanPath(str);\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    const parts = str.split('/').slice(1);\n    if (parts.length === 1 && parts[0] === '') {\n        return {\n            bytes: new Uint8Array(),\n            string: '/',\n            tuples: [],\n            stringTuples: [],\n            path: null\n        };\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([proto.code]);\n            stringTuples.push([proto.code]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = cleanPath(parts.slice(p).join('/'));\n            tuples.push([proto.code, convertToBytes(proto.code, path)]);\n            stringTuples.push([proto.code, path]);\n            break;\n        }\n        const bytes = convertToBytes(proto.code, parts[p]);\n        tuples.push([proto.code, bytes]);\n        stringTuples.push([proto.code, convertToString(proto.code, bytes)]);\n    }\n    return {\n        string: stringTuplesToString(stringTuples),\n        bytes: tuplesToBytes(tuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\nexport function bytesToMultiaddrParts(bytes) {\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    let i = 0;\n    while (i < bytes.length) {\n        const code = varint.decode(bytes, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, bytes.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            stringTuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = bytes.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > bytes.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n        const stringAddr = convertToString(code, addr);\n        stringTuples.push([code, stringAddr]);\n        if (p.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = stringAddr;\n            break;\n        }\n    }\n    return {\n        bytes: Uint8Array.from(bytes),\n        string: stringTuplesToString(stringTuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return uint8ArrayConcat(tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    }));\n}\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr));\n        return size + varint.encodingLength(size);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        let parts;\n        if (addr instanceof Uint8Array) {\n            parts = bytesToMultiaddrParts(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            parts = stringToMultiaddrParts(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            parts = bytesToMultiaddrParts(addr.bytes);\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n        this.bytes = parts.bytes;\n        this.#string = parts.string;\n        this.#tuples = parts.tuples;\n        this.#stringTuples = parts.stringTuples;\n        this.#path = parts.path;\n    }\n    toString() {\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        return this.#tuples.map(([code]) => code);\n    }\n    protoNames() {\n        return this.#tuples.map(([code]) => getProtocol(code).name);\n    }\n    tuples() {\n        return this.#tuples;\n    }\n    stringTuples() {\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new Multiaddr(addr);\n        return new Multiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new Multiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            let tuples = [];\n            this.stringTuples().forEach(([code, name]) => {\n                if (code === names.p2p.code) {\n                    tuples.push([code, name]);\n                }\n                // if this is a p2p-circuit address, return the target peer id if present\n                // not the peer id of the relay\n                if (code === names['p2p-circuit'].code) {\n                    tuples = [];\n                }\n            });\n            // Get the last ipfs tuple ['p2p', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        return this.#path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new Multiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${this.#string})`;\n    }\n}\n//# sourceMappingURL=multiaddr.js.map","/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n * const addr =  multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * const addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolvers\n *\n * `multiaddr` allows multiaddrs to be resolved when appropriate resolvers are provided. This module already has resolvers available, but you can also create your own.  Resolvers should always be set in the same module that is calling `multiaddr.resolve()` to avoid conflicts if multiple versions of `multiaddr` are in your dependency tree.\n *\n * To provide multiaddr resolvers you can do:\n *\n * ```js\n * import { resolvers  } from '@multiformats/multiaddr'\n *\n * resolvers.set('dnsaddr', resolvers.dnsaddrResolver)\n * ```\n *\n * The available resolvers are:\n *\n * | Name              | type      | Description                         |\n * | ----------------- | --------- | ----------------------------------- |\n * | `dnsaddrResolver` | `dnsaddr` | dnsaddr resolution with TXT Records |\n *\n * A resolver receives a `Multiaddr` as a parameter and returns a `Promise<Array<string>>`.\n */\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js';\nimport { getProtocol } from './protocols-table.js';\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new MultiaddrClass(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTC = and(UDP, base('webrtc'), base('certhash'));\nexport const WebRTC = or(and(_WebRTC, base('p2p')), _WebRTC);\nexport const WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nexport const WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP, QUIC, DNS, WebRTC);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), WebRTCStar, WebRTCDirect, WebRTC, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = multiaddr(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map","import { IPFS } from '@multiformats/mafmt'\n\n/**\n * @param {any} ma\n */\nexport function isValidMultiaddr (ma) {\n  try {\n    return IPFS.matches(ma)\n  } catch (/** @type {any} */ err) {\n    return false\n  }\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAdd ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"add\"]}\n   */\n  async function add (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    const boostrappers = config.Bootstrap || []\n    boostrappers.push(multiaddr.toString())\n\n    config.Bootstrap = Array.from(\n      new Set(boostrappers)\n    ).sort((a, b) => a.localeCompare(b))\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: [multiaddr]\n    }\n  }\n\n  return withTimeoutOption(add)\n}\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc'],\n    [281, 0, 'webrtc-w3c'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createClear ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createList ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n","\nexport default () => ({\n  Addresses: {\n    Swarm: [\n    ],\n    Announce: [],\n    NoAnnounce: [],\n    API: '',\n    Gateway: '',\n    RPC: '',\n    Delegates: [\n      '/dns4/node0.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node1.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node2.delegate.ipfs.io/tcp/443/https',\n      '/dns4/node3.delegate.ipfs.io/tcp/443/https'\n    ]\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10\n    },\n    webRTCStar: {\n      Enabled: true\n    }\n  },\n  Bootstrap: [\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n    '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n    '/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n    '/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',\n    '/dns4/node2.preload.ipfs.io/tcp/443/wss/p2p/QmV7gnbW5VTcJ3oyM2Xk1rdFBJ3kTkvxc87UFGsun29STS',\n    '/dns4/node3.preload.ipfs.io/tcp/443/wss/p2p/QmY7JB6MQXhxHvq7dBDh4HpbH29v4yE9JRadAVpndvzySN'\n  ],\n  Pubsub: {\n    Enabled: true\n  },\n  Swarm: {\n    ConnMgr: {\n      LowWater: 5,\n      HighWater: 20\n    },\n    DisableNatPortMap: true\n  },\n  Routing: {\n    Type: 'dhtclient'\n  }\n})\n","import defaultConfig from 'ipfs-core-config/config'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createReset ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n","import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\nexport class BootstrapAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo }) {\n    this.add = createAdd({ repo })\n    this.list = createList({ repo })\n    this.rm = createRm({ repo })\n    this.clear = createClear({ repo })\n    this.reset = createReset({ repo })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createGet ({ preload, repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nexport function createPut ({ codecs, hashers, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","/**\n * @packageDocumentation\n *\n * Takes an (async) iterable that emits promise-returning functions, invokes them in parallel up to the concurrency limit and emits the results as they become available, optionally in the same order as the input\n *\n * @example\n *\n * ```javascript\n * import parallel from 'it-parallel'\n * import all from 'it-all'\n * import delay from 'delay'\n *\n * // This can also be an iterator, async iterator, generator, etc\n * const input = [\n *   async () => {\n *     console.info('start 1')\n *     await delay(500)\n *\n *     console.info('end 1')\n *     return 1\n *   },\n *   async () => {\n *     console.info('start 2')\n *     await delay(200)\n *\n *     console.info('end 2')\n *     return 2\n *   },\n *   async () => {\n *     console.info('start 3')\n *     await delay(100)\n *\n *     console.info('end 3')\n *     return 3\n *   }\n * ]\n *\n * const result = await all(parallel(input, {\n *   concurrency: 2\n * }))\n *\n * // output:\n * // start 1\n * // start 2\n * // end 2\n * // start 3\n * // end 3\n * // end 1\n *\n * console.info(result) // [2, 3, 1]\n * ```\n *\n * If order is important, pass `ordered: true` as an option:\n *\n * ```javascript\n * const result = await all(parallel(input, {\n *   concurrency: 2,\n *   ordered: true\n * }))\n *\n * // output:\n * // start 1\n * // start 2\n * // end 2\n * // start 3\n * // end 3\n * // end 1\n *\n * console.info(result) // [1, 2, 3]\n * ```\n */\nimport defer from 'p-defer';\nconst CustomEvent = globalThis.CustomEvent ?? Event;\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function* parallel(source, options = {}) {\n    let concurrency = options.concurrency ?? Infinity;\n    if (concurrency < 1) {\n        concurrency = Infinity;\n    }\n    const ordered = options.ordered == null ? false : options.ordered;\n    const emitter = new EventTarget();\n    const ops = [];\n    let slotAvailable = defer();\n    let resultAvailable = defer();\n    let sourceFinished = false;\n    let sourceErr;\n    let opErred = false;\n    emitter.addEventListener('task-complete', () => {\n        resultAvailable.resolve();\n    });\n    void Promise.resolve().then(async () => {\n        try {\n            for await (const task of source) {\n                if (ops.length === concurrency) {\n                    slotAvailable = defer();\n                    await slotAvailable.promise;\n                }\n                if (opErred) {\n                    break;\n                }\n                const op = {\n                    done: false\n                };\n                ops.push(op);\n                task()\n                    .then(result => {\n                    op.done = true;\n                    op.ok = true;\n                    op.value = result;\n                    emitter.dispatchEvent(new CustomEvent('task-complete'));\n                }, err => {\n                    op.done = true;\n                    op.err = err;\n                    emitter.dispatchEvent(new CustomEvent('task-complete'));\n                });\n            }\n            sourceFinished = true;\n            emitter.dispatchEvent(new CustomEvent('task-complete'));\n        }\n        catch (err) {\n            sourceErr = err;\n            emitter.dispatchEvent(new CustomEvent('task-complete'));\n        }\n    });\n    function valuesAvailable() {\n        if (ordered) {\n            return ops[0]?.done;\n        }\n        return Boolean(ops.find(op => op.done));\n    }\n    function* yieldOrderedValues() {\n        while ((ops.length > 0) && ops[0].done) {\n            const op = ops[0];\n            ops.shift();\n            if (op.ok) {\n                yield op.value;\n            }\n            else {\n                // allow the source to exit\n                opErred = true;\n                slotAvailable.resolve();\n                throw op.err;\n            }\n            slotAvailable.resolve();\n        }\n    }\n    function* yieldUnOrderedValues() {\n        // more values can become available while we wait for `yield`\n        // to return control to this function\n        while (valuesAvailable()) {\n            for (let i = 0; i < ops.length; i++) {\n                if (ops[i].done) {\n                    const op = ops[i];\n                    ops.splice(i, 1);\n                    i--;\n                    if (op.ok) {\n                        yield op.value;\n                    }\n                    else {\n                        opErred = true;\n                        slotAvailable.resolve();\n                        throw op.err;\n                    }\n                    slotAvailable.resolve();\n                }\n            }\n        }\n    }\n    while (true) {\n        if (!valuesAvailable()) {\n            resultAvailable = defer();\n            await resultAvailable.promise;\n        }\n        if (sourceErr != null) {\n            // the source threw an error, propagate it\n            throw sourceErr;\n        }\n        if (ordered) {\n            yield* yieldOrderedValues();\n        }\n        else {\n            yield* yieldUnOrderedValues();\n        }\n        if (sourceFinished && ops.length === 0) {\n            // not waiting for any results and no more tasks so we are done\n            break;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nexport default async function* merge(...sources) {\n    const output = pushable({\n        objectMode: true\n    });\n    void Promise.resolve().then(async () => {\n        try {\n            await Promise.all(sources.map(async (source) => {\n                for await (const item of source) {\n                    output.push(item);\n                }\n            }));\n            output.end();\n        }\n        catch (err) {\n            output.end(err);\n        }\n    });\n    yield* output;\n}\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","import { CID } from 'multiformats/cid'\n\n/**\n * @param {string|Uint8Array|CID} cid\n */\nexport function cleanCid (cid) {\n  if (cid instanceof Uint8Array) {\n    return CID.decode(cid)\n  }\n\n  return CID.parse(cid.toString())\n}\n","import errCode from 'err-code'\nimport parallel from 'it-parallel'\nimport map from 'it-map'\nimport filter from 'it-filter'\nimport { pipe } from 'it-pipe'\nimport { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        source => map(source, cid => {\n          return async () => {\n            cid = cleanCid(cid)\n\n            /** @type {import('ipfs-core-types/src/block').RmResult} */\n            const result = { cid }\n\n            try {\n              const has = await repo.blocks.has(cid)\n\n              if (!has) {\n                throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n              }\n\n              await repo.blocks.delete(cid)\n            } catch (/** @type {any} */ err) {\n              if (!options.force) {\n                err.message = `cannot remove ${cid}: ${err.message}`\n                result.error = err\n              }\n            }\n\n            return result\n          }\n        }),\n        source => parallel(source, { concurrency: BLOCK_RM_CONCURRENCY }),\n        source => filter(source, () => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n","import { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid)\n\n    return { cid, size: block.length }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n */\n\nexport class BlockAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/src/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/src/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, hashers, preload, repo }) {\n    this.get = createGet({ preload, repo })\n    this.put = createPut({ codecs, hashers, preload, repo })\n    this.rm = createRm({ repo })\n    this.stat = createStat({ preload, repo })\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function* browserReadableStreamToIt(stream, options = {}) {\n    const reader = stream.getReader();\n    try {\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                return;\n            }\n            yield result.value;\n        }\n    }\n    finally {\n        if (options.preventCancel !== true) {\n            await reader.cancel();\n        }\n        reader.releaseLock();\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * @packageDocumentation\n *\n * Allows reading Blob contents as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'blob-to-it'\n * import all from 'it-all'\n *\n * const content = [ Uint8Array.from([0, 1, 2, 3, 4]) ]\n * const blob = new Blob(content)\n * const arr = await all(toIt(blob))\n *\n * console.info(arr) // [ [ 0, 1, 2, 3, 4 ] ]\n * ```\n */\nimport browserReadableStreamToIt from 'browser-readablestream-to-it';\nexport default function blobToIt(blob) {\n    if (typeof blob.stream === 'function') {\n        return browserReadableStreamToIt(blob.stream());\n    }\n    // firefox < 69 does not support blob.stream()\n    // @ts-expect-error - response.body is optional, but in practice it's a stream.\n    return browserReadableStreamToIt(new Response(blob).body);\n}\n//# sourceMappingURL=index.js.map","export default function peekableIterator(iterable) {\n    // @ts-expect-error\n    const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n        // @ts-expect-error\n        ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n        // @ts-expect-error\n        : [iterable[Symbol.iterator](), Symbol.iterator];\n    const queue = [];\n    // @ts-expect-error\n    return {\n        peek: () => {\n            return iterator.next();\n        },\n        push: (value) => {\n            queue.push(value);\n        },\n        next: () => {\n            if (queue.length > 0) {\n                return {\n                    done: false,\n                    value: queue.shift()\n                };\n            }\n            return iterator.next();\n        },\n        [symbol]() {\n            return this;\n        }\n    };\n}\n//# sourceMappingURL=index.js.map","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n","/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches\n */\nexport default async function* batch(source, size = 1) {\n    let things = [];\n    if (size < 1) {\n        size = 1;\n    }\n    for await (const thing of source) {\n        things.push(thing);\n        while (things.length >= size) {\n            yield things.slice(0, size);\n            things = things.slice(size);\n        }\n    }\n    while (things.length > 0) {\n        yield things.slice(0, size);\n        things = things.slice(size);\n    }\n}\n//# sourceMappingURL=index.js.map","import batch from 'it-batch';\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function* parallelBatch(source, size = 1) {\n    for await (const tasks of batch(source, size)) {\n        const things = tasks.map(async (p) => {\n            return await p().then(value => ({ ok: true, value }), err => ({ ok: false, err }));\n        });\n        for (let i = 0; i < things.length; i++) {\n            const result = await things[i];\n            if (result.ok) {\n                yield result.value;\n            }\n            else {\n                throw result.err;\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import * as Digest from './digest.js';\nexport function from({ name, code, encode }) {\n    return new Hasher(name, code, encode);\n}\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher {\n    name;\n    code;\n    encode;\n    constructor(name, code, encode) {\n        this.name = name;\n        this.code = code;\n        this.encode = encode;\n    }\n    digest(input) {\n        if (input instanceof Uint8Array) {\n            const result = this.encode(input);\n            return result instanceof Uint8Array\n                ? Digest.create(this.code, result)\n                /* c8 ignore next 1 */\n                : result.then(digest => Digest.create(this.code, digest));\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n            /* c8 ignore next 1 */\n        }\n    }\n}\n//# sourceMappingURL=hasher.js.map","/* jshint -W086: true */\n// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n;(function (root, undefined) {\n    'use strict';\n\n    // Create a local object that'll be exported or referenced globally.\n    var library = {\n        'version': '3.0.0',\n        'x86': {},\n        'x64': {},\n        'inputValidation': true\n    };\n\n    // PRIVATE FUNCTIONS\n    // -----------------\n\n    function _validBytes(bytes) {\n        // check the input is an array or a typed array\n        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {\n            return false;\n        }\n\n        // check all bytes are actually bytes\n        for (var i = 0; i < bytes.length; i++) {\n            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _x86Multiply(m, n) {\n        //\n        // Given two 32bit ints, returns the two multiplied together as a\n        // 32bit int.\n        //\n\n        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n    }\n\n    function _x86Rotl(m, n) {\n        //\n        // Given a 32bit int and an int representing a number of bit positions,\n        // returns the 32bit int rotated left by that number of positions.\n        //\n\n        return (m << n) | (m >>> (32 - n));\n    }\n\n    function _x86Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x86 mix of that block.\n        //\n\n        h ^= h >>> 16;\n        h = _x86Multiply(h, 0x85ebca6b);\n        h ^= h >>> 13;\n        h = _x86Multiply(h, 0xc2b2ae35);\n        h ^= h >>> 16;\n\n        return h;\n    }\n\n    function _x64Add(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // added together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] + n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] + n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] + n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += m[0] + n[0];\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Multiply(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // multiplied together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n        var o = [0, 0, 0, 0];\n\n        o[3] += m[3] * n[3];\n        o[2] += o[3] >>> 16;\n        o[3] &= 0xffff;\n\n        o[2] += m[2] * n[3];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[2] += m[3] * n[2];\n        o[1] += o[2] >>> 16;\n        o[2] &= 0xffff;\n\n        o[1] += m[1] * n[3];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[2] * n[2];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[1] += m[3] * n[1];\n        o[0] += o[1] >>> 16;\n        o[1] &= 0xffff;\n\n        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n        o[0] &= 0xffff;\n\n        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n    }\n\n    function _x64Rotl(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) rotated left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 32) {\n            return [m[1], m[0]];\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n        } else {\n            n -= 32;\n            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n        }\n    }\n\n    function _x64LeftShift(m, n) {\n        //\n        // Given a 64bit int (as an array of two 32bit ints) and an int\n        // representing a number of bit positions, returns the 64bit int (as an\n        // array of two 32bit ints) shifted left by that number of positions.\n        //\n\n        n %= 64;\n\n        if (n === 0) {\n            return m;\n        } else if (n < 32) {\n            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n        } else {\n            return [m[1] << (n - 32), 0];\n        }\n    }\n\n    function _x64Xor(m, n) {\n        //\n        // Given two 64bit ints (as an array of two 32bit ints) returns the two\n        // xored together as a 64bit int (as an array of two 32bit ints).\n        //\n\n        return [m[0] ^ n[0], m[1] ^ n[1]];\n    }\n\n    function _x64Fmix(h) {\n        //\n        // Given a block, returns murmurHash3's final x64 mix of that block.\n        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n        // only place where we need to right shift 64bit ints.)\n        //\n\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n        h = _x64Xor(h, [0, h[0] >>> 1]);\n\n        return h;\n    }\n\n    // PUBLIC FUNCTIONS\n    // ----------------\n\n    library.x86.hash32 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 32 bit hash\n        // using the x86 flavor of MurmurHash3, as an unsigned int.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 4;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n\n        var k1 = 0;\n\n        var c1 = 0xcc9e2d51;\n        var c2 = 0x1b873593;\n\n        for (var i = 0; i < blocks; i = i + 4) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n\n            h1 ^= k1;\n            h1 = _x86Rotl(h1, 13);\n            h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n        }\n\n        k1 = 0;\n\n        switch (remainder) {\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h1 = _x86Fmix(h1);\n\n        return h1 >>> 0;\n    };\n\n    library.x86.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n\n        seed = seed || 0;\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = seed;\n        var h2 = seed;\n        var h3 = seed;\n        var h4 = seed;\n\n        var k1 = 0;\n        var k2 = 0;\n        var k3 = 0;\n        var k4 = 0;\n\n        var c1 = 0x239b961b;\n        var c2 = 0xab0e9789;\n        var c3 = 0x38b34ae5;\n        var c4 = 0xa1e38b93;\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);\n            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);\n            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);\n\n            k1 = _x86Multiply(k1, c1);\n            k1 = _x86Rotl(k1, 15);\n            k1 = _x86Multiply(k1, c2);\n            h1 ^= k1;\n\n            h1 = _x86Rotl(h1, 19);\n            h1 += h2;\n            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n            k2 = _x86Multiply(k2, c2);\n            k2 = _x86Rotl(k2, 16);\n            k2 = _x86Multiply(k2, c3);\n            h2 ^= k2;\n\n            h2 = _x86Rotl(h2, 17);\n            h2 += h3;\n            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n            k3 = _x86Multiply(k3, c3);\n            k3 = _x86Rotl(k3, 17);\n            k3 = _x86Multiply(k3, c4);\n            h3 ^= k3;\n\n            h3 = _x86Rotl(h3, 15);\n            h3 += h4;\n            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n            k4 = _x86Multiply(k4, c4);\n            k4 = _x86Rotl(k4, 18);\n            k4 = _x86Multiply(k4, c1);\n            h4 ^= k4;\n\n            h4 = _x86Rotl(h4, 13);\n            h4 += h1;\n            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n        }\n\n        k1 = 0;\n        k2 = 0;\n        k3 = 0;\n        k4 = 0;\n\n        switch (remainder) {\n            case 15:\n                k4 ^= bytes[i + 14] << 16;\n\n            case 14:\n                k4 ^= bytes[i + 13] << 8;\n\n            case 13:\n                k4 ^= bytes[i + 12];\n                k4 = _x86Multiply(k4, c4);\n                k4 = _x86Rotl(k4, 18);\n                k4 = _x86Multiply(k4, c1);\n                h4 ^= k4;\n\n            case 12:\n                k3 ^= bytes[i + 11] << 24;\n\n            case 11:\n                k3 ^= bytes[i + 10] << 16;\n\n            case 10:\n                k3 ^= bytes[i + 9] << 8;\n\n            case 9:\n                k3 ^= bytes[i + 8];\n                k3 = _x86Multiply(k3, c3);\n                k3 = _x86Rotl(k3, 17);\n                k3 = _x86Multiply(k3, c4);\n                h3 ^= k3;\n\n            case 8:\n                k2 ^= bytes[i + 7] << 24;\n\n            case 7:\n                k2 ^= bytes[i + 6] << 16;\n\n            case 6:\n                k2 ^= bytes[i + 5] << 8;\n\n            case 5:\n                k2 ^= bytes[i + 4];\n                k2 = _x86Multiply(k2, c2);\n                k2 = _x86Rotl(k2, 16);\n                k2 = _x86Multiply(k2, c3);\n                h2 ^= k2;\n\n            case 4:\n                k1 ^= bytes[i + 3] << 24;\n\n            case 3:\n                k1 ^= bytes[i + 2] << 16;\n\n            case 2:\n                k1 ^= bytes[i + 1] << 8;\n\n            case 1:\n                k1 ^= bytes[i];\n                k1 = _x86Multiply(k1, c1);\n                k1 = _x86Rotl(k1, 15);\n                k1 = _x86Multiply(k1, c2);\n                h1 ^= k1;\n        }\n\n        h1 ^= bytes.length;\n        h2 ^= bytes.length;\n        h3 ^= bytes.length;\n        h4 ^= bytes.length;\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        h1 = _x86Fmix(h1);\n        h2 = _x86Fmix(h2);\n        h3 = _x86Fmix(h3);\n        h4 = _x86Fmix(h4);\n\n        h1 += h2;\n        h1 += h3;\n        h1 += h4;\n        h2 += h1;\n        h3 += h1;\n        h4 += h1;\n\n        return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n    };\n\n    library.x64.hash128 = function (bytes, seed) {\n        //\n        // Given a string and an optional seed as an int, returns a 128 bit\n        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n        //\n        if (library.inputValidation && !_validBytes(bytes)) {\n            return undefined;\n        }\n        seed = seed || 0;\n\n        var remainder = bytes.length % 16;\n        var blocks = bytes.length - remainder;\n\n        var h1 = [0, seed];\n        var h2 = [0, seed];\n\n        var k1 = [0, 0];\n        var k2 = [0, 0];\n\n        var c1 = [0x87c37b91, 0x114253d5];\n        var c2 = [0x4cf5ad43, 0x2745937f];\n\n        for (var i = 0; i < blocks; i = i + 16) {\n            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |\n                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];\n            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |\n                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];\n\n            k1 = _x64Multiply(k1, c1);\n            k1 = _x64Rotl(k1, 31);\n            k1 = _x64Multiply(k1, c2);\n            h1 = _x64Xor(h1, k1);\n\n            h1 = _x64Rotl(h1, 27);\n            h1 = _x64Add(h1, h2);\n            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n            k2 = _x64Multiply(k2, c2);\n            k2 = _x64Rotl(k2, 33);\n            k2 = _x64Multiply(k2, c1);\n            h2 = _x64Xor(h2, k2);\n\n            h2 = _x64Rotl(h2, 31);\n            h2 = _x64Add(h2, h1);\n            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n        }\n\n        k1 = [0, 0];\n        k2 = [0, 0];\n\n        switch (remainder) {\n            case 15:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));\n\n            case 14:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));\n\n            case 13:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));\n\n            case 12:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));\n\n            case 11:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));\n\n            case 10:\n                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));\n\n            case 9:\n                k2 = _x64Xor(k2, [0, bytes[i + 8]]);\n                k2 = _x64Multiply(k2, c2);\n                k2 = _x64Rotl(k2, 33);\n                k2 = _x64Multiply(k2, c1);\n                h2 = _x64Xor(h2, k2);\n\n            case 8:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));\n\n            case 7:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));\n\n            case 6:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));\n\n            case 5:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));\n\n            case 4:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));\n\n            case 3:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));\n\n            case 2:\n                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));\n\n            case 1:\n                k1 = _x64Xor(k1, [0, bytes[i]]);\n                k1 = _x64Multiply(k1, c1);\n                k1 = _x64Rotl(k1, 31);\n                k1 = _x64Multiply(k1, c2);\n                h1 = _x64Xor(h1, k1);\n        }\n\n        h1 = _x64Xor(h1, [0, bytes.length]);\n        h2 = _x64Xor(h2, [0, bytes.length]);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        h1 = _x64Fmix(h1);\n        h2 = _x64Fmix(h2);\n\n        h1 = _x64Add(h1, h2);\n        h2 = _x64Add(h2, h1);\n\n        return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n    };\n\n    // INITIALIZATION\n    // --------------\n\n    // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n    // of the global object.\n    if (typeof exports !== 'undefined') {\n\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = library;\n        }\n\n        exports.murmurHash3 = library;\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        define([], function () {\n            return library;\n        });\n    } else {\n\n        // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n        // original value. Returns a reference to the library object, to allow\n        // it to be used under a different name.\n        library._murmurHash3 = root.murmurHash3;\n\n        library.noConflict = function () {\n            root.murmurHash3 = library._murmurHash3;\n            library._murmurHash3 = undefined;\n            library.noConflict = undefined;\n\n            return library;\n        };\n\n        root.murmurHash3 = library;\n    }\n})(this);\n","module.exports = require('./lib/murmurHash3js');\n","import { bytes } from 'multiformats'\nimport { from } from 'multiformats/hashes/hasher'\n// @ts-expect-error no types\nimport mur from 'murmurhash3js-revisited'\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nfunction fromNumberTo32BitBuf (number) {\n  const bytes = new Array(4)\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n  return new Uint8Array(bytes)\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: (input) => fromNumberTo32BitBuf(mur.x86.hash32(input))\n})\n\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input))\n})\n\n// A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n})\n","import mergeOptions from 'merge-options'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653, // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n}\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true })\n  return defaults(defaultOptions, options)\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {import('../types').PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nexport default persist\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('../types').Directory} Directory\n */\n\n/**\n * @type {import('../types').UnixFSV1DagBuilder<Directory>}\n */\nconst dirBuilder = async (item, blockstore, options) => {\n  const unixfs = new UnixFS({\n    type: 'directory',\n    mtime: item.mtime,\n    mode: item.mode\n  })\n\n  const buffer = encode(prepare({ Data: unixfs.marshal() }))\n  const cid = await persist(buffer, blockstore, options)\n  const path = item.path\n\n  return {\n    cid,\n    path,\n    unixfs,\n    size: buffer.length\n  }\n}\n\nexport default dirBuilder\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","import all from 'it-all'\n\n/**\n * @type {import('../../types').FileDAGBuilder}\n */\nasync function flat (source, reduce) {\n  return reduce(await all(source))\n}\n\nexport default flat\n","import batch from 'it-batch'\n\n/**\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nfunction balanced (source, reduce, options) {\n  return reduceToParents(source, reduce, options)\n}\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function reduceToParents (source, reduce, options) {\n  const roots = []\n\n  for await (const chunked of batch(source, options.maxChildrenPerNode)) {\n    roots.push(await reduce(chunked))\n  }\n\n  if (roots.length > 1) {\n    return reduceToParents(roots, reduce, options)\n  }\n\n  return roots[0]\n}\n\nexport default balanced\n","import batch from 'it-batch'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function trickleStream (source, reduce, options) {\n  const root = new Root(options.layerRepeat)\n  let iteration = 0\n  let maxDepth = 1\n\n  /** @type {SubTree} */\n  let subTree = root\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce))\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration)\n\n      iteration++\n    }\n\n    subTree.append(layer)\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce))\n  }\n\n  return root.reduce(reduce)\n}\n\nexport default trickleStream\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor (maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth\n    this.layerRepeat = layerRepeat\n    this.currentDepth = 1\n    this.iteration = iteration\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    }\n  }\n\n  isFull () {\n    if (!this.root.data) {\n      return false\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node)\n\n      return false\n    }\n\n    // try to find new node from node.parent\n    const distantRelative = this._findParent(this.node, this.currentDepth)\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative)\n\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @param {TrickleDagNode} parent\n   */\n  _addNextNodeToParent (parent) {\n    this.parent = parent\n\n    // find site for new node\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }\n\n    // @ts-ignore\n    parent.children.push(nextNode)\n\n    this.currentDepth = nextNode.depth\n    this.node = nextNode\n  }\n\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n  append (layer) {\n    this.node.data = layer\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return this._reduce(this.root, reduce)\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n  async _reduce (node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = []\n\n    if (node.children.length) {\n      children = await Promise.all(\n        node.children\n          // @ts-ignore\n          .filter(child => child.data)\n          // @ts-ignore\n          .map(child => this._reduce(child, reduce))\n      )\n    }\n\n    return reduce((node.data || []).concat(children))\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n  _findParent (node, depth) {\n    const parent = node.parent\n\n    if (!parent || parent.depth === 0) {\n      return\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth)\n    }\n\n    return parent\n  }\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor (layerRepeat) {\n    super(0, layerRepeat)\n\n    this.root.depth = 0\n    this.currentDepth = 1\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  addChild (child) {\n    this.root.children.push(child)\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return reduce((this.root.data || []).concat(this.root.children))\n  }\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nasync function * bufferImporter (file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path)\n      let unixfs\n\n      /** @type {import('../../types').PersistOptions} */\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = raw\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        })\n\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        })\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nexport default bufferImporter\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport { encode, prepare } from '@ipld/dag-pb'\nimport parallelBatch from 'it-parallel-batch'\nimport * as rawCodec from 'multiformats/codecs/raw'\nimport * as dagPb from '@ipld/dag-pb'\n\nimport dagFlat from './flat.js'\nimport dagBalanced from './balanced.js'\nimport dagTrickle from './trickle.js'\nimport bufferImporterFn from './buffer-importer.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').File} File\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').DAGBuilder} DAGBuilder\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {{ [key: string]: FileDAGBuilder}}\n */\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nasync function * buildFileBatch (file, blockstore, options) {\n  let count = -1\n  let previous\n  let bufferImporter\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter\n  } else {\n    bufferImporter = bufferImporterFn\n  }\n\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++\n\n    if (count === 0) {\n      previous = entry\n      continue\n    } else if (count === 1 && previous) {\n      yield previous\n      previous = null\n    }\n\n    yield entry\n  }\n\n  if (previous) {\n    previous.single = true\n    yield previous\n  }\n}\n\n/**\n * @param {File} file\n * @param {Blockstore} blockstore\n * @param {ImporterOptions} options\n */\nconst reduce = (file, blockstore, options) => {\n  /**\n   * @type {Reducer}\n   */\n  async function reducer (leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0]\n\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        // only one leaf node which is a buffer - we have metadata so convert it into a\n        // UnixFS entry otherwise we'll have nowhere to store the metadata\n        let buffer = await blockstore.get(leaf.cid)\n\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        })\n\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }))\n\n        // // TODO vmx 2021-03-26: This is what the original code does, it checks\n        // // the multihash of the original leaf node and uses then the same\n        // // hasher. i wonder if that's really needed or if we could just use\n        // // the hasher from `options.hasher` instead.\n        // const multihash = mh.decode(leaf.cid.multihash.bytes)\n        // let hasher\n        // switch multihash {\n        //   case sha256.code {\n        //     hasher = sha256\n        //     break;\n        //   }\n        //   //case identity.code {\n        //   //  hasher = identity\n        //   //  break;\n        //   //}\n        //   default: {\n        //     throw new Error(`Unsupported hasher \"${multihash}\"`)\n        //   }\n        // }\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        })\n        leaf.size = buffer.length\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      }\n    }\n\n    // create a parent node and add all the leaves\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    })\n\n    const links = leaves\n      .filter(leaf => {\n        if (leaf.cid.code === rawCodec.code && leaf.size) {\n          return true\n        }\n\n        if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n          return true\n        }\n\n        return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length)\n      })\n      .map((leaf) => {\n        if (leaf.cid.code === rawCodec.code) {\n          // node is a leaf buffer\n          f.addBlockSize(leaf.size)\n\n          return {\n            Name: '',\n            Tsize: leaf.size,\n            Hash: leaf.cid\n          }\n        }\n\n        if (!leaf.unixfs || !leaf.unixfs.data) {\n          // node is an intermediate node\n          f.addBlockSize((leaf.unixfs && leaf.unixfs.fileSize()) || 0)\n        } else {\n          // node is a unixfs 'file' leaf node\n          f.addBlockSize(leaf.unixfs.data.length)\n        }\n\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        }\n      })\n\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, blockstore, options)\n\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    }\n  }\n\n  return reducer\n}\n\n/**\n * @type {import('../../types').UnixFSV1DagBuilder<File>}\n */\nfunction fileBuilder (file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy]\n\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY')\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options)\n}\n\nexport default fileBuilder\n","/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param { import(\"./../dist/rabin-wasm\") } asModule\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param {number} polynomial\n     * @memberof Rabin\n     */\n    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial)\n        this.polynomial = polynomial\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const {\n            __retain,\n            __release,\n            __allocArray,\n            __getInt32Array,\n            Int32Array_ID,\n            Uint8Array_ID\n        } = this.asModule\n\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths))\n        const pointer = __retain(__allocArray(Uint8Array_ID, buf))\n\n        const out = this.rabin.fingerprint(pointer, lengthsPtr)\n        const processed = __getInt32Array(out)\n\n        __release(pointer)\n        __release(lengthsPtr)\n\n        const end = processed.indexOf(0);\n        return end >= 0 ? processed.subarray(0, end) : processed;\n    }\n}\n\nmodule.exports = Rabin","\"use strict\";\n\n// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\nconst ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst SET = 1 << 2;\nconst MAP = 1 << 3;\nconst VAL_ALIGN_OFFSET = 5;\nconst VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 10;\nconst VAL_FLOAT = 1 << 11;\nconst VAL_NULLABLE = 1 << 12;\nconst VAL_MANAGED = 1 << 13;\nconst KEY_ALIGN_OFFSET = 14;\nconst KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\nconst KEY_SIGNED = 1 << 19;\nconst KEY_FLOAT = 1 << 20;\nconst KEY_NULLABLE = 1 << 21;\nconst KEY_MANAGED = 1 << 22;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\nconst CHUNKSIZE = 1024;\n\n/** Gets a string from an U32 and an U16 view on a memory. */\nfunction getStringImpl(buffer, ptr) {\n  const U32 = new Uint32Array(buffer);\n  const U16 = new Uint16Array(buffer);\n  var length = U32[(ptr + SIZE_OFFSET) >>> 2] >>> 1;\n  var offset = ptr >>> 1;\n  if (length <= CHUNKSIZE) return String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n  const parts = [];\n  do {\n    const last = U16[offset + CHUNKSIZE - 1];\n    const size = last >= 0xD800 && last < 0xDC00 ? CHUNKSIZE - 1 : CHUNKSIZE;\n    parts.push(String.fromCharCode.apply(String, U16.subarray(offset, offset += size)));\n    length -= size;\n  } while (length > CHUNKSIZE);\n  return parts.join(\"\") + String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const baseModule = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(mesg, file, line, colm) {\n    const memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(\"abort: \" + getString(memory, mesg) + \" at \" + getString(memory, file) + \":\" + line + \":\" + colm);\n  }\n  env.trace = env.trace || function trace(mesg, n) {\n    const memory = baseModule.memory || env.memory;\n    console.log(\"trace: \" + getString(memory, mesg) + (n ? \" \" : \"\") + Array.prototype.slice.call(arguments, 2, 2 + n).join(\", \"));\n  }\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return baseModule;\n}\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(baseModule, instance) {\n  const rawExports = instance.exports;\n  const memory = rawExports.memory;\n  const table = rawExports.table;\n  const alloc = rawExports[\"__alloc\"];\n  const retain = rawExports[\"__retain\"];\n  const rttiBase = rawExports[\"__rtti_base\"] || ~0; // oob if not present\n\n  /** Gets the runtime type info for the given id. */\n  function getInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2];\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2 + 1];\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  function getKeyAlign(info) {\n    return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Allocates a new string in the module's memory and returns its retained pointer. */\n  function __allocString(str) {\n    const length = str.length;\n    const ptr = alloc(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  baseModule.__allocString = __allocString;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(\"not a string: \" + ptr);\n    return getStringImpl(buffer, ptr);\n  }\n\n  baseModule.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(\"unsupported align: \" + alignLog2);\n  }\n\n  /** Allocates a new array in the module's memory and returns its retained pointer. */\n  function __allocArray(id, values) {\n    const info = getInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY))) throw Error(\"not an array: \" + id + \" @ \" + info);\n    const align = getValueAlign(info);\n    const length = values.length;\n    const buf = alloc(length << align, ARRAYBUFFER_ID);\n    const arr = alloc(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n    const U32 = new Uint32Array(memory.buffer);\n    U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf);\n    U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n    U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\n    if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n    if (info & VAL_MANAGED) {\n      for (let i = 0; i < length; ++i) view[(buf >>> align) + i] = retain(values[i]);\n    } else {\n      view.set(values, buf >>> align);\n    }\n    return arr;\n  }\n\n  baseModule.__allocArray = __allocArray;\n\n  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getInfo(id);\n    if (!(info & ARRAYBUFFERVIEW)) throw Error(\"not an array: \" + id);\n    const align = getValueAlign(info);\n    var buf = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT)\n          .subarray(buf >>>= align, buf + length);\n  }\n\n  baseModule.__getArrayView = __getArrayView;\n\n  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  baseModule.__getArray = __getArray;\n\n  /** Copies an ArrayBuffer's value from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  baseModule.__getArrayBuffer = __getArrayBuffer;\n\n  /** Copies a typed array's values from the module's memory. */\n  function getTypedArray(Type, alignLog2, ptr) {\n    return new Type(getTypedArrayView(Type, alignLog2, ptr));\n  }\n\n  /** Gets a live view on a typed array's values in the module's memory. */\n  function getTypedArrayView(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);\n  }\n\n  baseModule.__getInt8Array = getTypedArray.bind(null, Int8Array, 0);\n  baseModule.__getInt8ArrayView = getTypedArrayView.bind(null, Int8Array, 0);\n  baseModule.__getUint8Array = getTypedArray.bind(null, Uint8Array, 0);\n  baseModule.__getUint8ArrayView = getTypedArrayView.bind(null, Uint8Array, 0);\n  baseModule.__getUint8ClampedArray = getTypedArray.bind(null, Uint8ClampedArray, 0);\n  baseModule.__getUint8ClampedArrayView = getTypedArrayView.bind(null, Uint8ClampedArray, 0);\n  baseModule.__getInt16Array = getTypedArray.bind(null, Int16Array, 1);\n  baseModule.__getInt16ArrayView = getTypedArrayView.bind(null, Int16Array, 1);\n  baseModule.__getUint16Array = getTypedArray.bind(null, Uint16Array, 1);\n  baseModule.__getUint16ArrayView = getTypedArrayView.bind(null, Uint16Array, 1);\n  baseModule.__getInt32Array = getTypedArray.bind(null, Int32Array, 2);\n  baseModule.__getInt32ArrayView = getTypedArrayView.bind(null, Int32Array, 2);\n  baseModule.__getUint32Array = getTypedArray.bind(null, Uint32Array, 2);\n  baseModule.__getUint32ArrayView = getTypedArrayView.bind(null, Uint32Array, 2);\n  if (BIGINT) {\n    baseModule.__getInt64Array = getTypedArray.bind(null, BigInt64Array, 3);\n    baseModule.__getInt64ArrayView = getTypedArrayView.bind(null, BigInt64Array, 3);\n    baseModule.__getUint64Array = getTypedArray.bind(null, BigUint64Array, 3);\n    baseModule.__getUint64ArrayView = getTypedArrayView.bind(null, BigUint64Array, 3);\n  }\n  baseModule.__getFloat32Array = getTypedArray.bind(null, Float32Array, 2);\n  baseModule.__getFloat32ArrayView = getTypedArrayView.bind(null, Float32Array, 2);\n  baseModule.__getFloat64Array = getTypedArray.bind(null, Float64Array, 3);\n  baseModule.__getFloat64ArrayView = getTypedArrayView.bind(null, Float64Array, 3);\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    var id = U32[(ptr + ID_OFFSET) >>> 2];\n    if (id <= U32[rttiBase >>> 2]) {\n      do if (id == baseId) return true;\n      while (id = getBase(id));\n    }\n    return false;\n  }\n\n  baseModule.__instanceof = __instanceof;\n\n  // Pull basic exports to baseModule so code in preInstantiate can use them\n  baseModule.memory = baseModule.memory || memory;\n  baseModule.table  = baseModule.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(rawExports, baseModule);\n}\n\nfunction isResponse(o) {\n  return typeof Response !== \"undefined\" && o instanceof Response;\n}\n\n/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\nasync function instantiate(source, imports) {\n  if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    await WebAssembly.instantiate(\n      source instanceof WebAssembly.Module\n        ? source\n        : await WebAssembly.compile(source),\n      imports\n    )\n  );\n}\n\nexports.instantiate = instantiate;\n\n/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\nfunction instantiateSync(source, imports) {\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    new WebAssembly.Instance(\n      source instanceof WebAssembly.Module\n        ? source\n        : new WebAssembly.Module(source),\n      imports\n    )\n  )\n}\n\nexports.instantiateSync = instantiateSync;\n\n/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\nasync function instantiateStreaming(source, imports) {\n  if (!WebAssembly.instantiateStreaming) {\n    return instantiate(\n      isResponse(source = await source)\n        ? source.arrayBuffer()\n        : source,\n      imports\n    );\n  }\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    (await WebAssembly.instantiateStreaming(source, imports)).instance\n  );\n}\n\nexports.instantiateStreaming = instantiateStreaming;\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nfunction demangle(exports, baseModule) {\n  var module = baseModule ? Object.create(baseModule) : {};\n  var setArgumentsLength = exports[\"__argumentsLength\"]\n    ? function(length) { exports[\"__argumentsLength\"].value = length; }\n    : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || function() {};\n  for (let internalName in exports) {\n    if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;\n    const elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = module;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      let className = name.substring(0, hash);\n      let classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        let ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf: function valueOf() {\n            return this[THIS];\n          }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get: function() { return getter(this[THIS]); },\n            set: function(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          (curr[name] = (...args) => {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else { // instance method\n          (curr[name] = function(...args) { // !\n            setArgumentsLength(args.length);\n            return elem(this[THIS], ...args);\n          }).original = elem;\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n        (curr[name] = (...args) => {\n          setArgumentsLength(args.length);\n          return elem(...args);\n        }).original = elem;\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n  return module;\n}\n\nexports.demangle = demangle;\n","\nconst { instantiate } = require(\"@assemblyscript/loader\");\n\nloadWebAssembly.supported = typeof WebAssembly !== 'undefined'\n\nfunction loadWebAssembly (imp = {}) {\n  if (!loadWebAssembly.supported) return null\n  \n  var wasm = new Uint8Array([0,97,115,109,1,0,0,0,1,78,14,96,2,127,126,0,96,1,127,1,126,96,2,127,127,0,96,1,127,1,127,96,1,127,0,96,2,127,127,1,127,96,3,127,127,127,1,127,96,0,0,96,3,127,127,127,0,96,0,1,127,96,4,127,127,127,127,0,96,5,127,127,127,127,127,1,127,96,1,126,1,127,96,2,126,126,1,126,2,13,1,3,101,110,118,5,97,98,111,114,116,0,10,3,54,53,2,2,8,9,3,5,2,8,6,5,3,4,2,6,9,12,13,2,5,11,3,2,3,2,3,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,6,7,7,4,4,5,3,1,0,1,6,47,9,127,1,65,0,11,127,1,65,0,11,127,0,65,3,11,127,0,65,4,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,0,65,240,2,11,127,0,65,6,11,7,240,5,41,6,109,101,109,111,114,121,2,0,7,95,95,97,108,108,111,99,0,10,8,95,95,114,101,116,97,105,110,0,11,9,95,95,114,101,108,101,97,115,101,0,12,9,95,95,99,111,108,108,101,99,116,0,51,11,95,95,114,116,116,105,95,98,97,115,101,3,7,13,73,110,116,51,50,65,114,114,97,121,95,73,68,3,2,13,85,105,110,116,56,65,114,114,97,121,95,73,68,3,3,6,100,101,103,114,101,101,0,16,3,109,111,100,0,17,5,82,97,98,105,110,3,8,16,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,0,21,16,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,0,22,21,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,23,21,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,24,14,82,97,98,105,110,35,103,101,116,58,119,112,111,115,0,25,14,82,97,98,105,110,35,115,101,116,58,119,112,111,115,0,26,15,82,97,98,105,110,35,103,101,116,58,99,111,117,110,116,0,27,15,82,97,98,105,110,35,115,101,116,58,99,111,117,110,116,0,28,13,82,97,98,105,110,35,103,101,116,58,112,111,115,0,29,13,82,97,98,105,110,35,115,101,116,58,112,111,115,0,30,15,82,97,98,105,110,35,103,101,116,58,115,116,97,114,116,0,31,15,82,97,98,105,110,35,115,101,116,58,115,116,97,114,116,0,32,16,82,97,98,105,110,35,103,101,116,58,100,105,103,101,115,116,0,33,16,82,97,98,105,110,35,115,101,116,58,100,105,103,101,115,116,0,34,21,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,35,21,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,36,22,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,37,22,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,38,31,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,39,31,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,40,20,82,97,98,105,110,35,103,101,116,58,112,111,108,121,110,111,109,105,97,108,0,41,20,82,97,98,105,110,35,115,101,116,58,112,111,108,121,110,111,109,105,97,108,0,42,17,82,97,98,105,110,35,103,101,116,58,109,105,110,115,105,122,101,0,43,17,82,97,98,105,110,35,115,101,116,58,109,105,110,115,105,122,101,0,44,17,82,97,98,105,110,35,103,101,116,58,109,97,120,115,105,122,101,0,45,17,82,97,98,105,110,35,115,101,116,58,109,97,120,115,105,122,101,0,46,14,82,97,98,105,110,35,103,101,116,58,109,97,115,107,0,47,14,82,97,98,105,110,35,115,101,116,58,109,97,115,107,0,48,17,82,97,98,105,110,35,99,111,110,115,116,114,117,99,116,111,114,0,20,17,82,97,98,105,110,35,102,105,110,103,101,114,112,114,105,110,116,0,49,8,1,50,10,165,31,53,199,1,1,4,127,32,1,40,2,0,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,3,65,4,107,118,65,16,115,33,4,32,3,65,7,107,11,33,3,32,1,40,2,20,33,2,32,1,40,2,16,34,5,4,64,32,5,32,2,54,2,20,11,32,2,4,64,32,2,32,5,54,2,16,11,32,1,32,0,32,4,32,3,65,4,116,106,65,2,116,106,40,2,96,70,4,64,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,2,54,2,96,32,2,69,4,64,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,65,127,115,113,34,1,54,2,4,32,1,69,4,64,32,0,32,0,40,2,0,65,1,32,3,116,65,127,115,113,54,2,0,11,11,11,11,226,2,1,6,127,32,1,40,2,0,33,3,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,34,5,65,1,113,4,64,32,3,65,124,113,65,16,106,32,5,65,124,113,106,34,2,65,240,255,255,255,3,73,4,64,32,0,32,4,16,1,32,1,32,2,32,3,65,3,113,114,34,3,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,33,5,11,11,32,3,65,2,113,4,64,32,1,65,4,107,40,2,0,34,2,40,2,0,34,6,65,124,113,65,16,106,32,3,65,124,113,106,34,7,65,240,255,255,255,3,73,4,64,32,0,32,2,16,1,32,2,32,7,32,6,65,3,113,114,34,3,54,2,0,32,2,33,1,11,11,32,4,32,5,65,2,114,54,2,0,32,4,65,4,107,32,1,54,2,0,32,0,32,3,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,2,65,4,107,118,65,16,115,33,4,32,2,65,7,107,11,34,3,65,4,116,32,4,106,65,2,116,106,40,2,96,33,2,32,1,65,0,54,2,16,32,1,32,2,54,2,20,32,2,4,64,32,2,32,1,54,2,16,11,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,1,54,2,96,32,0,32,0,40,2,0,65,1,32,3,116,114,54,2,0,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,114,54,2,4,11,119,1,1,127,32,2,2,127,32,0,40,2,160,12,34,2,4,64,32,2,32,1,65,16,107,70,4,64,32,2,40,2,0,33,3,32,1,65,16,107,33,1,11,11,32,1,11,107,34,2,65,48,73,4,64,15,11,32,1,32,3,65,2,113,32,2,65,32,107,65,1,114,114,54,2,0,32,1,65,0,54,2,16,32,1,65,0,54,2,20,32,1,32,2,106,65,16,107,34,2,65,2,54,2,0,32,0,32,2,54,2,160,12,32,0,32,1,16,2,11,155,1,1,3,127,35,0,34,0,69,4,64,65,1,63,0,34,0,74,4,127,65,1,32,0,107,64,0,65,0,72,5,65,0,11,4,64,0,11,65,176,3,34,0,65,0,54,2,0,65,208,15,65,0,54,2,0,3,64,32,1,65,23,73,4,64,32,1,65,2,116,65,176,3,106,65,0,54,2,4,65,0,33,2,3,64,32,2,65,16,73,4,64,32,1,65,4,116,32,2,106,65,2,116,65,176,3,106,65,0,54,2,96,32,2,65,1,106,33,2,12,1,11,11,32,1,65,1,106,33,1,12,1,11,11,65,176,3,65,224,15,63,0,65,16,116,16,3,65,176,3,36,0,11,32,0,11,45,0,32,0,65,240,255,255,255,3,79,4,64,65,32,65,224,0,65,201,3,65,29,16,0,0,11,32,0,65,15,106,65,112,113,34,0,65,16,32,0,65,16,75,27,11,169,1,1,1,127,32,0,32,1,65,128,2,73,4,127,32,1,65,4,118,33,1,65,0,5,32,1,65,248,255,255,255,1,73,4,64,32,1,65,1,65,27,32,1,103,107,116,106,65,1,107,33,1,11,32,1,65,31,32,1,103,107,34,2,65,4,107,118,65,16,115,33,1,32,2,65,7,107,11,34,2,65,2,116,106,40,2,4,65,127,32,1,116,113,34,1,4,127,32,0,32,1,104,32,2,65,4,116,106,65,2,116,106,40,2,96,5,32,0,40,2,0,65,127,32,2,65,1,106,116,113,34,1,4,127,32,0,32,0,32,1,104,34,0,65,2,116,106,40,2,4,104,32,0,65,4,116,106,65,2,116,106,40,2,96,5,65,0,11,11,11,111,1,1,127,63,0,34,2,32,1,65,248,255,255,255,1,73,4,127,32,1,65,1,65,27,32,1,103,107,116,65,1,107,106,5,32,1,11,65,16,32,0,40,2,160,12,32,2,65,16,116,65,16,107,71,116,106,65,255,255,3,106,65,128,128,124,113,65,16,118,34,1,32,2,32,1,74,27,64,0,65,0,72,4,64,32,1,64,0,65,0,72,4,64,0,11,11,32,0,32,2,65,16,116,63,0,65,16,116,16,3,11,113,1,2,127,32,1,40,2,0,34,3,65,124,113,32,2,107,34,4,65,32,79,4,64,32,1,32,2,32,3,65,2,113,114,54,2,0,32,2,32,1,65,16,106,106,34,1,32,4,65,16,107,65,1,114,54,2,0,32,0,32,1,16,2,5,32,1,32,3,65,126,113,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,32,1,65,16,106,32,1,40,2,0,65,124,113,106,40,2,0,65,125,113,54,2,0,11,11,91,1,2,127,32,0,32,1,16,5,34,4,16,6,34,3,69,4,64,65,1,36,1,65,0,36,1,32,0,32,4,16,6,34,3,69,4,64,32,0,32,4,16,7,32,0,32,4,16,6,33,3,11,11,32,3,65,0,54,2,4,32,3,32,2,54,2,8,32,3,32,1,54,2,12,32,0,32,3,16,1,32,0,32,3,32,4,16,8,32,3,11,13,0,16,4,32,0,32,1,16,9,65,16,106,11,33,1,1,127,32,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,18,0,32,0,65,172,3,75,4,64,32,0,65,16,107,16,52,11,11,140,3,1,1,127,2,64,32,1,69,13,0,32,0,65,0,58,0,0,32,0,32,1,106,65,1,107,65,0,58,0,0,32,1,65,2,77,13,0,32,0,65,1,106,65,0,58,0,0,32,0,65,2,106,65,0,58,0,0,32,0,32,1,106,34,2,65,2,107,65,0,58,0,0,32,2,65,3,107,65,0,58,0,0,32,1,65,6,77,13,0,32,0,65,3,106,65,0,58,0,0,32,0,32,1,106,65,4,107,65,0,58,0,0,32,1,65,8,77,13,0,32,1,65,0,32,0,107,65,3,113,34,1,107,33,2,32,0,32,1,106,34,0,65,0,54,2,0,32,0,32,2,65,124,113,34,1,106,65,4,107,65,0,54,2,0,32,1,65,8,77,13,0,32,0,65,4,106,65,0,54,2,0,32,0,65,8,106,65,0,54,2,0,32,0,32,1,106,34,2,65,12,107,65,0,54,2,0,32,2,65,8,107,65,0,54,2,0,32,1,65,24,77,13,0,32,0,65,12,106,65,0,54,2,0,32,0,65,16,106,65,0,54,2,0,32,0,65,20,106,65,0,54,2,0,32,0,65,24,106,65,0,54,2,0,32,0,32,1,106,34,2,65,28,107,65,0,54,2,0,32,2,65,24,107,65,0,54,2,0,32,2,65,20,107,65,0,54,2,0,32,2,65,16,107,65,0,54,2,0,32,0,32,0,65,4,113,65,24,106,34,2,106,33,0,32,1,32,2,107,33,1,3,64,32,1,65,32,79,4,64,32,0,66,0,55,3,0,32,0,65,8,106,66,0,55,3,0,32,0,65,16,106,66,0,55,3,0,32,0,65,24,106,66,0,55,3,0,32,1,65,32,107,33,1,32,0,65,32,106,33,0,12,1,11,11,11,11,178,1,1,3,127,32,1,65,240,255,255,255,3,32,2,118,75,4,64,65,144,1,65,192,1,65,23,65,56,16,0,0,11,32,1,32,2,116,34,3,65,0,16,10,34,2,32,3,16,13,32,0,69,4,64,65,12,65,2,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,2,34,1,32,0,40,2,0,34,4,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,32,4,16,12,11,32,0,32,1,54,2,0,32,0,32,2,54,2,4,32,0,32,3,54,2,8,32,0,11,46,1,2,127,65,12,65,5,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,65,128,2,65,3,16,14,11,9,0,65,63,32,0,121,167,107,11,49,1,2,127,65,63,32,1,121,167,107,33,2,3,64,65,63,32,0,121,167,107,32,2,107,34,3,65,0,78,4,64,32,0,32,1,32,3,172,134,133,33,0,12,1,11,11,32,0,11,40,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,163,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,65,0,58,0,0,11,38,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,152,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,45,0,0,11,254,5,2,1,127,4,126,32,0,69,4,64,65,232,0,65,6,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,24,32,0,66,0,55,3,32,32,0,66,0,55,3,40,32,0,66,0,55,3,48,32,0,66,0,55,3,56,32,0,66,0,55,3,64,32,0,66,0,55,3,72,32,0,66,0,55,3,80,32,0,66,0,55,3,88,32,0,66,0,55,3,96,32,0,32,2,173,55,3,80,32,0,32,3,173,55,3,88,65,12,65,4,16,10,34,2,65,172,3,75,4,64,32,2,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,32,4,65,0,16,14,33,2,32,0,40,2,0,16,12,32,0,32,2,54,2,0,32,0,32,4,54,2,4,32,0,66,1,32,1,173,134,66,1,125,55,3,96,32,0,66,243,130,183,218,216,230,232,30,55,3,72,35,4,69,4,64,65,0,33,2,3,64,32,2,65,128,2,72,4,64,32,2,65,255,1,113,173,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,65,0,33,4,3,64,32,4,32,0,40,2,4,65,1,107,72,4,64,32,6,66,8,134,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,32,4,65,1,106,33,4,12,1,11,11,35,6,40,2,4,32,2,65,3,116,106,32,6,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,63,32,0,41,3,72,121,167,107,172,33,7,65,0,33,2,3,64,32,2,65,128,2,72,4,64,35,5,33,1,32,2,172,32,7,134,34,8,33,6,65,63,32,0,41,3,72,34,9,121,167,107,33,3,3,64,65,63,32,6,121,167,107,32,3,107,34,4,65,0,78,4,64,32,6,32,9,32,4,172,134,133,33,6,12,1,11,11,32,1,40,2,4,32,2,65,3,116,106,32,6,32,8,132,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,1,36,4,11,32,0,66,0,55,3,24,32,0,66,0,55,3,32,65,0,33,2,3,64,32,2,32,0,40,2,4,72,4,64,32,0,40,2,0,32,2,16,18,32,2,65,1,106,33,2,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,6,66,45,136,167,65,3,116,106,41,3,0,32,6,66,8,134,66,1,132,133,55,3,40,32,0,11,38,1,1,127,32,0,40,2,0,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,55,1,2,127,32,1,32,0,40,2,0,34,2,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,16,12,11,32,0,32,1,54,2,0,11,7,0,32,0,40,2,4,11,9,0,32,0,32,1,54,2,4,11,7,0,32,0,40,2,8,11,9,0,32,0,32,1,54,2,8,11,7,0,32,0,41,3,16,11,9,0,32,0,32,1,55,3,16,11,7,0,32,0,41,3,24,11,9,0,32,0,32,1,55,3,24,11,7,0,32,0,41,3,32,11,9,0,32,0,32,1,55,3,32,11,7,0,32,0,41,3,40,11,9,0,32,0,32,1,55,3,40,11,7,0,32,0,41,3,48,11,9,0,32,0,32,1,55,3,48,11,7,0,32,0,41,3,56,11,9,0,32,0,32,1,55,3,56,11,7,0,32,0,41,3,64,11,9,0,32,0,32,1,55,3,64,11,7,0,32,0,41,3,72,11,9,0,32,0,32,1,55,3,72,11,7,0,32,0,41,3,80,11,9,0,32,0,32,1,55,3,80,11,7,0,32,0,41,3,88,11,9,0,32,0,32,1,55,3,88,11,7,0,32,0,41,3,96,11,9,0,32,0,32,1,55,3,96,11,172,4,2,5,127,1,126,32,2,65,172,3,75,4,64,32,2,65,16,107,34,4,32,4,40,2,4,65,1,106,54,2,4,11,32,2,33,4,65,0,33,2,32,1,40,2,8,33,5,32,1,40,2,4,33,6,3,64,2,127,65,0,33,3,3,64,32,3,32,5,72,4,64,32,3,32,6,106,45,0,0,33,1,32,0,40,2,0,32,0,40,2,8,16,19,33,7,32,0,40,2,8,32,0,40,2,0,40,2,4,106,32,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,7,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,1,173,32,8,66,8,134,132,133,55,3,40,32,0,32,0,41,3,16,66,1,124,55,3,16,32,0,32,0,41,3,24,66,1,124,55,3,24,32,0,41,3,16,32,0,41,3,80,90,4,127,32,0,41,3,40,32,0,41,3,96,131,80,5,65,0,11,4,127,65,1,5,32,0,41,3,16,32,0,41,3,88,90,11,4,64,32,0,32,0,41,3,32,55,3,48,32,0,32,0,41,3,16,55,3,56,32,0,32,0,41,3,40,55,3,64,65,0,33,1,3,64,32,1,32,0,40,2,4,72,4,64,32,0,40,2,0,32,1,16,18,32,1,65,1,106,33,1,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,8,66,8,134,66,1,132,133,55,3,40,32,3,65,1,106,12,3,11,32,3,65,1,106,33,3,12,1,11,11,65,127,11,34,1,65,0,78,4,64,32,5,32,1,107,33,5,32,1,32,6,106,33,6,32,2,34,1,65,1,106,33,2,32,4,40,2,4,32,1,65,2,116,106,32,0,41,3,56,62,2,0,12,1,11,11,32,4,11,10,0,16,15,36,5,16,15,36,6,11,3,0,1,11,73,1,2,127,32,0,40,2,4,34,1,65,255,255,255,255,0,113,34,2,65,1,70,4,64,32,0,65,16,106,16,53,32,0,32,0,40,2,0,65,1,114,54,2,0,35,0,32,0,16,2,5,32,0,32,2,65,1,107,32,1,65,128,128,128,128,127,113,114,54,2,4,11,11,58,0,2,64,2,64,2,64,32,0,65,8,107,40,2,0,14,7,0,0,1,1,1,1,1,2,11,15,11,32,0,40,2,0,34,0,4,64,32,0,65,172,3,79,4,64,32,0,65,16,107,16,52,11,11,15,11,0,11,11,137,3,7,0,65,16,11,55,40,0,0,0,1,0,0,0,1,0,0,0,40,0,0,0,97,0,108,0,108,0,111,0,99,0,97,0,116,0,105,0,111,0,110,0,32,0,116,0,111,0,111,0,32,0,108,0,97,0,114,0,103,0,101,0,65,208,0,11,45,30,0,0,0,1,0,0,0,1,0,0,0,30,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,47,0,116,0,108,0,115,0,102,0,46,0,116,0,115,0,65,128,1,11,43,28,0,0,0,1,0,0,0,1,0,0,0,28,0,0,0,73,0,110,0,118,0,97,0,108,0,105,0,100,0,32,0,108,0,101,0,110,0,103,0,116,0,104,0,65,176,1,11,53,38,0,0,0,1,0,0,0,1,0,0,0,38,0,0,0,126,0,108,0,105,0,98,0,47,0,97,0,114,0,114,0,97,0,121,0,98,0,117,0,102,0,102,0,101,0,114,0,46,0,116,0,115,0,65,240,1,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,73,0,110,0,100,0,101,0,120,0,32,0,111,0,117,0,116,0,32,0,111,0,102,0,32,0,114,0,97,0,110,0,103,0,101,0,65,176,2,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,126,0,108,0,105,0,98,0,47,0,116,0,121,0,112,0,101,0,100,0,97,0,114,0,114,0,97,0,121,0,46,0,116,0,115,0,65,240,2,11,53,7,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,145,4,0,0,2,0,0,0,49,0,0,0,2,0,0,0,17,1,0,0,2,0,0,0,16,0,34,16,115,111,117,114,99,101,77,97,112,112,105,110,103,85,82,76,16,46,47,114,97,98,105,110,46,119,97,115,109,46,109,97,112])\n  // make it work async because browsers throw when a wasm module is bigger than 4kb and load sync\n  return instantiate(new Response(new Blob([wasm], {type: 'application/wasm'})), imp)\n}\nmodule.exports = loadWebAssembly\n","const Rabin = require('./rabin')\nconst getRabin = require('../dist/rabin-wasm.node.js')\n\nconst create = async (avg, min, max, windowSize, polynomial) => {\n    const compiled = await getRabin()\n    return new Rabin(compiled, avg, min, max, windowSize, polynomial)\n}\n\nmodule.exports = {\n    Rabin,\n    create\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\n// @ts-ignore\nimport { create } from 'rabin-wasm'\nimport errcode from 'err-code'\n\n/**\n * @typedef {object} RabinOptions\n * @property {number} min\n * @property {number} max\n * @property {number} bits\n * @property {number} window\n * @property {number} polynomial\n */\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * rabinChunker (source, options) {\n  let min, max, avg\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize\n    min = options.minChunkSize\n    max = options.maxChunkSize\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE')\n  } else {\n    avg = options.avgChunkSize\n    min = avg / 3\n    max = avg + (avg / 2)\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE')\n  }\n\n  if (max < min) {\n    max = min\n  }\n\n  if (avg < min) {\n    avg = min\n  }\n\n  const sizepow = Math.floor(Math.log2(avg))\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk\n  }\n}\n\nexport default rabinChunker\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {RabinOptions} options\n */\nasync function * rabin (source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window)\n  const buffers = new Uint8ArrayList()\n\n  for await (const chunk of source) {\n    buffers.append(chunk)\n\n    const sizes = r.fingerprint(chunk)\n\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i]\n      const buf = buffers.slice(0, size)\n      buffers.consume(size)\n\n      yield buf\n    }\n  }\n\n  if (buffers.length) {\n    yield buffers.subarray(0)\n  }\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * fixedSizeChunker (source, options) {\n  let list = new Uint8ArrayList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    list.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield list.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === list.length) {\n        list = new Uint8ArrayList()\n        currentLength = 0\n      } else {\n        const newBl = new Uint8ArrayList()\n        newBl.append(list.sublist(maxChunkSize))\n        list = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield list.subarray(0, currentLength)\n  }\n}\n\nexport default fixedSizeChunker\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @type {ChunkValidator}\n */\nasync function * validateChunks (source) {\n  for await (const content of source) {\n    if (content.length === undefined) {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n\n    if (typeof content === 'string' || content instanceof String) {\n      yield uint8ArrayFromString(content.toString())\n    } else if (Array.isArray(content)) {\n      yield Uint8Array.from(content)\n    } else if (content instanceof Uint8Array) {\n      yield content\n    } else {\n      throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n    }\n  }\n}\n\nexport default validateChunks\n","import dirBuilder from './dir.js'\nimport fileBuilder from './file/index.js'\nimport errCode from 'err-code'\nimport rabin from '../chunker/rabin.js'\nimport fixedSize from '../chunker/fixed-size.js'\nimport validateChunks from './validate-chunks.js'\n\n/**\n * @typedef {import('../types').File} File\n * @typedef {import('../types').Directory} Directory\n * @typedef {import('../types').DAGBuilder} DAGBuilder\n * @typedef {import('../types').Chunker} Chunker\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @param {any} thing\n * @returns {thing is Iterable<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterable<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {Uint8Array | AsyncIterable<Uint8Array> | Iterable<Uint8Array>} content\n * @returns {AsyncIterable<Uint8Array>}\n */\nfunction contentAsAsyncIterable (content) {\n  try {\n    if (content instanceof Uint8Array) {\n      return (async function * () {\n        yield content\n      }())\n    } else if (isIterable(content)) {\n      return (async function * () {\n        yield * content\n      }())\n    } else if (isAsyncIterable(content)) {\n      return content\n    }\n  } catch {\n    throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n  }\n\n  throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT')\n}\n\n/**\n * @type {DAGBuilder}\n */\nasync function * dagBuilder (source, blockstore, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      /**\n       * @type {Chunker}\n       */\n      let chunker\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker\n      } else if (options.chunker === 'rabin') {\n        chunker = rabin\n      } else {\n        chunker = fixedSize\n      }\n\n      /**\n       * @type {ChunkValidator}\n       */\n      let chunkValidator\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator\n      } else {\n        chunkValidator = validateChunks\n      }\n\n      /** @type {File} */\n      const file = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode,\n        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)\n      }\n\n      yield () => fileBuilder(file, blockstore, options)\n    } else if (entry.path) {\n      /** @type {Directory} */\n      const dir = {\n        path: entry.path,\n        mtime: entry.mtime,\n        mode: entry.mode\n      }\n\n      yield () => dirBuilder(dir, blockstore, options)\n    } else {\n      throw new Error('Import candidate must have content or path or both')\n    }\n  }\n}\n\nexport default dagBuilder\n","/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n *\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) { }\n\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n  async * eachChildSeries () { }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport default Dir\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {}\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return Promise.resolve(this._children[name])\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  async * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        })\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    /** @type {PBNode} */\n    const node = { Data: unixfs.marshal(), Links: links }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce(\n      /**\n       * @param {number} acc\n       * @param {PBLink} curr\n       */\n      (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize),\n      0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    }\n  }\n}\n\nexport default DirFlat\n","'use strict'\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nconst BITS_PER_BYTE = 7\n\nmodule.exports = class SparseArray {\n  constructor () {\n    this._bitArrays = []\n    this._data = []\n    this._length = 0\n    this._changedLength = false\n    this._changedData = false\n  }\n\n  set (index, value) {\n    let pos = this._internalPositionFor(index, false)\n    if (value === undefined) {\n      // unsetting\n      if (pos !== -1) {\n        // remove item from bit array and array itself\n        this._unsetInternalPos(pos)\n        this._unsetBit(index)\n        this._changedLength = true\n        this._changedData = true\n      }\n    } else {\n      let needsSort = false\n      if (pos === -1) {\n        pos = this._data.length\n        this._setBit(index)\n        this._changedData = true\n      } else {\n        needsSort = true\n      }\n      this._setInternalPos(pos, index, value, needsSort)\n      this._changedLength = true\n    }\n  }\n\n  unset (index) {\n    this.set(index, undefined)\n  }\n\n  get (index) {\n    this._sortData()\n    const pos = this._internalPositionFor(index, true)\n    if (pos === -1) {\n      return undefined\n    }\n    return this._data[pos][1]\n  }\n\n  push (value) {\n    this.set(this.length, value)\n    return this.length\n  }\n\n  get length () {\n    this._sortData()\n    if (this._changedLength) {\n      const last = this._data[this._data.length - 1]\n      this._length = last ? last[0] + 1 : 0\n      this._changedLength = false\n    }\n    return this._length\n  }\n\n  forEach (iterator) {\n    let i = 0\n    while(i < this.length) {\n      iterator(this.get(i), i, this)\n      i++\n    }\n  }\n\n  map (iterator) {\n    let i = 0\n    let mapped = new Array(this.length)\n    while(i < this.length) {\n      mapped[i] = iterator(this.get(i), i, this)\n      i++\n    }\n    return mapped\n  }\n\n  reduce (reducer, initialValue) {\n    let i = 0\n    let acc = initialValue\n    while(i < this.length) {\n      const value = this.get(i)\n      acc = reducer(acc, value, i)\n      i++\n    }\n    return acc\n  }\n\n  find (finder) {\n    let i = 0, found, last\n    while ((i < this.length) && !found) {\n      last = this.get(i)\n      found = finder(last)\n      i++\n    }\n    return found ? last : undefined\n  }\n\n  _internalPositionFor (index, noCreate) {\n    const bytePos = this._bytePosFor(index, noCreate)\n    if (bytePos >= this._bitArrays.length) {\n      return -1\n    }\n    const byte = this._bitArrays[bytePos]\n    const bitPos = index - bytePos * BITS_PER_BYTE\n    const exists = (byte & (1 << bitPos)) > 0\n    if (!exists) {\n      return -1\n    }\n    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0)\n\n    const mask = ~(0xffffffff << (bitPos + 1))\n    const bytePopCount = popCount(byte & mask)\n    const arrayPos = previousPopCount + bytePopCount - 1\n    return arrayPos\n  }\n\n  _bytePosFor (index, noCreate) {\n    const bytePos = Math.floor(index / BITS_PER_BYTE)\n    const targetLength = bytePos + 1\n    while (!noCreate && this._bitArrays.length < targetLength) {\n      this._bitArrays.push(0)\n    }\n    return bytePos\n  }\n\n  _setBit (index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _unsetBit(index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _setInternalPos(pos, index, value, needsSort) {\n    const data =this._data\n    const elem = [index, value]\n    if (needsSort) {\n      this._sortData()\n      data[pos] = elem\n    } else {\n      // new element. just shove it into the array\n      // but be nice about where we shove it\n      // in order to make sorting it later easier\n      if (data.length) {\n        if (data[data.length - 1][0] >= index) {\n          data.push(elem)\n        } else if (data[0][0] <= index) {\n          data.unshift(elem)\n        } else {\n          const randomIndex = Math.round(data.length / 2)\n          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex))\n        }\n      } else {\n        this._data.push(elem)\n      }\n      this._changedData = true\n      this._changedLength = true\n    }\n  }\n\n  _unsetInternalPos (pos) {\n    this._data.splice(pos, 1)\n  }\n\n  _sortData () {\n    if (this._changedData) {\n      this._data.sort(sortInternal)\n    }\n\n    this._changedData = false\n  }\n\n  bitField () {\n    const bytes = []\n    let pendingBitsForResultingByte = 8\n    let pendingBitsForNewByte = 0\n    let resultingByte = 0\n    let newByte\n    const pending = this._bitArrays.slice()\n    while (pending.length || pendingBitsForNewByte) {\n      if (pendingBitsForNewByte === 0) {\n        newByte = pending.shift()\n        pendingBitsForNewByte = 7\n      }\n\n      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte)\n      const mask = ~(0b11111111 << usingBits)\n      const masked = newByte & mask\n      resultingByte |= masked << (8 - pendingBitsForResultingByte)\n      newByte = newByte >>> usingBits\n      pendingBitsForNewByte -= usingBits\n      pendingBitsForResultingByte -= usingBits\n\n      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {\n        bytes.push(resultingByte)\n        resultingByte = 0\n        pendingBitsForResultingByte = 8\n      }\n    }\n\n    // remove trailing zeroes\n    for(var i = bytes.length - 1; i > 0; i--) {\n      const value = bytes[i]\n      if (value === 0) {\n        bytes.pop()\n      } else {\n        break\n      }\n    }\n\n    return bytes\n  }\n\n  compactArray () {\n    this._sortData()\n    return this._data.map(valueOnly)\n  }\n}\n\nfunction popCountReduce (count, byte) {\n  return count + popCount(byte)\n}\n\nfunction popCount(_v) {\n  let v = _v\n  v = v - ((v >> 1) & 0x55555555)                    // reuse input as temporary\n  v = (v & 0x33333333) + ((v >> 2) & 0x33333333)     // temp\n  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nfunction sortInternal (a, b) {\n  return a[0] - b[0]\n}\n\nfunction valueOnly (elem) {\n  return elem[1]\n}","// @ts-expect-error\nimport SparseArray from 'sparse-array';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nexport class Bucket {\n    constructor(options, parent, posAtParent = 0) {\n        this._options = options;\n        this._popCount = 0;\n        this._parent = parent;\n        this._posAtParent = posAtParent;\n        this._children = new SparseArray();\n        this.key = null;\n    }\n    async put(key, value) {\n        const place = await this._findNewBucketAndPos(key);\n        await place.bucket._putAt(place, key, value);\n    }\n    async get(key) {\n        const child = await this._findChild(key);\n        if (child != null) {\n            return child.value;\n        }\n    }\n    async del(key) {\n        const place = await this._findPlace(key);\n        const child = place.bucket._at(place.pos);\n        if (child != null && child.key === key) {\n            place.bucket._delAt(place.pos);\n        }\n    }\n    leafCount() {\n        const children = this._children.compactArray();\n        return children.reduce((acc, child) => {\n            if (child instanceof Bucket) {\n                return acc + child.leafCount();\n            }\n            return acc + 1;\n        }, 0);\n    }\n    childrenCount() {\n        return this._children.length;\n    }\n    onlyChild() {\n        return this._children.get(0);\n    }\n    *eachLeafSeries() {\n        const children = this._children.compactArray();\n        for (const child of children) {\n            if (child instanceof Bucket) {\n                yield* child.eachLeafSeries();\n            }\n            else {\n                yield child;\n            }\n        }\n    }\n    serialize(map, reduce) {\n        const acc = [];\n        // serialize to a custom non-sparse representation\n        return reduce(this._children.reduce((acc, child, index) => {\n            if (child != null) {\n                if (child instanceof Bucket) {\n                    acc.push(child.serialize(map, reduce));\n                }\n                else {\n                    acc.push(map(child, index));\n                }\n            }\n            return acc;\n        }, acc));\n    }\n    async asyncTransform(asyncMap, asyncReduce) {\n        return await asyncTransformBucket(this, asyncMap, asyncReduce);\n    }\n    toJSON() {\n        return this.serialize(mapNode, reduceNodes);\n    }\n    prettyPrint() {\n        return JSON.stringify(this.toJSON(), null, '  ');\n    }\n    tableSize() {\n        return Math.pow(2, this._options.bits);\n    }\n    async _findChild(key) {\n        const result = await this._findPlace(key);\n        const child = result.bucket._at(result.pos);\n        if (child instanceof Bucket) {\n            // should not be possible, this._findPlace should always\n            // return a location for a child, not a bucket\n            return undefined;\n        }\n        if (child != null && child.key === key) {\n            return child;\n        }\n    }\n    async _findPlace(key) {\n        const hashValue = this._options.hash(typeof key === 'string' ? uint8ArrayFromString(key) : key);\n        const index = await hashValue.take(this._options.bits);\n        const child = this._children.get(index);\n        if (child instanceof Bucket) {\n            return await child._findPlace(hashValue);\n        }\n        return {\n            bucket: this,\n            pos: index,\n            hash: hashValue,\n            existingChild: child\n        };\n    }\n    async _findNewBucketAndPos(key) {\n        const place = await this._findPlace(key);\n        if ((place.existingChild != null) && place.existingChild.key !== key) {\n            // conflict\n            const bucket = new Bucket(this._options, place.bucket, place.pos);\n            place.bucket._putObjectAt(place.pos, bucket);\n            // put the previous value\n            const newPlace = await bucket._findPlace(place.existingChild.hash);\n            newPlace.bucket._putAt(newPlace, place.existingChild.key, place.existingChild.value);\n            return await bucket._findNewBucketAndPos(place.hash);\n        }\n        // no conflict, we found the place\n        return place;\n    }\n    _putAt(place, key, value) {\n        this._putObjectAt(place.pos, {\n            key: key,\n            value: value,\n            hash: place.hash\n        });\n    }\n    _putObjectAt(pos, object) {\n        if (this._children.get(pos) == null) {\n            this._popCount++;\n        }\n        this._children.set(pos, object);\n    }\n    _delAt(pos) {\n        if (pos === -1) {\n            throw new Error('Invalid position');\n        }\n        if (this._children.get(pos) != null) {\n            this._popCount--;\n        }\n        this._children.unset(pos);\n        this._level();\n    }\n    _level() {\n        if (this._parent != null && this._popCount <= 1) {\n            if (this._popCount === 1) {\n                // remove myself from parent, replacing me with my only child\n                const onlyChild = this._children.find(exists);\n                if ((onlyChild != null) && !(onlyChild instanceof Bucket)) {\n                    const hash = onlyChild.hash;\n                    hash.untake(this._options.bits);\n                    const place = {\n                        pos: this._posAtParent,\n                        hash: hash,\n                        bucket: this._parent\n                    };\n                    this._parent._putAt(place, onlyChild.key, onlyChild.value);\n                }\n            }\n            else {\n                this._parent._delAt(this._posAtParent);\n            }\n        }\n    }\n    _at(index) {\n        return this._children.get(index);\n    }\n}\nfunction exists(o) {\n    return Boolean(o);\n}\nfunction mapNode(node, _) {\n    return node.key;\n}\nfunction reduceNodes(nodes) {\n    return nodes;\n}\nasync function asyncTransformBucket(bucket, asyncMap, asyncReduce) {\n    const output = [];\n    for (const child of bucket._children.compactArray()) {\n        if (child instanceof Bucket) {\n            await asyncTransformBucket(child, asyncMap, asyncReduce);\n        }\n        else {\n            const mappedChildren = await asyncMap(child);\n            output.push({\n                bitField: bucket._children.bitField(),\n                children: mappedChildren\n            });\n        }\n    }\n    return await asyncReduce(output);\n}\n//# sourceMappingURL=bucket.js.map","const START_MASKS = [\n    0b11111111,\n    0b11111110,\n    0b11111100,\n    0b11111000,\n    0b11110000,\n    0b11100000,\n    0b11000000,\n    0b10000000\n];\nconst STOP_MASKS = [\n    0b00000001,\n    0b00000011,\n    0b00000111,\n    0b00001111,\n    0b00011111,\n    0b00111111,\n    0b01111111,\n    0b11111111\n];\nexport class ConsumableBuffer {\n    constructor(value) {\n        this._value = value;\n        this._currentBytePos = value.length - 1;\n        this._currentBitPos = 7;\n    }\n    availableBits() {\n        return this._currentBitPos + 1 + this._currentBytePos * 8;\n    }\n    totalBits() {\n        return this._value.length * 8;\n    }\n    take(bits) {\n        let pendingBits = bits;\n        let result = 0;\n        while (pendingBits > 0 && this._haveBits()) {\n            const byte = this._value[this._currentBytePos];\n            const availableBits = this._currentBitPos + 1;\n            const taking = Math.min(availableBits, pendingBits);\n            const value = byteBitsToInt(byte, availableBits - taking, taking);\n            result = (result << taking) + value;\n            pendingBits -= taking;\n            this._currentBitPos -= taking;\n            if (this._currentBitPos < 0) {\n                this._currentBitPos = 7;\n                this._currentBytePos--;\n            }\n        }\n        return result;\n    }\n    untake(bits) {\n        this._currentBitPos += bits;\n        while (this._currentBitPos > 7) {\n            this._currentBitPos -= 8;\n            this._currentBytePos += 1;\n        }\n    }\n    _haveBits() {\n        return this._currentBytePos >= 0;\n    }\n}\nfunction byteBitsToInt(byte, start, length) {\n    const mask = maskFor(start, length);\n    return (byte & mask) >>> start;\n}\nfunction maskFor(start, length) {\n    return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)];\n}\n//# sourceMappingURL=consumable-buffer.js.map","import { ConsumableBuffer } from './consumable-buffer.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function wrapHash(hashFn) {\n    function hashing(value) {\n        if (value instanceof InfiniteHash) {\n            // already a hash. return it\n            return value;\n        }\n        else {\n            return new InfiniteHash(value, hashFn);\n        }\n    }\n    return hashing;\n}\nexport class InfiniteHash {\n    constructor(value, hashFn) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('can only hash Uint8Arrays');\n        }\n        this._value = value;\n        this._hashFn = hashFn;\n        this._depth = -1;\n        this._availableBits = 0;\n        this._currentBufferIndex = 0;\n        this._buffers = [];\n    }\n    async take(bits) {\n        let pendingBits = bits;\n        while (this._availableBits < pendingBits) {\n            await this._produceMoreBits();\n        }\n        let result = 0;\n        while (pendingBits > 0) {\n            const hash = this._buffers[this._currentBufferIndex];\n            const available = Math.min(hash.availableBits(), pendingBits);\n            const took = hash.take(available);\n            result = (result << available) + took;\n            pendingBits -= available;\n            this._availableBits -= available;\n            if (hash.availableBits() === 0) {\n                this._currentBufferIndex++;\n            }\n        }\n        return result;\n    }\n    untake(bits) {\n        let pendingBits = bits;\n        while (pendingBits > 0) {\n            const hash = this._buffers[this._currentBufferIndex];\n            const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);\n            hash.untake(availableForUntake);\n            pendingBits -= availableForUntake;\n            this._availableBits += availableForUntake;\n            if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n                this._depth--;\n                this._currentBufferIndex--;\n            }\n        }\n    }\n    async _produceMoreBits() {\n        this._depth++;\n        const value = this._depth > 0 ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;\n        const hashValue = await this._hashFn(value);\n        const buffer = new ConsumableBuffer(hashValue);\n        this._buffers.push(buffer);\n        this._availableBits += buffer.availableBits();\n    }\n}\n//# sourceMappingURL=consumable-hash.js.map","import { Bucket } from './bucket.js';\nimport { wrapHash } from './consumable-hash.js';\nexport function createHAMT(options) {\n    if (options == null || options.hashFn == null) {\n        throw new Error('please define an options.hashFn');\n    }\n    const bucketOptions = {\n        bits: options.bits ?? 8,\n        hash: wrapHash(options.hashFn)\n    };\n    return new Bucket(bucketOptions);\n}\nexport { Bucket };\n//# sourceMappingURL=index.js.map","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n    this._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    for await (const entry of flush(this._bucket, blockstore, this, this.options)) {\n      yield {\n        ...entry,\n        path: this.path\n      }\n    }\n  }\n}\n\nexport default DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: options.hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    unixfs: dir,\n    size\n  }\n}\n","import DirSharded from './dir-sharded.js'\nimport DirFlat from './dir-flat.js'\n\n/**\n * @typedef {import('./dir').default} Dir\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @param {Dir | null} child\n * @param {Dir} dir\n * @param {number} threshold\n * @param {ImporterOptions} options\n * @returns {Promise<DirSharded>}\n */\nasync function flatToShard (child, dir, threshold, options) {\n  let newDir = dir\n\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options)\n  }\n\n  const parent = newDir.parent\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir\n      }\n\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found')\n      }\n\n      await parent.put(newDir.parentKey, newDir)\n    }\n\n    return flatToShard(newDir, parent, threshold, options)\n  }\n\n  // @ts-ignore\n  return newDir\n}\n\n/**\n * @param {DirFlat} oldDir\n * @param {ImporterOptions} options\n */\nasync function convertToShard (oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options)\n\n  for await (const { key, child } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child)\n  }\n\n  return newDir\n}\n\nexport default flatToShard\n","const toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\nexport default toPathComponents\n","import DirFlat from './dir-flat.js'\nimport flatToShard from './flat-to-shard.js'\nimport Dir from './dir.js'\nimport toPathComponents from './utils/to-path-components.js'\n\n/**\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {(source: AsyncIterable<InProgressImportResult>, blockstore: Blockstore, options: ImporterOptions) => AsyncIterable<ImportResult>} TreeBuilder\n */\n\n/**\n * @param {InProgressImportResult} elem\n * @param {Dir} tree\n * @param {ImporterOptions} options\n */\nasync function addToTree (elem, tree, options) {\n  const pathElems = toPathComponents(elem.path || '')\n  const lastIndex = pathElems.length - 1\n  let parent = tree\n  let currentPath = ''\n\n  for (let i = 0; i < pathElems.length; i++) {\n    const pathElem = pathElems[i]\n\n    currentPath += `${currentPath ? '/' : ''}${pathElem}`\n\n    const last = (i === lastIndex)\n    parent.dirty = true\n    parent.cid = undefined\n    parent.size = undefined\n\n    if (last) {\n      await parent.put(pathElem, elem)\n      tree = await flatToShard(null, parent, options.shardSplitThreshold, options)\n    } else {\n      let dir = await parent.get(pathElem)\n\n      if (!dir || !(dir instanceof Dir)) {\n        dir = new DirFlat({\n          root: false,\n          dir: true,\n          parent: parent,\n          parentKey: pathElem,\n          path: currentPath,\n          dirty: true,\n          flat: true,\n          mtime: dir && dir.unixfs && dir.unixfs.mtime,\n          mode: dir && dir.unixfs && dir.unixfs.mode\n        }, options)\n      }\n\n      await parent.put(pathElem, dir)\n\n      parent = dir\n    }\n  }\n\n  return tree\n}\n\n/**\n * @param {Dir | InProgressImportResult} tree\n * @param {Blockstore} blockstore\n */\nasync function * flushAndYield (tree, blockstore) {\n  if (!(tree instanceof Dir)) {\n    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {\n      yield tree\n    }\n\n    return\n  }\n\n  yield * tree.flush(blockstore)\n}\n\n/**\n * @type {TreeBuilder}\n */\nasync function * treeBuilder (source, block, options) {\n  /** @type {Dir} */\n  let tree = new DirFlat({\n    root: true,\n    dir: true,\n    path: '',\n    dirty: true,\n    flat: true\n  }, options)\n\n  for await (const entry of source) {\n    if (!entry) {\n      continue\n    }\n\n    tree = await addToTree(entry, tree, options)\n\n    if (!entry.unixfs || !entry.unixfs.isDirectory()) {\n      yield entry\n    }\n  }\n\n  if (options.wrapWithDirectory) {\n    yield * flushAndYield(tree, block)\n  } else {\n    for await (const unwrapped of tree.eachChildSeries()) {\n      if (!unwrapped) {\n        continue\n      }\n\n      yield * flushAndYield(unwrapped.child, block)\n    }\n  }\n}\n\nexport default treeBuilder\n","import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateMultiple(input, normaliseContent)\n}\n","/**\n * @typedef {object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nexport const parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * @typedef {object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nexport const parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nexport const parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n","import { importer } from 'ipfs-unixfs-importer'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple'\nimport { parseChunkerString } from './utils.js'\nimport { pipe } from 'it-pipe'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll ({ repo, preload, hashers, options }) {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    /** @type {MultihashHasher | undefined} */\n    let hasher\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg)\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        hasher,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString()\n\n        // do not keep file totals around forever\n        delete totals[path]\n\n        yield {\n          ...added,\n          path\n        }\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","\nimport { Bucket, createHAMT } from 'hamt-sharding'\nimport { decode } from '@ipld/dag-pb'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n// FIXME: this is copy/pasted from ipfs-unixfs-importer/src/options.js\n/**\n * @param {Uint8Array} buf\n */\nconst hashFn = async function (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @param {PBLink[]} links\n * @param {Bucket<boolean>} bucket\n * @param {Bucket<boolean>} rootBucket\n */\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(\n    links.map(link => {\n      if (link.Name == null) {\n        // TODO(@rvagg): what do? this is technically possible\n        throw new Error('Unexpected Link without a Name')\n      }\n      if (link.Name.length === 2) {\n        const pos = parseInt(link.Name, 16)\n\n        return bucket._putObjectAt(pos, new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos))\n      }\n\n      return rootBucket.put(link.Name.substring(2), true)\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nconst toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {import('hamt-sharding').BucketPosition<boolean>} position\n */\nconst toBucketPath = (position) => {\n  let bucket = position.bucket\n  const path = []\n\n  while (bucket._parent) {\n    path.push(bucket)\n\n    bucket = bucket._parent\n  }\n\n  path.push(bucket)\n\n  return path.reverse()\n}\n\n/**\n * @typedef {import('../types').ShardTraversalContext} ShardTraversalContext\n *\n * @param {PBNode} node\n * @param {string} name\n * @param {Blockstore} blockstore\n * @param {ShardTraversalContext} [context]\n * @param {ExporterOptions} [options]\n * @returns {Promise<CID|null>}\n */\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = createHAMT({\n      hashFn\n    })\n\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    }\n  }\n\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket)\n\n  const position = await context.rootBucket._findNewBucketAndPos(name)\n  let prefix = toPrefix(position.pos)\n  const bucketPath = toBucketPath(position)\n\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth]\n\n    prefix = toPrefix(context.lastBucket._posAtParent)\n  }\n\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false\n    }\n\n    const entryPrefix = link.Name.substring(0, 2)\n    const entryName = link.Name.substring(2)\n\n    if (entryPrefix !== prefix) {\n      // not the entry or subshard we're looking for\n      return false\n    }\n\n    if (entryName && entryName !== name) {\n      // not the entry we're looking for\n      return false\n    }\n\n    return true\n  })\n\n  if (!link) {\n    return null\n  }\n\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash\n  }\n\n  context.hamtDepth++\n\n  const block = await blockstore.get(link.Hash, options)\n  node = decode(block)\n\n  return findShardCid(node, name, blockstore, context, options)\n}\n\nexport default findShardCid\n","/**\n * @param {Uint8Array} block\n * @param {number} blockStart\n * @param {number} requestedStart\n * @param {number} requestedEnd\n */\nfunction extractDataFromBlock (block, blockStart, requestedStart, requestedEnd) {\n  const blockLength = block.length\n  const blockEnd = blockStart + blockLength\n\n  if (requestedStart >= blockEnd || requestedEnd < blockStart) {\n    // If we are looking for a byte range that is starts after the start of the block,\n    // return an empty block.  This can happen when internal nodes contain data\n    return new Uint8Array(0)\n  }\n\n  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {\n    // If the end byte is in the current block, truncate the block to the end byte\n    block = block.subarray(0, requestedEnd - blockStart)\n  }\n\n  if (requestedStart >= blockStart && requestedStart < blockEnd) {\n    // If the start byte is in the current block, skip to the start byte\n    block = block.subarray(requestedStart - blockStart)\n  }\n\n  return block\n}\n\nexport default extractDataFromBlock\n","import errCode from 'err-code'\n\n/**\n * @param {number} size\n * @param {number} [offset]\n * @param {number} [length]\n */\nconst validateOffsetAndLength = (size, offset, length) => {\n  if (!offset) {\n    offset = 0\n  }\n\n  if (offset < 0) {\n    throw errCode(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset > size) {\n    throw errCode(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (!length && length !== 0) {\n    length = size - offset\n  }\n\n  if (length < 0) {\n    throw errCode(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS')\n  }\n\n  if (offset + length > size) {\n    length = size - offset\n  }\n\n  return {\n    offset,\n    length\n  }\n}\n\nexport default validateOffsetAndLength\n","import { pushable } from 'it-pushable';\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nexport default async function* merge(...sources) {\n    const output = pushable({\n        objectMode: true\n    });\n    void Promise.resolve().then(async () => {\n        try {\n            await Promise.all(sources.map(async (source) => {\n                for await (const item of source) {\n                    output.push(item);\n                }\n            }));\n            output.end();\n        }\n        catch (err) {\n            output.end(err);\n        }\n    });\n    yield* output;\n}\n//# sourceMappingURL=index.js.map","import { pushable } from 'it-pushable';\nimport merge from 'it-merge';\nexport const rawPipe = (...fns) => {\n    let res;\n    while (fns.length > 0) {\n        res = fns.shift()(res);\n    }\n    return res;\n};\nexport const isIterable = (obj) => {\n    return obj != null && (typeof obj[Symbol.asyncIterator] === 'function' ||\n        typeof obj[Symbol.iterator] === 'function' ||\n        typeof obj.next === 'function' // Probably, right?\n    );\n};\nexport const isDuplex = (obj) => {\n    return obj != null && typeof obj.sink === 'function' && isIterable(obj.source);\n};\nconst duplexPipelineFn = (duplex) => {\n    return (source) => {\n        const p = duplex.sink(source);\n        if (p.then != null) {\n            const stream = pushable({\n                objectMode: true\n            });\n            p.then(() => {\n                stream.end();\n            }, (err) => {\n                stream.end(err);\n            });\n            const sourceWrap = async function* () {\n                yield* duplex.source;\n                stream.end();\n            };\n            return merge(stream, sourceWrap());\n        }\n        return duplex.source;\n    };\n};\nexport function pipe(first, ...rest) {\n    // Duplex at start: wrap in function and return duplex source\n    if (isDuplex(first)) {\n        const duplex = first;\n        first = () => duplex.source;\n        // Iterable at start: wrap in function\n    }\n    else if (isIterable(first)) {\n        const source = first;\n        first = () => source;\n    }\n    const fns = [first, ...rest];\n    if (fns.length > 1) {\n        // Duplex at end: use duplex sink\n        if (isDuplex(fns[fns.length - 1])) {\n            fns[fns.length - 1] = fns[fns.length - 1].sink;\n        }\n    }\n    if (fns.length > 2) {\n        // Duplex in the middle, consume source with duplex sink and return duplex source\n        for (let i = 1; i < fns.length - 1; i++) {\n            if (isDuplex(fns[i])) {\n                fns[i] = duplexPipelineFn(fns[i]);\n            }\n        }\n    }\n    return rawPipe(...fns);\n}\n//# sourceMappingURL=index.js.map","import extractDataFromBlock from '../../../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../../../utils/validate-offset-and-length.js'\nimport { UnixFS } from 'ipfs-unixfs'\nimport errCode from 'err-code'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\nimport { pushable } from 'it-pushable'\nimport parallel from 'it-parallel'\nimport { pipe } from 'it-pipe'\nimport map from 'it-map'\nimport PQueue from 'p-queue'\n\n/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode | Uint8Array} node\n * @param {import('it-pushable').Pushable<Uint8Array>} queue\n * @param {number} streamPosition\n * @param {number} start\n * @param {number} end\n * @param {PQueue} walkQueue\n * @param {ExporterOptions} options\n * @returns {Promise<void>}\n */\nasync function walkDAG (blockstore, node, queue, streamPosition, start, end, walkQueue, options) {\n  // a `raw` node\n  if (node instanceof Uint8Array) {\n    queue.push(extractDataFromBlock(node, streamPosition, start, end))\n\n    return\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  /** @type {UnixFS} */\n  let file\n\n  try {\n    file = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  // might be a unixfs `raw` node or have data on intermediate nodes\n  if (file.data != null) {\n    const data = file.data\n    const buf = extractDataFromBlock(data, streamPosition, start, end)\n\n    queue.push(buf)\n\n    streamPosition += buf.byteLength\n  }\n\n  /** @type {Array<{ link: PBLink, blockStart: number }>} */\n  const childOps = []\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i]\n    const childStart = streamPosition // inclusive\n    const childEnd = childStart + file.blockSizes[i] // exclusive\n\n    if ((start >= childStart && start < childEnd) || // child has offset byte\n        (end >= childStart && end <= childEnd) || // child has end byte\n        (start < childStart && end > childEnd)) { // child is between offset and end bytes\n      childOps.push({\n        link: childLink,\n        blockStart: streamPosition\n      })\n    }\n\n    streamPosition = childEnd\n\n    if (streamPosition > end) {\n      break\n    }\n  }\n\n  await pipe(\n    childOps,\n    (source) => map(source, (op) => {\n      return async () => {\n        const block = await blockstore.get(op.link.Hash, {\n          signal: options.signal\n        })\n\n        return {\n          ...op,\n          block\n        }\n      }\n    }),\n    (source) => parallel(source, {\n      ordered: true\n    }),\n    async (source) => {\n      for await (const { link, block, blockStart } of source) {\n        /** @type {PBNode | Uint8Array} */\n        let child\n        switch (link.Hash.code) {\n          case dagPb.code:\n            child = dagPb.decode(block)\n            break\n          case raw.code:\n            child = block\n            break\n          default:\n            queue.end(errCode(new Error(`Unsupported codec: ${link.Hash.code}`), 'ERR_NOT_UNIXFS'))\n            return\n        }\n\n        walkQueue.add(async () => {\n          await walkDAG(blockstore, child, queue, blockStart, start, end, walkQueue, options)\n        })\n      }\n    }\n  )\n}\n\n/**\n * @type {import('../').UnixfsV1Resolver}\n */\nconst fileContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * yieldFileContent (options = {}) {\n    const fileSize = unixfs.fileSize()\n\n    if (fileSize === undefined) {\n      throw new Error('File was a directory')\n    }\n\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length)\n\n    if (length === 0) {\n      return\n    }\n\n    // use a queue to walk the DAG instead of recursion to ensure very deep DAGs\n    // don't overflow the stack\n    const walkQueue = new PQueue({\n      concurrency: 1\n    })\n    const queue = pushable()\n\n    walkQueue.add(async () => {\n      await walkDAG(blockstore, node, queue, 0, offset, offset + length, walkQueue, options)\n    })\n\n    walkQueue.on('error', error => {\n      queue.end(error)\n    })\n\n    let read = 0\n\n    for await (const buf of queue) {\n      if (buf == null) {\n        continue\n      }\n\n      read += buf.byteLength\n\n      if (read === length) {\n        queue.end()\n      }\n\n      yield buf\n    }\n  }\n\n  return yieldFileContent\n}\n\nexport default fileContent\n","/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} [options]\n   * @returns {UnixfsV1DirectoryContent}\n   */\n  async function * yieldDirectoryContent (options = {}) {\n    const offset = options.offset || 0\n    const length = options.length || node.Links.length\n    const links = node.Links.slice(offset, length)\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options)\n\n      if (result.entry) {\n        yield result.entry\n      }\n    }\n  }\n\n  return yieldDirectoryContent\n}\n\nexport default directoryContent\n","import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n","import errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport findShardCid from '../../utils/find-cid-in-shard.js'\nimport { decode } from '@ipld/dag-pb'\n\nimport contentFile from './content/file.js'\nimport contentDirectory from './content/directory.js'\nimport contentHamtShardedDirectory from './content/hamt-sharded-directory.js'\n\n/**\n * @typedef {import('../../types').Resolve} Resolve\n * @typedef {import('../../types').Resolver} Resolver\n * @typedef {import('../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @param {PBNode} node\n * @param {string} name\n */\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name)\n\n  return link && link.Hash\n}\n\n/**\n * @type {{ [key: string]: UnixfsV1Resolver }}\n */\nconst contentExporters = {\n  raw: contentFile,\n  file: contentFile,\n  directory: contentDirectory,\n  'hamt-sharded-directory': contentHamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => []\n  }\n}\n\n/**\n * @type {Resolver}\n */\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options)\n  const node = decode(block)\n  let unixfs\n  let next\n\n  if (!name) {\n    name = cid.toString()\n  }\n\n  if (node.Data == null) {\n    throw errCode(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS')\n  }\n\n  try {\n    unixfs = UnixFS.unmarshal(node.Data)\n  } catch (/** @type {any} */ err) {\n    // non-UnixFS dag-pb node? It could happen.\n    throw errCode(err, 'ERR_NOT_UNIXFS')\n  }\n\n  if (!path) {\n    path = name\n  }\n\n  if (toResolve.length) {\n    let linkCid\n\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      // special case - unixfs v1 hamt shards\n      linkCid = await findShardCid(node, toResolve[0], blockstore)\n    } else {\n      linkCid = findLinkCid(node, toResolve[0])\n    }\n\n    if (!linkCid) {\n      throw errCode(new Error('file does not exist'), 'ERR_NOT_FOUND')\n    }\n\n    // remove the path component we have resolved\n    const nextName = toResolve.shift()\n    const nextPath = `${path}/${nextName}`\n\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    }\n  }\n\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      // @ts-ignore\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  }\n}\n\nexport default unixFsResolver\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {import('../types').Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n\n  const block = await blockstore.get(cid, options)\n\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  }\n}\n\nexport default resolve\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport * as dagCbor from '@ipld/dag-cbor'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid)\n  const object = dagCbor.decode(block)\n  let subObject = object\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      const subObjectCid = CID.asCID(subObject[prop])\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function * () {\n              yield object\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function * () {\n        yield object\n      }\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\nimport * as mh from 'multiformats/hashes/digest'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n  const buf = await mh.decode(cid.multihash.bytes)\n\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  }\n}\n\nexport default resolve\n","import errCode from 'err-code'\n\nimport * as dagPb from '@ipld/dag-pb'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as raw from 'multiformats/codecs/raw'\nimport { identity } from 'multiformats/hashes/identity'\n\nimport dagPbResolver from './unixfs-v1/index.js'\nimport rawResolver from './raw.js'\nimport dagCborResolver from './dag-cbor.js'\nimport identifyResolver from './identity.js'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n * @typedef {import('../types').Resolve} Resolve\n */\n\n/**\n * @type {{ [ key: string ]: Resolver }}\n */\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n}\n\n/**\n * @type {Resolve}\n */\nfunction resolve (cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code]\n\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER')\n  }\n\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options)\n}\n\nexport default resolve\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\nimport resolve from './resolvers/index.js'\nimport last from 'it-last'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ExporterOptions} ExporterOptions\n * @typedef {import('./types').UnixFSFile} UnixFSFile\n * @typedef {import('./types').UnixFSDirectory} UnixFSDirectory\n * @typedef {import('./types').ObjectNode} ObjectNode\n * @typedef {import('./types').RawNode} RawNode\n * @typedef {import('./types').IdentityNode} IdentityNode\n * @typedef {import('./types').UnixFSEntry} UnixFSEntry\n */\n\nconst toPathComponents = (path = '') => {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n\n/**\n * @param {string|Uint8Array|CID} path\n */\nconst cidAndRest = (path) => {\n  if (path instanceof Uint8Array) {\n    return {\n      cid: CID.decode(path),\n      toResolve: []\n    }\n  }\n\n  const cid = CID.asCID(path)\n  if (cid) {\n    return {\n      cid,\n      toResolve: []\n    }\n  }\n\n  if (typeof path === 'string') {\n    if (path.indexOf('/ipfs/') === 0) {\n      path = path.substring(6)\n    }\n\n    const output = toPathComponents(path)\n\n    return {\n      cid: CID.parse(output[0]),\n      toResolve: output.slice(1)\n    }\n  }\n\n  throw errCode(new Error(`Unknown path type ${path}`), 'ERR_BAD_PATH')\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * walkPath (path, blockstore, options = {}) {\n  let {\n    cid,\n    toResolve\n  } = cidAndRest(path)\n  let name = cid.toString()\n  let entryPath = name\n  const startingDepth = toResolve.length\n\n  while (true) {\n    const result = await resolve(cid, name, entryPath, toResolve, startingDepth, blockstore, options)\n\n    if (!result.entry && !result.next) {\n      throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n    }\n\n    if (result.entry) {\n      yield result.entry\n    }\n\n    if (!result.next) {\n      return\n    }\n\n    // resolve further parts\n    toResolve = result.next.toResolve\n    cid = result.next.cid\n    name = result.next.name\n    entryPath = result.next.path\n  }\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function exporter (path, blockstore, options = {}) {\n  const result = await last(walkPath(path, blockstore, options))\n\n  if (!result) {\n    throw errCode(new Error(`Could not resolve ${path}`), 'ERR_NOT_FOUND')\n  }\n\n  return result\n}\n\n/**\n * @param {string | CID} path\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} [options]\n */\nexport async function * recursive (path, blockstore, options = {}) {\n  const node = await exporter(path, blockstore, options)\n\n  if (!node) {\n    return\n  }\n\n  yield node\n\n  if (node.type === 'directory') {\n    for await (const child of recurse(node, options)) {\n      yield child\n    }\n  }\n\n  /**\n   * @param {UnixFSDirectory} node\n   * @param {ExporterOptions} options\n   * @returns {AsyncGenerator<UnixFSEntry, void, any>}\n   */\n  async function * recurse (node, options) {\n    for await (const file of node.content(options)) {\n      yield file\n\n      if (file instanceof Uint8Array) {\n        continue\n      }\n\n      if (file.type === 'directory') {\n        yield * recurse(file, options)\n      }\n    }\n  }\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n","import { Uint8ArrayList, isUint8ArrayList } from 'uint8arraylist';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nconst ZERO_OFFSET = '0'.charCodeAt(0);\nconst USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary');\nconst GNU_MAGIC = uint8ArrayFromString('ustar\\x20', 'binary');\nconst GNU_VER = uint8ArrayFromString('\\x20\\x00', 'binary');\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nconst clamp = function (index, len, defaultValue) {\n    if (typeof index !== 'number')\n        return defaultValue;\n    index = ~~index; // Coerce to integer.\n    if (index >= len)\n        return len;\n    if (index >= 0)\n        return index;\n    index += len;\n    if (index >= 0)\n        return index;\n    return 0;\n};\nconst toType = function (flag) {\n    switch (flag) {\n        case 0:\n            return 'file';\n        case 1:\n            return 'link';\n        case 2:\n            return 'symlink';\n        case 3:\n            return 'character-device';\n        case 4:\n            return 'block-device';\n        case 5:\n            return 'directory';\n        case 6:\n            return 'fifo';\n        case 7:\n            return 'contiguous-file';\n        case 72:\n            return 'pax-header';\n        case 55:\n            return 'pax-global-header';\n        case 27:\n            return 'gnu-long-link-path';\n        case 28:\n        case 30:\n            return 'gnu-long-path';\n        default:\n            return undefined;\n    }\n};\nconst indexOf = function (block, num, offset, end) {\n    for (; offset < end; offset++) {\n        if (block.get(offset) === num)\n            return offset;\n    }\n    return end;\n};\nconst cksum = function (block) {\n    let sum = 8 * 32;\n    for (let i = 0; i < 148; i++)\n        sum += block.get(i);\n    for (let j = 156; j < 512; j++)\n        sum += block.get(j);\n    return sum;\n};\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256(buf) {\n    // first byte MUST be either 80 or FF\n    // 80 for positive, FF for 2's comp\n    let positive;\n    if (buf.get(0) === 0x80) {\n        positive = true;\n    }\n    else if (buf.get(0) === 0xFF) {\n        positive = false;\n    }\n    else {\n        return 0;\n    }\n    // build up a base-256 tuple from the least sig to the highest\n    let zero = false;\n    const tuple = [];\n    for (let i = buf.length - 1; i > 0; i--) {\n        const byte = buf.get(i);\n        if (positive)\n            tuple.push(byte);\n        else if (zero && byte === 0)\n            tuple.push(0);\n        else if (zero) {\n            zero = false;\n            tuple.push(0x100 - byte);\n        }\n        else\n            tuple.push(0xFF - byte);\n    }\n    let sum = 0;\n    const l = tuple.length;\n    for (let i = 0; i < l; i++) {\n        sum += tuple[i] * Math.pow(256, i);\n    }\n    return positive ? sum : -1 * sum;\n}\nconst decodeOct = function (val, offset, length) {\n    val = val.sublist(offset, offset + length);\n    offset = 0;\n    // If prefixed with 0x80 then parse as a base-256 integer\n    if ((val.get(offset) & 0x80) !== 0) {\n        return parse256(val);\n    }\n    else {\n        // Older versions of tar can prefix with spaces\n        while (offset < val.length && val.get(offset) === 32) {\n            offset++;\n        }\n        const end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);\n        while (offset < end && val.get(offset) === 0) {\n            offset++;\n        }\n        if (end === offset) {\n            return 0;\n        }\n        return parseInt(uint8ArrayToString(val.subarray(offset, end)), 8);\n    }\n};\nconst decodeStr = function (val, offset, length, encoding) {\n    return uint8ArrayToString(val.subarray(offset, indexOf(val, 0, offset, offset + length)), encoding);\n};\nexport function decodeLongPath(buf, encoding) {\n    const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    return decodeStr(list, 0, buf.length, encoding);\n}\nexport function decodePax(buf, encoding) {\n    let list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    const result = {};\n    while (list.length > 0) {\n        let i = 0;\n        while (i < buf.length && list.get(i) !== 32) {\n            i++;\n        }\n        const len = parseInt(uint8ArrayToString(list.subarray(0, i)), 10);\n        if (len === 0) {\n            return result;\n        }\n        const b = uint8ArrayToString(list.subarray(i + 1, len - 1), encoding);\n        const keyIndex = b.indexOf('=');\n        if (keyIndex === -1) {\n            return result;\n        }\n        result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);\n        list = list.sublist(len);\n    }\n    return result;\n}\nexport function decode(buf, filenameEncoding) {\n    const list = isUint8ArrayList(buf) ? buf : new Uint8ArrayList(buf);\n    let typeflag = list.get(156) === 0 ? 0 : list.get(156) - ZERO_OFFSET;\n    let name = decodeStr(list, 0, 100, filenameEncoding);\n    const mode = decodeOct(list, 100, 8);\n    const uid = decodeOct(list, 108, 8);\n    const gid = decodeOct(list, 116, 8);\n    const size = decodeOct(list, 124, 12);\n    const mtime = decodeOct(list, 136, 12);\n    const type = toType(typeflag);\n    const linkname = list.get(157) === 0 ? undefined : decodeStr(list, 157, 100, filenameEncoding);\n    const uname = decodeStr(list, 265, 32);\n    const gname = decodeStr(list, 297, 32);\n    const devmajor = decodeOct(list, 329, 8);\n    const devminor = decodeOct(list, 337, 8);\n    const c = cksum(list);\n    // checksum is still initial value if header was null.\n    if (c === 8 * 32) {\n        return null;\n    }\n    // valid checksum\n    if (c !== decodeOct(list, 148, 8)) {\n        throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?');\n    }\n    if (uint8ArrayCompare(USTAR_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0) {\n        // ustar (posix) format.\n        // prepend prefix, if present.\n        if (list.get(345) !== 0) {\n            name = decodeStr(list, 345, 155, filenameEncoding) + '/' + name;\n        }\n    }\n    else if (uint8ArrayCompare(GNU_MAGIC, list.subarray(MAGIC_OFFSET, MAGIC_OFFSET + 6)) === 0 &&\n        uint8ArrayCompare(GNU_VER, list.subarray(VERSION_OFFSET, VERSION_OFFSET + 2)) === 0) {\n        // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n        // multi-volume tarballs.\n    }\n    else {\n        throw new Error('Invalid tar header: unknown format.');\n    }\n    // to support old tar versions that use trailing / to indicate dirs\n    if (typeflag === 0 && name != null && name[name.length - 1] === '/') {\n        typeflag = 5;\n    }\n    return {\n        name: name,\n        mode: mode,\n        uid: uid,\n        gid: gid,\n        size: size,\n        mtime: new Date(1000 * (mtime ?? 0)),\n        type: type,\n        linkname: linkname,\n        uname: uname,\n        gname: gname,\n        devmajor: devmajor,\n        devminor: devminor\n    };\n}\n//# sourceMappingURL=extract-headers.js.map","import { Uint8ArrayList } from 'uint8arraylist';\n/**\n * Returns an `AsyncGenerator` that allows reading a set number of bytes from the passed source.\n *\n * @example\n *\n * ```javascript\n * import { reader } from 'it-reader'\n *\n * const stream = reader(source)\n *\n * // read 10 bytes from the stream\n * const { done, value } = await stream.next(10)\n *\n * if (done === true) {\n *   // stream finished\n * }\n *\n * if (value != null) {\n *   // do something with value\n * }\n * ```\n */\nexport function reader(source) {\n    const reader = (async function* () {\n        // @ts-expect-error first yield in stream is ignored\n        let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n        let bl = new Uint8ArrayList();\n        for await (const chunk of source) {\n            if (bytes == null) {\n                bl.append(chunk);\n                bytes = yield bl;\n                bl = new Uint8ArrayList();\n                continue;\n            }\n            bl.append(chunk);\n            while (bl.length >= bytes) {\n                const data = bl.sublist(0, bytes);\n                bl.consume(bytes);\n                bytes = yield data;\n                // If we no longer want a specific byte length, we yield the rest now\n                if (bytes == null) {\n                    if (bl.length > 0) {\n                        bytes = yield bl;\n                        bl = new Uint8ArrayList();\n                    }\n                    break; // bytes is null and/or no more buffer to yield\n                }\n            }\n        }\n        // Consumer wants more bytes but the source has ended and our buffer\n        // is not big enough to satisfy.\n        if (bytes != null) {\n            throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), { code: 'ERR_UNDER_READ', buffer: bl });\n        }\n    })();\n    void reader.next();\n    return reader;\n}\n//# sourceMappingURL=index.js.map","\n'use strict';\n\nmodule.exports = {\n    'RTLD_LAZY': 1,\n    'RTLD_NOW': 2,\n    'RTLD_GLOBAL': 256,\n    'RTLD_LOCAL': 0,\n    'RTLD_DEEPBIND': 8,\n    'E2BIG': 7,\n    'EACCES': 13,\n    'EADDRINUSE': 98,\n    'EADDRNOTAVAIL': 99,\n    'EAFNOSUPPORT': 97,\n    'EAGAIN': 11,\n    'EALREADY': 114,\n    'EBADF': 9,\n    'EBADMSG': 74,\n    'EBUSY': 16,\n    'ECANCELED': 125,\n    'ECHILD': 10,\n    'ECONNABORTED': 103,\n    'ECONNREFUSED': 111,\n    'ECONNRESET': 104,\n    'EDEADLK': 35,\n    'EDESTADDRREQ': 89,\n    'EDOM': 33,\n    'EDQUOT': 122,\n    'EEXIST': 17,\n    'EFAULT': 14,\n    'EFBIG': 27,\n    'EHOSTUNREACH': 113,\n    'EIDRM': 43,\n    'EILSEQ': 84,\n    'EINPROGRESS': 115,\n    'EINTR': 4,\n    'EINVAL': 22,\n    'EIO': 5,\n    'EISCONN': 106,\n    'EISDIR': 21,\n    'ELOOP': 40,\n    'EMFILE': 24,\n    'EMLINK': 31,\n    'EMSGSIZE': 90,\n    'EMULTIHOP': 72,\n    'ENAMETOOLONG': 36,\n    'ENETDOWN': 100,\n    'ENETRESET': 102,\n    'ENETUNREACH': 101,\n    'ENFILE': 23,\n    'ENOBUFS': 105,\n    'ENODATA': 61,\n    'ENODEV': 19,\n    'ENOENT': 2,\n    'ENOEXEC': 8,\n    'ENOLCK': 37,\n    'ENOLINK': 67,\n    'ENOMEM': 12,\n    'ENOMSG': 42,\n    'ENOPROTOOPT': 92,\n    'ENOSPC': 28,\n    'ENOSR': 63,\n    'ENOSTR': 60,\n    'ENOSYS': 38,\n    'ENOTCONN': 107,\n    'ENOTDIR': 20,\n    'ENOTEMPTY': 39,\n    'ENOTSOCK': 88,\n    'ENOTSUP': 95,\n    'ENOTTY': 25,\n    'ENXIO': 6,\n    'EOPNOTSUPP': 95,\n    'EOVERFLOW': 75,\n    'EPERM': 1,\n    'EPIPE': 32,\n    'EPROTO': 71,\n    'EPROTONOSUPPORT': 93,\n    'EPROTOTYPE': 91,\n    'ERANGE': 34,\n    'EROFS': 30,\n    'ESPIPE': 29,\n    'ESRCH': 3,\n    'ESTALE': 116,\n    'ETIME': 62,\n    'ETIMEDOUT': 110,\n    'ETXTBSY': 26,\n    'EWOULDBLOCK': 11,\n    'EXDEV': 18,\n    'PRIORITY_LOW': 19,\n    'PRIORITY_BELOW_NORMAL': 10,\n    'PRIORITY_NORMAL': 0,\n    'PRIORITY_ABOVE_NORMAL': -7,\n    'PRIORITY_HIGH': -14,\n    'PRIORITY_HIGHEST': -20,\n    'SIGHUP': 1,\n    'SIGINT': 2,\n    'SIGQUIT': 3,\n    'SIGILL': 4,\n    'SIGTRAP': 5,\n    'SIGABRT': 6,\n    'SIGIOT': 6,\n    'SIGBUS': 7,\n    'SIGFPE': 8,\n    'SIGKILL': 9,\n    'SIGUSR1': 10,\n    'SIGSEGV': 11,\n    'SIGUSR2': 12,\n    'SIGPIPE': 13,\n    'SIGALRM': 14,\n    'SIGTERM': 15,\n    'SIGCHLD': 17,\n    'SIGSTKFLT': 16,\n    'SIGCONT': 18,\n    'SIGSTOP': 19,\n    'SIGTSTP': 20,\n    'SIGTTIN': 21,\n    'SIGTTOU': 22,\n    'SIGURG': 23,\n    'SIGXCPU': 24,\n    'SIGXFSZ': 25,\n    'SIGVTALRM': 26,\n    'SIGPROF': 27,\n    'SIGWINCH': 28,\n    'SIGIO': 29,\n    'SIGPOLL': 29,\n    'SIGPWR': 30,\n    'SIGSYS': 31,\n    'SIGUNUSED': 31,\n    'UV_FS_SYMLINK_DIR': 1,\n    'UV_FS_SYMLINK_JUNCTION': 2,\n    'O_RDONLY': 0,\n    'O_WRONLY': 1,\n    'O_RDWR': 2,\n    'UV_DIRENT_UNKNOWN': 0,\n    'UV_DIRENT_FILE': 1,\n    'UV_DIRENT_DIR': 2,\n    'UV_DIRENT_LINK': 3,\n    'UV_DIRENT_FIFO': 4,\n    'UV_DIRENT_SOCKET': 5,\n    'UV_DIRENT_CHAR': 6,\n    'UV_DIRENT_BLOCK': 7,\n    'S_IFMT': 61440,\n    'S_IFREG': 32768,\n    'S_IFDIR': 16384,\n    'S_IFCHR': 8192,\n    'S_IFBLK': 24576,\n    'S_IFIFO': 4096,\n    'S_IFLNK': 40960,\n    'S_IFSOCK': 49152,\n    'O_CREAT': 64,\n    'O_EXCL': 128,\n    'UV_FS_O_FILEMAP': 0,\n    'O_NOCTTY': 256,\n    'O_TRUNC': 512,\n    'O_APPEND': 1024,\n    'O_DIRECTORY': 65536,\n    'O_NOATIME': 262144,\n    'O_NOFOLLOW': 131072,\n    'O_SYNC': 1052672,\n    'O_DSYNC': 4096,\n    'O_DIRECT': 16384,\n    'O_NONBLOCK': 2048,\n    'S_IRWXU': 448,\n    'S_IRUSR': 256,\n    'S_IWUSR': 128,\n    'S_IXUSR': 64,\n    'S_IRWXG': 56,\n    'S_IRGRP': 32,\n    'S_IWGRP': 16,\n    'S_IXGRP': 8,\n    'S_IRWXO': 7,\n    'S_IROTH': 4,\n    'S_IWOTH': 2,\n    'S_IXOTH': 1,\n    'F_OK': 0,\n    'R_OK': 4,\n    'W_OK': 2,\n    'X_OK': 1,\n    'UV_FS_COPYFILE_EXCL': 1,\n    'COPYFILE_EXCL': 1,\n    'UV_FS_COPYFILE_FICLONE': 2,\n    'COPYFILE_FICLONE': 2,\n    'UV_FS_COPYFILE_FICLONE_FORCE': 4,\n    'COPYFILE_FICLONE_FORCE': 4,\n    'OPENSSL_VERSION_NUMBER': 269488495,\n    'SSL_OP_ALL': 2147485780,\n    'SSL_OP_ALLOW_NO_DHE_KEX': 1024,\n    'SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION': 262144,\n    'SSL_OP_CIPHER_SERVER_PREFERENCE': 4194304,\n    'SSL_OP_CISCO_ANYCONNECT': 32768,\n    'SSL_OP_COOKIE_EXCHANGE': 8192,\n    'SSL_OP_CRYPTOPRO_TLSEXT_BUG': 2147483648,\n    'SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS': 2048,\n    'SSL_OP_EPHEMERAL_RSA': 0,\n    'SSL_OP_LEGACY_SERVER_CONNECT': 4,\n    'SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER': 0,\n    'SSL_OP_MICROSOFT_SESS_ID_BUG': 0,\n    'SSL_OP_MSIE_SSLV2_RSA_PADDING': 0,\n    'SSL_OP_NETSCAPE_CA_DN_BUG': 0,\n    'SSL_OP_NETSCAPE_CHALLENGE_BUG': 0,\n    'SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG': 0,\n    'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG': 0,\n    'SSL_OP_NO_COMPRESSION': 131072,\n    'SSL_OP_NO_ENCRYPT_THEN_MAC': 524288,\n    'SSL_OP_NO_QUERY_MTU': 4096,\n    'SSL_OP_NO_RENEGOTIATION': 1073741824,\n    'SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION': 65536,\n    'SSL_OP_NO_SSLv2': 0,\n    'SSL_OP_NO_SSLv3': 33554432,\n    'SSL_OP_NO_TICKET': 16384,\n    'SSL_OP_NO_TLSv1': 67108864,\n    'SSL_OP_NO_TLSv1_1': 268435456,\n    'SSL_OP_NO_TLSv1_2': 134217728,\n    'SSL_OP_NO_TLSv1_3': 536870912,\n    'SSL_OP_PKCS1_CHECK_1': 0,\n    'SSL_OP_PKCS1_CHECK_2': 0,\n    'SSL_OP_PRIORITIZE_CHACHA': 2097152,\n    'SSL_OP_SINGLE_DH_USE': 0,\n    'SSL_OP_SINGLE_ECDH_USE': 0,\n    'SSL_OP_SSLEAY_080_CLIENT_DH_BUG': 0,\n    'SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG': 0,\n    'SSL_OP_TLS_BLOCK_PADDING_BUG': 0,\n    'SSL_OP_TLS_D5_BUG': 0,\n    'SSL_OP_TLS_ROLLBACK_BUG': 8388608,\n    'ENGINE_METHOD_RSA': 1,\n    'ENGINE_METHOD_DSA': 2,\n    'ENGINE_METHOD_DH': 4,\n    'ENGINE_METHOD_RAND': 8,\n    'ENGINE_METHOD_EC': 2048,\n    'ENGINE_METHOD_CIPHERS': 64,\n    'ENGINE_METHOD_DIGESTS': 128,\n    'ENGINE_METHOD_PKEY_METHS': 512,\n    'ENGINE_METHOD_PKEY_ASN1_METHS': 1024,\n    'ENGINE_METHOD_ALL': 65535,\n    'ENGINE_METHOD_NONE': 0,\n    'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n    'DH_CHECK_P_NOT_PRIME': 1,\n    'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n    'DH_NOT_SUITABLE_GENERATOR': 8,\n    'ALPN_ENABLED': 1,\n    'RSA_PKCS1_PADDING': 1,\n    'RSA_SSLV23_PADDING': 2,\n    'RSA_NO_PADDING': 3,\n    'RSA_PKCS1_OAEP_PADDING': 4,\n    'RSA_X931_PADDING': 5,\n    'RSA_PKCS1_PSS_PADDING': 6,\n    'RSA_PSS_SALTLEN_DIGEST': -1,\n    'RSA_PSS_SALTLEN_MAX_SIGN': -2,\n    'RSA_PSS_SALTLEN_AUTO': -2,\n    'defaultCoreCipherList': 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',\n    'TLS1_VERSION': 769,\n    'TLS1_1_VERSION': 770,\n    'TLS1_2_VERSION': 771,\n    'TLS1_3_VERSION': 772,\n    'POINT_CONVERSION_COMPRESSED': 2,\n    'POINT_CONVERSION_UNCOMPRESSED': 4,\n    'POINT_CONVERSION_HYBRID': 6\n};\n\n","import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n */\nexport default async function toBuffer(stream) {\n    let buffer = new Uint8Array(0);\n    for await (const buf of stream) {\n        buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length);\n    }\n    return buffer;\n}\n//# sourceMappingURL=index.js.map","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst ZEROS = '0000000000000000000';\nconst SEVENS = '7777777777777777777';\nconst ZERO_OFFSET = '0'.charCodeAt(0);\nconst USTAR_MAGIC = uint8ArrayFromString('ustar\\x00', 'binary');\nconst USTAR_VER = uint8ArrayFromString('00', 'binary');\nconst MASK = parseInt('7777', 8);\nconst MAGIC_OFFSET = 257;\nconst VERSION_OFFSET = 263;\nconst toTypeflag = function (flag) {\n    switch (flag) {\n        case 'file':\n            return 0;\n        case 'link':\n            return 1;\n        case 'symlink':\n            return 2;\n        case 'character-device':\n            return 3;\n        case 'block-device':\n            return 4;\n        case 'directory':\n            return 5;\n        case 'fifo':\n            return 6;\n        case 'contiguous-file':\n            return 7;\n        case 'pax-header':\n            return 72;\n        default:\n            return 0;\n    }\n};\nconst cksum = function (block) {\n    let sum = 8 * 32;\n    for (let i = 0; i < 148; i++)\n        sum += block[i];\n    for (let j = 156; j < 512; j++)\n        sum += block[j];\n    return sum;\n};\nconst encodeOct = function (val, n) {\n    const str = val.toString(8);\n    if (str.length > n) {\n        return uint8ArrayFromString(SEVENS.slice(0, n) + ' ');\n    }\n    return uint8ArrayFromString(ZEROS.slice(0, n - str.length) + str + ' ');\n};\nconst addLength = function (str) {\n    const len = uint8ArrayFromString(str).byteLength;\n    let digits = Math.floor(Math.log(len) / Math.log(10)) + 1;\n    if (len + digits >= Math.pow(10, digits)) {\n        digits++;\n    }\n    return `${len + digits}${str}`;\n};\nexport function encodePax(opts) {\n    let result = '';\n    if (opts.name != null) {\n        result += addLength(' path=' + opts.name + '\\n');\n    }\n    if (opts.linkname != null) {\n        result += addLength(' linkpath=' + opts.linkname + '\\n');\n    }\n    const pax = opts.pax;\n    if (pax != null) {\n        for (const key in pax) {\n            if (Object.prototype.hasOwnProperty.call(pax, key)) {\n                result += addLength(' ' + key + '=' + pax[key] + '\\n');\n            }\n        }\n    }\n    return uint8ArrayFromString(result);\n}\nexport function encode(opts) {\n    const buf = new Uint8Array(512);\n    let name = opts.name;\n    let prefix = '';\n    if (opts.typeflag === 5 && name[name.length - 1] !== '/') {\n        name += '/';\n    }\n    if (uint8ArrayFromString(name).byteLength !== name.length) {\n        return null; // utf-8\n    }\n    while (uint8ArrayFromString(name).byteLength > 100) {\n        const i = name.indexOf('/');\n        if (i === -1) {\n            return null;\n        }\n        prefix += prefix !== '' ? '/' + name.slice(0, i) : name.slice(0, i);\n        name = name.slice(i + 1);\n    }\n    if (uint8ArrayFromString(name).byteLength > 100 || uint8ArrayFromString(prefix).byteLength > 155) {\n        return null;\n    }\n    if (opts.linkname != null && uint8ArrayFromString(opts.linkname).byteLength > 100) {\n        return null;\n    }\n    buf.set(uint8ArrayFromString(name), 0);\n    buf.set(encodeOct(opts.mode & MASK, 6), 100);\n    buf.set(encodeOct(opts.uid, 6), 108);\n    buf.set(encodeOct(opts.gid, 6), 116);\n    buf.set(encodeOct(opts.size, 11), 124);\n    buf.set(encodeOct((opts.mtime.getTime() / 1000) | 0, 11), 136);\n    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);\n    if (opts.linkname != null) {\n        buf.set(uint8ArrayFromString(opts.linkname), 157);\n    }\n    buf.set(USTAR_MAGIC, MAGIC_OFFSET);\n    buf.set(USTAR_VER, VERSION_OFFSET);\n    if (opts.uname != null) {\n        buf.set(uint8ArrayFromString(opts.uname), 265);\n    }\n    if (opts.gname != null) {\n        buf.set(uint8ArrayFromString(opts.gname), 297);\n    }\n    buf.set(encodeOct(opts.devmajor ?? 0, 6), 329);\n    buf.set(encodeOct(opts.devminor ?? 0, 6), 337);\n    if (prefix != null) {\n        buf.set(uint8ArrayFromString(prefix), 345);\n    }\n    buf.set(encodeOct(cksum(buf), 6), 148);\n    return buf;\n}\n//# sourceMappingURL=pack-headers.js.map","// @ts-expect-error no types\nimport isoConstants from 'iso-constants';\nimport toBuffer from 'it-to-buffer';\nimport { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist';\nimport * as Headers from './pack-headers.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nconst { S_IFMT, S_IFBLK, S_IFCHR, S_IFDIR, S_IFIFO, S_IFLNK } = isoConstants;\nconst DMODE = parseInt('755', 8);\nconst FMODE = parseInt('644', 8);\nconst END_OF_TAR = new Uint8Array(1024);\nfunction modeToType(mode = 0) {\n    switch (mode & S_IFMT) {\n        case S_IFBLK: return 'block-device';\n        case S_IFCHR: return 'character-device';\n        case S_IFDIR: return 'directory';\n        case S_IFIFO: return 'fifo';\n        case S_IFLNK: return 'symlink';\n        default: return 'file';\n    }\n}\nfunction getPadding(size) {\n    size &= 511;\n    if (size !== 0) {\n        return END_OF_TAR.subarray(0, 512 - size);\n    }\n    return new Uint8Array(0);\n}\nfunction encode(header) {\n    if (header.pax == null) {\n        const encoded = Headers.encode(header);\n        if (encoded != null) {\n            return encoded;\n        }\n    }\n    return encodePax(header);\n}\nfunction encodePax(header) {\n    const paxHeader = Headers.encodePax(header);\n    const newHeader = {\n        name: 'PaxHeader',\n        mode: header.mode,\n        uid: header.uid,\n        gid: header.gid,\n        size: paxHeader.length,\n        mtime: header.mtime,\n        type: 'pax-header',\n        linkname: header.linkname,\n        uname: header.uname,\n        gname: header.gname,\n        devmajor: header.devmajor,\n        devminor: header.devminor\n    };\n    return new Uint8ArrayList(Headers.encode(newHeader) ?? new Uint8Array(0), paxHeader, getPadding(paxHeader.length), Headers.encode({ ...newHeader, size: header.size, type: header.type }) ?? new Uint8Array(0)).subarray();\n}\nexport function pack() {\n    return async function* (source) {\n        for await (let { header: partialHeader, body } of source) {\n            const header = {\n                ...partialHeader,\n                size: partialHeader.type === 'symlink' ? 0 : partialHeader.size ?? 0,\n                type: partialHeader.type ?? modeToType(partialHeader.mode),\n                mode: partialHeader.mode ?? (partialHeader.type === 'directory' ? DMODE : FMODE),\n                uid: partialHeader.uid ?? 0,\n                gid: partialHeader.gid ?? 0,\n                mtime: partialHeader.mtime ?? new Date()\n            };\n            if (typeof body === 'string') {\n                body = uint8ArrayFromString(body);\n            }\n            if (body instanceof Uint8Array || isUint8ArrayList(body)) {\n                header.size = body.length;\n                yield encode(header);\n                yield isUint8ArrayList(body) ? body.subarray() : body;\n                yield getPadding(header.size);\n                continue;\n            }\n            if (header.type === 'symlink' && header.linkname == null) {\n                if (body == null) {\n                    throw new Error('type was symlink but no linkname or body specified');\n                }\n                header.linkname = uint8ArrayToString(await toBuffer(body));\n                yield encode(header);\n                continue;\n            }\n            yield encode(header);\n            if (header.type !== 'file' && header.type !== 'contiguous-file') {\n                continue;\n            }\n            let written = 0;\n            for await (const chunk of (body ?? [])) {\n                written += chunk.length; // eslint-disable-line @typescript-eslint/restrict-plus-operands\n                yield isUint8ArrayList(chunk) ? chunk.subarray() : chunk;\n            }\n            if (written !== header.size) { // corrupting tar\n                throw new Error(`size mismatch, wrote ${written} of ${header.size} bytes`);\n            }\n            yield getPadding(header.size);\n        }\n        yield END_OF_TAR;\n    };\n}\n//# sourceMappingURL=pack.js.map","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import { exporter, recursive } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\nimport { pack } from 'it-tar'\nimport { pipe } from 'it-pipe'\nimport Pako from 'pako'\nimport toBuffer from 'it-to-buffer'\n\n// https://www.gnu.org/software/gzip/manual/gzip.html\nconst DEFAULT_COMPRESSION_LEVEL = 6\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"get\"]}\n   */\n  async function * get (ipfsPath, options = {}) {\n    if (options.compressionLevel != null && (options.compressionLevel < -1 || options.compressionLevel > 9)) {\n      throw errCode(new Error('Compression level must be between -1 and 9'), 'ERR_INVALID_PARAMS')\n    }\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/')\n      } catch (/** @type {any} */ err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(ipfsPath) || ipfsPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file' || file.type === 'raw') {\n      const args = []\n\n      if (!options.compress || options.archive === true) {\n        args.push([{\n          header: {\n            name: file.path,\n            mode: file.type === 'file' && file.unixfs.mode,\n            mtime: file.type === 'file' && file.unixfs.mtime ? new Date(file.unixfs.mtime.secs * 1000) : undefined,\n            size: file.size,\n            type: 'file'\n          },\n          body: file.content()\n        }],\n        pack()\n        )\n      } else {\n        args.push(\n          file.content\n        )\n      }\n\n      if (options.compress) {\n        args.push(\n          /**\n           * @param {AsyncIterable<Uint8Array>} source\n           */\n          async function * (source) {\n            const buf = await toBuffer(source)\n\n            yield Pako.gzip(buf, {\n              level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n            })\n          }\n        )\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    if (file.type === 'directory') {\n      /** @type {any[]} */\n      const args = [\n        recursive(ipfsPathOrCid, repo.blocks, options),\n        /**\n         * @param {AsyncIterable<import('ipfs-unixfs-exporter').UnixFSEntry>} source\n         */\n        async function * (source) {\n          for await (const entry of source) {\n            /** @type {import('it-tar').TarImportCandidate} */\n            const output = {\n              header: {\n                name: entry.path,\n                size: entry.size\n              }\n            }\n\n            if (entry.type === 'file') {\n              output.header.type = 'file'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n              output.body = entry.content()\n            } else if (entry.type === 'raw') {\n              output.header.type = 'file'\n              output.body = entry.content()\n            } else if (entry.type === 'directory') {\n              output.header.type = 'directory'\n              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined\n              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined\n            } else {\n              throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n            }\n\n            yield output\n          }\n        },\n        pack()\n      ]\n\n      if (options.compress) {\n        if (!options.archive) {\n          throw errCode(new Error('file is not regular'), 'ERR_INVALID_PATH')\n        }\n\n        if (options.compress) {\n          args.push(\n            /**\n             * @param {AsyncIterable<Uint8Array>} source\n             */\n            async function * (source) {\n              const buf = await toBuffer(source)\n\n              yield Pako.gzip(buf, {\n                level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL\n              })\n            }\n          )\n        }\n      }\n\n      // @ts-expect-error cannot derive type\n      yield * pipe(...args)\n\n      return\n    }\n\n    throw errCode(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS')\n  }\n\n  return withTimeoutOption(get)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n","import { createAdd } from './add.js'\nimport { createAddAll } from './add-all/index.js'\nimport { createCat } from './cat.js'\nimport { createGet } from './get.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context\n * @typedef {import('./add-all').Context} AddAllContext\n * @typedef {import('./cat').Context} CatContext\n * @typedef {import('./get').Context} GetContext\n * @typedef {import('./ls').Context} ListContext\n */\nexport class RootAPI {\n  /**\n   * @param {Context} context\n   */\n  constructor ({ preload, repo, hashers, options }) {\n    const addAll = createAddAll({\n      preload,\n      repo,\n      options,\n      hashers\n    })\n\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    this.cat = createCat({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.ls = createLs({ repo, preload })\n  }\n}\n","\nexport const ipfsCore = '0.18.1'\nexport const commit = ''\nexport const interfaceIpfsCore = '^0.158.1'\n","import { ipfsCore, interfaceIpfsCore, commit } from '../version.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"version\"]}\n   */\n  async function version (_options = {}) {\n    const repoVersion = await repo.version.get()\n\n    return {\n      version: ipfsCore,\n      commit,\n      repo: `${repoVersion}`,\n      'ipfs-core': ipfsCore,\n      'interface-ipfs-core': interfaceIpfsCore\n    }\n  }\n\n  return withTimeoutOption(version)\n}\n","import { ipfsCore as pkgversion } from '../version.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NotStartedError } from '../errors.js'\nimport errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:components:id')\n\n/**\n * @typedef {import('libp2p').Libp2p} Libp2p\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\nexport function createId ({ peerId, network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"id\"]}\n   */\n  async function id (options = {}) { // eslint-disable-line require-await\n    const net = network.try()\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError()\n      }\n\n      if (peerId.publicKey == null) {\n        throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n      }\n\n      return {\n        id: peerId,\n        publicKey: uint8ArrayToString(peerId.publicKey, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      }\n    }\n\n    const { libp2p } = net\n    const peerIdToId = options.peerId ? options.peerId : peerId\n    const peer = await findPeer(peerIdToId, libp2p, options)\n    const agentVersion = uint8ArrayToString(peer.metadata.get('AgentVersion') || new Uint8Array())\n    const protocolVersion = uint8ArrayToString(peer.metadata.get('ProtocolVersion') || new Uint8Array())\n    const idStr = peer.id.toString()\n    const publicKeyStr = peer.publicKey ? uint8ArrayToString(peer.publicKey, 'base64pad') : ''\n\n    return {\n      id: peerIdToId,\n      publicKey: publicKeyStr,\n      addresses: (peer.addresses || [])\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${idStr}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${idStr}`\n        })\n        .sort()\n        .map(ma => multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (peer.protocols || []).sort()\n    }\n  }\n\n  return withTimeoutOption(id)\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeer (peerId, libp2p, options) {\n  let peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    peer = await findPeerOnDht(peerId, libp2p, options)\n  }\n\n  let publicKey = peerId.publicKey ? peerId.publicKey : await libp2p.peerStore.keyBook.get(peerId)\n\n  if (publicKey == null) {\n    try {\n      publicKey = await libp2p.getPublicKey(peerId, options)\n    } catch (err) {\n      log.error('Could not load public key for', peerId.toString(), err)\n    }\n  }\n\n  return {\n    ...peer,\n    publicKey,\n    metadata: peer.metadata || new Map(),\n    addresses: peer.addresses.map(addr => addr.multiaddr)\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {Libp2p} libp2p\n * @param {AbortOptions} options\n */\nasync function findPeerOnDht (peerId, libp2p, options) {\n  if (libp2p.dht == null) {\n    throw errCode(new Error('dht not configured'), 'ERR_DHT_NOT_CONFIGURED')\n  }\n\n  for await (const event of libp2p.dht.findPeer(peerId, options)) {\n    if (event.name === 'FINAL_PEER') {\n      break\n    }\n  }\n\n  const peer = await libp2p.peerStore.get(peerId)\n\n  if (!peer) {\n    throw errCode(new Error('Could not find peer'), 'ERR_NOT_FOUND')\n  }\n\n  return peer\n}\n","var objectSafeSet = set;\n\n/*\n  var obj1 = {};\n  set(obj1, 'a.aa.aaa', 4); // true\n  obj1; // {a: {aa: {aaa: 4}}}\n\n  var obj2 = {};\n  set(obj2, ['a', 'aa', 'aaa'], 4); // true\n  obj2; // {a: {aa: {aaa: 4}}}\n\n  var obj3 = {a: {aa: {aaa: 2}}};\n  set(obj3, 'a.aa.aaa', 3); // true\n  obj3; // {a: {aa: {aaa: 3}}}\n\n  const obj5 = {a: {}};\n  const sym = Symbol();\n  set(obj5.a, sym, 7); // true\n  obj5; // {a: {Symbol(): 7}}\n*/\n\nfunction set(obj, propsArg, value) {\n  var props, lastProp;\n  if (Array.isArray(propsArg)) {\n    props = propsArg.slice(0);\n  }\n  if (typeof propsArg == 'string') {\n    props = propsArg.split('.');\n  }\n  if (typeof propsArg == 'symbol') {\n    props = [propsArg];\n  }\n  if (!Array.isArray(props)) {\n    throw new Error('props arg must be an array, a string or a symbol');\n  }\n  lastProp = props.pop();\n  if (!lastProp) {\n    return false;\n  }\n  prototypeCheck(lastProp);\n  var thisProp;\n  while ((thisProp = props.shift())) {\n    prototypeCheck(thisProp);\n    if (typeof obj[thisProp] == 'undefined') {\n      obj[thisProp] = {};\n    }\n    obj = obj[thisProp];\n    if (!obj || typeof obj != 'object') {\n      return false;\n    }\n  }\n  obj[lastProp] = value;\n  return true;\n}\n\nfunction prototypeCheck(prop) {\n  // coercion is intentional to catch prop values like `['__proto__']`\n  if (prop == '__proto__' || prop == 'constructor' || prop == 'prototype') {\n    throw new Error('setting of prototype values not supported');\n  }\n}\n\nexport {objectSafeSet as default};\n","import set from 'just-safe-set'\nimport getDefaultConfig from 'ipfs-core-config/config'\n\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @type {Record<string, Transformer>}\n */\nexport const profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      config.Swarm = {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      }\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', true)\n      set(config, 'Discovery.webRTCStar.Enabled', true)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [])\n      set(config, 'Addresses.Delegates', [])\n      set(config, 'Bootstrap', [])\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      })\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API)\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway)\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm)\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates)\n      set(config, 'Bootstrap', defaultConfig.Bootstrap)\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled)\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      const Swarm = config.Swarm || {}\n      const ConnMgr = Swarm.ConnMgr || {}\n      ConnMgr.LowWater = 20\n      ConnMgr.HighWater = 40\n\n      Swarm.ConnMgr = ConnMgr\n      config.Swarm = Swarm\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n","import { bytes as binary, CID } from './index.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\nfunction readonly ({ enumerable = true, configurable = false } = {}) {\n  return { enumerable, configurable, writable: false }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<[string, CID]>}\n */\nfunction * linksWithin (path, value) {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index]\n        const cid = CID.asCID(element)\n        if (cid) {\n          yield [elementPath.join('/'), cid]\n        } else if (typeof element === 'object') {\n          yield * links(element, elementPath)\n        }\n      }\n    } else {\n      const cid = CID.asCID(value)\n      if (cid) {\n        yield [path.join('/'), cid]\n      } else {\n        yield * links(value, path)\n      }\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nfunction * links (source, base) {\n  if (source == null || source instanceof Uint8Array) {\n    return\n  }\n  const cid = CID.asCID(source)\n  if (cid) {\n    yield [base.join('/'), cid]\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield * linksWithin(path, value)\n  }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<string>}\n */\nfunction * treeWithin (path, value) {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index]\n      yield elementPath.join('/')\n      if (typeof element === 'object' && !CID.asCID(element)) {\n        yield * tree(element, elementPath)\n      }\n    }\n  } else {\n    yield * tree(value, path)\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<string>}\n */\nfunction * tree (source, base) {\n  if (source == null || typeof source !== 'object') {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield path.join('/')\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      yield * treeWithin(path, value)\n    }\n  }\n}\n\n/**\n *\n * @template T\n * @param {T} source\n * @param {string[]} path\n * @returns {API.BlockCursorView<unknown>}\n */\nfunction get (source, path) {\n  let node = /** @type {Record<string, any>} */(source)\n  for (const [index, key] of path.entries()) {\n    node = node[key]\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`)\n    }\n    const cid = CID.asCID(node)\n    if (cid) {\n      return { value: cid, remaining: path.slice(index + 1).join('/') }\n    }\n  }\n  return { value: node }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} C - multicodec code corresponding to codec used to encode the block\n * @template {number} A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @implements {API.BlockView<T, C, A, V>}\n */\nclass Block {\n  /**\n   * @param {object} options\n   * @param {CID<T, C, A, V>} options.cid\n   * @param {API.ByteView<T>} options.bytes\n   * @param {T} options.value\n   */\n  constructor ({ cid, bytes, value }) {\n    if (!cid || !bytes || typeof value === 'undefined') { throw new Error('Missing required argument') }\n\n    this.cid = cid\n    this.bytes = bytes\n    this.value = value\n    this.asBlock = this\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    })\n  }\n\n  links () {\n    return links(this.value, [])\n  }\n\n  tree () {\n    return tree(this.value, [])\n  }\n\n  /**\n   *\n   * @param {string} [path]\n   * @returns {API.BlockCursorView<unknown>}\n   */\n  get (path = '/') {\n    return get(this.value, path.split('/').filter(Boolean))\n  }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {T} options.value\n * @param {API.BlockEncoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function encode ({ value, codec, hasher }) {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const bytes = codec.encode(value)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(\n    1,\n    codec.code,\n    hash\n  )\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function decode ({ bytes, codec, hasher }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash)\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @typedef {object} RequiredCreateOptions\n * @property {CID} options.cid\n */\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {{ cid: API.Link<T, Code, Alg, V>, value:T, codec?: API.BlockDecoder<Code, T>, bytes: API.ByteView<T> }|{cid:API.Link<T, Code, Alg, V>, bytes:API.ByteView<T>, value?:void, codec:API.BlockDecoder<Code, T>}} options\n * @returns {API.BlockView<T, Code, Alg, V>}\n */\nfunction createUnsafe ({ bytes, cid, value: maybeValue, codec }) {\n  const value = maybeValue !== undefined\n    ? maybeValue\n    : (codec && codec.decode(bytes))\n\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"')\n\n  return new Block({\n    // eslint-disable-next-line object-shorthand\n    cid: /** @type {CID<T, Code, Alg, V>} */ (cid),\n    bytes,\n    value\n  })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {object} options\n * @param {API.Link<T, Code, Alg, V>} options.cid\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg, V>>}\n */\nasync function create ({ bytes, cid, hasher, codec }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!hasher) throw new Error('Missing required argument \"hasher\"')\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes')\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  })\n}\n\nexport { encode, decode, create, createUnsafe, Block }\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","import varint from 'varint'\n\nexport const CIDV0_BYTES = {\n  SHA2_256: 0x12,\n  LENGTH: 0x20,\n  DAG_PB: 0x70\n}\n\nexport const V2_HEADER_LENGTH = /* characteristics */ 16 /* v1 offset */ + 8 /* v1 size */ + 8 /* index offset */ + 8\n\n/**\n * Decodes varint and seeks the buffer\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @param {import('./coding').Seekable} seeker\n * @returns {number}\n */\nexport function decodeVarint (bytes, seeker) {\n  if (!bytes.length) {\n    throw new Error('Unexpected end of data')\n  }\n  const i = varint.decode(bytes)\n  seeker.seek(/** @type {number} */(varint.decode.bytes))\n  return i\n}\n\n/**\n * Decode v2 header\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.exactly(V2_HEADER_LENGTH, true) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @returns {import('./coding').CarV2FixedHeader}\n */\nexport function decodeV2Header (bytes) {\n  const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n  let offset = 0\n  const header = {\n    version: 2,\n    /** @type {[bigint, bigint]} */\n    characteristics: [\n      dv.getBigUint64(offset, true),\n      dv.getBigUint64(offset += 8, true)\n    ],\n    dataOffset: Number(dv.getBigUint64(offset += 8, true)),\n    dataSize: Number(dv.getBigUint64(offset += 8, true)),\n    indexOffset: Number(dv.getBigUint64(offset += 8, true))\n  }\n  return header\n}\n\n/**\n * Checks the length of the multihash to be read afterwards\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n */\nexport function getMultihashLength (bytes) {\n  // | code | length | .... |\n  // where both code and length are varints, so we have to decode\n  // them first before we can know total length\n\n  varint.decode(bytes) // code\n  const codeLength = /** @type {number} */(varint.decode.bytes)\n  const length = varint.decode(bytes.subarray(varint.decode.bytes))\n  const lengthLength = /** @type {number} */(varint.decode.bytes)\n  const mhLength = codeLength + lengthLength + length\n\n  return mhLength\n}\n","/** Auto-generated with @ipld/schema@v4.2.0 at Thu Sep 14 2023 from IPLD Schema:\n *\n * # CarV1HeaderOrV2Pragma is a more relaxed form, and can parse {version:x} where\n * # roots are optional. This is typically useful for the {verison:2} CARv2\n * # pragma.\n *\n * type CarV1HeaderOrV2Pragma struct {\n * \troots optional [&Any]\n * \t# roots is _not_ optional for CarV1 but we defer that check within code to\n * \t# gracefully handle the V2 case where it's just {version:X}\n * \tversion Int\n * }\n *\n * # CarV1Header is the strict form of the header, and requires roots to be\n * # present. This is compatible with the CARv1 specification.\n *\n * # type CarV1Header struct {\n * # \troots [&Any]\n * # \tversion Int\n * # }\n *\n */\n\nconst Kinds = {\n  Null: /** @returns {undefined|null} */ (/** @type {any} */ obj) => obj === null ? obj : undefined,\n  Int: /** @returns {undefined|number} */ (/** @type {any} */ obj) => Number.isInteger(obj) ? obj : undefined,\n  Float: /** @returns {undefined|number} */ (/** @type {any} */ obj) => typeof obj === 'number' && Number.isFinite(obj) ? obj : undefined,\n  String: /** @returns {undefined|string} */ (/** @type {any} */ obj) => typeof obj === 'string' ? obj : undefined,\n  Bool: /** @returns {undefined|boolean} */ (/** @type {any} */ obj) => typeof obj === 'boolean' ? obj : undefined,\n  Bytes: /** @returns {undefined|Uint8Array} */ (/** @type {any} */ obj) => obj instanceof Uint8Array ? obj : undefined,\n  Link: /** @returns {undefined|object} */ (/** @type {any} */ obj) => obj !== null && typeof obj === 'object' && obj.asCID === obj ? obj : undefined,\n  List: /** @returns {undefined|Array<any>} */ (/** @type {any} */ obj) => Array.isArray(obj) ? obj : undefined,\n  Map: /** @returns {undefined|object} */ (/** @type {any} */ obj) => obj !== null && typeof obj === 'object' && obj.asCID !== obj && !Array.isArray(obj) && !(obj instanceof Uint8Array) ? obj : undefined\n}\n/** @type {{ [k in string]: (obj:any)=>undefined|any}} */\nconst Types = {\n  'CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarV1HeaderOrV2Pragma > roots (anon)': /** @returns {undefined|any} */ (/** @type {any} */ obj) => {\n    if (Kinds.List(obj) === undefined) {\n      return undefined\n    }\n    for (let i = 0; i < obj.length; i++) {\n      let v = obj[i]\n      v = Types['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v)\n      if (v === undefined) {\n        return undefined\n      }\n      if (v !== obj[i]) {\n        const ret = obj.slice(0, i)\n        for (let j = i; j < obj.length; j++) {\n          let v = obj[j]\n          v = Types['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v)\n          if (v === undefined) {\n            return undefined\n          }\n          ret.push(v)\n        }\n        return ret\n      }\n    }\n    return obj\n  },\n  Int: Kinds.Int,\n  CarV1HeaderOrV2Pragma: /** @returns {undefined|any} */ (/** @type {any} */ obj) => {\n    if (Kinds.Map(obj) === undefined) {\n      return undefined\n    }\n    const entries = Object.entries(obj)\n    /** @type {{[k in string]: any}} */\n    let ret = obj\n    let requiredCount = 1\n    for (let i = 0; i < entries.length; i++) {\n      const [key, value] = entries[i]\n      switch (key) {\n        case 'roots':\n          {\n            const v = Types['CarV1HeaderOrV2Pragma > roots (anon)'](obj[key])\n            if (v === undefined) {\n              return undefined\n            }\n            if (v !== value || ret !== obj) {\n              if (ret === obj) {\n                /** @type {{[k in string]: any}} */\n                ret = {}\n                for (let j = 0; j < i; j++) {\n                  ret[entries[j][0]] = entries[j][1]\n                }\n              }\n              ret.roots = v\n            }\n          }\n          break\n        case 'version':\n          {\n            requiredCount--\n            const v = Types.Int(obj[key])\n            if (v === undefined) {\n              return undefined\n            }\n            if (v !== value || ret !== obj) {\n              if (ret === obj) {\n                /** @type {{[k in string]: any}} */\n                ret = {}\n                for (let j = 0; j < i; j++) {\n                  ret[entries[j][0]] = entries[j][1]\n                }\n              }\n              ret.version = v\n            }\n          }\n          break\n        default:\n          return undefined\n      }\n    }\n\n    if (requiredCount > 0) {\n      return undefined\n    }\n    return ret\n  }\n}\n/** @type {{ [k in string]: (obj:any)=>undefined|any}} */\nconst Reprs = {\n  'CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarV1HeaderOrV2Pragma > roots (anon)': /** @returns {undefined|any} */ (/** @type {any} */ obj) => {\n    if (Kinds.List(obj) === undefined) {\n      return undefined\n    }\n    for (let i = 0; i < obj.length; i++) {\n      let v = obj[i]\n      v = Reprs['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v)\n      if (v === undefined) {\n        return undefined\n      }\n      if (v !== obj[i]) {\n        const ret = obj.slice(0, i)\n        for (let j = i; j < obj.length; j++) {\n          let v = obj[j]\n          v = Reprs['CarV1HeaderOrV2Pragma > roots (anon) > valueType (anon)'](v)\n          if (v === undefined) {\n            return undefined\n          }\n          ret.push(v)\n        }\n        return ret\n      }\n    }\n    return obj\n  },\n  Int: Kinds.Int,\n  CarV1HeaderOrV2Pragma: /** @returns {undefined|any} */ (/** @type {any} */ obj) => {\n    if (Kinds.Map(obj) === undefined) {\n      return undefined\n    }\n    const entries = Object.entries(obj)\n    /** @type {{[k in string]: any}} */\n    let ret = obj\n    let requiredCount = 1\n    for (let i = 0; i < entries.length; i++) {\n      const [key, value] = entries[i]\n      switch (key) {\n        case 'roots':\n          {\n            const v = Reprs['CarV1HeaderOrV2Pragma > roots (anon)'](value)\n            if (v === undefined) {\n              return undefined\n            }\n            if (v !== value || ret !== obj) {\n              if (ret === obj) {\n                /** @type {{[k in string]: any}} */\n                ret = {}\n                for (let j = 0; j < i; j++) {\n                  ret[entries[j][0]] = entries[j][1]\n                }\n              }\n              ret.roots = v\n            }\n          }\n          break\n        case 'version':\n          {\n            requiredCount--\n            const v = Reprs.Int(value)\n            if (v === undefined) {\n              return undefined\n            }\n            if (v !== value || ret !== obj) {\n              if (ret === obj) {\n                /** @type {{[k in string]: any}} */\n                ret = {}\n                for (let j = 0; j < i; j++) {\n                  ret[entries[j][0]] = entries[j][1]\n                }\n              }\n              ret.version = v\n            }\n          }\n          break\n        default:\n          return undefined\n      }\n    }\n    if (requiredCount > 0) {\n      return undefined\n    }\n    return ret\n  }\n}\n\nexport const CarV1HeaderOrV2Pragma = {\n  toTyped: Types.CarV1HeaderOrV2Pragma,\n  toRepresentation: Reprs.CarV1HeaderOrV2Pragma\n}\n","import { decode as decodeDagCbor } from '@ipld/dag-cbor'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { CIDV0_BYTES, decodeV2Header, decodeVarint, getMultihashLength, V2_HEADER_LENGTH } from './decoder-common.js'\nimport { CarV1HeaderOrV2Pragma } from './header-validator.js'\n\n/**\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').BlockHeader} BlockHeader\n * @typedef {import('./api').BlockIndex} BlockIndex\n * @typedef {import('./coding').BytesReader} BytesReader\n * @typedef {import('./coding').CarHeader} CarHeader\n * @typedef {import('./coding').CarV2Header} CarV2Header\n * @typedef {import('./coding').CarV2FixedHeader} CarV2FixedHeader\n * @typedef {import('./coding').CarDecoder} CarDecoder\n */\n\n/**\n * Reads header data from a `BytesReader`. The header may either be in the form\n * of a `CarHeader` or `CarV2Header` depending on the CAR being read.\n *\n * @name async decoder.readHeader(reader)\n * @param {BytesReader} reader\n * @param {number} [strictVersion]\n * @returns {Promise<CarHeader|CarV2Header>}\n */\nexport async function readHeader (reader, strictVersion) {\n  const length = decodeVarint(await reader.upTo(8), reader)\n  if (length === 0) {\n    throw new Error('Invalid CAR header (zero length)')\n  }\n  const header = await reader.exactly(length, true)\n  const block = decodeDagCbor(header)\n  if (CarV1HeaderOrV2Pragma.toTyped(block) === undefined) {\n    throw new Error('Invalid CAR header format')\n  }\n  if ((block.version !== 1 && block.version !== 2) || (strictVersion !== undefined && block.version !== strictVersion)) {\n    throw new Error(`Invalid CAR version: ${block.version}${strictVersion !== undefined ? ` (expected ${strictVersion})` : ''}`)\n  }\n  if (block.version === 1) {\n    // CarV1HeaderOrV2Pragma makes roots optional, let's make it mandatory\n    if (!Array.isArray(block.roots)) {\n      throw new Error('Invalid CAR header format')\n    }\n    return block\n  }\n  // version 2\n  if (block.roots !== undefined) {\n    throw new Error('Invalid CAR header format')\n  }\n  const v2Header = decodeV2Header(await reader.exactly(V2_HEADER_LENGTH, true))\n  reader.seek(v2Header.dataOffset - reader.pos)\n  const v1Header = await readHeader(reader, 1)\n  return Object.assign(v1Header, v2Header)\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<CID>}\n */\nasync function readCid (reader) {\n  const first = await reader.exactly(2, false)\n  if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {\n    // cidv0 32-byte sha2-256\n    const bytes = await reader.exactly(34, true)\n    const multihash = Digest.decode(bytes)\n    return CID.create(0, CIDV0_BYTES.DAG_PB, multihash)\n  }\n\n  const version = decodeVarint(await reader.upTo(8), reader)\n  if (version !== 1) {\n    throw new Error(`Unexpected CID version (${version})`)\n  }\n  const codec = decodeVarint(await reader.upTo(8), reader)\n  const bytes = await reader.exactly(getMultihashLength(await reader.upTo(8)), true)\n  const multihash = Digest.decode(bytes)\n  return CID.create(version, codec, multihash)\n}\n\n/**\n * Reads the leading data of an individual block from CAR data from a\n * `BytesReader`. Returns a `BlockHeader` object which contains\n * `{ cid, length, blockLength }` which can be used to either index the block\n * or read the block binary data.\n *\n * @name async decoder.readBlockHead(reader)\n * @param {BytesReader} reader\n * @returns {Promise<BlockHeader>}\n */\nexport async function readBlockHead (reader) {\n  // length includes a CID + Binary, where CID has a variable length\n  // we have to deal with\n  const start = reader.pos\n  let length = decodeVarint(await reader.upTo(8), reader)\n  if (length === 0) {\n    throw new Error('Invalid CAR section (zero length)')\n  }\n  length += (reader.pos - start)\n  const cid = await readCid(reader)\n  const blockLength = length - Number(reader.pos - start) // subtract CID length\n\n  return { cid, length, blockLength }\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<Block>}\n */\nasync function readBlock (reader) {\n  const { cid, blockLength } = await readBlockHead(reader)\n  const bytes = await reader.exactly(blockLength, true)\n  return { bytes, cid }\n}\n\n/**\n * @param {BytesReader} reader\n * @returns {Promise<BlockIndex>}\n */\nasync function readBlockIndex (reader) {\n  const offset = reader.pos\n  const { cid, length, blockLength } = await readBlockHead(reader)\n  const index = { cid, length, blockLength, offset, blockOffset: reader.pos }\n  reader.seek(index.blockLength)\n  return index\n}\n\n/**\n * Creates a `CarDecoder` from a `BytesReader`. The `CarDecoder` is as async\n * interface that will consume the bytes from the `BytesReader` to yield a\n * `header()` and either `blocks()` or `blocksIndex()` data.\n *\n * @name decoder.createDecoder(reader)\n * @param {BytesReader} reader\n * @returns {CarDecoder}\n */\nexport function createDecoder (reader) {\n  const headerPromise = (async () => {\n    const header = await readHeader(reader)\n    if (header.version === 2) {\n      const v1length = reader.pos - header.dataOffset\n      reader = limitReader(reader, header.dataSize - v1length)\n    }\n    return header\n  })()\n\n  return {\n    header: () => headerPromise,\n\n    async * blocks () {\n      await headerPromise\n      while ((await reader.upTo(8)).length > 0) {\n        yield await readBlock(reader)\n      }\n    },\n\n    async * blocksIndex () {\n      await headerPromise\n      while ((await reader.upTo(8)).length > 0) {\n        yield await readBlockIndex(reader)\n      }\n    }\n  }\n}\n\n/**\n * Creates a `BytesReader` from a `Uint8Array`.\n *\n * @name decoder.bytesReader(bytes)\n * @param {Uint8Array} bytes\n * @returns {BytesReader}\n */\nexport function bytesReader (bytes) {\n  let pos = 0\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      const out = bytes.subarray(pos, pos + Math.min(length, bytes.length - pos))\n      return out\n    },\n\n    async exactly (length, seek = false) {\n      if (length > bytes.length - pos) {\n        throw new Error('Unexpected end of data')\n      }\n      const out = bytes.subarray(pos, pos + length)\n      if (seek) {\n        pos += length\n      }\n      return out\n    },\n\n    seek (length) {\n      pos += length\n    },\n\n    get pos () {\n      return pos\n    }\n  }\n}\n\n/**\n * @ignore\n * reusable reader for streams and files, we just need a way to read an\n * additional chunk (of some undetermined size) and a way to close the\n * reader when finished\n * @param {() => Promise<Uint8Array|null>} readChunk\n * @returns {BytesReader}\n */\nexport function chunkReader (readChunk /*, closer */) {\n  let pos = 0\n  let have = 0\n  let offset = 0\n  let currentChunk = new Uint8Array(0)\n\n  const read = async (/** @type {number} */ length) => {\n    have = currentChunk.length - offset\n    const bufa = [currentChunk.subarray(offset)]\n    while (have < length) {\n      const chunk = await readChunk()\n      if (chunk == null) {\n        break\n      }\n      /* c8 ignore next 8 */\n      // undo this ignore ^ when we have a fd implementation that can seek()\n      if (have < 0) { // because of a seek()\n        /* c8 ignore next 4 */\n        // toohard to test the else\n        if (chunk.length > have) {\n          bufa.push(chunk.subarray(-have))\n        } // else discard\n      } else {\n        bufa.push(chunk)\n      }\n      have += chunk.length\n    }\n    currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0))\n    let off = 0\n    for (const b of bufa) {\n      currentChunk.set(b, off)\n      off += b.length\n    }\n    offset = 0\n  }\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      if (currentChunk.length - offset < length) {\n        await read(length)\n      }\n      return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length))\n    },\n\n    async exactly (length, seek = false) {\n      if (currentChunk.length - offset < length) {\n        await read(length)\n      }\n      if (currentChunk.length - offset < length) {\n        throw new Error('Unexpected end of data')\n      }\n      const out = currentChunk.subarray(offset, offset + length)\n      if (seek) {\n        pos += length\n        offset += length\n      }\n      return out\n    },\n\n    seek (length) {\n      pos += length\n      offset += length\n    },\n\n    get pos () {\n      return pos\n    }\n  }\n}\n\n/**\n * Creates a `BytesReader` from an `AsyncIterable<Uint8Array>`, which allows for\n * consumption of CAR data from a streaming source.\n *\n * @name decoder.asyncIterableReader(asyncIterable)\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {BytesReader}\n */\nexport function asyncIterableReader (asyncIterable) {\n  const iterator = asyncIterable[Symbol.asyncIterator]()\n\n  async function readChunk () {\n    const next = await iterator.next()\n    if (next.done) {\n      return null\n    }\n    return next.value\n  }\n\n  return chunkReader(readChunk)\n}\n\n/**\n * Wraps a `BytesReader` in a limiting `BytesReader` which limits maximum read\n * to `byteLimit` bytes. It _does not_ update `pos` of the original\n * `BytesReader`.\n *\n * @name decoder.limitReader(reader, byteLimit)\n * @param {BytesReader} reader\n * @param {number} byteLimit\n * @returns {BytesReader}\n */\nexport function limitReader (reader, byteLimit) {\n  let bytesRead = 0\n\n  /** @type {BytesReader} */\n  return {\n    async upTo (length) {\n      let bytes = await reader.upTo(length)\n      if (bytes.length + bytesRead > byteLimit) {\n        bytes = bytes.subarray(0, byteLimit - bytesRead)\n      }\n      return bytes\n    },\n\n    async exactly (length, seek = false) {\n      const bytes = await reader.exactly(length, seek)\n      if (bytes.length + bytesRead > byteLimit) {\n        throw new Error('Unexpected end of data')\n      }\n      if (seek) {\n        bytesRead += length\n      }\n      return bytes\n    },\n\n    seek (length) {\n      bytesRead += length\n      reader.seek(length)\n    },\n\n    get pos () {\n      return reader.pos\n    }\n  }\n}\n","import { encode as dagCborEncode } from '@ipld/dag-cbor'\nimport varint from 'varint'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./coding').CarEncoder} CarEncoder\n * @typedef {import('./coding').IteratorChannel_Writer<Uint8Array>} IteratorChannel_Writer\n */\n\n/**\n * Create a header from an array of roots.\n *\n * @param {CID[]} roots\n * @returns {Uint8Array}\n */\nexport function createHeader (roots) {\n  const headerBytes = dagCborEncode({ version: 1, roots })\n  const varintBytes = varint.encode(headerBytes.length)\n  const header = new Uint8Array(varintBytes.length + headerBytes.length)\n  header.set(varintBytes, 0)\n  header.set(headerBytes, varintBytes.length)\n  return header\n}\n\n/**\n * @param {IteratorChannel_Writer} writer\n * @returns {CarEncoder}\n */\nfunction createEncoder (writer) {\n  // none of this is wrapped in a mutex, that needs to happen above this to\n  // avoid overwrites\n\n  return {\n    /**\n     * @param {CID[]} roots\n     * @returns {Promise<void>}\n     */\n    async setRoots (roots) {\n      const bytes = createHeader(roots)\n      await writer.write(bytes)\n    },\n\n    /**\n     * @param {Block} block\n     * @returns {Promise<void>}\n     */\n    async writeBlock (block) {\n      const { cid, bytes } = block\n      await writer.write(new Uint8Array(varint.encode(cid.bytes.length + bytes.length)))\n      await writer.write(cid.bytes)\n      if (bytes.length) {\n        // zero-length blocks are valid, but it'd be safer if we didn't write them\n        await writer.write(bytes)\n      }\n    },\n\n    /**\n     * @returns {Promise<void>}\n     */\n    async close () {\n      await writer.end()\n    }\n  }\n}\n\nexport { createEncoder }\n","/**\n * @template {any} T\n * @typedef {import('./coding').IteratorChannel<T>} IteratorChannel\n */\n\nfunction noop () {}\n\n/**\n * @template {any} T\n * @returns {IteratorChannel<T>}\n */\nexport function create () {\n  /** @type {T[]} */\n  const chunkQueue = []\n  /** @type {Promise<void> | null} */\n  let drainer = null\n  let drainerResolver = noop\n  let ended = false\n  /** @type {Promise<IteratorResult<T>> | null} */\n  let outWait = null\n  let outWaitResolver = noop\n\n  const makeDrainer = () => {\n    if (!drainer) {\n      drainer = new Promise((resolve) => {\n        drainerResolver = () => {\n          drainer = null\n          drainerResolver = noop\n          resolve()\n        }\n      })\n    }\n    return drainer\n  }\n\n  /**\n   * @returns {IteratorChannel<T>}\n   */\n  const writer = {\n    /**\n     * @param {T} chunk\n     * @returns {Promise<void>}\n     */\n    write (chunk) {\n      chunkQueue.push(chunk)\n      const drainer = makeDrainer()\n      outWaitResolver()\n      return drainer\n    },\n\n    async end () {\n      ended = true\n      const drainer = makeDrainer()\n      outWaitResolver()\n      await drainer\n    }\n  }\n\n  /** @type {AsyncIterator<T>} */\n  const iterator = {\n    /** @returns {Promise<IteratorResult<T>>} */\n    async next () {\n      const chunk = chunkQueue.shift()\n      if (chunk) {\n        if (chunkQueue.length === 0) {\n          drainerResolver()\n        }\n        return { done: false, value: chunk }\n      }\n\n      if (ended) {\n        drainerResolver()\n        return { done: true, value: undefined }\n      }\n\n      if (!outWait) {\n        outWait = new Promise((resolve) => {\n          outWaitResolver = () => {\n            outWait = null\n            outWaitResolver = noop\n            return resolve(iterator.next())\n          }\n        })\n      }\n\n      return outWait\n    }\n  }\n\n  return { writer, iterator }\n}\n","import { CID } from 'multiformats/cid'\nimport { bytesReader, readHeader } from './decoder.js'\nimport { createEncoder, createHeader } from './encoder.js'\nimport { create as iteratorChannel } from './iterator-channel.js'\n\n/**\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').BlockWriter} BlockWriter\n * @typedef {import('./api').WriterChannel} WriterChannel\n * @typedef {import('./coding').CarEncoder} CarEncoder\n * @typedef {import('./coding').IteratorChannel<Uint8Array>} IteratorChannel\n */\n\n/**\n * Provides a writer interface for the creation of CAR files.\n *\n * Creation of a `CarWriter` involves the instatiation of an input / output pair\n * in the form of a `WriterChannel`, which is a\n * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair. These two\n * components form what can be thought of as a stream-like interface. The\n * `writer` component (an instantiated `CarWriter`), has methods to\n * {@link CarWriter.put `put()`} new blocks and {@link CarWriter.put `close()`}\n * the writing operation (finalising the CAR archive). The `out` component is\n * an `AsyncIterable` that yields the bytes of the archive. This can be\n * redirected to a file or other sink. In Node.js, you can use the\n * [`Readable.from()`](https://nodejs.org/api/stream.html#stream_stream_readable_from_iterable_options)\n * API to convert this to a standard Node.js stream, or it can be directly fed\n * to a\n * [`stream.pipeline()`](https://nodejs.org/api/stream.html#stream_stream_pipeline_source_transforms_destination_callback).\n *\n * The channel will provide a form of backpressure. The `Promise` from a\n * `write()` won't resolve until the resulting data is drained from the `out`\n * iterable.\n *\n * It is also possible to ignore the `Promise` from `write()` calls and allow\n * the generated data to queue in memory. This should be avoided for large CAR\n * archives of course due to the memory costs and potential for memory overflow.\n *\n * Load this class with either\n * `import { CarWriter } from '@ipld/car/writer'`\n * (`const { CarWriter } = require('@ipld/car/writer')`). Or\n * `import { CarWriter } from '@ipld/car'`\n * (`const { CarWriter } = require('@ipld/car')`). The former will likely\n * result in smaller bundle sizes where this is important.\n *\n * @name CarWriter\n * @class\n * @implements {BlockWriter}\n */\nexport class CarWriter {\n  /**\n   * @param {CID[]} roots\n   * @param {CarEncoder} encoder\n   */\n  constructor (roots, encoder) {\n    this._encoder = encoder\n    /** @type {Promise<void>} */\n    this._mutex = encoder.setRoots(roots)\n    this._ended = false\n  }\n\n  /**\n   * Write a `Block` (a `{ cid:CID, bytes:Uint8Array }` pair) to the archive.\n   *\n   * @function\n   * @memberof CarWriter\n   * @instance\n   * @async\n   * @param {Block} block - A `{ cid:CID, bytes:Uint8Array }` pair.\n   * @returns {Promise<void>} The returned promise will only resolve once the\n   * bytes this block generates are written to the `out` iterable.\n   */\n  async put (block) {\n    if (!(block.bytes instanceof Uint8Array) || !block.cid) {\n      throw new TypeError('Can only write {cid, bytes} objects')\n    }\n    if (this._ended) {\n      throw new Error('Already closed')\n    }\n    const cid = CID.asCID(block.cid)\n    if (!cid) {\n      throw new TypeError('Can only write {cid, bytes} objects')\n    }\n    this._mutex = this._mutex.then(() => this._encoder.writeBlock({ cid, bytes: block.bytes }))\n    return this._mutex\n  }\n\n  /**\n   * Finalise the CAR archive and signal that the `out` iterable should end once\n   * any remaining bytes are written.\n   *\n   * @function\n   * @memberof CarWriter\n   * @instance\n   * @async\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this._ended) {\n      throw new Error('Already closed')\n    }\n    await this._mutex\n    this._ended = true\n    return this._encoder.close()\n  }\n\n  /**\n   * Create a new CAR writer \"channel\" which consists of a\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @param {CID[] | CID | void} roots\n   * @returns {WriterChannel} The channel takes the form of\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n   */\n  static create (roots) {\n    roots = toRoots(roots)\n    const { encoder, iterator } = encodeWriter()\n    const writer = new CarWriter(roots, encoder)\n    const out = new CarWriterOut(iterator)\n    return { writer, out }\n  }\n\n  /**\n   * Create a new CAR appender \"channel\" which consists of a\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }` pair.\n   * This appender does not consider roots and does not produce a CAR header.\n   * It is designed to append blocks to an _existing_ CAR archive. It is\n   * expected that `out` will be concatenated onto the end of an existing\n   * archive that already has a properly formatted header.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @returns {WriterChannel} The channel takes the form of\n   * `{ writer:CarWriter, out:AsyncIterable<Uint8Array> }`.\n   */\n  static createAppender () {\n    const { encoder, iterator } = encodeWriter()\n    encoder.setRoots = () => Promise.resolve()\n    const writer = new CarWriter([], encoder)\n    const out = new CarWriterOut(iterator)\n    return { writer, out }\n  }\n\n  /**\n   * Update the list of roots in the header of an existing CAR as represented\n   * in a Uint8Array.\n   *\n   * This operation is an _overwrite_, the total length of the CAR will not be\n   * modified. A rejection will occur if the new header will not be the same\n   * length as the existing header, in which case the CAR will not be modified.\n   * It is the responsibility of the user to ensure that the roots being\n   * replaced encode as the same length as the new roots.\n   *\n   * The byte array passed in an argument will be modified and also returned\n   * upon successful modification.\n   *\n   * @async\n   * @static\n   * @memberof CarWriter\n   * @param {Uint8Array} bytes\n   * @param {CID[]} roots - A new list of roots to replace the existing list in\n   * the CAR header. The new header must take up the same number of bytes as the\n   * existing header, so the roots should collectively be the same byte length\n   * as the existing roots.\n   * @returns {Promise<Uint8Array>}\n   */\n  static async updateRootsInBytes (bytes, roots) {\n    const reader = bytesReader(bytes)\n    await readHeader(reader)\n    const newHeader = createHeader(roots)\n    if (Number(reader.pos) !== newHeader.length) {\n      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${reader.pos} bytes, new header is ${newHeader.length} bytes)`)\n    }\n    bytes.set(newHeader, 0)\n    return bytes\n  }\n}\n\n/**\n * @class\n * @implements {AsyncIterable<Uint8Array>}\n */\nexport class CarWriterOut {\n  /**\n   * @param {AsyncIterator<Uint8Array>} iterator\n   */\n  constructor (iterator) {\n    this._iterator = iterator\n  }\n\n  [Symbol.asyncIterator] () {\n    if (this._iterating) {\n      throw new Error('Multiple iterator not supported')\n    }\n    this._iterating = true\n    return this._iterator\n  }\n}\n\nfunction encodeWriter () {\n  /** @type {IteratorChannel} */\n  const iw = iteratorChannel()\n  const { writer, iterator } = iw\n  const encoder = createEncoder(writer)\n  return { encoder, iterator }\n}\n\n/**\n * @private\n * @param {CID[] | CID | void} roots\n * @returns {CID[]}\n */\nfunction toRoots (roots) {\n  if (roots === undefined) {\n    return []\n  }\n\n  if (!Array.isArray(roots)) {\n    const cid = CID.asCID(roots)\n    if (!cid) {\n      throw new TypeError('roots must be a single CID or an array of CIDs')\n    }\n    return [cid]\n  }\n\n  const _roots = []\n  for (const root of roots) {\n    const _root = CID.asCID(root)\n    if (!_root) {\n      throw new TypeError('roots must be a single CID or an array of CIDs')\n    }\n    _roots.push(_root)\n  }\n  return _roots\n}\n\nexport const __browser = true\n","import { base58btc } from './bases/base58.js'\n\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\nconst walk = async ({ cid, load, seen }) => {\n  seen = seen || new Set()\n  const b58Cid = cid.toString(base58btc)\n  if (seen.has(b58Cid)) {\n    return\n  }\n\n  const block = await load(cid)\n  seen.add(b58Cid)\n\n  if (block === null) { // the loader signals with `null` that we should skip this block\n    return\n  }\n\n  for (const [, cid] of block.links()) {\n    await walk({ cid, load, seen })\n  }\n}\n\nexport { walk }\n","import { CID } from 'multiformats/cid'\nimport { createUnsafe } from 'multiformats/block'\nimport { CarWriter } from '@ipld/car/writer'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as json from 'multiformats/codecs/json'\nimport { walk } from 'multiformats/traversal'\n\nconst log = logger('ipfs:components:dag:import')\n\n// blocks that we're OK with not inspecting for links\n/** @type {number[]} */\nconst NO_LINKS_CODECS = [\n  raw.code, // raw\n  json.code // JSON\n]\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('@ipld/car/api').BlockWriter} BlockWriter\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template T\n * @template C\n * @template A\n * @template V\n * @typedef {import('multiformats/block').Block<T, C, A, V>} Block\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Preload} config.preload\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createExport ({ repo, preload, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    if (options.preload !== false) {\n      preload(root)\n    }\n\n    const cid = CID.asCID(root)\n    if (!cid) {\n      throw new Error(`Unexpected error converting CID type: ${root}`)\n    }\n\n    log(`Exporting ${cid} as car`)\n    const { writer, out } = await CarWriter.create([cid])\n\n    // we need to write with one async channel and send the CarWriter output\n    // with another to the caller, but if the write causes an error we capture\n    // that and make sure it gets propagated\n    /** @type {Error|null} */\n    let err = null\n    ;(async () => {\n      try {\n        const load = makeLoader(repo, writer, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs)\n        await walk({ cid, load })\n      } catch (/** @type {any} */ e) {\n        err = e\n      } finally {\n        writer.close()\n      }\n    })()\n\n    for await (const chunk of out) {\n      if (err) {\n        break\n      }\n      yield chunk\n    }\n    if (err) {\n      throw err\n    }\n  }\n\n  return withTimeoutOption(dagExport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {BlockWriter} writer\n * @param {AbortOptions} options\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @returns {(cid:CID)=>Promise<ReturnType<createUnsafe>|null>}\n */\nfunction makeLoader (repo, writer, options, codecs) {\n  return async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`)\n    }\n\n    const bytes = await repo.blocks.get(cid, options)\n\n    log(`Adding block ${cid} to car`)\n    await writer.put({ cid, bytes })\n\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null // skip this block, no need to look inside\n    }\n\n    return createUnsafe({ bytes, cid, codec })\n  }\n}\n","/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`\n */\nexport default async function first(source) {\n    for await (const entry of source) { // eslint-disable-line no-unreachable-loop\n        return entry;\n    }\n    return undefined;\n}\n//# sourceMappingURL=index.js.map","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { resolve } from '../../utils.js'\nimport errCode from 'err-code'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ codecs, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n","import {\n  asyncIterableReader,\n  bytesReader,\n  createDecoder\n} from './decoder.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').RootsReader} RootsReader\n * @typedef {import('./coding').BytesReader} BytesReader\n */\n\n/**\n * @class\n * @implements {RootsReader}\n * @property {number} version The version number of the CAR referenced by this reader (should be `1`).\n */\nexport class CarIteratorBase {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {AsyncIterable<Block>|void} iterable\n   */\n  constructor (version, roots, iterable) {\n    this._version = version\n    this._roots = roots\n    this._iterable = iterable\n    this._decoded = false\n  }\n\n  get version () {\n    return this._version\n  }\n\n  /**\n   * @returns {Promise<CID[]>}\n   */\n  async getRoots () {\n    return this._roots\n  }\n}\n\n/**\n * Provides an iterator over all of the `Block`s in a CAR. Implements a\n * `BlockIterator` interface, or `AsyncIterable<Block>`. Where a `Block` is\n * a `{ cid:CID, bytes:Uint8Array }` pair.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const block of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarBlockiterator.fromBytes} or\n * {@link CarBlockiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarBlockIterator` also implements the `RootsReader` interface and provides\n * the {@link CarBlockiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarBlockIterator } from '@ipld/car/iterator'`\n * (`const { CarBlockIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarBlockIterator } from '@ipld/car'`\n * (`const { CarBlockIterator } = require('@ipld/car')`).\n *\n * @name CarBlockIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<Block>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarBlockIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarBlockIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<Block>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    return this._iterable[Symbol.asyncIterator]()\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarBlockIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarBlockIterator(version, roots, iterator)\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarBlockIterator(version, roots, iterator)\n  }\n}\n\n/**\n * Provides an iterator over all of the `CID`s in a CAR. Implements a\n * `CIDIterator` interface, or `AsyncIterable<CID>`. Similar to\n * {@link CarBlockIterator} but only yields the CIDs in the CAR.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const cid of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarCIDiterator.fromBytes} or\n * {@link CarCIDiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarCIDIterator` also implements the `RootsReader` interface and provides\n * the {@link CarCIDiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarCIDIterator } from '@ipld/car/iterator'`\n * (`const { CarCIDIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarCIDIterator } from '@ipld/car'`\n * (`const { CarCIDIterator } = require('@ipld/car')`).\n *\n * @name CarCIDIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<CID>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarCIDIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarCIDIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<CID>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    const iterable = this._iterable[Symbol.asyncIterator]()\n    return {\n      async next () {\n        const next = await iterable.next()\n        if (next.done) {\n          return next\n        }\n        return { done: false, value: next.value.cid }\n      }\n    }\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarCIDIterator(version, roots, iterator)\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarCIDIterator(version, roots, iterator)\n  }\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromBytes (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array')\n  }\n  return decodeIterator(bytesReader(bytes))\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromIterable (asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable')\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable))\n}\n\n/**\n * @private\n * @param {BytesReader} reader\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function decodeIterator (reader) {\n  const decoder = createDecoder(reader)\n  const { version, roots } = await decoder.header()\n  return { version, roots, iterator: decoder.blocks() }\n}\n","export default function peekableIterator(iterable) {\n    // @ts-expect-error\n    const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n        // @ts-expect-error\n        ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n        // @ts-expect-error\n        : [iterable[Symbol.iterator](), Symbol.iterator];\n    const queue = [];\n    // @ts-expect-error\n    return {\n        peek: () => {\n            return iterator.next();\n        },\n        push: (value) => {\n            queue.push(value);\n        },\n        next: () => {\n            if (queue.length > 0) {\n                return {\n                    done: false,\n                    value: queue.shift()\n                };\n            }\n            return iterator.next();\n        },\n        [symbol]() {\n            return this;\n        }\n    };\n}\n//# sourceMappingURL=index.js.map","import { CarBlockIterator } from '@ipld/car/iterator'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport itPeekable from 'it-peekable'\nimport drain from 'it-drain'\nimport map from 'it-map'\nimport { logger } from '@libp2p/logger'\nconst log = logger('ipfs:components:dag:import')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n */\nexport function createImport ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"import\"]}\n   */\n  async function * dagImport (sources, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const abortOptions = { signal: options.signal, timeout: options.timeout }\n      const peekable = itPeekable(sources)\n\n      const { value, done } = await peekable.peek()\n\n      if (done) {\n        return\n      }\n\n      if (value) {\n        // @ts-expect-error\n        peekable.push(value)\n      }\n\n      /**\n       * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n       */\n      let cars\n\n      if (value instanceof Uint8Array) {\n        // @ts-expect-error\n        cars = [peekable]\n      } else {\n        // @ts-expect-error\n        cars = peekable\n      }\n\n      for await (const car of cars) {\n        const roots = await importCar(repo, abortOptions, car)\n\n        if (options.pinRoots !== false) { // default=true\n          for (const cid of roots) {\n            let pinErrorMsg = ''\n\n            try { // eslint-disable-line max-depth\n              if (await repo.blocks.has(cid)) { // eslint-disable-line max-depth\n                log(`Pinning root ${cid}`)\n                await repo.pins.pinRecursively(cid)\n              } else {\n                pinErrorMsg = 'blockstore: block not found'\n              }\n            } catch (/** @type {any} */ err) {\n              pinErrorMsg = err.message\n            }\n\n            yield { root: { cid, pinErrorMsg } }\n          }\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(dagImport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\nasync function importCar (repo, options, source) {\n  const reader = await CarBlockIterator.fromIterable(source)\n  const roots = await reader.getRoots()\n\n  await drain(\n    repo.blocks.putMany(\n      map(reader, ({ cid: key, bytes: value }) => {\n        log(`Import block ${key}`)\n\n        return { key, value }\n      }),\n      { signal: options.signal }\n    )\n  )\n\n  return roots\n}\n","import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { resolvePath } from '../../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createResolve ({ repo, codecs, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\nexport class DagAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('../../types').Preload} config.preload\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ repo, codecs, hashers, preload }) {\n    this.export = createExport({ repo, preload, codecs })\n    this.get = createGet({ codecs, repo, preload })\n    this.import = createImport({ repo })\n    this.resolve = createResolve({ repo, codecs, preload })\n    this.put = createPut({ repo, codecs, hashers, preload })\n  }\n}\n","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=equals.js.map","import { baseX } from './base.js';\nexport const base10 = baseX({\n    prefix: '9',\n    name: 'base10',\n    alphabet: '0123456789'\n});\n//# sourceMappingURL=base10.js.map","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n    prefix: 'f',\n    name: 'base16',\n    alphabet: '0123456789abcdef',\n    bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n    prefix: 'F',\n    name: 'base16upper',\n    alphabet: '0123456789ABCDEF',\n    bitsPerChar: 4\n});\n//# sourceMappingURL=base16.js.map","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n    prefix: '0',\n    name: 'base2',\n    alphabet: '01',\n    bitsPerChar: 1\n});\n//# sourceMappingURL=base2.js.map","import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = (alphabet.reduce((p, c, i) => { p[i] = c; return p; }, ([])));\nconst alphabetCharsToBytes = (alphabet.reduce((p, c, i) => { p[c.codePointAt(0)] = i; return p; }, ([])));\nfunction encode(data) {\n    return data.reduce((p, c) => {\n        p += alphabetBytesToChars[c];\n        return p;\n    }, '');\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str) {\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(`Non-base256emoji character: ${char}`);\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n    prefix: '🚀',\n    name: 'base256emoji',\n    encode,\n    decode\n});\n//# sourceMappingURL=base256emoji.js.map","import { baseX } from './base.js';\nexport const base36 = baseX({\n    prefix: 'k',\n    name: 'base36',\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n    prefix: 'K',\n    name: 'base36upper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base36.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n    prefix: '7',\n    name: 'base8',\n    alphabet: '01234567',\n    bitsPerChar: 3\n});\n//# sourceMappingURL=base8.js.map","import { fromString, toString } from '../bytes.js';\nimport { from } from './base.js';\nexport const identity = from({\n    prefix: '\\x00',\n    name: 'identity',\n    encode: (buf) => toString(buf),\n    decode: (str) => fromString(str)\n});\n//# sourceMappingURL=identity.js.map","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 0x0200;\nexport function encode(node) {\n    return textEncoder.encode(JSON.stringify(node));\n}\nexport function decode(data) {\n    return JSON.parse(textDecoder.decode(data));\n}\n//# sourceMappingURL=json.js.map","import * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base2 from './bases/base2.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base8 from './bases/base8.js';\nimport * as identityBase from './bases/identity.js';\nimport * as json from './codecs/json.js';\nimport * as raw from './codecs/raw.js';\nimport * as identity from './hashes/identity.js';\nimport * as sha2 from './hashes/sha2.js';\nimport { CID, hasher, digest, varint, bytes } from './index.js';\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji };\nexport const hashes = { ...sha2, ...identity };\nexport const codecs = { raw, json };\nexport { CID, hasher, digest, varint, bytes };\n//# sourceMappingURL=basics.js.map","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec('utf8', 'u', (buf) => {\n    const decoder = new TextDecoder('utf8');\n    return 'u' + decoder.decode(buf);\n}, (str) => {\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', (buf) => {\n    let string = 'a';\n    for (let i = 0; i < buf.length; i++) {\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str) => {\n    str = str.substring(1);\n    const buf = allocUnsafe(str.length);\n    for (let i = 0; i < str.length; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    'utf-8': string,\n    hex: bases.base16,\n    latin1: ascii,\n    ascii,\n    binary: ascii,\n    ...bases\n};\nexport default BASES;\n//# sourceMappingURL=bases.js.map","import bases, {} from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map","import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat(arrays, length) {\n    if (globalThis.Buffer != null) {\n        return asUint8Array(globalThis.Buffer.concat(arrays, length));\n    }\n    if (length == null) {\n        length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n    }\n    const output = allocUnsafe(length);\n    let offset = 0;\n    for (const arr of arrays) {\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return asUint8Array(output);\n}\n//# sourceMappingURL=concat.js.map","import { asUint8Array } from './util/as-uint8array.js';\nimport bases, {} from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n    }\n    // add multibase prefix\n    return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n//# sourceMappingURL=from-string.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport { IpNet } from '@chainsafe/netmask';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.encodingLength(size));\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.encodingLength(size));\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.encodingLength(size));\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nexport function stringToMultiaddrParts(str) {\n    str = cleanPath(str);\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    const parts = str.split('/').slice(1);\n    if (parts.length === 1 && parts[0] === '') {\n        return {\n            bytes: new Uint8Array(),\n            string: '/',\n            tuples: [],\n            stringTuples: [],\n            path: null\n        };\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([proto.code]);\n            stringTuples.push([proto.code]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = cleanPath(parts.slice(p).join('/'));\n            tuples.push([proto.code, convertToBytes(proto.code, path)]);\n            stringTuples.push([proto.code, path]);\n            break;\n        }\n        const bytes = convertToBytes(proto.code, parts[p]);\n        tuples.push([proto.code, bytes]);\n        stringTuples.push([proto.code, convertToString(proto.code, bytes)]);\n    }\n    return {\n        string: stringTuplesToString(stringTuples),\n        bytes: tuplesToBytes(tuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\nexport function bytesToMultiaddrParts(bytes) {\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    let i = 0;\n    while (i < bytes.length) {\n        const code = varint.decode(bytes, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, bytes.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            stringTuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = bytes.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > bytes.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n        const stringAddr = convertToString(code, addr);\n        stringTuples.push([code, stringAddr]);\n        if (p.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = stringAddr;\n            break;\n        }\n    }\n    return {\n        bytes: Uint8Array.from(bytes),\n        string: stringTuplesToString(stringTuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return uint8ArrayConcat(tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    }));\n}\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr));\n        return size + varint.encodingLength(size);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        let parts;\n        if (addr instanceof Uint8Array) {\n            parts = bytesToMultiaddrParts(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            parts = stringToMultiaddrParts(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            parts = bytesToMultiaddrParts(addr.bytes);\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n        this.bytes = parts.bytes;\n        this.#string = parts.string;\n        this.#tuples = parts.tuples;\n        this.#stringTuples = parts.stringTuples;\n        this.#path = parts.path;\n    }\n    toString() {\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        return this.#tuples.map(([code]) => code);\n    }\n    protoNames() {\n        return this.#tuples.map(([code]) => getProtocol(code).name);\n    }\n    tuples() {\n        return this.#tuples;\n    }\n    stringTuples() {\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new Multiaddr(addr);\n        return new Multiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new Multiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            let tuples = [];\n            this.stringTuples().forEach(([code, name]) => {\n                if (code === names.p2p.code) {\n                    tuples.push([code, name]);\n                }\n                // if this is a p2p-circuit address, return the target peer id if present\n                // not the peer id of the relay\n                if (code === names['p2p-circuit'].code) {\n                    tuples = [];\n                }\n            });\n            // Get the last ipfs tuple ['p2p', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        return this.#path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new Multiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${this.#string})`;\n    }\n}\n//# sourceMappingURL=multiaddr.js.map","/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n * const addr =  multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * const addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolvers\n *\n * `multiaddr` allows multiaddrs to be resolved when appropriate resolvers are provided. This module already has resolvers available, but you can also create your own.  Resolvers should always be set in the same module that is calling `multiaddr.resolve()` to avoid conflicts if multiple versions of `multiaddr` are in your dependency tree.\n *\n * To provide multiaddr resolvers you can do:\n *\n * ```js\n * import { resolvers  } from '@multiformats/multiaddr'\n *\n * resolvers.set('dnsaddr', resolvers.dnsaddrResolver)\n * ```\n *\n * The available resolvers are:\n *\n * | Name              | type      | Description                         |\n * | ----------------- | --------- | ----------------------------------- |\n * | `dnsaddrResolver` | `dnsaddr` | dnsaddr resolution with TXT Records |\n *\n * A resolver receives a `Multiaddr` as a parameter and returns a `Promise<Array<string>>`.\n */\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js';\nimport { getProtocol } from './protocols-table.js';\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new MultiaddrClass(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import { multiaddr, protocols } from '@multiformats/multiaddr';\nfunction extractSNI(ma) {\n    let sniProtoCode;\n    try {\n        sniProtoCode = protocols('sni').code;\n    }\n    catch (e) {\n        // No SNI protocol in multiaddr\n        return null;\n    }\n    for (const [proto, value] of ma) {\n        if (proto === sniProtoCode && value !== undefined) {\n            return value;\n        }\n    }\n    return null;\n}\nfunction hasTLS(ma) {\n    return ma.some(([proto, _]) => proto === protocols('tls').code);\n}\nfunction interpretNext(headProtoCode, headProtoVal, restMa) {\n    const interpreter = interpreters[protocols(headProtoCode).name];\n    if (interpreter === undefined) {\n        throw new Error(`Can't interpret protocol ${protocols(headProtoCode).name}`);\n    }\n    const restVal = interpreter(headProtoVal, restMa);\n    if (headProtoCode === protocols('ip6').code) {\n        return `[${restVal}]`;\n    }\n    return restVal;\n}\nconst interpreters = {\n    ip4: (value, restMa) => value,\n    ip6: (value, restMa) => {\n        if (restMa.length === 0) {\n            return value;\n        }\n        return `[${value}]`;\n    },\n    tcp: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `tcp://${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}:${value}`;\n    },\n    udp: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `udp://${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}:${value}`;\n    },\n    dnsaddr: (value, restMa) => value,\n    dns4: (value, restMa) => value,\n    dns6: (value, restMa) => value,\n    dns: (value, restMa) => value,\n    ipfs: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/ipfs/${value}`;\n    },\n    p2p: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p/${value}`;\n    },\n    http: (value, restMa) => {\n        const maHasTLS = hasTLS(restMa);\n        const sni = extractSNI(restMa);\n        if (maHasTLS && sni !== null) {\n            return `https://${sni}`;\n        }\n        const protocol = maHasTLS ? 'https://' : 'http://';\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `${protocol}${baseVal}`;\n    },\n    tls: (value, restMa) => {\n        // Noop, the parent context knows that it's tls. We don't need to do\n        // anything here\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n    },\n    sni: (value, restMa) => {\n        // Noop, the parent context uses the sni information, we don't need to do\n        // anything here\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n    },\n    https: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `https://${baseVal}`;\n    },\n    ws: (value, restMa) => {\n        const maHasTLS = hasTLS(restMa);\n        const sni = extractSNI(restMa);\n        if (maHasTLS && sni !== null) {\n            return `wss://${sni}`;\n        }\n        const protocol = maHasTLS ? 'wss://' : 'ws://';\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `${protocol}${baseVal}`;\n    },\n    wss: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `wss://${baseVal}`;\n    },\n    'p2p-websocket-star': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-websocket-star`;\n    },\n    'p2p-webrtc-star': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-webrtc-star`;\n    },\n    'p2p-webrtc-direct': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-webrtc-direct`;\n    }\n};\nexport function multiaddrToUri(input, opts) {\n    const ma = multiaddr(input);\n    const parts = ma.stringTuples();\n    const head = parts.pop();\n    if (head === undefined) {\n        throw new Error('Unexpected end of multiaddr');\n    }\n    const protocol = protocols(head[0]);\n    const interpreter = interpreters[protocol.name];\n    if (interpreter == null) {\n        throw new Error(`No interpreter found for ${protocol.name}`);\n    }\n    let uri = interpreter(head[1] ?? '', parts);\n    if (opts?.assumeHttp !== false && head[0] === protocols('tcp').code) {\n        // If rightmost proto is tcp, we assume http here\n        uri = uri.replace('tcp://', 'http://');\n        if (head[1] === '443' || head[1] === '80') {\n            if (head[1] === '443') {\n                uri = uri.replace('http://', 'https://');\n            }\n            // Drop the port\n            uri = uri.substring(0, uri.lastIndexOf(':'));\n        }\n    }\n    return uri;\n}\n//# sourceMappingURL=index.js.map","export default function arrayShuffle(array) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new TypeError(`Expected an array, got ${typeof array}`);\n\t}\n\n\tarray = [...array];\n\n\tfor (let index = array.length - 1; index > 0; index--) {\n\t\tconst newIndex = Math.floor(Math.random() * (index + 1));\n\t\t[array[index], array[newIndex]] = [array[newIndex], array[index]];\n\t}\n\n\treturn array;\n}\n","/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n","import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { logger } from '@libp2p/logger'\nimport shuffle from 'array-shuffle'\nimport { preload } from 'ipfs-core-config/preload'\nimport hashlru from 'hashlru'\n\nconst log = logger('ipfs:preload')\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader (options = {}) {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map((str) => multiaddrToUri(str))\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (/** @type {any} */ err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n","import { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs-preload')\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader ({ preload, files, options = {} }) {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (/** @type {any} */ err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n","export class TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new AbortError(errorMessage)\n\t: new DOMException(errorMessage);\n\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\nconst getAbortedReason = signal => {\n\tconst reason = signal.reason === undefined\n\t\t? getDOMException('This operation was aborted.')\n\t\t: signal.reason;\n\n\treturn reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, options) {\n\tconst {\n\t\tmilliseconds,\n\t\tfallback,\n\t\tmessage,\n\t\tcustomTimers = {setTimeout, clearTimeout},\n\t} = options;\n\n\tlet timer;\n\n\tconst wrappedPromise = new Promise((resolve, reject) => {\n\t\tif (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n\t\t\tthrow new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\tconst {signal} = options;\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', () => {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t});\n\t\t}\n\n\t\tif (milliseconds === Number.POSITIVE_INFINITY) {\n\t\t\tpromise.then(resolve, reject);\n\t\t\treturn;\n\t\t}\n\n\t\t// We create the error outside of `setTimeout` to preserve the stack trace.\n\t\tconst timeoutError = new TimeoutError();\n\n\t\ttimer = customTimers.setTimeout.call(undefined, () => {\n\t\t\tif (fallback) {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(fallback());\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\n\t\t\tif (message === false) {\n\t\t\t\tresolve();\n\t\t\t} else if (message instanceof Error) {\n\t\t\t\treject(message);\n\t\t\t} else {\n\t\t\t\ttimeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;\n\t\t\t\treject(timeoutError);\n\t\t\t}\n\t\t}, milliseconds);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tresolve(await promise);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t})();\n\t});\n\n\tconst cancelablePromise = wrappedPromise.finally(() => {\n\t\tcancelablePromise.clear();\n\t});\n\n\tcancelablePromise.clear = () => {\n\t\tcustomTimers.clearTimeout.call(undefined, timer);\n\t\ttimer = undefined;\n\t};\n\n\treturn cancelablePromise;\n}\n","// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nexport default function lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = Math.trunc(count / 2);\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\n","import lowerBound from './lower-bound.js';\nexport default class PriorityQueue {\n    #queue = [];\n    enqueue(run, options) {\n        options = {\n            priority: 0,\n            ...options,\n        };\n        const element = {\n            priority: options.priority,\n            run,\n        };\n        if (this.size && this.#queue[this.size - 1].priority >= options.priority) {\n            this.#queue.push(element);\n            return;\n        }\n        const index = lowerBound(this.#queue, element, (a, b) => b.priority - a.priority);\n        this.#queue.splice(index, 0, element);\n    }\n    dequeue() {\n        const item = this.#queue.shift();\n        return item?.run;\n    }\n    filter(options) {\n        return this.#queue.filter((element) => element.priority === options.priority).map((element) => element.run);\n    }\n    get size() {\n        return this.#queue.length;\n    }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport pTimeout, { TimeoutError } from 'p-timeout';\nimport PriorityQueue from './priority-queue.js';\n/**\nPromise queue with concurrency control.\n*/\nexport default class PQueue extends EventEmitter {\n    #carryoverConcurrencyCount;\n    #isIntervalIgnored;\n    #intervalCount = 0;\n    #intervalCap;\n    #interval;\n    #intervalEnd = 0;\n    #intervalId;\n    #timeoutId;\n    #queue;\n    #queueClass;\n    #pending = 0;\n    // The `!` is needed because of https://github.com/microsoft/TypeScript/issues/32194\n    #concurrency;\n    #isPaused;\n    #throwOnTimeout;\n    /**\n    Per-operation timeout in milliseconds. Operations fulfill once `timeout` elapses if they haven't already.\n\n    Applies to each future operation.\n    */\n    timeout;\n    // TODO: The `throwOnTimeout` option should affect the return types of `add()` and `addAll()`\n    constructor(options) {\n        super();\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        options = {\n            carryoverConcurrencyCount: false,\n            intervalCap: Number.POSITIVE_INFINITY,\n            interval: 0,\n            concurrency: Number.POSITIVE_INFINITY,\n            autoStart: true,\n            queueClass: PriorityQueue,\n            ...options,\n        };\n        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n            throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${options.intervalCap?.toString() ?? ''}\\` (${typeof options.intervalCap})`);\n        }\n        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n            throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${options.interval?.toString() ?? ''}\\` (${typeof options.interval})`);\n        }\n        this.#carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n        this.#isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;\n        this.#intervalCap = options.intervalCap;\n        this.#interval = options.interval;\n        this.#queue = new options.queueClass();\n        this.#queueClass = options.queueClass;\n        this.concurrency = options.concurrency;\n        this.timeout = options.timeout;\n        this.#throwOnTimeout = options.throwOnTimeout === true;\n        this.#isPaused = options.autoStart === false;\n    }\n    get #doesIntervalAllowAnother() {\n        return this.#isIntervalIgnored || this.#intervalCount < this.#intervalCap;\n    }\n    get #doesConcurrentAllowAnother() {\n        return this.#pending < this.#concurrency;\n    }\n    #next() {\n        this.#pending--;\n        this.#tryToStartAnother();\n        this.emit('next');\n    }\n    #onResumeInterval() {\n        this.#onInterval();\n        this.#initializeIntervalIfNeeded();\n        this.#timeoutId = undefined;\n    }\n    get #isIntervalPaused() {\n        const now = Date.now();\n        if (this.#intervalId === undefined) {\n            const delay = this.#intervalEnd - now;\n            if (delay < 0) {\n                // Act as the interval was done\n                // We don't need to resume it here because it will be resumed on line 160\n                this.#intervalCount = (this.#carryoverConcurrencyCount) ? this.#pending : 0;\n            }\n            else {\n                // Act as the interval is pending\n                if (this.#timeoutId === undefined) {\n                    this.#timeoutId = setTimeout(() => {\n                        this.#onResumeInterval();\n                    }, delay);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    #tryToStartAnother() {\n        if (this.#queue.size === 0) {\n            // We can clear the interval (\"pause\")\n            // Because we can redo it later (\"resume\")\n            if (this.#intervalId) {\n                clearInterval(this.#intervalId);\n            }\n            this.#intervalId = undefined;\n            this.emit('empty');\n            if (this.#pending === 0) {\n                this.emit('idle');\n            }\n            return false;\n        }\n        if (!this.#isPaused) {\n            const canInitializeInterval = !this.#isIntervalPaused;\n            if (this.#doesIntervalAllowAnother && this.#doesConcurrentAllowAnother) {\n                const job = this.#queue.dequeue();\n                if (!job) {\n                    return false;\n                }\n                this.emit('active');\n                job();\n                if (canInitializeInterval) {\n                    this.#initializeIntervalIfNeeded();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    #initializeIntervalIfNeeded() {\n        if (this.#isIntervalIgnored || this.#intervalId !== undefined) {\n            return;\n        }\n        this.#intervalId = setInterval(() => {\n            this.#onInterval();\n        }, this.#interval);\n        this.#intervalEnd = Date.now() + this.#interval;\n    }\n    #onInterval() {\n        if (this.#intervalCount === 0 && this.#pending === 0 && this.#intervalId) {\n            clearInterval(this.#intervalId);\n            this.#intervalId = undefined;\n        }\n        this.#intervalCount = this.#carryoverConcurrencyCount ? this.#pending : 0;\n        this.#processQueue();\n    }\n    /**\n    Executes all queued functions until it reaches the limit.\n    */\n    #processQueue() {\n        // eslint-disable-next-line no-empty\n        while (this.#tryToStartAnother()) { }\n    }\n    get concurrency() {\n        return this.#concurrency;\n    }\n    set concurrency(newConcurrency) {\n        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n        }\n        this.#concurrency = newConcurrency;\n        this.#processQueue();\n    }\n    async #throwOnAbort(signal) {\n        return new Promise((_resolve, reject) => {\n            signal.addEventListener('abort', () => {\n                reject(signal.reason);\n            }, { once: true });\n        });\n    }\n    async add(function_, options = {}) {\n        options = {\n            timeout: this.timeout,\n            throwOnTimeout: this.#throwOnTimeout,\n            ...options,\n        };\n        return new Promise((resolve, reject) => {\n            this.#queue.enqueue(async () => {\n                this.#pending++;\n                this.#intervalCount++;\n                try {\n                    options.signal?.throwIfAborted();\n                    let operation = function_({ signal: options.signal });\n                    if (options.timeout) {\n                        operation = pTimeout(Promise.resolve(operation), { milliseconds: options.timeout });\n                    }\n                    if (options.signal) {\n                        operation = Promise.race([operation, this.#throwOnAbort(options.signal)]);\n                    }\n                    const result = await operation;\n                    resolve(result);\n                    this.emit('completed', result);\n                }\n                catch (error) {\n                    if (error instanceof TimeoutError && !options.throwOnTimeout) {\n                        resolve();\n                        return;\n                    }\n                    reject(error);\n                    this.emit('error', error);\n                }\n                finally {\n                    this.#next();\n                }\n            }, options);\n            this.emit('add');\n            this.#tryToStartAnother();\n        });\n    }\n    async addAll(functions, options) {\n        return Promise.all(functions.map(async (function_) => this.add(function_, options)));\n    }\n    /**\n    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n    */\n    start() {\n        if (!this.#isPaused) {\n            return this;\n        }\n        this.#isPaused = false;\n        this.#processQueue();\n        return this;\n    }\n    /**\n    Put queue execution on hold.\n    */\n    pause() {\n        this.#isPaused = true;\n    }\n    /**\n    Clear the queue.\n    */\n    clear() {\n        this.#queue = new this.#queueClass();\n    }\n    /**\n    Can be called multiple times. Useful if you for example add additional items at a later time.\n\n    @returns A promise that settles when the queue becomes empty.\n    */\n    async onEmpty() {\n        // Instantly resolve if the queue is empty\n        if (this.#queue.size === 0) {\n            return;\n        }\n        await this.#onEvent('empty');\n    }\n    /**\n    @returns A promise that settles when the queue size is less than the given limit: `queue.size < limit`.\n\n    If you want to avoid having the queue grow beyond a certain size you can `await queue.onSizeLessThan()` before adding a new item.\n\n    Note that this only limits the number of items waiting to start. There could still be up to `concurrency` jobs already running that this call does not include in its calculation.\n    */\n    async onSizeLessThan(limit) {\n        // Instantly resolve if the queue is empty.\n        if (this.#queue.size < limit) {\n            return;\n        }\n        await this.#onEvent('next', () => this.#queue.size < limit);\n    }\n    /**\n    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n    */\n    async onIdle() {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this.#pending === 0 && this.#queue.size === 0) {\n            return;\n        }\n        await this.#onEvent('idle');\n    }\n    async #onEvent(event, filter) {\n        return new Promise(resolve => {\n            const listener = () => {\n                if (filter && !filter()) {\n                    return;\n                }\n                this.off(event, listener);\n                resolve();\n            };\n            this.on(event, listener);\n        });\n    }\n    /**\n    Size of the queue, the number of queued items waiting to run.\n    */\n    get size() {\n        return this.#queue.size;\n    }\n    /**\n    Size of the queue, filtered by the given options.\n\n    For example, this can be used to find the number of items remaining in the queue with a specific priority level.\n    */\n    sizeBy(options) {\n        // eslint-disable-next-line unicorn/no-array-callback-reference\n        return this.#queue.filter(options).length;\n    }\n    /**\n    Number of running items (no longer in the queue).\n    */\n    get pending() {\n        return this.#pending;\n    }\n    /**\n    Whether the queue is currently paused.\n    */\n    get isPaused() {\n        return this.#isPaused;\n    }\n}\n","const events = {};\nconst observable = (worker) => {\n    worker.addEventListener('message', (event) => {\n        observable.dispatchEvent('message', worker, event);\n    });\n    if (worker.port != null) {\n        worker.port.addEventListener('message', (event) => {\n            observable.dispatchEvent('message', worker, event);\n        });\n    }\n};\nobservable.addEventListener = (type, fn) => {\n    if (events[type] == null) {\n        events[type] = [];\n    }\n    events[type].push(fn);\n};\nobservable.removeEventListener = (type, fn) => {\n    if (events[type] == null) {\n        return;\n    }\n    events[type] = events[type]\n        .filter(listener => listener === fn);\n};\nobservable.dispatchEvent = function (type, worker, event) {\n    if (events[type] == null) {\n        return;\n    }\n    events[type].forEach(fn => fn(worker, event));\n};\nexport default observable;\n//# sourceMappingURL=index.js.map","export const WORKER_REQUEST_READ_LOCK = 'lock:worker:request-read';\nexport const WORKER_RELEASE_READ_LOCK = 'lock:worker:release-read';\nexport const MASTER_GRANT_READ_LOCK = 'lock:master:grant-read';\nexport const WORKER_REQUEST_WRITE_LOCK = 'lock:worker:request-write';\nexport const WORKER_RELEASE_WRITE_LOCK = 'lock:worker:release-write';\nexport const MASTER_GRANT_WRITE_LOCK = 'lock:master:grant-write';\n//# sourceMappingURL=constants.js.map","export const nanoid = (size = 21) => {\n    return Math.random().toString().substring(2);\n};\n//# sourceMappingURL=utils.js.map","import observer from 'observable-webworkers';\nimport { WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK } from './constants.js';\nimport { nanoid } from './utils.js';\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n    return (worker, event) => {\n        if (event.data.type !== requestType) {\n            return;\n        }\n        const requestEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n        };\n        emitter.dispatchEvent(new MessageEvent(masterEvent, {\n            data: {\n                name: requestEvent.name,\n                handler: async () => {\n                    // grant lock to worker\n                    worker.postMessage({\n                        type: grantType,\n                        name: requestEvent.name,\n                        identifier: requestEvent.identifier\n                    });\n                    // wait for worker to finish\n                    await new Promise((resolve) => {\n                        const releaseEventListener = (event) => {\n                            if (event == null || event.data == null) {\n                                return;\n                            }\n                            const releaseEvent = {\n                                type: event.data.type,\n                                name: event.data.name,\n                                identifier: event.data.identifier\n                            };\n                            if (releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n                                worker.removeEventListener('message', releaseEventListener);\n                                resolve();\n                            }\n                        };\n                        worker.addEventListener('message', releaseEventListener);\n                    });\n                }\n            }\n        }));\n    };\n};\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n    return async () => {\n        const id = nanoid();\n        globalThis.postMessage({\n            type: requestType,\n            identifier: id,\n            name\n        });\n        return new Promise((resolve) => {\n            const listener = (event) => {\n                if (event == null || event.data == null) {\n                    return;\n                }\n                const responseEvent = {\n                    type: event.data.type,\n                    identifier: event.data.identifier\n                };\n                if (responseEvent.type === grantType && responseEvent.identifier === id) {\n                    globalThis.removeEventListener('message', listener);\n                    // grant lock\n                    resolve(() => {\n                        // release lock\n                        globalThis.postMessage({\n                            type: releaseType,\n                            identifier: id,\n                            name\n                        });\n                    });\n                }\n            };\n            globalThis.addEventListener('message', listener);\n        });\n    };\n};\nconst defaultOptions = {\n    singleProcess: false\n};\nexport default (options) => {\n    options = Object.assign({}, defaultOptions, options);\n    const isPrimary = Boolean(globalThis.document) || options.singleProcess;\n    if (isPrimary) {\n        const emitter = new EventTarget();\n        observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n        observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n        return emitter;\n    }\n    return {\n        isWorker: true,\n        readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n        writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n    };\n};\n//# sourceMappingURL=browser.js.map","/**\n * @packageDocumentation\n *\n * - Reads occur concurrently\n * - Writes occur one at a time\n * - No reads occur while a write operation is in progress\n * - Locks can be created with different names\n * - Reads/writes can time out\n *\n * ## Usage\n *\n * ```javascript\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * // the lock name & options objects are both optional\n * const mutex = mortice('my-lock', {\n *\n *   // how long before write locks time out (default: 24 hours)\n *   timeout: 30000,\n *\n *    // control how many read operations are executed concurrently (default: Infinity)\n *   concurrency: 5,\n *\n *   // by default the the lock will be held on the main thread, set this to true if the\n *   // a lock should reside on each worker (default: false)\n *   singleProcess: false\n * })\n *\n * Promise.all([\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 2')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.writeLock()\n *\n *     try {\n *       await delay(1000)\n *\n *       console.info('write 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 3')\n *     } finally {\n *       release()\n *     }\n *   })()\n * ])\n * ```\n *\n *     read 1\n *     read 2\n *     <small pause>\n *     write 1\n *     read 3\n *\n * ## Browser\n *\n * Because there's no global way to evesdrop on messages sent by Web Workers, please pass all created Web Workers to the [`observable-webworkers`](https://npmjs.org/package/observable-webworkers) module:\n *\n * ```javascript\n * // main.js\n * import mortice from 'mortice'\n * import observe from 'observable-webworkers'\n *\n * // create our lock on the main thread, it will be held here\n * const mutex = mortice()\n *\n * const worker = new Worker('worker.js')\n *\n * observe(worker)\n * ```\n *\n * ```javascript\n * // worker.js\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * const mutex = mortice()\n *\n * let release = await mutex.readLock()\n * // read something\n * release()\n *\n * release = await mutex.writeLock()\n * // write something\n * release()\n * ```\n */\nimport PQueue from 'p-queue';\nimport pTimeout from 'p-timeout';\nimport impl from './node.js';\nconst mutexes = {};\nlet implementation;\nasync function createReleaseable(queue, options) {\n    let res;\n    const p = new Promise((resolve) => {\n        res = resolve;\n    });\n    void queue.add(async () => pTimeout((async () => {\n        await new Promise((resolve) => {\n            res(() => {\n                resolve();\n            });\n        });\n    })(), {\n        milliseconds: options.timeout\n    }));\n    return p;\n}\nconst createMutex = (name, options) => {\n    if (implementation.isWorker === true) {\n        return {\n            readLock: implementation.readLock(name, options),\n            writeLock: implementation.writeLock(name, options)\n        };\n    }\n    const masterQueue = new PQueue({ concurrency: 1 });\n    let readQueue;\n    return {\n        async readLock() {\n            // If there's already a read queue, just add the task to it\n            if (readQueue != null) {\n                return createReleaseable(readQueue, options);\n            }\n            // Create a new read queue\n            readQueue = new PQueue({\n                concurrency: options.concurrency,\n                autoStart: false\n            });\n            const localReadQueue = readQueue;\n            // Add the task to the read queue\n            const readPromise = createReleaseable(readQueue, options);\n            void masterQueue.add(async () => {\n                // Start the task only once the master queue has completed processing\n                // any previous tasks\n                localReadQueue.start();\n                // Once all the tasks in the read queue have completed, remove it so\n                // that the next read lock will occur after any write locks that were\n                // started in the interim\n                await localReadQueue.onIdle()\n                    .then(() => {\n                    if (readQueue === localReadQueue) {\n                        readQueue = null;\n                    }\n                });\n            });\n            return readPromise;\n        },\n        async writeLock() {\n            // Remove the read queue reference, so that any later read locks will be\n            // added to a new queue that starts after this write lock has been\n            // released\n            readQueue = null;\n            return createReleaseable(masterQueue, options);\n        }\n    };\n};\nconst defaultOptions = {\n    name: 'lock',\n    concurrency: Infinity,\n    timeout: 84600000,\n    singleProcess: false\n};\nexport default function createMortice(options) {\n    const opts = Object.assign({}, defaultOptions, options);\n    if (implementation == null) {\n        implementation = impl(opts);\n        if (implementation.isWorker !== true) {\n            // we are master, set up worker requests\n            implementation.addEventListener('requestReadLock', (event) => {\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].readLock()\n                    .then(async (release) => event.data.handler().finally(() => { release(); }));\n            });\n            implementation.addEventListener('requestWriteLock', async (event) => {\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].writeLock()\n                    .then(async (release) => event.data.handler().finally(() => { release(); }));\n            });\n        }\n    }\n    if (mutexes[opts.name] == null) {\n        mutexes[opts.name] = createMutex(opts.name, opts);\n    }\n    return mutexes[opts.name];\n}\n//# sourceMappingURL=index.js.map","import mortice from 'mortice'\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nexport function createLock (repoOwner = false) {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n","import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n","\n/**\n * @param {string} [path]\n */\nexport function toPathComponents (path = '') {\n  // split on / unless escaped with \\\n  return (path\n    .trim()\n    .match(/([^\\\\^/]|\\\\\\/)+/g) || [])\n    .filter(Boolean)\n}\n","import { loadMfsRoot } from './with-mfs-root.js'\nimport { toPathComponents } from './to-path-components.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\nconst IPFS_PREFIX = 'ipfs'\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport const toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options)\n\n  /** @type {MfsPath} */\n  // @ts-expect-error fields get set later\n  let output = {\n    entryType: 'file'\n  }\n\n  let ipfsPath = ''\n\n  if (CID.asCID(path)) {\n    ipfsPath = `/ipfs/${path}`\n  } else {\n    ipfsPath = path.toString()\n  }\n\n  ipfsPath = ipfsPath.trim()\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/')\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH')\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  const pathComponents = toPathComponents(ipfsPath)\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n    }\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n\n    // @ts-expect-error fields being set\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options)\n\n    output.cid = res.cid\n    output.mfsPath = `/ipfs/${res.path}`\n    output.entryType = res.type\n    output.content = res.content\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs\n    }\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  output.exists = Boolean(output.cid)\n\n  return output\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n","import { walkPath } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nexport async function toTrail (context, path) {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n","import { CID } from 'multiformats/cid'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n","import { murmur3128 } from '@multiformats/murmur3'\n\nexport const hamtHashCode = murmur3128.code\nexport const hamtBucketBits = 8\n\n/**\n * @param {Uint8Array} buf\n */\nexport async function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .subarray(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n","import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { persist } from './persist.js'\nimport { createHAMT, Bucket } from 'hamt-sharding'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nexport class Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport class DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport {\n  Bucket,\n  createHAMT\n} from 'hamt-sharding'\nimport { DirSharded } from './dir-sharded.js'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport last from 'it-last'\nimport { CID } from 'multiformats/cid'\nimport {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} from './hamt-constants.js'\n\nconst log = logger('ipfs:mfs:core:utils:hamt-utils')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {object} options\n * @param {PBNode} options.parent\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {string} options.hashAlg\n */\nexport const updateHamtDirectory = async (context, links, bucket, options) => {\n  if (!options.parent.Data) {\n    throw new Error('Could not update HAMT directory because parent had no data')\n  }\n\n  // update parent with new bit field\n  const data = Uint8Array.from(bucket._children.bitField().reverse())\n  const node = UnixFS.unmarshal(options.parent.Data)\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mode: node.mode,\n    mtime: node.mtime\n  })\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const parent = {\n    Data: dir.marshal(),\n    Links: links.sort((a, b) => (a.Name || '').localeCompare(b.Name || ''))\n  }\n  const buf = dagPB.encode(parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: parent,\n    cid,\n    size: links.reduce((sum, link) => sum + (link.Tsize || 0), buf.length)\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} rootBucket\n * @param {Bucket<any>} parentBucket\n * @param {number} positionAtParent\n */\nexport const recreateHamtLevel = async (context, links, rootBucket, parentBucket, positionAtParent) => {\n  // recreate this level of the HAMT\n  const bucket = new Bucket({\n    hash: rootBucket._options.hash,\n    bits: rootBucket._options.bits\n  }, parentBucket, positionAtParent)\n  parentBucket._putObjectAt(positionAtParent, bucket)\n\n  await addLinksToHamtBucket(context, links, bucket, rootBucket)\n\n  return bucket\n}\n\n/**\n * @param {PBLink[]} links\n */\nexport const recreateInitialHamtLevel = async (links) => {\n  const bucket = createHAMT({\n    hashFn: hamtHashFn,\n    bits: hamtBucketBits\n  })\n\n  // populate sub bucket but do not recurse as we do not want to pull whole shard in\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        const pos = parseInt(linkName, 16)\n\n        const subBucket = new Bucket({\n          hash: bucket._options.hash,\n          bits: bucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        return Promise.resolve()\n      }\n\n      return bucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n\n  return bucket\n}\n\n/**\n * @param {MfsContext} context\n * @param {PBLink[]} links\n * @param {Bucket<any>} bucket\n * @param {Bucket<any>} rootBucket\n */\nexport const addLinksToHamtBucket = async (context, links, bucket, rootBucket) => {\n  await Promise.all(\n    links.map(async link => {\n      const linkName = (link.Name || '')\n\n      if (linkName.length === 2) {\n        log('Populating sub bucket', linkName)\n        const pos = parseInt(linkName, 16)\n        const block = await context.repo.blocks.get(link.Hash)\n        const node = dagPB.decode(block)\n\n        const subBucket = new Bucket({\n          hash: rootBucket._options.hash,\n          bits: rootBucket._options.bits\n        }, bucket, pos)\n        bucket._putObjectAt(pos, subBucket)\n\n        await addLinksToHamtBucket(context, node.Links, subBucket, rootBucket)\n\n        return Promise.resolve()\n      }\n\n      return rootBucket.put(linkName.substring(2), {\n        size: link.Tsize,\n        cid: link.Hash\n      })\n    })\n  )\n}\n\n/**\n * @param {number} position\n */\nexport const toPrefix = (position) => {\n  return position\n    .toString(16)\n    .toUpperCase()\n    .padStart(2, '0')\n    .substring(0, 2)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} fileName\n * @param {PBNode} rootNode\n */\nexport const generatePath = async (context, fileName, rootNode) => {\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(rootNode.Links)\n  const position = await rootBucket._findNewBucketAndPos(fileName)\n\n  // the path to the root bucket\n  /** @type {{ bucket: Bucket<any>, prefix: string, node?: PBNode }[]} */\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n  let currentBucket = position.bucket\n\n  while (currentBucket !== rootBucket) {\n    path.push({\n      bucket: currentBucket,\n      prefix: toPrefix(currentBucket._posAtParent)\n    })\n\n    // @ts-expect-error - only the root bucket's parent will be undefined\n    currentBucket = currentBucket._parent\n  }\n\n  path.reverse()\n  path[0].node = rootNode\n\n  // load PbNode for each path segment\n  for (let i = 0; i < path.length; i++) {\n    const segment = path[i]\n\n    if (!segment.node) {\n      throw new Error('Could not generate HAMT path')\n    }\n\n    // find prefix in links\n    const link = segment.node.Links\n      .filter(link => (link.Name || '').substring(0, 2) === segment.prefix)\n      .pop()\n\n    // entry was not in shard\n    if (!link) {\n      // reached bottom of tree, file will be added to the current bucket\n      log(`Link ${segment.prefix}${fileName} will be added`)\n      // return path\n      continue\n    }\n\n    // found entry\n    if (link.Name === `${segment.prefix}${fileName}`) {\n      log(`Link ${segment.prefix}${fileName} will be replaced`)\n      // file already existed, file will be added to the current bucket\n      // return path\n      continue\n    }\n\n    // found subshard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const node = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[i + 1]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n\n      await recreateHamtLevel(context, node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n      const position = await rootBucket._findNewBucketAndPos(fileName)\n\n      // i--\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: node\n      })\n\n      continue\n    }\n\n    const nextSegment = path[i + 1]\n\n    // add intermediate links to bucket\n    await addLinksToHamtBucket(context, node.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = node\n  }\n\n  await rootBucket.put(fileName, true)\n\n  path.reverse()\n\n  return {\n    rootBucket,\n    path\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ name: string, size: number, cid: CID }[]} contents\n * @param {object} [options]\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nexport const createShard = async (context, contents, options = {}) => {\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mtime: options.mtime,\n    mode: options.mode\n  }, options)\n\n  for (let i = 0; i < contents.length; i++) {\n    await shard._bucket.put(contents[i].name, {\n      size: contents[i].size,\n      cid: contents[i].cid\n    })\n  }\n\n  const res = await last(shard.flush(context.repo.blocks))\n\n  if (!res) {\n    throw new Error('Flushing shard yielded no result')\n  }\n\n  return res\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { DirSharded } from './dir-sharded.js'\nimport {\n  updateHamtDirectory,\n  recreateHamtLevel,\n  recreateInitialHamtLevel,\n  createShard,\n  toPrefix,\n  addLinksToHamtBucket\n} from './hamt-utils.js'\nimport errCode from 'err-code'\nimport last from 'it-last'\n\nconst log = logger('ipfs:mfs:core:utils:add-link')\n\n/**\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {CID} [options.parentCid]\n * @param {PBNode} [options.parent]\n */\nexport async function addLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID')\n    }\n\n    if (parentCid.code !== dagPB.code) {\n      throw errCode(new Error('Unsupported codec. Only DAG-PB is supported'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.cid) {\n    throw errCode(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!options.size && options.size !== 0) {\n    throw errCode(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addLink'), 'ERR_INVALID_PARENT')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log('Adding link to sharded directory')\n\n    return addToShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  if (parent.Links.length >= options.shardSplitThreshold) {\n    log('Converting directory to sharded directory')\n\n    return convertToShardedDirectory(context, {\n      ...options,\n      parent,\n      mtime: meta.mtime,\n      mode: meta.mode\n    })\n  }\n\n  log(`Adding ${options.name} (${options.cid}) to regular directory`)\n\n  return addToDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst convertToShardedDirectory = async (context, options) => {\n  const result = await createShard(context, options.parent.Links.map(link => ({\n    name: (link.Name || ''),\n    size: link.Tsize || 0,\n    cid: link.Hash\n  })).concat({\n    name: options.name,\n    size: options.size,\n    cid: options.cid\n  }), options)\n\n  log(`Converted directory to sharded directory ${result.cid}`)\n\n  return result\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {Mtime} [options.mtime]\n * @param {number} [options.mode]\n */\nconst addToDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  const parentLinks = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n  parentLinks.push({\n    Name: options.name,\n    Tsize: options.size,\n    Hash: options.cid\n  })\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addToDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  let data\n  if (node.mtime) {\n    // Update mtime if previously set\n    const ms = Date.now()\n    const secs = Math.floor(ms / 1000)\n\n    node.mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n\n    data = node.marshal()\n  } else {\n    data = options.parent.Data\n  }\n  options.parent = dagPB.prepare({\n    Data: data,\n    Links: parentLinks\n  })\n\n  // Persist the new parent PbNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const buf = dagPB.encode(options.parent)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    node: options.parent,\n    cid,\n    size: buf.length\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst addToShardedDirectory = async (context, options) => {\n  const {\n    shard, path\n  } = await addFileToShardedDirectory(context, options)\n  const result = await last(shard.flush(context.repo.blocks))\n\n  if (!result) {\n    throw new Error('No result from flushing shard')\n  }\n\n  const block = await context.repo.blocks.get(result.cid)\n  const node = dagPB.decode(block)\n\n  // we have written out the shard, but only one sub-shard will have been written so replace it in the original shard\n  const parentLinks = options.parent.Links.filter((link) => {\n    // TODO vmx 2021-03-31: Check that there cannot be multiple ones matching\n    // Remove the old link\n    return (link.Name || '').substring(0, 2) !== path[0].prefix\n  })\n\n  const newLink = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === path[0].prefix)\n\n  if (!newLink) {\n    throw new Error(`No link found with prefix ${path[0].prefix}`)\n  }\n\n  parentLinks.push(newLink)\n\n  return updateHamtDirectory(context, parentLinks, path[0].bucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {object} options\n * @param {CID} options.cid\n * @param {string} options.name\n * @param {number} options.size\n * @param {PBNode} options.parent\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n */\nconst addFileToShardedDirectory = async (context, options) => {\n  const file = {\n    name: options.name,\n    cid: options.cid,\n    size: options.size\n  }\n\n  if (!options.parent.Data) {\n    throw errCode(new Error('Parent node with no data passed to addFileToShardedDirectory'), 'ERR_INVALID_PARENT')\n  }\n\n  // start at the root bucket and descend, loading nodes as we go\n  const rootBucket = await recreateInitialHamtLevel(options.parent.Links)\n  const node = UnixFS.unmarshal(options.parent.Data)\n\n  const shard = new DirSharded({\n    root: true,\n    dir: true,\n    parent: undefined,\n    parentKey: undefined,\n    path: '',\n    dirty: true,\n    flat: false,\n    mode: node.mode\n  }, options)\n  shard._bucket = rootBucket\n\n  if (node.mtime) {\n    // update mtime if previously set\n    shard.mtime = {\n      secs: Math.round(Date.now() / 1000)\n    }\n  }\n\n  // load subshards until the bucket & position no longer changes\n  const position = await rootBucket._findNewBucketAndPos(file.name)\n  const path = toBucketPath(position)\n  path[0].node = options.parent\n  let index = 0\n\n  while (index < path.length) {\n    const segment = path[index]\n    index++\n    const node = segment.node\n\n    if (!node) {\n      throw new Error('Segment had no node')\n    }\n\n    const link = node.Links\n      .find(link => (link.Name || '').substring(0, 2) === segment.prefix)\n\n    if (!link) {\n      // prefix is new, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be added`)\n      index = path.length\n\n      break\n    }\n\n    if (link.Name === `${segment.prefix}${file.name}`) {\n      // file already existed, file will be added to the current bucket\n      log(`Link ${segment.prefix}${file.name} will be replaced`)\n      index = path.length\n\n      break\n    }\n\n    if ((link.Name || '').length > 2) {\n      // another file had the same prefix, will be replaced with a subshard\n      log(`Link ${link.Name} ${link.Hash} will be replaced with a subshard`)\n      index = path.length\n\n      break\n    }\n\n    // load sub-shard\n    log(`Found subshard ${segment.prefix}`)\n    const block = await context.repo.blocks.get(link.Hash)\n    const subShard = dagPB.decode(block)\n\n    // subshard hasn't been loaded, descend to the next level of the HAMT\n    if (!path[index]) {\n      log(`Loaded new subshard ${segment.prefix}`)\n      await recreateHamtLevel(context, subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16))\n\n      const position = await rootBucket._findNewBucketAndPos(file.name)\n\n      path.push({\n        bucket: position.bucket,\n        prefix: toPrefix(position.pos),\n        node: subShard\n      })\n\n      break\n    }\n\n    const nextSegment = path[index]\n\n    // add next levels worth of links to bucket\n    await addLinksToHamtBucket(context, subShard.Links, nextSegment.bucket, rootBucket)\n\n    nextSegment.node = subShard\n  }\n\n  // finally add the new file into the shard\n  await shard._bucket.put(file.name, {\n    size: file.size,\n    cid: file.cid\n  })\n\n  return {\n    shard, path\n  }\n}\n\n/**\n * @param {{ pos: number, bucket: Bucket }} position\n * @returns {{ bucket: Bucket, prefix: string, node?: PBNode }[]}\n */\nconst toBucketPath = (position) => {\n  const path = [{\n    bucket: position.bucket,\n    prefix: toPrefix(position.pos)\n  }]\n\n  let bucket = position.bucket._parent\n  let positionInBucket = position.bucket._posAtParent\n\n  while (bucket) {\n    path.push({\n      bucket,\n      prefix: toPrefix(positionInBucket)\n    })\n\n    positionInBucket = bucket._posAtParent\n    bucket = bucket._parent\n  }\n\n  path.reverse()\n\n  return path\n}\n","import { logger } from '@libp2p/logger'\nimport { addLink } from './add-link.js'\nimport {\n  decode\n} from '@ipld/dag-pb'\n\nconst log = logger('ipfs:mfs:utils:update-tree')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree (context, trail, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n","import { logger } from '@libp2p/logger'\nimport {\n  MFS_ROOT_KEY\n} from '../../../utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:utils:update-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport async function updateMfsRoot (context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n","import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { createNode } from './utils/create-node.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { addLink } from './utils/add-link.js'\nimport { loadMfsRoot } from './utils/with-mfs-root.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:mkdir')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} flush\n * @property {number} [mode]\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000,\n  flush: true\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMkdir (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mkdir\"]}\n   */\n  async function mfsMkdir (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    if (!path) {\n      throw new Error('no path given to Mkdir')\n    }\n\n    path = path.trim()\n\n    if (path === '/') {\n      if (opts.parents) {\n        return\n      }\n\n      throw errCode(new Error('cannot create directory \\'/\\': Already exists'), 'ERR_INVALID_PATH')\n    }\n\n    if (path.substring(0, 1) !== '/') {\n      throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n    }\n\n    log(`Creating ${path}`)\n\n    const pathComponents = toPathComponents(path)\n\n    if (pathComponents[0] === 'ipfs') {\n      throw errCode(new Error(\"path cannot have the prefix 'ipfs'\"), 'ERR_INVALID_PATH')\n    }\n\n    const root = await loadMfsRoot(context, opts)\n    let parent\n    const trail = []\n    const emptyDir = await createNode(context, 'directory', opts)\n\n    // make sure the containing folder exists, creating it if necessary\n    for (let i = 0; i <= pathComponents.length; i++) {\n      const subPathComponents = pathComponents.slice(0, i)\n      const subPath = `/ipfs/${root}/${subPathComponents.join('/')}`\n\n      try {\n        parent = await exporter(subPath, context.repo.blocks)\n\n        if (parent.type !== 'file' && parent.type !== 'directory') {\n          throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n        }\n\n        if (i === pathComponents.length) {\n          if (opts.parents) {\n            return\n          }\n\n          throw errCode(new Error('file already exists'), 'ERR_ALREADY_EXISTS')\n        }\n\n        trail.push({\n          name: parent.name,\n          cid: parent.cid\n        })\n      } catch (/** @type {any} */ err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          if (i < pathComponents.length && !opts.parents) {\n            throw errCode(new Error(`Intermediate directory path ${subPath} does not exist, use the -p flag to create it`), 'ERR_NOT_FOUND')\n          }\n\n          // add the intermediate directory\n          await addEmptyDir(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, opts)\n        } else {\n          throw err\n        }\n      }\n    }\n\n    // add an empty dir to the last path component\n    // await addEmptyDir(context, pathComponents[pathComponents.length - 1], emptyDir, parent, trail)\n\n    // update the tree from the leaf to the root\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsMkdir)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} childName\n * @param {{ cid: CID, node?: PBNode }} emptyDir\n * @param {{ cid?: CID, node?: PBNode }} parent\n * @param {{ name: string, cid: CID }[]} trail\n * @param {DefaultOptions} options\n */\nconst addEmptyDir = async (context, childName, emptyDir, parent, trail, options) => {\n  log(`Adding empty dir called ${childName} to ${parent.cid}`)\n\n  const result = await addLink(context, {\n    parent: parent.node,\n    parentCid: parent.cid,\n    // TODO vmx 2021-03-09: Remove the usage of size completely\n    size: 0,\n    cid: emptyDir.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  trail[trail.length - 1].cid = result.cid\n\n  trail.push({\n    name: childName,\n    cid: emptyDir.cid\n  })\n}\n","import { createMkdir } from './mkdir.js'\nimport { createStat } from './stat.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { addLink } from './utils/add-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport mergeOpts from 'merge-options'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:cp')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createCp (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"cp\"]}\n   */\n  async function mfsCp (from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(from)) {\n      from = [from]\n    }\n\n    const sources = await Promise.all(\n      from.map((/** @type {CID | string} */ path) => toMfsPath(context, path, options))\n    )\n    let destination = await toMfsPath(context, to, options)\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS')\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists)\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS')\n    }\n\n    const destinationIsDirectory = isDirectory(destination)\n\n    if (destination.exists) {\n      log('Destination exists')\n\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS')\n      }\n    } else {\n      log('Destination does not exist')\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n        }\n\n        await createMkdir(context)(destination.path, options)\n        destination = await toMfsPath(context, destination.path, options)\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`\n\n        try {\n          await createStat(context)(parentFolder, options)\n        } catch (/** @type {any} */ err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n          }\n\n          await createMkdir(context)(parentFolder, options)\n          destination = await toMfsPath(context, destination.path, options)\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory\n    const trail = await toTrail(context, destinationPath)\n\n    if (sources.length === 1) {\n      const source = sources.pop()\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS')\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name\n\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`)\n\n      return copyToFile(context, source, destinationName, trail, options)\n    }\n\n    log('Multiple sources, wrapping in a directory')\n    return copyToDirectory(context, sources, destination, trail, options)\n  }\n\n  return withTimeoutOption(mfsCp)\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = (destination) => {\n  return destination.unixfs &&\n    destination.unixfs.type &&\n    destination.unixfs.type.includes('directory')\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop()\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS')\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options)\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent)\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n\n    destination = await addSourceToParent(context, source, source.name, destination, options)\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid)\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.node = node\n  parent.cid = cid\n  parent.size = size\n\n  return parent\n}\n","\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { logger } from '@libp2p/logger'\nimport { UnixFS } from 'ipfs-unixfs'\nimport {\n  generatePath,\n  updateHamtDirectory\n} from './hamt-utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:core:utils:remove-link')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('hamt-sharding').Bucket<any>} Bucket\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} RemoveLinkOptions\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {CID} [parentCid]\n * @property {PBNode} [parent]\n *\n * @typedef {object} RemoveLinkOptionsInternal\n * @property {string} name\n * @property {number} shardSplitThreshold\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {boolean} flush\n * @property {PBNode} parent\n */\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptions} options\n */\nexport async function removeLink (context, options) {\n  let parent = options.parent\n\n  if (options.parentCid) {\n    const parentCid = CID.asCID(options.parentCid)\n    if (parentCid === null) {\n      throw errCode(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID')\n    }\n\n    log(`Loading parent node ${parentCid}`)\n    const block = await context.repo.blocks.get(parentCid)\n    parent = dagPB.decode(block)\n  }\n\n  if (!parent) {\n    throw errCode(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT')\n  }\n\n  if (!options.name) {\n    throw errCode(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME')\n  }\n\n  if (!parent.Data) {\n    throw errCode(new Error('Parent node had no data'), 'ERR_INVALID_NODE')\n  }\n\n  const meta = UnixFS.unmarshal(parent.Data)\n\n  if (meta.type === 'hamt-sharded-directory') {\n    log(`Removing ${options.name} from sharded directory`)\n\n    return removeFromShardedDirectory(context, {\n      ...options,\n      parent\n    })\n  }\n\n  log(`Removing link ${options.name} regular directory`)\n\n  return removeFromDirectory(context, {\n    ...options,\n    parent\n  })\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromDirectory = async (context, options) => {\n  // Remove existing link if it exists\n  options.parent.Links = options.parent.Links.filter((link) => {\n    return link.Name !== options.name\n  })\n\n  const parentBlock = await dagPB.encode(options.parent)\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const hash = await hasher.digest(parentBlock)\n  const parentCid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  await context.repo.blocks.put(parentCid, parentBlock)\n\n  log(`Updated regular directory ${parentCid}`)\n\n  return {\n    node: options.parent,\n    cid: parentCid\n  }\n}\n\n/**\n * @param {MfsContext} context\n * @param {RemoveLinkOptionsInternal} options\n */\nconst removeFromShardedDirectory = async (context, options) => {\n  const {\n    rootBucket, path\n  } = await generatePath(context, options.name, options.parent)\n\n  await rootBucket.del(options.name)\n\n  const {\n    node\n  } = await updateShard(context, path, options.name, options)\n\n  return updateHamtDirectory(context, node.Links, rootBucket, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {{ bucket: Bucket, prefix: string, node?: PBNode }[]} positions\n * @param {string} name\n * @param {RemoveLinkOptionsInternal} options\n * @returns {Promise<{ node: PBNode, cid: CID, size: number }>}\n */\nconst updateShard = async (context, positions, name, options) => {\n  const last = positions.pop()\n\n  if (!last) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const {\n    bucket,\n    prefix,\n    node\n  } = last\n\n  if (!node) {\n    throw errCode(new Error('Could not find parent'), 'EINVALIDPARENT')\n  }\n\n  const link = node.Links\n    .find(link => (link.Name || '').substring(0, 2) === prefix)\n\n  if (!link) {\n    throw errCode(new Error(`No link found with prefix ${prefix} for file ${name}`), 'ERR_NOT_FOUND')\n  }\n\n  if (link.Name === `${prefix}${name}`) {\n    log(`Removing existing link ${link.Name}`)\n\n    const links = node.Links.filter((nodeLink) => {\n      return nodeLink.Name !== link.Name\n    })\n\n    await bucket.del(name)\n\n    return updateHamtDirectory(context, links, bucket, options)\n  }\n\n  log(`Descending into sub-shard ${link.Name} for ${prefix}${name}`)\n\n  const result = await updateShard(context, positions, name, options)\n\n  let cid = result.cid\n  let size = result.size\n  let newName = prefix\n\n  if (result.node.Links.length === 1) {\n    log(`Removing subshard for ${prefix}`)\n\n    // convert shard back to normal dir\n    const link = result.node.Links[0]\n\n    newName = `${prefix}${(link.Name || '').substring(2)}`\n    cid = link.Hash\n    size = link.Tsize || 0\n  }\n\n  log(`Updating shard ${prefix} with name ${newName}`)\n\n  return updateShardParent(context, bucket, node, prefix, newName, size, cid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {Bucket} bucket\n * @param {PBNode} parent\n * @param {string} oldName\n * @param {string} newName\n * @param {number} size\n * @param {CID} cid\n * @param {RemoveLinkOptionsInternal} options\n */\nconst updateShardParent = (context, bucket, parent, oldName, newName, size, cid, options) => {\n  // Remove existing link if it exists\n  const parentLinks = parent.Links.filter((link) => {\n    return link.Name !== oldName\n  })\n  parentLinks.push({\n    Name: newName,\n    Tsize: size,\n    Hash: cid\n  })\n\n  return updateHamtDirectory(context, parentLinks, bucket, options)\n}\n","import errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { removeLink } from './utils/remove-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} recursive\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRm (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"rm\"]}\n   */\n  async function mfsRm (paths, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(paths)) {\n      paths = [paths]\n    }\n\n    const sources = await Promise.all(\n      paths.map(path => toMfsPath(context, path, options))\n    )\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === '/') {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  }\n\n  return withTimeoutOption(mfsRm)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {DefaultOptions} options\n */\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path, options)\n  const trail = await toTrail(context, mfsPath.mfsPath)\n  const child = trail[trail.length - 1]\n  trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { pipe } from 'it-pipe'\nimport { importer } from 'ipfs-unixfs-importer'\nimport { recursive } from 'ipfs-unixfs-exporter'\nimport last from 'it-last'\nimport { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport { persist } from './utils/persist.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('./').MfsContext} MfsContext\n *\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {boolean} recursive\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  recursive: false\n}\n\n/**\n * @param {string} mode\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction calculateModification (mode, originalMode, isDirectory) {\n  let modification = 0\n\n  if (mode.includes('x') || (mode.includes('X') && (isDirectory || (originalMode & 0o1 || originalMode & 0o10 || originalMode & 0o100)))) {\n    modification += 1\n  }\n\n  if (mode.includes('w')) {\n    modification += 2\n  }\n\n  if (mode.includes('r')) {\n    modification += 4\n  }\n\n  return modification\n}\n\n/**\n * @param {string} references\n * @param {number} modification\n */\nfunction calculateUGO (references, modification) {\n  let ugo = 0\n\n  if (references.includes('u')) {\n    ugo += (modification << 6)\n  }\n\n  if (references.includes('g')) {\n    ugo += (modification << 3)\n  }\n\n  if (references.includes('o')) {\n    ugo += (modification)\n  }\n\n  return ugo\n}\n\n/**\n * @param {string} references\n * @param {string} mode\n * @param {number} modification\n */\nfunction calculateSpecial (references, mode, modification) {\n  if (mode.includes('t')) {\n    modification += parseInt('1000', 8)\n  }\n\n  if (mode.includes('s')) {\n    if (references.includes('u')) {\n      modification += parseInt('4000', 8)\n    }\n\n    if (references.includes('g')) {\n      modification += parseInt('2000', 8)\n    }\n  }\n\n  return modification\n}\n\n/**\n * https://en.wikipedia.org/wiki/Chmod#Symbolic_modes\n *\n * @param {string} input\n * @param {number} originalMode\n * @param {boolean} isDirectory\n */\nfunction parseSymbolicMode (input, originalMode, isDirectory) {\n  if (!originalMode) {\n    originalMode = 0\n  }\n\n  const match = input.match(/^(u?g?o?a?)(-?\\+?=?)?(r?w?x?X?s?t?)$/)\n\n  if (!match) {\n    throw new Error(`Invalid file mode: ${input}`)\n  }\n\n  let [\n    ,\n    references,\n    operator,\n    mode\n  ] = match\n\n  if (references === 'a' || !references) {\n    references = 'ugo'\n  }\n\n  let modification = calculateModification(mode, originalMode, isDirectory)\n  modification = calculateUGO(references, modification)\n  modification = calculateSpecial(references, mode, modification)\n\n  if (operator === '=') {\n    if (references.includes('u')) {\n      // blank u bits\n      originalMode = originalMode & parseInt('7077', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('g')) {\n      // blank g bits\n      originalMode = originalMode & parseInt('7707', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    if (references.includes('o')) {\n      // blank o bits\n      originalMode = originalMode & parseInt('7770', 8)\n\n      // or them together\n      originalMode = originalMode | modification\n    }\n\n    return originalMode\n  }\n\n  if (operator === '+') {\n    return modification | originalMode\n  }\n\n  if (operator === '-') {\n    return modification ^ originalMode\n  }\n\n  return originalMode\n}\n\n/**\n * @param {string | InstanceType<typeof window.String> | number} mode\n * @param {UnixFS} metadata\n * @returns {number}\n */\nfunction calculateMode (mode, metadata) {\n  if (mode instanceof String || typeof mode === 'string') {\n    const strMode = `${mode}`\n\n    if (strMode.match(/^\\d+$/g)) {\n      mode = parseInt(strMode, 8)\n    } else {\n      mode = 0 + strMode.split(',').reduce((curr, acc) => {\n        return parseSymbolicMode(acc, curr, metadata.isDirectory())\n      }, metadata.mode || 0)\n    }\n  }\n\n  return mode\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createChmod (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"chmod\"]}\n   */\n  async function mfsChmod (path, mode, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name\n    } = await toMfsPath(context, path, opts)\n\n    if (cid.code !== dagPB.code) {\n      throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n    }\n\n    if (opts.recursive) {\n      // recursively export from root CID, change perms of each entry then reimport\n      // but do not reimport files, only manipulate dag-pb nodes\n      const root = await pipe(\n        async function * () {\n          for await (const entry of recursive(cid, context.repo.blocks)) {\n            if (entry.type !== 'file' && entry.type !== 'directory') {\n              throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n            }\n\n            entry.unixfs.mode = calculateMode(mode, entry.unixfs)\n\n            const node = dagPB.prepare({\n              Data: entry.unixfs.marshal(),\n              Links: entry.node.Links\n            })\n\n            yield {\n              path: entry.path,\n              content: node\n            }\n          }\n        },\n        // @ts-expect-error we account for the incompatible source type with our custom dag builder below\n        (source) => importer(source, context.repo.blocks, {\n          ...opts,\n          pin: false,\n          dagBuilder: async function * (source, block, opts) {\n            for await (const entry of source) {\n              yield async function () {\n                /** @type {PBNode} */\n                // @ts-expect-error - cannot derive type\n                const node = entry.content\n\n                const buf = dagPB.encode(node)\n                const cid = await persist(buf, block, opts)\n\n                if (!node.Data) {\n                  throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n                }\n\n                const unixfs = UnixFS.unmarshal(node.Data)\n\n                return {\n                  cid,\n                  size: buf.length,\n                  path: entry.path,\n                  unixfs\n                }\n              }\n            }\n          }\n        }),\n        (nodes) => last(nodes)\n      )\n\n      if (!root) {\n        throw errCode(new Error(`Could not chmod ${path}`), 'ERR_COULD_NOT_CHMOD')\n      }\n\n      // remove old path from mfs\n      await createRm(context)(path, opts)\n\n      // add newly created tree to mfs at path\n      await createCp(context)(`/ipfs/${root.cid}`, path, opts)\n\n      return\n    }\n\n    const block = await context.repo.blocks.get(cid)\n    const node = dagPB.decode(block)\n\n    if (!node.Data) {\n      throw errCode(new Error(`${cid} had no data`), 'ERR_INVALID_NODE')\n    }\n\n    const metadata = UnixFS.unmarshal(node.Data)\n    metadata.mode = calculateMode(mode, metadata)\n    const updatedBlock = dagPB.encode({\n      Data: metadata.marshal(),\n      Links: node.Links\n    })\n\n    const hashAlg = opts.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n    const hash = await hasher.digest(updatedBlock)\n    const updatedCid = CID.create(opts.cidVersion, dagPB.code, hash)\n\n    if (opts.flush) {\n      await context.repo.blocks.put(updatedCid, updatedBlock)\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = CID.decode(parent.cid.bytes)\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: opts.flush,\n      // TODO vmx 2021-03-29: decide on the API, whether it should be a `hashAlg` or `hasher`\n      hashAlg,\n      cidVersion: cid.version,\n      shardSplitThreshold: Infinity\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, opts)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, opts)\n  }\n\n  return withTimeoutOption(mfsChmod)\n}\n","import { createStat } from './stat.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {}\n\n/**\n * @param {MfsContext} context\n */\nexport function createFlush (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"flush\"]}\n   */\n  async function mfsFlush (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    const { cid } = await createStat(context)(path, options)\n\n    return cid\n  }\n\n  return withTimeoutOption(mfsFlush)\n}\n","import { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await createCp(context)(from, to, opts)\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n","import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPB.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPB.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n","import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n    return browserStreamToIt(content.stream())\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n","import { logger } from '@libp2p/logger'\nimport { importer } from 'ipfs-unixfs-importer'\nimport {\n  decode\n} from '@ipld/dag-pb'\nimport { createStat } from './stat.js'\nimport { createMkdir } from './mkdir.js'\nimport { addLink } from './utils/add-link.js'\nimport mergeOpts from 'merge-options'\nimport { createLock } from './utils/create-lock.js'\nimport { toAsyncIterator } from './utils/to-async-iterator.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { toPathComponents } from './utils/to-path-components.js'\nimport { toTrail } from './utils/to-trail.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport errCode from 'err-code'\nimport {\n  MFS_MAX_CHUNK_SIZE\n} from '../../utils.js'\nimport last from 'it-last'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport {\n  parseMode,\n  parseMtime\n} from 'ipfs-unixfs'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:write')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: Infinity, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createWrite (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"write\"]}\n   */\n  async function mfsWrite (path, content, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    /** @type {AsyncIterable<Uint8Array>} */\n    let source\n    /** @type {MfsPath} */\n    let destination\n    /** @type {MfsPath} */\n    let parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-expect-error - parent may be undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-expect-error\n    if (source == null) {\n      throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE')\n    }\n\n    // @ts-expect-error\n    if (destination == null) {\n      throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION')\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (destination.entryType !== 'file') {\n      throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n\n    if (fileName == null) {\n      throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST')\n    }\n\n    let parentExists = false\n\n    try {\n      await createStat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (/** @type {any} */ err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await createMkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (!parent.type || !parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentBlock = await context.repo.blocks.get(parent.cid)\n    const parentNode = decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  /** @type {number | undefined} */\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = parseMode(options.mode)\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  /** @type {import('ipfs-unixfs').Mtime | undefined} */\n  let mtime\n\n  if (options.mtime != null) {\n    mtime = parseMtime(options.mtime)\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.repo.blocks, {\n    progress: options.progress,\n    hasher,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType\n  }))\n\n  if (!result) {\n    throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE')\n  }\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.subarray(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  async function * _asyncZeroes () {\n    while (true) {\n      yield buf\n    }\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count)\n}\n\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n","import { exporter } from 'ipfs-unixfs-exporter'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport map from 'it-map'\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = (fsEntry) => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  }\n\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode\n    output.mtime = fsEntry.unixfs.mtime\n  }\n\n  return output\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function * mfsLs (path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options)\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield * map(fsEntry.content(options), toOutput)\n\n      return\n    }\n\n    // single file/node\n    yield toOutput(fsEntry)\n  }\n\n  return withTimeoutOption(mfsLs)\n}\n","import { createLock } from './utils/create-lock.js'\nimport * as isIpfs from 'is-ipfs'\nimport { createStat } from './stat.js'\nimport { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRm } from './rm.js'\nimport { createTouch } from './touch.js'\nimport { createRead } from './read.js'\nimport { createWrite } from './write.js'\nimport { createLs } from './ls.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n *\n * @typedef {object} MfsContext\n * @property {IPFSRepo} repo\n * @property {Multihashes} hashers\n */\n\n/**\n * These operations are read-locked at the function level and will execute simultaneously\n *\n * @type {Record<string, any>}\n */\nconst readOperations = {\n  stat: createStat\n}\n\n/**\n * These operations are locked at the function level and will execute in series\n *\n * @type {Record<string, any>}\n */\nconst writeOperations = {\n  chmod: createChmod,\n  cp: createCp,\n  flush: createFlush,\n  mkdir: createMkdir,\n  mv: createMv,\n  rm: createRm,\n  touch: createTouch\n}\n\n/**\n * These operations are asynchronous and manage their own locking\n *\n * @type {Record<string, any>}\n */\nconst unwrappedOperations = {\n  write: createWrite,\n  read: createRead,\n  ls: createLs\n}\n\n/**\n * @param {object} arg\n * @param {MfsContext} arg.options\n * @param {*} arg.mfs\n * @param {*} arg.operations\n * @param {*} arg.lock\n */\nconst wrap = ({\n  options, mfs, operations, lock\n}) => {\n  Object.keys(operations).forEach(key => {\n    mfs[key] = lock(operations[key](options))\n  })\n}\n\nconst defaultOptions = {\n  repoOwner: true,\n  repo: null\n}\n\n/**\n * @param {object} options\n * @param {IPFSRepo} options.repo\n * @param {boolean} options.repoOwner\n * @param {Multihashes} options.hashers\n */\nfunction createMfs (options) {\n  const {\n    repoOwner\n  } = Object.assign({}, defaultOptions || {}, options)\n\n  const lock = createLock(repoOwner)\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const readLock = (operation) => {\n    return lock.readLock(operation)\n  }\n\n  /**\n   * @param {(fn: (...args: any) => any) => (...args: any) => any} operation\n   */\n  const writeLock = (operation) => {\n    return lock.writeLock(operation)\n  }\n\n  /** @type {Record<string, any>} */\n  const mfs = {}\n\n  wrap({\n    options, mfs, operations: readOperations, lock: readLock\n  })\n  wrap({\n    options, mfs, operations: writeOperations, lock: writeLock\n  })\n\n  Object.keys(unwrappedOperations).forEach(key => {\n    mfs[key] = unwrappedOperations[key](options)\n  })\n\n  return mfs\n}\n\n/**\n * @param {object} context\n * @param {IPFSRepo} context.repo\n * @param {import('../../types').Preload} context.preload\n * @param {import('..').Options} context.options\n * @param {Multihashes} context.hashers\n * @returns {import('ipfs-core-types/src/files').API}\n */\nexport function createFiles ({ repo, preload, hashers, options: constructorOptions }) {\n  const methods = createMfs({\n    repo,\n    repoOwner: constructorOptions.repoOwner !== false,\n    hashers\n  })\n\n  /**\n   * @param {any} fn\n   */\n  const withPreload = fn => {\n    /**\n     * @param  {...any} args\n     */\n    const wrapped = (...args) => {\n      const paths = args.filter(arg => isIpfs.ipfsPath(arg) || isIpfs.cid(arg))\n\n      if (paths.length) {\n        const options = args[args.length - 1]\n        if (options && options.preload !== false) {\n          paths.forEach(path => preload(path))\n        }\n      }\n\n      return fn(...args)\n    }\n\n    return wrapped\n  }\n\n  return {\n    ...methods,\n    chmod: methods.chmod,\n    cp: withPreload(methods.cp),\n    mkdir: methods.mkdir,\n    stat: withPreload(methods.stat),\n    rm: methods.rm,\n    read: withPreload(methods.read),\n    touch: methods.touch,\n    write: methods.write,\n    mv: withPreload(methods.mv),\n    flush: methods.flush,\n    ls: withPreload(async function * (/** @type {...any} */ ...args) {\n      for await (const file of methods.ls(...args)) {\n        yield { ...file, size: file.size || 0 }\n      }\n    })\n  }\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createExport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"export\"]}\n   */\n  const exportKey = (name, password) =>\n    keychain.exportKey(name, password)\n\n  return withTimeoutOption(exportKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst DEFAULT_KEY_TYPE = 'Ed25519'\nconst DEFAULT_KEY_SIZE = 2048\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createGen ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"gen\"]}\n   */\n  const gen = (name, options = { type: DEFAULT_KEY_TYPE, size: DEFAULT_KEY_SIZE }) => {\n    return keychain.createKey(name, options.type || DEFAULT_KEY_TYPE, options.size || DEFAULT_KEY_SIZE)\n  }\n\n  return withTimeoutOption(gen)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createImport ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"import\"]}\n   */\n  const importKey = (name, pem, password) => {\n    return keychain.importKey(name, pem, password)\n  }\n\n  return withTimeoutOption(importKey)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createInfo ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"info\"]}\n   */\n  const info = (name) => keychain.findKeyByName(name)\n\n  return withTimeoutOption(info)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createList ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"list\"]}\n   */\n  const list = () => keychain.listKeys()\n\n  return withTimeoutOption(list)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRename ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRm ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rm\"]}\n   */\n  const rm = (name) => keychain.removeKey(name)\n\n  return withTimeoutOption(rm)\n}\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @typedef {import('@libp2p/interface-keychain').KeyChain} Keychain\n */\n\nexport class KeyAPI {\n  /**\n   * @param {object} config\n   * @param {Keychain} config.keychain\n   */\n  constructor ({ keychain }) {\n    this.gen = createGen({ keychain })\n    this.list = createList({ keychain })\n    this.rm = createRm({ keychain })\n    this.rename = createRename({ keychain })\n    this.export = createExport({ keychain })\n    this.import = createImport({ keychain })\n    this.info = createInfo({ keychain })\n  }\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid, options)\n\n    return dagPB.decode(block)\n  }\n\n  return withTimeoutOption(get)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"data\"]}\n   */\n  async function data (multihash, options = {}) {\n    const node = await get(multihash, options)\n    return node.Data || new Uint8Array(0)\n  }\n\n  return withTimeoutOption(data)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (/** @type {any} */ _) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLinks ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    switch (cid.code) {\n      case raw.code:\n        return []\n      case dagPB.code:\n        return node.Links\n      case dagCBOR.code:\n      case dagJSON.code:\n        return findLinks(node)\n      default:\n        throw new Error(`Cannot resolve links from codec ${cid.code}`)\n    }\n  }\n\n  return withTimeoutOption(links)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n","import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPB.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAddLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"addLink\"]}\n   */\n  async function addLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Links: node.Links.concat([link])\n    }, options)\n  }\n\n  return withTimeoutOption(addLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createAppendData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    const node = await get(cid, options)\n    const newData = uint8ArrayConcat([node.Data || [], data])\n\n    return put({\n      ...node,\n      Data: newData\n    }, options)\n  }\n\n  return withTimeoutOption(appendData)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createRmLink ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"rmLink\"]}\n   */\n  async function rmLink (cid, link, options = {}) {\n    const node = await get(cid, options)\n    const name = (typeof link === 'string' ? link : link.Name) || ''\n\n    node.Links = node.Links.filter(l => l.Name !== name)\n\n    return put(node, options)\n  }\n\n  return withTimeoutOption(rmLink)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from '../get.js'\nimport { createPut } from '../put.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../../types').Preload} config.preload\n */\nexport function createSetData ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n  const put = createPut({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object/patch').API<{}>[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    const node = await get(cid, options)\n\n    return put({\n      ...node,\n      Data: data\n    }, options)\n  }\n\n  return withTimeoutOption(setData)\n}\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @typedef {import('../../../types').Preload} Preload\n */\n\nexport class ObjectPatchAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, preload }) {\n    this.addLink = createAddLink({ repo, preload })\n    this.appendData = createAppendData({ repo, preload })\n    this.rmLink = createRmLink({ repo, preload })\n    this.setData = createSetData({ repo, preload })\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { ObjectPatchAPI } from './patch/index.js'\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nexport class ObjectAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Preload} config.preload\n   */\n  constructor ({ repo, codecs, preload }) {\n    this.data = createData({ repo, preload })\n    this.get = createGet({ repo, preload })\n    this.links = createLinks({ repo, codecs })\n    this.new = createNew({ repo, preload })\n    this.put = createPut({ repo, preload })\n    this.stat = createStat({ repo, preload })\n    this.patch = new ObjectPatchAPI({ repo, preload })\n  }\n}\n","import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createStat ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const stats = await repo.stat()\n\n    return {\n      numObjects: BigInt(stats.numObjects.toString()),\n      repoSize: BigInt(stats.repoSize.toString()),\n      repoPath: stats.repoPath,\n      version: `${stats.version}`,\n      storageMax: BigInt(stats.storageMax.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n","\nexport const repoVersion = 12\n","import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { repoVersion } from 'ipfs-repo/constants'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options)\n    } catch (/** @type {any} */ err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\nexport class RepoAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {Multihashes} config.hashers\n   */\n  constructor ({ repo, hashers }) {\n    this.gc = createGc({ repo, hashers })\n    this.stat = createStat({ repo })\n    this.version = createVersion({ repo })\n\n    /**\n     * @param {string} addr\n     */\n    this.setApiAddr = (addr) => repo.apiAddr.set(addr)\n  }\n}\n","import parseDuration from 'parse-duration'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/stats').BWOptions} BWOptions\n * @typedef {import('ipfs-core-types/src/stats').BWResult} BandwidthInfo\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\nfunction getBandwidthStats (libp2p, opts) {\n/*\n  let stats\n\n  if (!libp2p.metrics) {\n    stats = undefined\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.getGlobal()\n  }\n*/\n  //  if (!stats) {\n  return {\n    totalIn: BigInt(0),\n    totalOut: BigInt(0),\n    rateIn: 0.0,\n    rateOut: 0.0\n  }\n  //  }\n/*\n  const movingAverages = stats.getMovingAverages()\n  const snapshot = stats.getSnapshot()\n\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: movingAverages.dataReceived[60000].movingAverage / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage / 60\n  }\n*/\n}\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createBw ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/stats').API<{}>[\"bw\"]}\n   */\n  const bw = async function * (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    const interval = options.interval || 1000\n    let ms = -1\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval\n      if (!ms || ms < 0) throw new Error('invalid duration')\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, ms) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  return withTimeoutOption(bw)\n}\n","import { createBw } from './bw.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createStat as createBitswap } from '../bitswap/stat.js'\n\nexport class StatsAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('../../types').NetworkService} config.network\n   */\n  constructor ({ repo, network }) {\n    this.repo = createRepo({ repo })\n    this.bw = createBw({ network })\n    this.bitswap = createBitswap({ network })\n  }\n}\n","var objectSafeGet = get;\n\n/*\n  const obj = {a: {aa: {aaa: 2}}, b: 4};\n\n  get(obj, 'a.aa.aaa'); // 2\n  get(obj, ['a', 'aa', 'aaa']); // 2\n\n  get(obj, 'b.bb.bbb'); // undefined\n  get(obj, ['b', 'bb', 'bbb']); // undefined\n\n  get(obj.a, 'aa.aaa'); // 2\n  get(obj.a, ['aa', 'aaa']); // 2\n\n  get(obj.b, 'bb.bbb'); // undefined\n  get(obj.b, ['bb', 'bbb']); // undefined\n\n  get(obj.b, 'bb.bbb', 42); // 42\n  get(obj.b, ['bb', 'bbb'], 42); // 42\n\n  get(null, 'a'); // undefined\n  get(undefined, ['a']); // undefined\n\n  get(null, 'a', 42); // 42\n  get(undefined, ['a'], 42); // 42\n\n  const obj = {a: {}};\n  const sym = Symbol();\n  obj.a[sym] = 4;\n  get(obj.a, sym); // 4\n*/\n\nfunction get(obj, propsArg, defaultValue) {\n  if (!obj) {\n    return defaultValue;\n  }\n  var props, prop;\n  if (Array.isArray(propsArg)) {\n    props = propsArg.slice(0);\n  }\n  if (typeof propsArg == 'string') {\n    props = propsArg.split('.');\n  }\n  if (typeof propsArg == 'symbol') {\n    props = [propsArg];\n  }\n  if (!Array.isArray(props)) {\n    throw new Error('props arg must be an array, a string or a symbol');\n  }\n  while (props.length) {\n    prop = props.shift();\n    if (!obj) {\n      return defaultValue;\n    }\n    obj = obj[prop];\n    if (obj === undefined) {\n      return defaultValue;\n    }\n  }\n  return obj;\n}\n\nexport {objectSafeGet as default};\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","/**\n * Consumes the passed iterator and returns the number of items it contained\n */\nexport default async function length(iterator) {\n    let count = 0;\n    for await (const _ of iterator) { // eslint-disable-line no-unused-vars,@typescript-eslint/no-unused-vars\n        count++;\n    }\n    return count;\n}\n//# sourceMappingURL=index.js.map","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport length from 'it-length'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as mhd from 'multiformats/hashes/digest'\n\nconst log = debug('ipfs:repo:migrator:migration-8')\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\nfunction unwrap (blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child)\n  }\n\n  return blockstore\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToMultihash (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n\n    // Extract multihash from CID\n    const multihash = CID.decode(buf).multihash.bytes\n\n    // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase()\n\n    return new Key(`/${multihashStr}`, false)\n  } catch (/** @type {any} */ err) {\n    return key\n  }\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n    const digest = mhd.decode(buf)\n\n    // CID to Key\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1)\n\n    return new Key(`/${multihash.toUpperCase()}`, false)\n  } catch {\n    return key\n  }\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\nasync function process (backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks\n  await blockstore.open()\n\n  const unwrapped = unwrap(blockstore)\n\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [(key) => {\n      const newKey = keyFunction(key)\n\n      return newKey.toString() !== key.toString()\n    }]\n  }))\n\n  try {\n    let counter = 0\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key)\n\n      // If the Key is base32 CIDv0 then there's nothing to do\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key))\n\n        await unwrapped.delete(block.key)\n        await unwrapped.put(newKey, block.value)\n\n        onProgress((counter / blockCount) * 100, `Migrated Block from ${block.key} to ${newKey}`)\n      }\n    }\n  } finally {\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid)\n  }\n}\n","const typeofs = [\n  'string',\n  'number',\n  'bigint',\n  'symbol'\n];\nconst objectTypeNames = [\n  'Function',\n  'Generator',\n  'AsyncGenerator',\n  'GeneratorFunction',\n  'AsyncGeneratorFunction',\n  'AsyncFunction',\n  'Observable',\n  'Array',\n  'Buffer',\n  'Object',\n  'RegExp',\n  'Date',\n  'Error',\n  'Map',\n  'Set',\n  'WeakMap',\n  'WeakSet',\n  'ArrayBuffer',\n  'SharedArrayBuffer',\n  'DataView',\n  'Promise',\n  'URL',\n  'HTMLElement',\n  'Int8Array',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Int16Array',\n  'Uint16Array',\n  'Int32Array',\n  'Uint32Array',\n  'Float32Array',\n  'Float64Array',\n  'BigInt64Array',\n  'BigUint64Array'\n];\nexport function is(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value === undefined) {\n    return 'undefined';\n  }\n  if (value === true || value === false) {\n    return 'boolean';\n  }\n  const typeOf = typeof value;\n  if (typeofs.includes(typeOf)) {\n    return typeOf;\n  }\n  if (typeOf === 'function') {\n    return 'Function';\n  }\n  if (Array.isArray(value)) {\n    return 'Array';\n  }\n  if (isBuffer(value)) {\n    return 'Buffer';\n  }\n  const objectType = getObjectType(value);\n  if (objectType) {\n    return objectType;\n  }\n  return 'Object';\n}\nfunction isBuffer(value) {\n  return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);\n}\nfunction getObjectType(value) {\n  const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);\n  if (objectTypeNames.includes(objectTypeName)) {\n    return objectTypeName;\n  }\n  return undefined;\n}","class Type {\n  constructor(major, name, terminal) {\n    this.major = major;\n    this.majorEncoded = major << 5;\n    this.name = name;\n    this.terminal = terminal;\n  }\n  toString() {\n    return `Type[${ this.major }].${ this.name }`;\n  }\n  compare(typ) {\n    return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;\n  }\n}\nType.uint = new Type(0, 'uint', true);\nType.negint = new Type(1, 'negint', true);\nType.bytes = new Type(2, 'bytes', true);\nType.string = new Type(3, 'string', true);\nType.array = new Type(4, 'array', false);\nType.map = new Type(5, 'map', false);\nType.tag = new Type(6, 'tag', false);\nType.float = new Type(7, 'float', true);\nType.false = new Type(7, 'false', true);\nType.true = new Type(7, 'true', true);\nType.null = new Type(7, 'null', true);\nType.undefined = new Type(7, 'undefined', true);\nType.break = new Type(7, 'break', true);\nclass Token {\n  constructor(type, value, encodedLength) {\n    this.type = type;\n    this.value = value;\n    this.encodedLength = encodedLength;\n    this.encodedBytes = undefined;\n    this.byteValue = undefined;\n  }\n  toString() {\n    return `Token[${ this.type }].${ this.value }`;\n  }\n}\nexport {\n  Type,\n  Token\n};","export const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === 'function';\nconst textDecoder = new TextDecoder();\nconst textEncoder = new TextEncoder();\nfunction isBuffer(buf) {\n  return useBuffer && globalThis.Buffer.isBuffer(buf);\n}\nexport function asU8A(buf) {\n  if (!(buf instanceof Uint8Array)) {\n    return Uint8Array.from(buf);\n  }\n  return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;\n}\nexport const toString = useBuffer ? (bytes, start, end) => {\n  return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);\n} : (bytes, start, end) => {\n  return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);\n};\nexport const fromString = useBuffer ? string => {\n  return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);\n} : string => {\n  return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);\n};\nexport const fromArray = arr => {\n  return Uint8Array.from(arr);\n};\nexport const slice = useBuffer ? (bytes, start, end) => {\n  if (isBuffer(bytes)) {\n    return new Uint8Array(bytes.subarray(start, end));\n  }\n  return bytes.slice(start, end);\n} : (bytes, start, end) => {\n  return bytes.slice(start, end);\n};\nexport const concat = useBuffer ? (chunks, length) => {\n  chunks = chunks.map(c => c instanceof Uint8Array ? c : globalThis.Buffer.from(c));\n  return asU8A(globalThis.Buffer.concat(chunks, length));\n} : (chunks, length) => {\n  const out = new Uint8Array(length);\n  let off = 0;\n  for (let b of chunks) {\n    if (off + b.length > out.length) {\n      b = b.subarray(0, out.length - off);\n    }\n    out.set(b, off);\n    off += b.length;\n  }\n  return out;\n};\nexport const alloc = useBuffer ? size => {\n  return globalThis.Buffer.allocUnsafe(size);\n} : size => {\n  return new Uint8Array(size);\n};\nexport const toHex = useBuffer ? d => {\n  if (typeof d === 'string') {\n    return d;\n  }\n  return globalThis.Buffer.from(toBytes(d)).toString('hex');\n} : d => {\n  if (typeof d === 'string') {\n    return d;\n  }\n  return Array.prototype.reduce.call(toBytes(d), (p, c) => `${ p }${ c.toString(16).padStart(2, '0') }`, '');\n};\nexport const fromHex = useBuffer ? hex => {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n  return globalThis.Buffer.from(hex, 'hex');\n} : hex => {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n  if (!hex.length) {\n    return new Uint8Array(0);\n  }\n  return new Uint8Array(hex.split('').map((c, i, d) => i % 2 === 0 ? `0x${ c }${ d[i + 1] }` : '').filter(Boolean).map(e => parseInt(e, 16)));\n};\nfunction toBytes(obj) {\n  if (obj instanceof Uint8Array && obj.constructor.name === 'Uint8Array') {\n    return obj;\n  }\n  if (obj instanceof ArrayBuffer) {\n    return new Uint8Array(obj);\n  }\n  if (ArrayBuffer.isView(obj)) {\n    return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n}\nexport function compare(b1, b2) {\n  if (isBuffer(b1) && isBuffer(b2)) {\n    return b1.compare(b2);\n  }\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] === b2[i]) {\n      continue;\n    }\n    return b1[i] < b2[i] ? -1 : 1;\n  }\n  return 0;\n}\nfunction utf8ToBytes(string, units = Infinity) {\n  let codePoint;\n  const length = string.length;\n  let leadSurrogate = null;\n  const bytes = [];\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n    if (codePoint > 55295 && codePoint < 57344) {\n      if (!leadSurrogate) {\n        if (codePoint > 56319) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n          continue;\n        } else if (i + 1 === length) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n          continue;\n        }\n        leadSurrogate = codePoint;\n        continue;\n      }\n      if (codePoint < 56320) {\n        if ((units -= 3) > -1)\n          bytes.push(239, 191, 189);\n        leadSurrogate = codePoint;\n        continue;\n      }\n      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n    } else if (leadSurrogate) {\n      if ((units -= 3) > -1)\n        bytes.push(239, 191, 189);\n    }\n    leadSurrogate = null;\n    if (codePoint < 128) {\n      if ((units -= 1) < 0)\n        break;\n      bytes.push(codePoint);\n    } else if (codePoint < 2048) {\n      if ((units -= 2) < 0)\n        break;\n      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n    } else if (codePoint < 65536) {\n      if ((units -= 3) < 0)\n        break;\n      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else if (codePoint < 1114112) {\n      if ((units -= 4) < 0)\n        break;\n      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n  return bytes;\n}\nfunction utf8Slice(buf, offset, end) {\n  const res = [];\n  while (offset < end) {\n    const firstByte = buf[offset];\n    let codePoint = null;\n    let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n    if (offset + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n      case 1:\n        if (firstByte < 128) {\n          codePoint = firstByte;\n        }\n        break;\n      case 2:\n        secondByte = buf[offset + 1];\n        if ((secondByte & 192) === 128) {\n          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n          if (tempCodePoint > 127) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 3:\n        secondByte = buf[offset + 1];\n        thirdByte = buf[offset + 2];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 4:\n        secondByte = buf[offset + 1];\n        thirdByte = buf[offset + 2];\n        fourthByte = buf[offset + 3];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n            codePoint = tempCodePoint;\n          }\n        }\n      }\n    }\n    if (codePoint === null) {\n      codePoint = 65533;\n      bytesPerSequence = 1;\n    } else if (codePoint > 65535) {\n      codePoint -= 65536;\n      res.push(codePoint >>> 10 & 1023 | 55296);\n      codePoint = 56320 | codePoint & 1023;\n    }\n    res.push(codePoint);\n    offset += bytesPerSequence;\n  }\n  return decodeCodePointsArray(res);\n}\nconst MAX_ARGUMENTS_LENGTH = 4096;\nexport function decodeCodePointsArray(codePoints) {\n  const len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints);\n  }\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n  return res;\n}","import {\n  alloc,\n  concat,\n  slice\n} from './byte-utils.js';\nconst defaultChunkSize = 256;\nexport class Bl {\n  constructor(chunkSize = defaultChunkSize) {\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  reset() {\n    this.cursor = 0;\n    this.maxCursor = -1;\n    if (this.chunks.length) {\n      this.chunks = [];\n    }\n    if (this._initReuseChunk !== null) {\n      this.chunks.push(this._initReuseChunk);\n      this.maxCursor = this._initReuseChunk.length - 1;\n    }\n  }\n  push(bytes) {\n    let topChunk = this.chunks[this.chunks.length - 1];\n    const newMax = this.cursor + bytes.length;\n    if (newMax <= this.maxCursor + 1) {\n      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n      topChunk.set(bytes, chunkPos);\n    } else {\n      if (topChunk) {\n        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        if (chunkPos < topChunk.length) {\n          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);\n          this.maxCursor = this.cursor - 1;\n        }\n      }\n      if (bytes.length < 64 && bytes.length < this.chunkSize) {\n        topChunk = alloc(this.chunkSize);\n        this.chunks.push(topChunk);\n        this.maxCursor += topChunk.length;\n        if (this._initReuseChunk === null) {\n          this._initReuseChunk = topChunk;\n        }\n        topChunk.set(bytes, 0);\n      } else {\n        this.chunks.push(bytes);\n        this.maxCursor += bytes.length;\n      }\n    }\n    this.cursor += bytes.length;\n  }\n  toBytes(reset = false) {\n    let byts;\n    if (this.chunks.length === 1) {\n      const chunk = this.chunks[0];\n      if (reset && this.cursor > chunk.length / 2) {\n        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n        this._initReuseChunk = null;\n        this.chunks = [];\n      } else {\n        byts = slice(chunk, 0, this.cursor);\n      }\n    } else {\n      byts = concat(this.chunks, this.cursor);\n    }\n    if (reset) {\n      this.reset();\n    }\n    return byts;\n  }\n}","const decodeErrPrefix = 'CBOR decode error:';\nconst encodeErrPrefix = 'CBOR encode error:';\nconst uintMinorPrefixBytes = [];\nuintMinorPrefixBytes[23] = 1;\nuintMinorPrefixBytes[24] = 2;\nuintMinorPrefixBytes[25] = 3;\nuintMinorPrefixBytes[26] = 5;\nuintMinorPrefixBytes[27] = 9;\nfunction assertEnoughData(data, pos, need) {\n  if (data.length - pos < need) {\n    throw new Error(`${ decodeErrPrefix } not enough data for type`);\n  }\n}\nexport {\n  decodeErrPrefix,\n  encodeErrPrefix,\n  uintMinorPrefixBytes,\n  assertEnoughData\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  decodeErrPrefix,\n  assertEnoughData\n} from './common.js';\nexport const uintBoundaries = [\n  24,\n  256,\n  65536,\n  4294967296,\n  BigInt('18446744073709551616')\n];\nexport function readUint8(data, offset, options) {\n  assertEnoughData(data, offset, 1);\n  const value = data[offset];\n  if (options.strict === true && value < uintBoundaries[0]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint16(data, offset, options) {\n  assertEnoughData(data, offset, 2);\n  const value = data[offset] << 8 | data[offset + 1];\n  if (options.strict === true && value < uintBoundaries[1]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint32(data, offset, options) {\n  assertEnoughData(data, offset, 4);\n  const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n  if (options.strict === true && value < uintBoundaries[2]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  return value;\n}\nexport function readUint64(data, offset, options) {\n  assertEnoughData(data, offset, 8);\n  const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n  const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];\n  const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);\n  if (options.strict === true && value < uintBoundaries[3]) {\n    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);\n  }\n  if (value <= Number.MAX_SAFE_INTEGER) {\n    return Number(value);\n  }\n  if (options.allowBigInt === true) {\n    return value;\n  }\n  throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);\n}\nexport function decodeUint8(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint8(data, pos + 1, options), 2);\n}\nexport function decodeUint16(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint16(data, pos + 1, options), 3);\n}\nexport function decodeUint32(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint32(data, pos + 1, options), 5);\n}\nexport function decodeUint64(data, pos, _minor, options) {\n  return new Token(Type.uint, readUint64(data, pos + 1, options), 9);\n}\nexport function encodeUint(buf, token) {\n  return encodeUintValue(buf, 0, token.value);\n}\nexport function encodeUintValue(buf, major, uint) {\n  if (uint < uintBoundaries[0]) {\n    const nuint = Number(uint);\n    buf.push([major | nuint]);\n  } else if (uint < uintBoundaries[1]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 24,\n      nuint\n    ]);\n  } else if (uint < uintBoundaries[2]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 25,\n      nuint >>> 8,\n      nuint & 255\n    ]);\n  } else if (uint < uintBoundaries[3]) {\n    const nuint = Number(uint);\n    buf.push([\n      major | 26,\n      nuint >>> 24 & 255,\n      nuint >>> 16 & 255,\n      nuint >>> 8 & 255,\n      nuint & 255\n    ]);\n  } else {\n    const buint = BigInt(uint);\n    if (buint < uintBoundaries[4]) {\n      const set = [\n        major | 27,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n      ];\n      let lo = Number(buint & BigInt(4294967295));\n      let hi = Number(buint >> BigInt(32) & BigInt(4294967295));\n      set[8] = lo & 255;\n      lo = lo >> 8;\n      set[7] = lo & 255;\n      lo = lo >> 8;\n      set[6] = lo & 255;\n      lo = lo >> 8;\n      set[5] = lo & 255;\n      set[4] = hi & 255;\n      hi = hi >> 8;\n      set[3] = hi & 255;\n      hi = hi >> 8;\n      set[2] = hi & 255;\n      hi = hi >> 8;\n      set[1] = hi & 255;\n      buf.push(set);\n    } else {\n      throw new Error(`${ decodeErrPrefix } encountered BigInt larger than allowable range`);\n    }\n  }\n}\nencodeUint.encodedSize = function encodedSize(token) {\n  return encodeUintValue.encodedSize(token.value);\n};\nencodeUintValue.encodedSize = function encodedSize(uint) {\n  if (uint < uintBoundaries[0]) {\n    return 1;\n  }\n  if (uint < uintBoundaries[1]) {\n    return 2;\n  }\n  if (uint < uintBoundaries[2]) {\n    return 3;\n  }\n  if (uint < uintBoundaries[3]) {\n    return 5;\n  }\n  return 9;\n};\nencodeUint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nexport function decodeNegint8(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeNegint16(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeNegint32(data, pos, _minor, options) {\n  return new Token(Type.negint, -1 - uint.readUint32(data, pos + 1, options), 5);\n}\nconst neg1b = BigInt(-1);\nconst pos1b = BigInt(1);\nexport function decodeNegint64(data, pos, _minor, options) {\n  const int = uint.readUint64(data, pos + 1, options);\n  if (typeof int !== 'bigint') {\n    const value = -1 - int;\n    if (value >= Number.MIN_SAFE_INTEGER) {\n      return new Token(Type.negint, value, 9);\n    }\n  }\n  if (options.allowBigInt !== true) {\n    throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);\n  }\n  return new Token(Type.negint, neg1b - BigInt(int), 9);\n}\nexport function encodeNegint(buf, token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  uint.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\nencodeNegint.encodedSize = function encodedSize(token) {\n  const negint = token.value;\n  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n  if (unsigned < uint.uintBoundaries[0]) {\n    return 1;\n  }\n  if (unsigned < uint.uintBoundaries[1]) {\n    return 2;\n  }\n  if (unsigned < uint.uintBoundaries[2]) {\n    return 3;\n  }\n  if (unsigned < uint.uintBoundaries[3]) {\n    return 5;\n  }\n  return 9;\n};\nencodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport {\n  compare,\n  fromString,\n  slice\n} from './byte-utils.js';\nfunction toToken(data, pos, prefix, length) {\n  assertEnoughData(data, pos, prefix + length);\n  const buf = slice(data, pos + prefix, pos + prefix + length);\n  return new Token(Type.bytes, buf, prefix + length);\n}\nexport function decodeBytesCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeBytes8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeBytes16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeBytes32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeBytes64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer bytes lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nfunction tokenBytes(token) {\n  if (token.encodedBytes === undefined) {\n    token.encodedBytes = token.type === Type.string ? fromString(token.value) : token.value;\n  }\n  return token.encodedBytes;\n}\nexport function encodeBytes(buf, token) {\n  const bytes = tokenBytes(token);\n  uint.encodeUintValue(buf, token.type.majorEncoded, bytes.length);\n  buf.push(bytes);\n}\nencodeBytes.encodedSize = function encodedSize(token) {\n  const bytes = tokenBytes(token);\n  return uint.encodeUintValue.encodedSize(bytes.length) + bytes.length;\n};\nencodeBytes.compareTokens = function compareTokens(tok1, tok2) {\n  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));\n};\nexport function compareBytes(b1, b2) {\n  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare(b1, b2);\n}","import {\n  Token,\n  Type\n} from './token.js';\nimport {\n  assertEnoughData,\n  decodeErrPrefix\n} from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport {\n  toString,\n  slice\n} from './byte-utils.js';\nfunction toToken(data, pos, prefix, length, options) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength);\n  }\n  return tok;\n}\nexport function decodeStringCompact(data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options);\n}\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options);\n}\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options);\n}\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options);\n}\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l, options);\n}\nexport const encodeString = encodeBytes;","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.array, length, prefix);\n}\nexport function decodeArrayCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeArray8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeArray16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeArray32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeArray64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer array lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeArrayIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeArray(buf, token) {\n  uint.encodeUintValue(buf, Type.array.majorEncoded, token.value);\n}\nencodeArray.compareTokens = uint.encodeUint.compareTokens;\nencodeArray.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport { decodeErrPrefix } from './common.js';\nfunction toToken(_data, _pos, prefix, length) {\n  return new Token(Type.map, length, prefix);\n}\nexport function decodeMapCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\nexport function decodeMap8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options));\n}\nexport function decodeMap16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options));\n}\nexport function decodeMap32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options));\n}\nexport function decodeMap64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${ decodeErrPrefix } 64-bit integer map lengths not supported`);\n  }\n  return toToken(data, pos, 9, l);\n}\nexport function decodeMapIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return toToken(data, pos, 1, Infinity);\n}\nexport function encodeMap(buf, token) {\n  uint.encodeUintValue(buf, Type.map.majorEncoded, token.value);\n}\nencodeMap.compareTokens = uint.encodeUint.compareTokens;\nencodeMap.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nexport function decodeTagCompact(_data, _pos, minor, _options) {\n  return new Token(Type.tag, minor, 1);\n}\nexport function decodeTag8(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint8(data, pos + 1, options), 2);\n}\nexport function decodeTag16(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint16(data, pos + 1, options), 3);\n}\nexport function decodeTag32(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint32(data, pos + 1, options), 5);\n}\nexport function decodeTag64(data, pos, _minor, options) {\n  return new Token(Type.tag, uint.readUint64(data, pos + 1, options), 9);\n}\nexport function encodeTag(buf, token) {\n  uint.encodeUintValue(buf, Type.tag.majorEncoded, token.value);\n}\nencodeTag.compareTokens = uint.encodeUint.compareTokens;\nencodeTag.encodedSize = function encodedSize(token) {\n  return uint.encodeUintValue.encodedSize(token.value);\n};","import {\n  Token,\n  Type\n} from './token.js';\nimport { decodeErrPrefix } from './common.js';\nimport { encodeUint } from './0uint.js';\nconst MINOR_FALSE = 20;\nconst MINOR_TRUE = 21;\nconst MINOR_NULL = 22;\nconst MINOR_UNDEFINED = 23;\nexport function decodeUndefined(_data, _pos, _minor, options) {\n  if (options.allowUndefined === false) {\n    throw new Error(`${ decodeErrPrefix } undefined values are not supported`);\n  } else if (options.coerceUndefinedToNull === true) {\n    return new Token(Type.null, null, 1);\n  }\n  return new Token(Type.undefined, undefined, 1);\n}\nexport function decodeBreak(_data, _pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);\n  }\n  return new Token(Type.break, undefined, 1);\n}\nfunction createToken(value, bytes, options) {\n  if (options) {\n    if (options.allowNaN === false && Number.isNaN(value)) {\n      throw new Error(`${ decodeErrPrefix } NaN values are not supported`);\n    }\n    if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {\n      throw new Error(`${ decodeErrPrefix } Infinity values are not supported`);\n    }\n  }\n  return new Token(Type.float, value, bytes);\n}\nexport function decodeFloat16(data, pos, _minor, options) {\n  return createToken(readFloat16(data, pos + 1), 3, options);\n}\nexport function decodeFloat32(data, pos, _minor, options) {\n  return createToken(readFloat32(data, pos + 1), 5, options);\n}\nexport function decodeFloat64(data, pos, _minor, options) {\n  return createToken(readFloat64(data, pos + 1), 9, options);\n}\nexport function encodeFloat(buf, token, options) {\n  const float = token.value;\n  if (float === false) {\n    buf.push([Type.float.majorEncoded | MINOR_FALSE]);\n  } else if (float === true) {\n    buf.push([Type.float.majorEncoded | MINOR_TRUE]);\n  } else if (float === null) {\n    buf.push([Type.float.majorEncoded | MINOR_NULL]);\n  } else if (float === undefined) {\n    buf.push([Type.float.majorEncoded | MINOR_UNDEFINED]);\n  } else {\n    let decoded;\n    let success = false;\n    if (!options || options.float64 !== true) {\n      encodeFloat16(float);\n      decoded = readFloat16(ui8a, 1);\n      if (float === decoded || Number.isNaN(float)) {\n        ui8a[0] = 249;\n        buf.push(ui8a.slice(0, 3));\n        success = true;\n      } else {\n        encodeFloat32(float);\n        decoded = readFloat32(ui8a, 1);\n        if (float === decoded) {\n          ui8a[0] = 250;\n          buf.push(ui8a.slice(0, 5));\n          success = true;\n        }\n      }\n    }\n    if (!success) {\n      encodeFloat64(float);\n      decoded = readFloat64(ui8a, 1);\n      ui8a[0] = 251;\n      buf.push(ui8a.slice(0, 9));\n    }\n  }\n}\nencodeFloat.encodedSize = function encodedSize(token, options) {\n  const float = token.value;\n  if (float === false || float === true || float === null || float === undefined) {\n    return 1;\n  }\n  if (!options || options.float64 !== true) {\n    encodeFloat16(float);\n    let decoded = readFloat16(ui8a, 1);\n    if (float === decoded || Number.isNaN(float)) {\n      return 3;\n    }\n    encodeFloat32(float);\n    decoded = readFloat32(ui8a, 1);\n    if (float === decoded) {\n      return 5;\n    }\n  }\n  return 9;\n};\nconst buffer = new ArrayBuffer(9);\nconst dataView = new DataView(buffer, 1);\nconst ui8a = new Uint8Array(buffer, 0);\nfunction encodeFloat16(inp) {\n  if (inp === Infinity) {\n    dataView.setUint16(0, 31744, false);\n  } else if (inp === -Infinity) {\n    dataView.setUint16(0, 64512, false);\n  } else if (Number.isNaN(inp)) {\n    dataView.setUint16(0, 32256, false);\n  } else {\n    dataView.setFloat32(0, inp);\n    const valu32 = dataView.getUint32(0);\n    const exponent = (valu32 & 2139095040) >> 23;\n    const mantissa = valu32 & 8388607;\n    if (exponent === 255) {\n      dataView.setUint16(0, 31744, false);\n    } else if (exponent === 0) {\n      dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);\n    } else {\n      const logicalExponent = exponent - 127;\n      if (logicalExponent < -24) {\n        dataView.setUint16(0, 0);\n      } else if (logicalExponent < -14) {\n        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);\n      } else {\n        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);\n      }\n    }\n  }\n}\nfunction readFloat16(ui8a, pos) {\n  if (ui8a.length - pos < 2) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float16`);\n  }\n  const half = (ui8a[pos] << 8) + ui8a[pos + 1];\n  if (half === 31744) {\n    return Infinity;\n  }\n  if (half === 64512) {\n    return -Infinity;\n  }\n  if (half === 32256) {\n    return NaN;\n  }\n  const exp = half >> 10 & 31;\n  const mant = half & 1023;\n  let val;\n  if (exp === 0) {\n    val = mant * 2 ** -24;\n  } else if (exp !== 31) {\n    val = (mant + 1024) * 2 ** (exp - 25);\n  } else {\n    val = mant === 0 ? Infinity : NaN;\n  }\n  return half & 32768 ? -val : val;\n}\nfunction encodeFloat32(inp) {\n  dataView.setFloat32(0, inp, false);\n}\nfunction readFloat32(ui8a, pos) {\n  if (ui8a.length - pos < 4) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float32`);\n  }\n  const offset = (ui8a.byteOffset || 0) + pos;\n  return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);\n}\nfunction encodeFloat64(inp) {\n  dataView.setFloat64(0, inp, false);\n}\nfunction readFloat64(ui8a, pos) {\n  if (ui8a.length - pos < 8) {\n    throw new Error(`${ decodeErrPrefix } not enough data for float64`);\n  }\n  const offset = (ui8a.byteOffset || 0) + pos;\n  return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);\n}\nencodeFloat.compareTokens = encodeUint.compareTokens;","import {\n  Token,\n  Type\n} from './token.js';\nimport * as uint from './0uint.js';\nimport * as negint from './1negint.js';\nimport * as bytes from './2bytes.js';\nimport * as string from './3string.js';\nimport * as array from './4array.js';\nimport * as map from './5map.js';\nimport * as tag from './6tag.js';\nimport * as float from './7float.js';\nimport { decodeErrPrefix } from './common.js';\nimport { fromArray } from './byte-utils.js';\nfunction invalidMinor(data, pos, minor) {\n  throw new Error(`${ decodeErrPrefix } encountered invalid minor (${ minor }) for major ${ data[pos] >>> 5 }`);\n}\nfunction errorer(msg) {\n  return () => {\n    throw new Error(`${ decodeErrPrefix } ${ msg }`);\n  };\n}\nexport const jump = [];\nfor (let i = 0; i <= 23; i++) {\n  jump[i] = invalidMinor;\n}\njump[24] = uint.decodeUint8;\njump[25] = uint.decodeUint16;\njump[26] = uint.decodeUint32;\njump[27] = uint.decodeUint64;\njump[28] = invalidMinor;\njump[29] = invalidMinor;\njump[30] = invalidMinor;\njump[31] = invalidMinor;\nfor (let i = 32; i <= 55; i++) {\n  jump[i] = invalidMinor;\n}\njump[56] = negint.decodeNegint8;\njump[57] = negint.decodeNegint16;\njump[58] = negint.decodeNegint32;\njump[59] = negint.decodeNegint64;\njump[60] = invalidMinor;\njump[61] = invalidMinor;\njump[62] = invalidMinor;\njump[63] = invalidMinor;\nfor (let i = 64; i <= 87; i++) {\n  jump[i] = bytes.decodeBytesCompact;\n}\njump[88] = bytes.decodeBytes8;\njump[89] = bytes.decodeBytes16;\njump[90] = bytes.decodeBytes32;\njump[91] = bytes.decodeBytes64;\njump[92] = invalidMinor;\njump[93] = invalidMinor;\njump[94] = invalidMinor;\njump[95] = errorer('indefinite length bytes/strings are not supported');\nfor (let i = 96; i <= 119; i++) {\n  jump[i] = string.decodeStringCompact;\n}\njump[120] = string.decodeString8;\njump[121] = string.decodeString16;\njump[122] = string.decodeString32;\njump[123] = string.decodeString64;\njump[124] = invalidMinor;\njump[125] = invalidMinor;\njump[126] = invalidMinor;\njump[127] = errorer('indefinite length bytes/strings are not supported');\nfor (let i = 128; i <= 151; i++) {\n  jump[i] = array.decodeArrayCompact;\n}\njump[152] = array.decodeArray8;\njump[153] = array.decodeArray16;\njump[154] = array.decodeArray32;\njump[155] = array.decodeArray64;\njump[156] = invalidMinor;\njump[157] = invalidMinor;\njump[158] = invalidMinor;\njump[159] = array.decodeArrayIndefinite;\nfor (let i = 160; i <= 183; i++) {\n  jump[i] = map.decodeMapCompact;\n}\njump[184] = map.decodeMap8;\njump[185] = map.decodeMap16;\njump[186] = map.decodeMap32;\njump[187] = map.decodeMap64;\njump[188] = invalidMinor;\njump[189] = invalidMinor;\njump[190] = invalidMinor;\njump[191] = map.decodeMapIndefinite;\nfor (let i = 192; i <= 215; i++) {\n  jump[i] = tag.decodeTagCompact;\n}\njump[216] = tag.decodeTag8;\njump[217] = tag.decodeTag16;\njump[218] = tag.decodeTag32;\njump[219] = tag.decodeTag64;\njump[220] = invalidMinor;\njump[221] = invalidMinor;\njump[222] = invalidMinor;\njump[223] = invalidMinor;\nfor (let i = 224; i <= 243; i++) {\n  jump[i] = errorer('simple values are not supported');\n}\njump[244] = invalidMinor;\njump[245] = invalidMinor;\njump[246] = invalidMinor;\njump[247] = float.decodeUndefined;\njump[248] = errorer('simple values are not supported');\njump[249] = float.decodeFloat16;\njump[250] = float.decodeFloat32;\njump[251] = float.decodeFloat64;\njump[252] = invalidMinor;\njump[253] = invalidMinor;\njump[254] = invalidMinor;\njump[255] = float.decodeBreak;\nexport const quick = [];\nfor (let i = 0; i < 24; i++) {\n  quick[i] = new Token(Type.uint, i, 1);\n}\nfor (let i = -1; i >= -24; i--) {\n  quick[31 - i] = new Token(Type.negint, i, 1);\n}\nquick[64] = new Token(Type.bytes, new Uint8Array(0), 1);\nquick[96] = new Token(Type.string, '', 1);\nquick[128] = new Token(Type.array, 0, 1);\nquick[160] = new Token(Type.map, 0, 1);\nquick[244] = new Token(Type.false, false, 1);\nquick[245] = new Token(Type.true, true, 1);\nquick[246] = new Token(Type.null, null, 1);\nexport function quickEncodeToken(token) {\n  switch (token.type) {\n  case Type.false:\n    return fromArray([244]);\n  case Type.true:\n    return fromArray([245]);\n  case Type.null:\n    return fromArray([246]);\n  case Type.bytes:\n    if (!token.value.length) {\n      return fromArray([64]);\n    }\n    return;\n  case Type.string:\n    if (token.value === '') {\n      return fromArray([96]);\n    }\n    return;\n  case Type.array:\n    if (token.value === 0) {\n      return fromArray([128]);\n    }\n    return;\n  case Type.map:\n    if (token.value === 0) {\n      return fromArray([160]);\n    }\n    return;\n  case Type.uint:\n    if (token.value < 24) {\n      return fromArray([Number(token.value)]);\n    }\n    return;\n  case Type.negint:\n    if (token.value >= -24) {\n      return fromArray([31 - Number(token.value)]);\n    }\n  }\n}","import { is } from './is.js';\nimport {\n  Token,\n  Type\n} from './token.js';\nimport { Bl } from './bl.js';\nimport { encodeErrPrefix } from './common.js';\nimport { quickEncodeToken } from './jump.js';\nimport { asU8A } from './byte-utils.js';\nimport { encodeUint } from './0uint.js';\nimport { encodeNegint } from './1negint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { encodeString } from './3string.js';\nimport { encodeArray } from './4array.js';\nimport { encodeMap } from './5map.js';\nimport { encodeTag } from './6tag.js';\nimport { encodeFloat } from './7float.js';\nconst defaultEncodeOptions = {\n  float64: false,\n  mapSorter,\n  quickEncodeToken\n};\nexport function makeCborEncoders() {\n  const encoders = [];\n  encoders[Type.uint.major] = encodeUint;\n  encoders[Type.negint.major] = encodeNegint;\n  encoders[Type.bytes.major] = encodeBytes;\n  encoders[Type.string.major] = encodeString;\n  encoders[Type.array.major] = encodeArray;\n  encoders[Type.map.major] = encodeMap;\n  encoders[Type.tag.major] = encodeTag;\n  encoders[Type.float.major] = encodeFloat;\n  return encoders;\n}\nconst cborEncoders = makeCborEncoders();\nconst buf = new Bl();\nclass Ref {\n  constructor(obj, parent) {\n    this.obj = obj;\n    this.parent = parent;\n  }\n  includes(obj) {\n    let p = this;\n    do {\n      if (p.obj === obj) {\n        return true;\n      }\n    } while (p = p.parent);\n    return false;\n  }\n  static createCheck(stack, obj) {\n    if (stack && stack.includes(obj)) {\n      throw new Error(`${ encodeErrPrefix } object contains circular references`);\n    }\n    return new Ref(obj, stack);\n  }\n}\nconst simpleTokens = {\n  null: new Token(Type.null, null),\n  undefined: new Token(Type.undefined, undefined),\n  true: new Token(Type.true, true),\n  false: new Token(Type.false, false),\n  emptyArray: new Token(Type.array, 0),\n  emptyMap: new Token(Type.map, 0)\n};\nconst typeEncoders = {\n  number(obj, _typ, _options, _refStack) {\n    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {\n      return new Token(Type.float, obj);\n    } else if (obj >= 0) {\n      return new Token(Type.uint, obj);\n    } else {\n      return new Token(Type.negint, obj);\n    }\n  },\n  bigint(obj, _typ, _options, _refStack) {\n    if (obj >= BigInt(0)) {\n      return new Token(Type.uint, obj);\n    } else {\n      return new Token(Type.negint, obj);\n    }\n  },\n  Uint8Array(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, obj);\n  },\n  string(obj, _typ, _options, _refStack) {\n    return new Token(Type.string, obj);\n  },\n  boolean(obj, _typ, _options, _refStack) {\n    return obj ? simpleTokens.true : simpleTokens.false;\n  },\n  null(_obj, _typ, _options, _refStack) {\n    return simpleTokens.null;\n  },\n  undefined(_obj, _typ, _options, _refStack) {\n    return simpleTokens.undefined;\n  },\n  ArrayBuffer(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, new Uint8Array(obj));\n  },\n  DataView(obj, _typ, _options, _refStack) {\n    return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));\n  },\n  Array(obj, _typ, options, refStack) {\n    if (!obj.length) {\n      if (options.addBreakTokens === true) {\n        return [\n          simpleTokens.emptyArray,\n          new Token(Type.break)\n        ];\n      }\n      return simpleTokens.emptyArray;\n    }\n    refStack = Ref.createCheck(refStack, obj);\n    const entries = [];\n    let i = 0;\n    for (const e of obj) {\n      entries[i++] = objectToTokens(e, options, refStack);\n    }\n    if (options.addBreakTokens) {\n      return [\n        new Token(Type.array, obj.length),\n        entries,\n        new Token(Type.break)\n      ];\n    }\n    return [\n      new Token(Type.array, obj.length),\n      entries\n    ];\n  },\n  Object(obj, typ, options, refStack) {\n    const isMap = typ !== 'Object';\n    const keys = isMap ? obj.keys() : Object.keys(obj);\n    const length = isMap ? obj.size : keys.length;\n    if (!length) {\n      if (options.addBreakTokens === true) {\n        return [\n          simpleTokens.emptyMap,\n          new Token(Type.break)\n        ];\n      }\n      return simpleTokens.emptyMap;\n    }\n    refStack = Ref.createCheck(refStack, obj);\n    const entries = [];\n    let i = 0;\n    for (const key of keys) {\n      entries[i++] = [\n        objectToTokens(key, options, refStack),\n        objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)\n      ];\n    }\n    sortMapEntries(entries, options);\n    if (options.addBreakTokens) {\n      return [\n        new Token(Type.map, length),\n        entries,\n        new Token(Type.break)\n      ];\n    }\n    return [\n      new Token(Type.map, length),\n      entries\n    ];\n  }\n};\ntypeEncoders.Map = typeEncoders.Object;\ntypeEncoders.Buffer = typeEncoders.Uint8Array;\nfor (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')) {\n  typeEncoders[`${ typ }Array`] = typeEncoders.DataView;\n}\nfunction objectToTokens(obj, options = {}, refStack) {\n  const typ = is(obj);\n  const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];\n  if (typeof customTypeEncoder === 'function') {\n    const tokens = customTypeEncoder(obj, typ, options, refStack);\n    if (tokens != null) {\n      return tokens;\n    }\n  }\n  const typeEncoder = typeEncoders[typ];\n  if (!typeEncoder) {\n    throw new Error(`${ encodeErrPrefix } unsupported type: ${ typ }`);\n  }\n  return typeEncoder(obj, typ, options, refStack);\n}\nfunction sortMapEntries(entries, options) {\n  if (options.mapSorter) {\n    entries.sort(options.mapSorter);\n  }\n}\nfunction mapSorter(e1, e2) {\n  const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];\n  const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];\n  if (keyToken1.type !== keyToken2.type) {\n    return keyToken1.type.compare(keyToken2.type);\n  }\n  const major = keyToken1.type.major;\n  const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);\n  if (tcmp === 0) {\n    console.warn('WARNING: complex key types used, CBOR key sorting guarantees are gone');\n  }\n  return tcmp;\n}\nfunction tokensToEncoded(buf, tokens, encoders, options) {\n  if (Array.isArray(tokens)) {\n    for (const token of tokens) {\n      tokensToEncoded(buf, token, encoders, options);\n    }\n  } else {\n    encoders[tokens.type.major](buf, tokens, options);\n  }\n}\nfunction encodeCustom(data, encoders, options) {\n  const tokens = objectToTokens(data, options);\n  if (!Array.isArray(tokens) && options.quickEncodeToken) {\n    const quickBytes = options.quickEncodeToken(tokens);\n    if (quickBytes) {\n      return quickBytes;\n    }\n    const encoder = encoders[tokens.type.major];\n    if (encoder.encodedSize) {\n      const size = encoder.encodedSize(tokens, options);\n      const buf = new Bl(size);\n      encoder(buf, tokens, options);\n      if (buf.chunks.length !== 1) {\n        throw new Error(`Unexpected error: pre-calculated length for ${ tokens } was wrong`);\n      }\n      return asU8A(buf.chunks[0]);\n    }\n  }\n  buf.reset();\n  tokensToEncoded(buf, tokens, encoders, options);\n  return buf.toBytes(true);\n}\nfunction encode(data, options) {\n  options = Object.assign({}, defaultEncodeOptions, options);\n  return encodeCustom(data, cborEncoders, options);\n}\nexport {\n  objectToTokens,\n  encode,\n  encodeCustom,\n  Ref\n};","import { decodeErrPrefix } from './common.js';\nimport { Type } from './token.js';\nimport {\n  jump,\n  quick\n} from './jump.js';\nconst defaultDecodeOptions = {\n  strict: false,\n  allowIndefinite: true,\n  allowUndefined: true,\n  allowBigInt: true\n};\nclass Tokeniser {\n  constructor(data, options = {}) {\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n  }\n  done() {\n    return this.pos >= this.data.length;\n  }\n  next() {\n    const byt = this.data[this.pos];\n    let token = quick[byt];\n    if (token === undefined) {\n      const decoder = jump[byt];\n      if (!decoder) {\n        throw new Error(`${ decodeErrPrefix } no decoder for major type ${ byt >>> 5 } (byte 0x${ byt.toString(16).padStart(2, '0') })`);\n      }\n      const minor = byt & 31;\n      token = decoder(this.data, this.pos, minor, this.options);\n    }\n    this.pos += token.encodedLength;\n    return token;\n  }\n}\nconst DONE = Symbol.for('DONE');\nconst BREAK = Symbol.for('BREAK');\nfunction tokenToArray(token, tokeniser, options) {\n  const arr = [];\n  for (let i = 0; i < token.value; i++) {\n    const value = tokensToObject(tokeniser, options);\n    if (value === BREAK) {\n      if (token.value === Infinity) {\n        break;\n      }\n      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed array`);\n    }\n    if (value === DONE) {\n      throw new Error(`${ decodeErrPrefix } found array but not enough entries (got ${ i }, expected ${ token.value })`);\n    }\n    arr[i] = value;\n  }\n  return arr;\n}\nfunction tokenToMap(token, tokeniser, options) {\n  const useMaps = options.useMaps === true;\n  const obj = useMaps ? undefined : {};\n  const m = useMaps ? new Map() : undefined;\n  for (let i = 0; i < token.value; i++) {\n    const key = tokensToObject(tokeniser, options);\n    if (key === BREAK) {\n      if (token.value === Infinity) {\n        break;\n      }\n      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed map`);\n    }\n    if (key === DONE) {\n      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no key], expected ${ token.value })`);\n    }\n    if (useMaps !== true && typeof key !== 'string') {\n      throw new Error(`${ decodeErrPrefix } non-string keys not supported (got ${ typeof key })`);\n    }\n    if (options.rejectDuplicateMapKeys === true) {\n      if (useMaps && m.has(key) || !useMaps && key in obj) {\n        throw new Error(`${ decodeErrPrefix } found repeat map key \"${ key }\"`);\n      }\n    }\n    const value = tokensToObject(tokeniser, options);\n    if (value === DONE) {\n      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no value], expected ${ token.value })`);\n    }\n    if (useMaps) {\n      m.set(key, value);\n    } else {\n      obj[key] = value;\n    }\n  }\n  return useMaps ? m : obj;\n}\nfunction tokensToObject(tokeniser, options) {\n  if (tokeniser.done()) {\n    return DONE;\n  }\n  const token = tokeniser.next();\n  if (token.type === Type.break) {\n    return BREAK;\n  }\n  if (token.type.terminal) {\n    return token.value;\n  }\n  if (token.type === Type.array) {\n    return tokenToArray(token, tokeniser, options);\n  }\n  if (token.type === Type.map) {\n    return tokenToMap(token, tokeniser, options);\n  }\n  if (token.type === Type.tag) {\n    if (options.tags && typeof options.tags[token.value] === 'function') {\n      const tagged = tokensToObject(tokeniser, options);\n      return options.tags[token.value](tagged);\n    }\n    throw new Error(`${ decodeErrPrefix } tag not supported (${ token.value })`);\n  }\n  throw new Error('unsupported');\n}\nfunction decode(data, options) {\n  if (!(data instanceof Uint8Array)) {\n    throw new Error(`${ decodeErrPrefix } data to decode must be a Uint8Array`);\n  }\n  options = Object.assign({}, defaultDecodeOptions, options);\n  const tokeniser = options.tokenizer || new Tokeniser(data, options);\n  const decoded = tokensToObject(tokeniser, options);\n  if (decoded === DONE) {\n    throw new Error(`${ decodeErrPrefix } did not find any content to decode`);\n  }\n  if (decoded === BREAK) {\n    throw new Error(`${ decodeErrPrefix } got unexpected break`);\n  }\n  if (!tokeniser.done()) {\n    throw new Error(`${ decodeErrPrefix } too many terminals, data makes no sense`);\n  }\n  return decoded;\n}\nexport {\n  Tokeniser,\n  tokensToObject,\n  decode\n};","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ipfs = $root.ipfs = (() => {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    const ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        const pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nexport { $root as default };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * FNV-1a hash generation init value.\n * It's exposed, because this allows user to override it.\n * More info: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV_hash_parameters\n *\n * @type {number}\n */\nhash.BASE = 0x811c9dc5;\n/**\n * Generates 32 bit FNV-1a hash from the given string.\n * As explained here: http://isthe.com/chongo/tech/comp/fnv/\n *\n * @param s {string} String to generate hash from.\n * @param [h] {number} FNV-1a hash generation init value.\n * @returns {number} The result integer hash.\n */\nfunction hash(s, h = hash.BASE) {\n    const l = s.length;\n    for (let i = 0; i < l; i++) {\n        h ^= s.charCodeAt(i);\n        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\n    }\n    return h >>> 0;\n}\nexports.default = hash;\nmodule.exports = hash;\n","\nimport { Key } from 'interface-datastore/key'\nimport { base32 } from 'multiformats/bases/base32'\nimport { CID } from 'multiformats/cid'\n\nexport const PIN_DS_KEY = new Key('/local/pins')\nexport const DEFAULT_FANOUT = 256\nexport const MAX_ITEMS = 8192\nexport const EMPTY_KEY = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\n\nexport const PinTypes = {\n  direct: 'direct',\n  recursive: 'recursive'\n}\n\n/**\n * @param {import('multiformats').CID} cid\n */\nexport function cidToKey (cid) {\n  return new Key(`/${base32.encode(cid.multihash.bytes).toUpperCase().substring(1)}`)\n}\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","\nimport { CID } from 'multiformats/cid'\nimport { ipfs } from './pin.js'\n// @ts-ignore\nimport fnv1a from 'fnv1a'\nimport varint from 'varint'\nimport * as dagPb from '@ipld/dag-pb'\nimport { DEFAULT_FANOUT, MAX_ITEMS, EMPTY_KEY } from './utils.js'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nconst PinSet = ipfs.pin.Set\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n *\n * @typedef {object} Pin\n * @property {CID} key\n * @property {Uint8Array} [data]\n */\n\n/**\n * @param {PBNode} rootNode\n */\nfunction readHeader (rootNode) {\n  // rootNode.data should be a buffer of the format:\n  // < varint(headerLength) | header | itemData... >\n  const rootData = rootNode.Data\n\n  if (!rootData) {\n    throw new Error('No data present')\n  }\n\n  const hdrLength = varint.decode(rootData)\n  const vBytes = varint.decode.bytes ?? 0\n\n  if (vBytes <= 0) {\n    throw new Error('Invalid Set header length')\n  }\n\n  if (vBytes + hdrLength > rootData.length) {\n    throw new Error('Impossibly large set header length')\n  }\n\n  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes)\n  const header = PinSet.toObject(PinSet.decode(hdrSlice), {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  })\n\n  if (header.version !== 1) {\n    throw new Error(`Unsupported Set version: ${header.version}`)\n  }\n\n  if (header.fanout > rootNode.Links.length) {\n    throw new Error('Impossibly large fanout')\n  }\n\n  return {\n    header: header,\n    data: rootData.slice(hdrLength + vBytes)\n  }\n}\n\n/**\n * @param {number} seed\n * @param {CID} key\n */\nfunction hash (seed, key) {\n  const buffer = new Uint8Array(4)\n  const dataView = new DataView(buffer.buffer)\n  dataView.setUint32(0, seed, true)\n  const encodedKey = uint8ArrayFromString(key.toString())\n  const data = uint8ArrayConcat([buffer, encodedKey], buffer.byteLength + encodedKey.byteLength)\n\n  return fnv1a(uint8ArrayToString(data))\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} node\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nasync function * walkItems (blockstore, node) {\n  const pbh = readHeader(node)\n  let idx = 0\n\n  for (const link of node.Links) {\n    if (idx < pbh.header.fanout) {\n      // the first pbh.header.fanout links are fanout bins\n      // if a fanout bin is not 'empty', dig into and walk its DAGLinks\n      const linkHash = link.Hash\n\n      if (!EMPTY_KEY.equals(linkHash)) {\n        // walk the links of this fanout bin\n        const buf = await blockstore.get(linkHash)\n        const node = dagPb.decode(buf)\n\n        yield * walkItems(blockstore, node)\n      }\n    } else {\n      // otherwise, the link is a pin\n      yield link.Hash\n    }\n\n    idx++\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {PBNode} rootNode\n * @param {string} name\n */\nexport async function * loadSet (blockstore, rootNode, name) {\n  const link = rootNode.Links.find(l => l.Name === name)\n\n  if (!link) {\n    throw new Error('No link found with name ' + name)\n  }\n\n  const buf = await blockstore.get(link.Hash)\n  const node = dagPb.decode(buf)\n\n  yield * walkItems(blockstore, node)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Pin[]} items\n */\nfunction storeItems (blockstore, items) {\n  return storePins(items, 0)\n\n  /**\n   * @param {Pin[]} pins\n   * @param {number} depth\n   */\n  async function storePins (pins, depth) {\n    const pbHeader = PinSet.encode({\n      version: 1,\n      fanout: DEFAULT_FANOUT,\n      seed: depth\n    }).finish()\n\n    const header = varint.encode(pbHeader.length)\n    const headerBuf = uint8ArrayConcat([header, pbHeader])\n    const fanoutLinks = []\n\n    for (let i = 0; i < DEFAULT_FANOUT; i++) {\n      fanoutLinks.push({\n        Name: '',\n        Tsize: 1,\n        Hash: EMPTY_KEY\n      })\n    }\n\n    if (pins.length <= MAX_ITEMS) {\n      const nodes = pins\n        .map(item => {\n          return ({\n            link: {\n              Name: '',\n              Tsize: 1,\n              Hash: item.key\n            },\n            data: item.data || new Uint8Array()\n          })\n        })\n        // sorting makes any ordering of `pins` produce the same DAGNode\n        .sort((a, b) => {\n          return uint8ArrayCompare(a.link.Hash.bytes, b.link.Hash.bytes)\n        })\n\n      const rootLinks = fanoutLinks.concat(nodes.map(item => item.link))\n      const rootData = uint8ArrayConcat([headerBuf, ...nodes.map(item => item.data)])\n\n      return {\n        Data: rootData,\n        Links: rootLinks\n      }\n    } else {\n      // If the array of pins is > MAX_ITEMS, we:\n      //  - distribute the pins among `DEFAULT_FANOUT` bins\n      //    - create a DAGNode for each bin\n      //      - add each pin as a DAGLink to that bin\n      //  - create a root DAGNode\n      //    - add each bin as a DAGLink\n      //  - send that root DAGNode via callback\n      // (using go-ipfs' \"wasteful but simple\" approach for consistency)\n      // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57\n\n      /** @type {Pin[][]} */\n      const bins = pins.reduce((bins, pin) => {\n        const n = hash(depth, pin.key) % DEFAULT_FANOUT\n        // @ts-ignore\n        bins[n] = n in bins ? bins[n].concat([pin]) : [pin]\n        return bins\n      }, [])\n\n      let idx = 0\n      for (const bin of bins) {\n        const child = await storePins(bin, depth + 1)\n\n        await storeChild(child, idx)\n\n        idx++\n      }\n\n      return {\n        Data: headerBuf,\n        Links: fanoutLinks\n      }\n    }\n\n    /**\n     * @param {PBNode} child\n     * @param {number} binIdx\n     */\n    async function storeChild (child, binIdx) {\n      const buf = dagPb.encode(child)\n      const digest = await sha256.digest(buf)\n      const cid = CID.createV0(digest)\n\n      await blockstore.put(cid, buf)\n\n      const size = child.Links.reduce((acc, curr) => acc + (curr.Tsize || 0), 0) + buf.length\n\n      fanoutLinks[binIdx] = {\n        Name: '',\n        Tsize: size,\n        Hash: cid\n      }\n    }\n  }\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {string} type\n * @param {CID[]} cids\n */\nexport async function storeSet (blockstore, type, cids) {\n  const rootNode = await storeItems(blockstore, cids.map(cid => {\n    return {\n      key: cid\n    }\n  }))\n  const buf = dagPb.encode(rootNode)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n\n  const size = rootNode.Links.reduce((acc, curr) => acc + curr.Tsize, 0) + buf.length\n\n  return {\n    Name: type,\n    Tsize: size,\n    Hash: cid\n  }\n}\n","\nimport { CID } from 'multiformats/cid'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as cbor from 'cborg'\nimport * as pinset from './pin-set.js'\nimport { cidToKey, PIN_DS_KEY, PinTypes } from './utils.js'\nimport length from 'it-length'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport * as mhd from 'multiformats/hashes/digest'\nimport { base32 } from 'multiformats/bases/base32'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = CID.decode(mh)\n  const pinRootBuf = await blockstore.get(cid)\n  const pinRoot = dagPb.decode(pinRootBuf)\n  let counter = 0\n  const pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cid)\n  await datastore.delete(PIN_DS_KEY)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = []\n  const directPins = []\n  let counter = 0\n  const pinCount = await length(pinstore.queryKeys({}))\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = CID.create(\n      pin.version || 0,\n      pin.codec || dagPb.code,\n      mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop()))\n    )\n\n    if (pin.depth === 0) {\n      onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n\n      directPins.push(cid)\n    } else {\n      onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = {\n    Links: [\n      await pinset.storeSet(blockstore, PinTypes.direct, directPins),\n      await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins)\n    ]\n  }\n  const buf = dagPb.encode(pinRoot)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n  await datastore.put(PIN_DS_KEY, cid.bytes)\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  const blockstore = backends.blocks\n  const datastore = backends.datastore\n  const pinstore = backends.pins\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDatastore)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDAG)\n  }\n}\n","\nimport { Key } from 'interface-datastore/key'\nimport { notFoundError } from 'datastore-core/errors'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config')\nexport const VERSION_KEY = new Key('/version')\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nexport function findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nasync function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw notFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(notFoundError())\n    }\n  })\n}\n\n/**\n * @param {Datastore} store\n */\nfunction wrapStore (store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store)\n  const originalHas = store.has.bind(store)\n  /**\n   * @param {Key} key\n   */\n  store.get = (key) => getWithFallback(key, originalGet, originalHas, store)\n  /**\n   * @param {Key} key\n   */\n  store.has = (key) => hasWithFallback(key, originalHas, store)\n\n  return store\n}\n\n/**\n * @param {import('./types').Backends} backends\n */\nexport function wrapBackends (backends) {\n  return {\n    ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  }\n}\n","\nimport { findLevelJs } from '../../utils.js'\nimport { fromString } from 'uint8arrays/from-string'\nimport { toString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (/** @type {any} */ err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n","\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Protocols = $root.Protocols = (() => {\n\n    /**\n     * Properties of a Protocols.\n     * @exports IProtocols\n     * @interface IProtocols\n     * @property {Array.<string>|null} [protocols] Protocols protocols\n     */\n\n    /**\n     * Constructs a new Protocols.\n     * @exports Protocols\n     * @classdesc Represents a Protocols.\n     * @implements IProtocols\n     * @constructor\n     * @param {IProtocols=} [p] Properties to set\n     */\n    function Protocols(p) {\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Protocols protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Protocols\n     * @instance\n     */\n    Protocols.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n     * @function encode\n     * @memberof Protocols\n     * @static\n     * @param {IProtocols} m Protocols message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Protocols.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(10).string(m.protocols[i]);\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a Protocols message from the specified reader or buffer.\n     * @function decode\n     * @memberof Protocols\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Protocols} Protocols\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Protocols.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Protocols\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Protocols} Protocols\n     */\n    Protocols.fromObject = function fromObject(d) {\n        if (d instanceof $root.Protocols)\n            return d;\n        var m = new $root.Protocols();\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Protocols.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Protocols\n     * @static\n     * @param {Protocols} m Protocols\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Protocols.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.protocols = [];\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Protocols to JSON.\n     * @function toJSON\n     * @memberof Protocols\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Protocols.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Protocols;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Addresses = $root.Addresses = (() => {\n\n    /**\n     * Properties of an Addresses.\n     * @exports IAddresses\n     * @interface IAddresses\n     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n     */\n\n    /**\n     * Constructs a new Addresses.\n     * @exports Addresses\n     * @classdesc Represents an Addresses.\n     * @implements IAddresses\n     * @constructor\n     * @param {IAddresses=} [p] Properties to set\n     */\n    function Addresses(p) {\n        this.addrs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Addresses addrs.\n     * @member {Array.<Addresses.IAddress>} addrs\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.addrs = $util.emptyArray;\n\n    /**\n     * Addresses certifiedRecord.\n     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.certifiedRecord = null;\n\n    /**\n     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses\n     * @static\n     * @param {IAddresses} m Addresses message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Addresses.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addrs != null && m.addrs.length) {\n            for (var i = 0; i < m.addrs.length; ++i)\n                $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\"))\n            $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes an Addresses message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses} Addresses\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Addresses.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addrs && m.addrs.length))\n                    m.addrs = [];\n                m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses} Addresses\n     */\n    Addresses.fromObject = function fromObject(d) {\n        if (d instanceof $root.Addresses)\n            return d;\n        var m = new $root.Addresses();\n        if (d.addrs) {\n            if (!Array.isArray(d.addrs))\n                throw TypeError(\".Addresses.addrs: array expected\");\n            m.addrs = [];\n            for (var i = 0; i < d.addrs.length; ++i) {\n                if (typeof d.addrs[i] !== \"object\")\n                    throw TypeError(\".Addresses.addrs: object expected\");\n                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n            }\n        }\n        if (d.certifiedRecord != null) {\n            if (typeof d.certifiedRecord !== \"object\")\n                throw TypeError(\".Addresses.certifiedRecord: object expected\");\n            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses\n     * @static\n     * @param {Addresses} m Addresses\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Addresses.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addrs = [];\n        }\n        if (o.defaults) {\n            d.certifiedRecord = null;\n        }\n        if (m.addrs && m.addrs.length) {\n            d.addrs = [];\n            for (var j = 0; j < m.addrs.length; ++j) {\n                d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n            }\n        }\n        if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n            d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Addresses to JSON.\n     * @function toJSON\n     * @memberof Addresses\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Addresses.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Addresses.Address = (function() {\n\n        /**\n         * Properties of an Address.\n         * @memberof Addresses\n         * @interface IAddress\n         * @property {Uint8Array|null} [multiaddr] Address multiaddr\n         * @property {boolean|null} [isCertified] Address isCertified\n         */\n\n        /**\n         * Constructs a new Address.\n         * @memberof Addresses\n         * @classdesc Represents an Address.\n         * @implements IAddress\n         * @constructor\n         * @param {Addresses.IAddress=} [p] Properties to set\n         */\n        function Address(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Address multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Address isCertified.\n         * @member {boolean|null|undefined} isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.isCertified = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Address _isCertified.\n         * @member {\"isCertified\"|undefined} _isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Object.defineProperty(Address.prototype, \"_isCertified\", {\n            get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.IAddress} m Address message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Address.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n                w.uint32(16).bool(m.isCertified);\n            return w;\n        };\n\n        /**\n         * Decodes an Address message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.Address\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.Address} Address\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Address.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                case 2:\n                    m.isCertified = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an Address message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.Address} Address\n         */\n        Address.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.Address)\n                return d;\n            var m = new $root.Addresses.Address();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            if (d.isCertified != null) {\n                m.isCertified = Boolean(d.isCertified);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an Address message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.Address} m Address\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Address.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n                d.isCertified = m.isCertified;\n                if (o.oneofs)\n                    d._isCertified = \"isCertified\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Address to JSON.\n         * @function toJSON\n         * @memberof Addresses.Address\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Address.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Address;\n    })();\n\n    Addresses.CertifiedRecord = (function() {\n\n        /**\n         * Properties of a CertifiedRecord.\n         * @memberof Addresses\n         * @interface ICertifiedRecord\n         * @property {number|null} [seq] CertifiedRecord seq\n         * @property {Uint8Array|null} [raw] CertifiedRecord raw\n         */\n\n        /**\n         * Constructs a new CertifiedRecord.\n         * @memberof Addresses\n         * @classdesc Represents a CertifiedRecord.\n         * @implements ICertifiedRecord\n         * @constructor\n         * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n         */\n        function CertifiedRecord(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CertifiedRecord seq.\n         * @member {number} seq\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CertifiedRecord raw.\n         * @member {Uint8Array} raw\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.raw = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CertifiedRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n                w.uint32(8).uint64(m.seq);\n            if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\"))\n                w.uint32(18).bytes(m.raw);\n            return w;\n        };\n\n        /**\n         * Decodes a CertifiedRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CertifiedRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seq = r.uint64();\n                    break;\n                case 2:\n                    m.raw = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         */\n        CertifiedRecord.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.CertifiedRecord)\n                return d;\n            var m = new $root.Addresses.CertifiedRecord();\n            if (d.seq != null) {\n                if ($util.Long)\n                    (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n                else if (typeof d.seq === \"string\")\n                    m.seq = parseInt(d.seq, 10);\n                else if (typeof d.seq === \"number\")\n                    m.seq = d.seq;\n                else if (typeof d.seq === \"object\")\n                    m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n            }\n            if (d.raw != null) {\n                if (typeof d.raw === \"string\")\n                    $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);\n                else if (d.raw.length)\n                    m.raw = d.raw;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.CertifiedRecord} m CertifiedRecord\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CertifiedRecord.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if ($util.Long) {\n                    var n = new $util.Long(0, 0, true);\n                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                } else\n                    d.seq = o.longs === String ? \"0\" : 0;\n                if (o.bytes === String)\n                    d.raw = \"\";\n                else {\n                    d.raw = [];\n                    if (o.bytes !== Array)\n                        d.raw = $util.newBuffer(d.raw);\n                }\n            }\n            if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n                if (typeof m.seq === \"number\")\n                    d.seq = o.longs === String ? String(m.seq) : m.seq;\n                else\n                    d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n            }\n            if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n                d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this CertifiedRecord to JSON.\n         * @function toJSON\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CertifiedRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CertifiedRecord;\n    })();\n\n    return Addresses;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Peer = $root.Peer = (() => {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\nexport const Address = $root.Address = (() => {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Envelope = $root.Envelope = (() => {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nexport { $root as default };\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const PeerRecord = $root.PeerRecord = (() => {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nexport { $root as default };\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc'],\n    [281, 0, 'webrtc-w3c'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.decode.bytes);\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.decode.bytes);\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.decode.bytes);\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n    const tuples = [];\n    const parts = str.split('/').slice(1); // skip first empty elem\n    if (parts.length === 1 && parts[0] === '') {\n        return [];\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([part]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            tuples.push([\n                part,\n                // should we need to check each path part to see if it's a proto?\n                // This would allow for other protocols to be added after a unix path,\n                // however it would have issues if the path had a protocol name in the path\n                cleanPath(parts.slice(p).join('/'))\n            ]);\n            break;\n        }\n        tuples.push([part, parts[p]]);\n    }\n    return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n    return tuples.map((tup) => {\n        if (!Array.isArray(tup)) {\n            tup = [tup];\n        }\n        const proto = protoFromTuple(tup);\n        if (tup.length > 1) {\n            return [proto.code, convertToBytes(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n    return tuples.map(tup => {\n        const proto = protoFromTuple(tup);\n        if (tup[1] != null) {\n            return [proto.code, convertToString(proto.code, tup[1])];\n        }\n        return [proto.code];\n    });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n        const proto = protoFromTuple(tup);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr);\n        return size + (varint.decode.bytes ?? 0);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.decode.bytes ?? 0;\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n    const a = bytesToTuples(buf);\n    const b = tuplesToStringTuples(a);\n    return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n    str = cleanPath(str);\n    const a = stringToStringTuples(str);\n    const b = stringTuplesToTuples(a);\n    return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n    return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n    const err = validateBytes(buf);\n    if (err != null) {\n        throw err;\n    }\n    return Uint8Array.from(buf); // copy\n}\nexport function validateBytes(buf) {\n    try {\n        bytesToTuples(buf); // try to parse. will throw if breaks\n    }\n    catch (err) {\n        return err;\n    }\n}\nexport function isValidBytes(buf) {\n    return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n    const proto = getProtocol(tup[0]);\n    return proto;\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n    constructor(addr) {\n        _DefaultMultiaddr_string.set(this, void 0);\n        _DefaultMultiaddr_tuples.set(this, void 0);\n        _DefaultMultiaddr_stringTuples.set(this, void 0);\n        this[_a] = true;\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        if (addr instanceof Uint8Array) {\n            this.bytes = codec.fromBytes(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            this.bytes = codec.fromString(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n    }\n    toString() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        const codes = [];\n        const buf = this.bytes;\n        let i = 0;\n        while (i < buf.length) {\n            const code = varint.decode(buf, i);\n            const n = varint.decode.bytes ?? 0;\n            const p = getProtocol(code);\n            const size = codec.sizeForAddr(p, buf.slice(i + n));\n            i += (size + n);\n            codes.push(code);\n        }\n        return codes;\n    }\n    protoNames() {\n        return this.protos().map(proto => proto.name);\n    }\n    tuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n    }\n    stringTuples() {\n        if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n            __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n        }\n        return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n    }\n    encapsulate(addr) {\n        addr = new DefaultMultiaddr(addr);\n        return new DefaultMultiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new DefaultMultiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            const tuples = this.stringTuples().filter((tuple) => {\n                if (tuple[0] === names.ipfs.code) {\n                    return true;\n                }\n                return false;\n            });\n            // Get the last ipfs tuple ['ipfs', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        let path = null;\n        try {\n            path = this.stringTuples().filter((tuple) => {\n                const proto = getProtocol(tuple[0]);\n                if (proto.path === true) {\n                    return true;\n                }\n                return false;\n            })[0][1];\n            if (path == null) {\n                path = null;\n            }\n        }\n        catch {\n            path = null;\n        }\n        return path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new DefaultMultiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n        return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n    }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","import $protobuf from 'protobufjs/minimal.js'\nimport { Key } from 'interface-datastore/key'\nimport { Protocols } from './pb/proto-book.js'\nimport { Addresses } from './pb/address-book.js'\nimport { Peer } from './pb/peer.js'\nimport { Envelope } from './pb/envelope.js'\nimport { PeerRecord } from './pb/peer-record.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n// @ts-expect-error Explicitly disable long.js support\n$protobuf.util.Long = undefined\n$protobuf.configure()\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderSingleDatastoreKey (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a single datastore key')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n    const [, prefix, type, peerId, metadataKey] = keyStr.split('/')\n\n    if (prefix !== 'peers') {\n      continue\n    }\n\n    if (!['protos', 'addrs', 'metadata', 'keys'].includes(type)) {\n      continue\n    }\n\n    if (!peerId) {\n      continue\n    }\n\n    peers[peerId] = peers[peerId] || {\n      addresses: [],\n      protocols: [],\n      metadata: []\n    }\n\n    if (type === 'protos') {\n      const protos = Protocols.decode(value)\n\n      peers[peerId].protocols = protos.protocols.sort()\n    } else if (type === 'addrs') {\n      const addrs = Addresses.decode(value)\n\n      peers[peerId].addresses = addrs.addrs.sort((a, b) => {\n        return multiaddr(a.multiaddr).toString().localeCompare(multiaddr(b.multiaddr).toString())\n      })\n\n      if (addrs.certifiedRecord && addrs.certifiedRecord.raw) {\n        peers[peerId].peerRecordEnvelope = addrs.certifiedRecord.raw\n      }\n    } else if (type === 'metadata') {\n      peers[peerId].metadata.push({ key: metadataKey, value })\n    } else if (type === 'keys') {\n      peers[peerId].pubKey = value\n    }\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const peerId of Object.keys(peers)) {\n    const peer = peers[peerId]\n    peer.metadata = peer.metadata.sort((/** @type {{ key: string }} */ a, /** @type {{ key: string }} */ b) => a.key.localeCompare(b.key))\n\n    const data = Peer.encode(peer).finish()\n\n    await backends.datastore.put(new Key(`/peers/${peerId}`), data)\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under a single datastore key')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storePeerUnderMultipleDatastoreKeys (backends, onProgress = () => {}) {\n  onProgress(0, 'Storing each peerstore key under a multiple datastore keys')\n\n  await backends.datastore.open()\n\n  /** @type {Record<string, any>} */\n  const peers = {}\n  /** @type {Key[]} */\n  const keys = []\n\n  for await (const { key, value } of backends.datastore.query({\n    prefix: '/peers'\n  })) {\n    keys.push(key)\n    const keyStr = key.toString()\n\n    const [, , peerId] = keyStr.split('/')\n\n    peers[peerId] = Peer.decode(value)\n  }\n\n  onProgress(33, 'Read peer data from store')\n\n  for (const key of keys) {\n    await backends.datastore.delete(key)\n  }\n\n  onProgress(66, 'Removed existing peer data from store')\n\n  for (const [peerId, peer] of Object.entries(peers)) {\n    if (peer.protocols && peer.protocols.length > 0) {\n      await backends.datastore.put(new Key(`/peers/protos/${peerId}`), Protocols.encode({\n        protocols: peer.protocols\n      }).finish())\n    }\n\n    if (peer.addresses && peer.addresses.length > 0) {\n      const peerRecordEnvelope = peer.peerRecordEnvelope\n      let certifiedRecord\n\n      if (peerRecordEnvelope) {\n        const envelope = Envelope.decode(peerRecordEnvelope)\n        const record = PeerRecord.decode(envelope.payload)\n\n        certifiedRecord = {\n          raw: peerRecordEnvelope,\n          seq: record.seq\n        }\n      }\n\n      await backends.datastore.put(new Key(`/peers/addrs/${peerId}`), Addresses.encode({\n        addrs: peer.addresses,\n        certifiedRecord\n      }).finish())\n    }\n\n    if (peer.metadata && peer.metadata.length > 0) {\n      for (const { key, value } of peer.metadata) {\n        await backends.datastore.put(new Key(`/peers/metadata/${peerId}/${key}`), value)\n      }\n    }\n\n    if (peer.pubKey) {\n      await backends.datastore.put(new Key(`/peers/keys/${peerId}`), peer.pubKey)\n    }\n  }\n\n  await backends.datastore.close()\n\n  onProgress(100, 'Stored each peerstore key under multiple datastore keys')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 12,\n  description: 'Store each peerstore peer under a single datastore key',\n  migrate: storePeerUnderSingleDatastoreKey,\n  revert: storePeerUnderMultipleDatastoreKeys\n}\n","import { migration as migration8 } from './migration-8/index.js'\nimport { migration as migration9 } from './migration-9/index.js'\nimport { migration as migration10 } from './migration-10/index.js'\nimport { migration as migration11 } from './migration-11/index.js'\nimport { migration as migration12 } from './migration-12/index.js'\n\n/**\n * @type {import('../types').Migration}\n */\nconst emptyMigration = {\n  description: 'Empty migration.',\n  // @ts-ignore\n  migrate: () => {},\n  // @ts-ignore\n  revert: () => {},\n  empty: true\n}\n\nexport default [\n  Object.assign({ version: 1 }, emptyMigration),\n  Object.assign({ version: 2 }, emptyMigration),\n  Object.assign({ version: 3 }, emptyMigration),\n  Object.assign({ version: 4 }, emptyMigration),\n  Object.assign({ version: 5 }, emptyMigration),\n  Object.assign({ version: 6 }, emptyMigration),\n  Object.assign({ version: 7 }, emptyMigration),\n  migration8,\n  migration9,\n  migration10,\n  migration11,\n  migration12\n]\n","\n/**\n * Exception raised when trying to revert migration that is not possible\n * to revert.\n */\nexport class NonReversibleMigrationError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NonReversibleMigrationError'\n    this.code = NonReversibleMigrationError.code\n    this.message = message\n  }\n}\nNonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION'\n\n/**\n * Exception raised when repo is not initialized.\n */\nexport class NotInitializedRepoError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'NotInitializedRepoError'\n    this.code = NotInitializedRepoError.code\n    this.message = message\n  }\n}\nNotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO'\n\n/**\n * Exception raised when required parameter is not provided.\n */\nexport class RequiredParameterError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'RequiredParameterError'\n    this.code = RequiredParameterError.code\n    this.message = message\n  }\n}\nRequiredParameterError.code = 'ERR_REQUIRED_PARAMETER'\n\n/**\n * Exception raised when value is not valid.\n */\nexport class InvalidValueError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'InvalidValueError'\n    this.code = InvalidValueError.code\n    this.message = message\n  }\n}\nInvalidValueError.code = 'ERR_INVALID_VALUE'\n\n/**\n * Exception raised when config is not passed.\n */\nexport class MissingRepoOptionsError extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor (message) {\n    super(message)\n    this.name = 'MissingRepoOptionsError'\n    this.code = MissingRepoOptionsError.code\n    this.message = message\n  }\n}\nMissingRepoOptionsError.code = 'ERR_MISSING_REPO_OPTIONS'\n","\nimport debug from 'debug'\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js'\nimport { MissingRepoOptionsError } from '../errors.js'\n\nconst log = debug('ipfs:repo:migrator:repo:init')\n\n/**\n * @param {import('../types').Backends} backends\n */\nexport async function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (/** @type {any} */ e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n","\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n","/* eslint complexity: [\"error\", 28] */\n\nimport defaultMigrations from './migrations/index.js'\nimport * as repoVersion from './repo/version.js'\nimport * as Errors from './errors.js'\nimport { wrapBackends } from './utils.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:migrator')\n\n/**\n * @typedef {import('./types').Migration} Migration\n * @typedef {import('./types').MigrationOptions} MigrationOptions\n * @typedef {import('./types').ProgressCallback} ProgressCallback\n * @typedef {import('./types').MigrationProgressCallback} MigrationProgressCallback\n */\n\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {Migration[]} [migrations] - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n */\nexport function getLatestMigrationVersion (migrations) {\n  migrations = migrations || defaultMigrations\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0\n  }\n\n  return migrations[migrations.length - 1].version\n}\n\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo should be migrated.\n * @param {MigrationOptions} [options] - Options for migration\n */\nexport async function migrate (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.')\n    return\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`)\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion)\n\n  let lock\n\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  try {\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break\n      }\n\n      if (migration.version <= currentVersion) {\n        continue\n      }\n\n      log(`Migrating version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.migrate(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1\n\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyMigratedVersion, backends)\n\n        throw new Error(`During migration to version ${migration.version} exception was raised: ${e.stack || e.message || e}`)\n      }\n\n      log(`Migrating to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion || getLatestMigrationVersion(migrations), backends)\n    }\n\n    log('Repo successfully migrated', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!')\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {import('./types').Backends} backends\n * @param {import('./types').RepoOptions} repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {number} toVersion - Version to which the repo will be reverted.\n * @param {MigrationOptions} [options] - Options for the reversion\n */\nexport async function revert (path, backends, repoOptions, toVersion, options = {}) {\n  const ignoreLock = options.ignoreLock ?? false\n  const onProgress = options.onProgress\n  const isDryRun = options.isDryRun ?? false\n  const migrations = options.migrations ?? defaultMigrations\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!')\n  }\n\n  if (!repoOptions) {\n    throw new errors.RequiredParameterError('repoOptions argument is required!')\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!')\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!')\n  }\n\n  // make sure we can read pre-level@5 datastores\n  backends = wrapBackends(backends)\n\n  const currentVersion = await repoVersion.getVersion(backends)\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.')\n    return\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`)\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true)\n\n  let lock\n  if (!isDryRun && !ignoreLock) {\n    lock = await repoOptions.repoLock.lock(path)\n  }\n\n  log(`Reverting from version ${currentVersion} to ${toVersion}`)\n\n  try {\n    const reversedMigrationArray = migrations.slice().reverse()\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break\n      }\n\n      if (migration.version > currentVersion) {\n        continue\n      }\n\n      log(`Reverting migration version ${migration.version}`)\n\n      try {\n        if (!isDryRun) {\n          /** @type {MigrationProgressCallback} */\n          let progressCallback = () => {}\n\n          if (onProgress) { // eslint-disable-line max-depth\n            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message)\n          }\n\n          await migration.revert(backends, progressCallback)\n        }\n      } catch (/** @type {any} */ e) {\n        const lastSuccessfullyRevertedVersion = migration.version\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`)\n        await repoVersion.setVersion(lastSuccessfullyRevertedVersion, backends)\n\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`\n        throw e\n      }\n\n      log(`Reverting to version ${migration.version} finished`)\n    }\n\n    if (!isDryRun) {\n      await repoVersion.setVersion(toVersion, backends)\n    }\n\n    log(`All migrations successfully reverted to version ${toVersion}!`)\n  } finally {\n    if (!isDryRun && !ignoreLock && lock) {\n      await lock.close()\n    }\n  }\n}\n\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {Migration[]} migrations\n * @param {number} fromVersion\n * @param {number} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n */\nfunction verifyAvailableMigrations (migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`)\n      }\n\n      migrationCounter++\n    }\n  }\n\n  if (migrationCounter !== (toVersion - fromVersion)) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`)\n  }\n}\n\nexport const getCurrentRepoVersion = repoVersion.getVersion\nexport const errors = Errors\nexport const migrations = defaultMigrations\n","/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\n        : s\n    }).join('.');\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  if (isNaN(floatValue)) {\n    return null;\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n","const word = '[a-fA-F\\\\d:]';\n\nconst boundry = options => options && options.includeBoundaries\n\t? `(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))`\n\t: '';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6segment = '[a-fA-F\\\\d]{1,4}';\n\nconst v6 = `\n(?:\n(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ipRegex = options => options && options.exact\n\t? v46Exact\n\t: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');\n\nipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');\nipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');\n\nexport default ipRegex;\n"],"file":"index-uM_bU_dM.js"}