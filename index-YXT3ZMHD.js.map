{"version":3,"file":"index-YXT3ZMHD.js","sources":["../../../../node_modules/@constl/ipa/node_modules/@libp2p/interface/dist/src/pubsub/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/interface/dist/src/transport/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/interface/dist/src/errors.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/vendor/varint.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/varint.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/hashes/digest.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/cid.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bytes.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/vendor/base-x.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base10.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base16.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base2.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base256emoji.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base32.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base36.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base58.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/base8.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/bases/identity.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/codecs/json.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/node_modules/multiformats/dist/src/basics.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/dist/src/util/bases.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/dist/src/to-string.js","../../../../node_modules/@constl/ipa/node_modules/uint8-varint/dist/src/index.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base10.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base16.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base2.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base256emoji.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base36.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base64.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/base8.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/bases/identity.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/codecs/json.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/node_modules/multiformats/dist/src/basics.js","../../../../node_modules/@constl/ipa/node_modules/uint8arrays/dist/src/from-string.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/ip.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/protocols-table.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/convert.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/codec.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/multiaddr.js","../../../../node_modules/@constl/ipa/node_modules/@multiformats/multiaddr/dist/src/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/constants.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/url.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/on.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/socket.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/contrib/backo2.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/manager.js","../../../../node_modules/@constl/ipa/node_modules/socket.io-client/build/esm/index.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/socket-to-conn.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/utils.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/listener.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/uint8arrays/dist/src/util/as-uint8array.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/uint8arrays/dist/src/alloc.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bytes.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/multiformats/src/basics.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/uint8arrays/dist/src/util/bases.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/node_modules/uint8arrays/dist/src/to-string.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/transport.js","../../../../node_modules/@constl/ipa/node_modules/@libp2p/webrtc-star/dist/src/index.js"],"sourcesContent":["/**\n * On the producing side:\n * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n *\n * On the consuming side:\n * * Enforce the fields to be present, reject otherwise.\n * * Propagate only if the fields are valid and signature can be verified, reject otherwise.\n */\nexport const StrictSign = 'StrictSign';\n/**\n * On the producing side:\n * * Build messages without the signature, key, from and seqno fields.\n * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n *\n * On the consuming side:\n * * Enforce the fields to be absent, reject otherwise.\n * * Propagate only if the fields are absent, reject otherwise.\n * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n */\nexport const StrictNoSign = 'StrictNoSign';\nexport var TopicValidatorResult;\n(function (TopicValidatorResult) {\n    /**\n     * The message is considered valid, and it should be delivered and forwarded to the network\n     */\n    TopicValidatorResult[\"Accept\"] = \"accept\";\n    /**\n     * The message is neither delivered nor forwarded to the network\n     */\n    TopicValidatorResult[\"Ignore\"] = \"ignore\";\n    /**\n     * The message is considered invalid, and it should be rejected\n     */\n    TopicValidatorResult[\"Reject\"] = \"reject\";\n})(TopicValidatorResult || (TopicValidatorResult = {}));\n//# sourceMappingURL=index.js.map","export const transportSymbol = Symbol.for('@libp2p/transport');\nexport function isTransport(other) {\n    return other != null && Boolean(other[transportSymbol]);\n}\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nexport var FaultTolerance;\n(function (FaultTolerance) {\n    /**\n     * should be used for failing in any listen circumstance\n     */\n    FaultTolerance[FaultTolerance[\"FATAL_ALL\"] = 0] = \"FATAL_ALL\";\n    /**\n     * should be used for not failing when not listening\n     */\n    FaultTolerance[FaultTolerance[\"NO_FATAL\"] = 1] = \"NO_FATAL\";\n})(FaultTolerance || (FaultTolerance = {}));\n//# sourceMappingURL=index.js.map","/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n    code;\n    type;\n    constructor(message = 'The operation was aborted') {\n        super(message);\n        this.code = AbortError.code;\n        this.type = AbortError.type;\n    }\n    static code = 'ABORT_ERR';\n    static type = 'aborted';\n}\nexport class CodeError extends Error {\n    code;\n    props;\n    constructor(message, code, props) {\n        super(message);\n        this.code = code;\n        this.name = props?.name ?? 'CodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\nexport class UnexpectedPeerError extends Error {\n    code;\n    constructor(message = 'Unexpected Peer') {\n        super(message);\n        this.code = UnexpectedPeerError.code;\n    }\n    static code = 'ERR_UNEXPECTED_PEER';\n}\nexport class InvalidCryptoExchangeError extends Error {\n    code;\n    constructor(message = 'Invalid crypto exchange') {\n        super(message);\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_EXCHANGE';\n}\nexport class InvalidCryptoTransmissionError extends Error {\n    code;\n    constructor(message = 'Invalid crypto transmission') {\n        super(message);\n        this.code = InvalidCryptoTransmissionError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_TRANSMISSION';\n}\n// Error codes\nexport const ERR_TIMEOUT = 'ERR_TIMEOUT';\nexport const ERR_INVALID_PARAMETERS = 'ERR_INVALID_PARAMETERS';\nexport const ERR_NOT_FOUND = 'ERR_NOT_FOUND';\nexport const ERR_INVALID_MESSAGE = 'ERR_INVALID_MESSAGE';\n//# sourceMappingURL=errors.js.map","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","/* eslint-disable */\nvar encode_1 = encode;\nvar MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n    out = out || [];\n    offset = offset || 0;\n    var oldOffset = offset;\n    while (num >= INT) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num /= 128;\n    }\n    while (num & MSBALL) {\n        out[offset++] = (num & 0xFF) | MSB;\n        num >>>= 7;\n    }\n    out[offset] = num | 0;\n    // @ts-ignore\n    encode.bytes = offset - oldOffset + 1;\n    return out;\n}\nvar decode = read;\nvar MSB$1 = 0x80, REST$1 = 0x7F;\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n    do {\n        if (counter >= l) {\n            // @ts-ignore\n            read.bytes = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf[counter++];\n        res += shift < 28\n            ? (b & REST$1) << shift\n            : (b & REST$1) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB$1);\n    // @ts-ignore\n    read.bytes = counter - offset;\n    return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (/** @type {number} */ value) {\n    return (value < N1 ? 1\n        : value < N2 ? 2\n            : value < N3 ? 3\n                : value < N4 ? 4\n                    : value < N5 ? 5\n                        : value < N6 ? 6\n                            : value < N7 ? 7\n                                : value < N8 ? 8\n                                    : value < N9 ? 9\n                                        : 10);\n};\nvar varint = {\n    encode: encode_1,\n    decode: decode,\n    encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;\n//# sourceMappingURL=varint.js.map","import varint from './vendor/varint.js';\nexport function decode(data, offset = 0) {\n    const code = varint.decode(data, offset);\n    return [code, varint.decode.bytes];\n}\nexport function encodeTo(int, target, offset = 0) {\n    varint.encode(int, target, offset);\n    return target;\n}\nexport function encodingLength(int) {\n    return varint.encodingLength(int);\n}\n//# sourceMappingURL=varint.js.map","import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n    const size = digest.byteLength;\n    const sizeOffset = varint.encodingLength(code);\n    const digestOffset = sizeOffset + varint.encodingLength(size);\n    const bytes = new Uint8Array(digestOffset + size);\n    varint.encodeTo(code, bytes, 0);\n    varint.encodeTo(size, bytes, sizeOffset);\n    bytes.set(digest, digestOffset);\n    return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n    const bytes = coerce(multihash);\n    const [code, sizeOffset] = varint.decode(bytes);\n    const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n    const digest = bytes.subarray(sizeOffset + digestOffset);\n    if (digest.byteLength !== size) {\n        throw new Error('Incorrect length');\n    }\n    return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    else {\n        const data = b;\n        return (a.code === data.code &&\n            a.size === data.size &&\n            data.bytes instanceof Uint8Array &&\n            equalBytes(a.bytes, data.bytes));\n    }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n    code;\n    size;\n    digest;\n    bytes;\n    /**\n     * Creates a multihash digest.\n     */\n    constructor(code, size, digest, bytes) {\n        this.code = code;\n        this.size = size;\n        this.digest = digest;\n        this.bytes = bytes;\n    }\n}\n//# sourceMappingURL=digest.js.map","import { base32 } from './bases/base32.js';\nimport { base58btc } from './bases/base58.js';\nimport { coerce } from './bytes.js';\nimport * as Digest from './hashes/digest.js';\nimport * as varint from './varint.js';\n// This way TS will also expose all the types from module\nexport * from './link/interface.js';\nexport function format(link, base) {\n    const { bytes, version } = link;\n    switch (version) {\n        case 0:\n            return toStringV0(bytes, baseCache(link), base ?? base58btc.encoder);\n        default:\n            return toStringV1(bytes, baseCache(link), (base ?? base32.encoder));\n    }\n}\nexport function toJSON(link) {\n    return {\n        '/': format(link)\n    };\n}\nexport function fromJSON(json) {\n    return CID.parse(json['/']);\n}\nconst cache = new WeakMap();\nfunction baseCache(cid) {\n    const baseCache = cache.get(cid);\n    if (baseCache == null) {\n        const baseCache = new Map();\n        cache.set(cid, baseCache);\n        return baseCache;\n    }\n    return baseCache;\n}\nexport class CID {\n    code;\n    version;\n    multihash;\n    bytes;\n    '/';\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param multihash - (Multi)hash of the of the content.\n     */\n    constructor(version, code, multihash, bytes) {\n        this.code = code;\n        this.version = version;\n        this.multihash = multihash;\n        this.bytes = bytes;\n        // flag to serializers that this is a CID and\n        // should be treated specially\n        this['/'] = bytes;\n    }\n    /**\n     * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n     * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n     *\n     * @deprecated\n     */\n    get asCID() {\n        return this;\n    }\n    // ArrayBufferView\n    get byteOffset() {\n        return this.bytes.byteOffset;\n    }\n    // ArrayBufferView\n    get byteLength() {\n        return this.bytes.byteLength;\n    }\n    toV0() {\n        switch (this.version) {\n            case 0: {\n                return this;\n            }\n            case 1: {\n                const { code, multihash } = this;\n                if (code !== DAG_PB_CODE) {\n                    throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n                }\n                // sha2-256\n                if (multihash.code !== SHA_256_CODE) {\n                    throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n                }\n                return (CID.createV0(multihash));\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n            }\n        }\n    }\n    toV1() {\n        switch (this.version) {\n            case 0: {\n                const { code, digest } = this.multihash;\n                const multihash = Digest.create(code, digest);\n                return (CID.createV1(this.code, multihash));\n            }\n            case 1: {\n                return this;\n            }\n            default: {\n                throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`);\n            }\n        }\n    }\n    equals(other) {\n        return CID.equals(this, other);\n    }\n    static equals(self, other) {\n        const unknown = other;\n        return (unknown != null &&\n            self.code === unknown.code &&\n            self.version === unknown.version &&\n            Digest.equals(self.multihash, unknown.multihash));\n    }\n    toString(base) {\n        return format(this, base);\n    }\n    toJSON() {\n        return { '/': format(this) };\n    }\n    link() {\n        return this;\n    }\n    [Symbol.toStringTag] = 'CID';\n    // Legacy\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `CID(${this.toString()})`;\n    }\n    /**\n     * Takes any input `value` and returns a `CID` instance if it was\n     * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n     * it will return value back. If `value` is not instance of this CID\n     * class, but is compatible CID it will return new instance of this\n     * `CID` class. Otherwise returns null.\n     *\n     * This allows two different incompatible versions of CID library to\n     * co-exist and interop as long as binary interface is compatible.\n     */\n    static asCID(input) {\n        if (input == null) {\n            return null;\n        }\n        const value = input;\n        if (value instanceof CID) {\n            // If value is instance of CID then we're all set.\n            return value;\n        }\n        else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n            // If value isn't instance of this CID class but `this.asCID === this` or\n            // `value['/'] === value.bytes` is true it is CID instance coming from a\n            // different implementation (diff version or duplicate). In that case we\n            // rebase it to this `CID` implementation so caller is guaranteed to get\n            // instance with expected API.\n            const { version, code, multihash, bytes } = value;\n            return new CID(version, code, multihash, bytes ?? encodeCID(version, code, multihash.bytes));\n        }\n        else if (value[cidSymbol] === true) {\n            // If value is a CID from older implementation that used to be tagged via\n            // symbol we still rebase it to the this `CID` implementation by\n            // delegating that to a constructor.\n            const { version, multihash, code } = value;\n            const digest = Digest.decode(multihash);\n            return CID.create(version, code, digest);\n        }\n        else {\n            // Otherwise value is not a CID (or an incompatible version of it) in\n            // which case we return `null`.\n            return null;\n        }\n    }\n    /**\n     * @param version - Version of the CID\n     * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n     * @param digest - (Multi)hash of the of the content.\n     */\n    static create(version, code, digest) {\n        if (typeof code !== 'number') {\n            throw new Error('String codecs are no longer supported');\n        }\n        if (!(digest.bytes instanceof Uint8Array)) {\n            throw new Error('Invalid digest');\n        }\n        switch (version) {\n            case 0: {\n                if (code !== DAG_PB_CODE) {\n                    throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n                }\n                else {\n                    return new CID(version, code, digest, digest.bytes);\n                }\n            }\n            case 1: {\n                const bytes = encodeCID(version, code, digest.bytes);\n                return new CID(version, code, digest, bytes);\n            }\n            default: {\n                throw new Error('Invalid version');\n            }\n        }\n    }\n    /**\n     * Simplified version of `create` for CIDv0.\n     */\n    static createV0(digest) {\n        return CID.create(0, DAG_PB_CODE, digest);\n    }\n    /**\n     * Simplified version of `create` for CIDv1.\n     *\n     * @param code - Content encoding format code.\n     * @param digest - Multihash of the content.\n     */\n    static createV1(code, digest) {\n        return CID.create(1, code, digest);\n    }\n    /**\n     * Decoded a CID from its binary representation. The byte array must contain\n     * only the CID with no additional bytes.\n     *\n     * An error will be thrown if the bytes provided do not contain a valid\n     * binary representation of a CID.\n     */\n    static decode(bytes) {\n        const [cid, remainder] = CID.decodeFirst(bytes);\n        if (remainder.length !== 0) {\n            throw new Error('Incorrect length');\n        }\n        return cid;\n    }\n    /**\n     * Decoded a CID from its binary representation at the beginning of a byte\n     * array.\n     *\n     * Returns an array with the first element containing the CID and the second\n     * element containing the remainder of the original byte array. The remainder\n     * will be a zero-length byte array if the provided bytes only contained a\n     * binary CID representation.\n     */\n    static decodeFirst(bytes) {\n        const specs = CID.inspectBytes(bytes);\n        const prefixSize = specs.size - specs.multihashSize;\n        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n        if (multihashBytes.byteLength !== specs.multihashSize) {\n            throw new Error('Incorrect length');\n        }\n        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n        const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n        const cid = specs.version === 0\n            ? CID.createV0(digest)\n            : CID.createV1(specs.codec, digest);\n        return [cid, bytes.subarray(specs.size)];\n    }\n    /**\n     * Inspect the initial bytes of a CID to determine its properties.\n     *\n     * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n     * bytes but for larger multicodec code values and larger multihash digest\n     * lengths these varints can be quite large. It is recommended that at least\n     * 10 bytes be made available in the `initialBytes` argument for a complete\n     * inspection.\n     */\n    static inspectBytes(initialBytes) {\n        let offset = 0;\n        const next = () => {\n            const [i, length] = varint.decode(initialBytes.subarray(offset));\n            offset += length;\n            return i;\n        };\n        let version = next();\n        let codec = DAG_PB_CODE;\n        if (version === 18) {\n            // CIDv0\n            version = 0;\n            offset = 0;\n        }\n        else {\n            codec = next();\n        }\n        if (version !== 0 && version !== 1) {\n            throw new RangeError(`Invalid CID version ${version}`);\n        }\n        const prefixSize = offset;\n        const multihashCode = next(); // multihash code\n        const digestSize = next(); // multihash length\n        const size = offset + digestSize;\n        const multihashSize = size - prefixSize;\n        return { version, codec, multihashCode, digestSize, multihashSize, size };\n    }\n    /**\n     * Takes cid in a string representation and creates an instance. If `base`\n     * decoder is not provided will use a default from the configuration. It will\n     * throw an error if encoding of the CID is not compatible with supplied (or\n     * a default decoder).\n     */\n    static parse(source, base) {\n        const [prefix, bytes] = parseCIDtoBytes(source, base);\n        const cid = CID.decode(bytes);\n        if (cid.version === 0 && source[0] !== 'Q') {\n            throw Error('Version 0 CID string must not include multibase prefix');\n        }\n        // Cache string representation to avoid computing it on `this.toString()`\n        baseCache(cid).set(prefix, source);\n        return cid;\n    }\n}\nfunction parseCIDtoBytes(source, base) {\n    switch (source[0]) {\n        // CIDv0 is parsed differently\n        case 'Q': {\n            const decoder = base ?? base58btc;\n            return [\n                base58btc.prefix,\n                decoder.decode(`${base58btc.prefix}${source}`)\n            ];\n        }\n        case base58btc.prefix: {\n            const decoder = base ?? base58btc;\n            return [base58btc.prefix, decoder.decode(source)];\n        }\n        case base32.prefix: {\n            const decoder = base ?? base32;\n            return [base32.prefix, decoder.decode(source)];\n        }\n        default: {\n            if (base == null) {\n                throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n            }\n            return [source[0], base.decode(source)];\n        }\n    }\n}\nfunction toStringV0(bytes, cache, base) {\n    const { prefix } = base;\n    if (prefix !== base58btc.prefix) {\n        throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n    }\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes).slice(1);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nfunction toStringV1(bytes, cache, base) {\n    const { prefix } = base;\n    const cid = cache.get(prefix);\n    if (cid == null) {\n        const cid = base.encode(bytes);\n        cache.set(prefix, cid);\n        return cid;\n    }\n    else {\n        return cid;\n    }\n}\nconst DAG_PB_CODE = 0x70;\nconst SHA_256_CODE = 0x12;\nfunction encodeCID(version, code, multihash) {\n    const codeOffset = varint.encodingLength(version);\n    const hashOffset = codeOffset + varint.encodingLength(code);\n    const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n    varint.encodeTo(version, bytes, 0);\n    varint.encodeTo(code, bytes, codeOffset);\n    bytes.set(multihash, hashOffset);\n    return bytes;\n}\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\n//# sourceMappingURL=cid.js.map","export const empty = new Uint8Array(0);\nexport function toHex(d) {\n    return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n}\nexport function fromHex(hex) {\n    const hexes = hex.match(/../g);\n    return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n}\nexport function equals(aa, bb) {\n    if (aa === bb)\n        return true;\n    if (aa.byteLength !== bb.byteLength) {\n        return false;\n    }\n    for (let ii = 0; ii < aa.byteLength; ii++) {\n        if (aa[ii] !== bb[ii]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function coerce(o) {\n    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n        return o;\n    if (o instanceof ArrayBuffer)\n        return new Uint8Array(o);\n    if (ArrayBuffer.isView(o)) {\n        return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n    }\n    throw new Error('Unknown type, must be binary type');\n}\nexport function isBinary(o) {\n    return o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n}\nexport function fromString(str) {\n    return new TextEncoder().encode(str);\n}\nexport function toString(b) {\n    return new TextDecoder().decode(b);\n}\n//# sourceMappingURL=bytes.js.map","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base(ALPHABET, name) {\n    if (ALPHABET.length >= 255) {\n        throw new TypeError('Alphabet too long');\n    }\n    var BASE_MAP = new Uint8Array(256);\n    for (var j = 0; j < BASE_MAP.length; j++) {\n        BASE_MAP[j] = 255;\n    }\n    for (var i = 0; i < ALPHABET.length; i++) {\n        var x = ALPHABET.charAt(i);\n        var xc = x.charCodeAt(0);\n        if (BASE_MAP[xc] !== 255) {\n            throw new TypeError(x + ' is ambiguous');\n        }\n        BASE_MAP[xc] = i;\n    }\n    var BASE = ALPHABET.length;\n    var LEADER = ALPHABET.charAt(0);\n    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n    /**\n     * @param {any[] | Iterable<number>} source\n     */\n    function encode(source) {\n        // @ts-ignore\n        if (source instanceof Uint8Array)\n            ;\n        else if (ArrayBuffer.isView(source)) {\n            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n        }\n        else if (Array.isArray(source)) {\n            source = Uint8Array.from(source);\n        }\n        if (!(source instanceof Uint8Array)) {\n            throw new TypeError('Expected Uint8Array');\n        }\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        var zeroes = 0;\n        var length = 0;\n        var pbegin = 0;\n        var pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n        var b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            var i = 0;\n            for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % BASE) >>> 0;\n                carry = (carry / BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        var it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        var str = LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    /**\n     * @param {string | string[]} source\n     */\n    function decodeUnsafe(source) {\n        if (typeof source !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        if (source.length === 0) {\n            return new Uint8Array();\n        }\n        var psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip and count leading '1's.\n        var zeroes = 0;\n        var length = 0;\n        while (source[psz] === LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        var b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return;\n            }\n            var i = 0;\n            for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return;\n        }\n        // Skip leading zeroes in b256.\n        var it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        var vch = new Uint8Array(zeroes + (size - it4));\n        var j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n    /**\n     * @param {string | string[]} string\n     */\n    function decode(string) {\n        var buffer = decodeUnsafe(string);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error(`Non-${name} character`);\n    }\n    return {\n        encode: encode,\n        decodeUnsafe: decodeUnsafe,\n        decode: decode\n    };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;\n//# sourceMappingURL=base-x.js.map","import { coerce } from '../bytes.js';\nimport basex from '../vendor/base-x.js';\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder {\n    name;\n    prefix;\n    baseEncode;\n    constructor(name, prefix, baseEncode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n    }\n    encode(bytes) {\n        if (bytes instanceof Uint8Array) {\n            return `${this.prefix}${this.baseEncode(bytes)}`;\n        }\n        else {\n            throw Error('Unknown type, must be binary type');\n        }\n    }\n}\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder {\n    name;\n    prefix;\n    baseDecode;\n    prefixCodePoint;\n    constructor(name, prefix, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        /* c8 ignore next 3 */\n        if (prefix.codePointAt(0) === undefined) {\n            throw new Error('Invalid prefix character');\n        }\n        this.prefixCodePoint = prefix.codePointAt(0);\n        this.baseDecode = baseDecode;\n    }\n    decode(text) {\n        if (typeof text === 'string') {\n            if (text.codePointAt(0) !== this.prefixCodePoint) {\n                throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            }\n            return this.baseDecode(text.slice(this.prefix.length));\n        }\n        else {\n            throw Error('Can only multibase decode strings');\n        }\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n}\nclass ComposedDecoder {\n    decoders;\n    constructor(decoders) {\n        this.decoders = decoders;\n    }\n    or(decoder) {\n        return or(this, decoder);\n    }\n    decode(input) {\n        const prefix = input[0];\n        const decoder = this.decoders[prefix];\n        if (decoder != null) {\n            return decoder.decode(input);\n        }\n        else {\n            throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n        }\n    }\n}\nexport function or(left, right) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return new ComposedDecoder({\n        ...(left.decoders ?? { [left.prefix]: left }),\n        ...(right.decoders ?? { [right.prefix]: right })\n    });\n}\nexport class Codec {\n    name;\n    prefix;\n    baseEncode;\n    baseDecode;\n    encoder;\n    decoder;\n    constructor(name, prefix, baseEncode, baseDecode) {\n        this.name = name;\n        this.prefix = prefix;\n        this.baseEncode = baseEncode;\n        this.baseDecode = baseDecode;\n        this.encoder = new Encoder(name, prefix, baseEncode);\n        this.decoder = new Decoder(name, prefix, baseDecode);\n    }\n    encode(input) {\n        return this.encoder.encode(input);\n    }\n    decode(input) {\n        return this.decoder.decode(input);\n    }\n}\nexport function from({ name, prefix, encode, decode }) {\n    return new Codec(name, prefix, encode, decode);\n}\nexport function baseX({ name, prefix, alphabet }) {\n    const { encode, decode } = basex(alphabet, name);\n    return from({\n        prefix,\n        name,\n        encode,\n        decode: (text) => coerce(decode(text))\n    });\n}\nfunction decode(string, alphabet, bitsPerChar, name) {\n    // Build the character lookup table:\n    const codes = {};\n    for (let i = 0; i < alphabet.length; ++i) {\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while (string[end - 1] === '=') {\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array((end * bitsPerChar / 8) | 0);\n    // Parse the data:\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    let written = 0; // Next byte to write\n    for (let i = 0; i < end; ++i) {\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(`Non-${name} character`);\n        }\n        // Append the bits to the buffer:\n        buffer = (buffer << bitsPerChar) | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & (buffer >> bits);\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n        throw new SyntaxError('Unexpected end of data');\n    }\n    return out;\n}\nfunction encode(data, alphabet, bitsPerChar) {\n    const pad = alphabet[alphabet.length - 1] === '=';\n    const mask = (1 << bitsPerChar) - 1;\n    let out = '';\n    let bits = 0; // Number of bits currently in the buffer\n    let buffer = 0; // Bits waiting to be written out, MSB first\n    for (let i = 0; i < data.length; ++i) {\n        // Slurp data into the buffer:\n        buffer = (buffer << 8) | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while (bits > bitsPerChar) {\n            bits -= bitsPerChar;\n            out += alphabet[mask & (buffer >> bits)];\n        }\n    }\n    // Partial character:\n    if (bits !== 0) {\n        out += alphabet[mask & (buffer << (bitsPerChar - bits))];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while (((out.length * bitsPerChar) & 7) !== 0) {\n            out += '=';\n        }\n    }\n    return out;\n}\n/**\n * RFC4648 Factory\n */\nexport function rfc4648({ name, prefix, bitsPerChar, alphabet }) {\n    return from({\n        prefix,\n        name,\n        encode(input) {\n            return encode(input, alphabet, bitsPerChar);\n        },\n        decode(input) {\n            return decode(input, alphabet, bitsPerChar, name);\n        }\n    });\n}\n//# sourceMappingURL=base.js.map","import { baseX } from './base.js';\nexport const base10 = baseX({\n    prefix: '9',\n    name: 'base10',\n    alphabet: '0123456789'\n});\n//# sourceMappingURL=base10.js.map","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n    prefix: 'f',\n    name: 'base16',\n    alphabet: '0123456789abcdef',\n    bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n    prefix: 'F',\n    name: 'base16upper',\n    alphabet: '0123456789ABCDEF',\n    bitsPerChar: 4\n});\n//# sourceMappingURL=base16.js.map","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n    prefix: '0',\n    name: 'base2',\n    alphabet: '01',\n    bitsPerChar: 1\n});\n//# sourceMappingURL=base2.js.map","import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = (alphabet.reduce((p, c, i) => { p[i] = c; return p; }, ([])));\nconst alphabetCharsToBytes = (alphabet.reduce((p, c, i) => { p[c.codePointAt(0)] = i; return p; }, ([])));\nfunction encode(data) {\n    return data.reduce((p, c) => {\n        p += alphabetBytesToChars[c];\n        return p;\n    }, '');\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str) {\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(`Non-base256emoji character: ${char}`);\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n    prefix: '🚀',\n    name: 'base256emoji',\n    encode,\n    decode\n});\n//# sourceMappingURL=base256emoji.js.map","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n    prefix: 'b',\n    name: 'base32',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n    bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n    prefix: 'B',\n    name: 'base32upper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n    bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n    prefix: 'c',\n    name: 'base32pad',\n    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n    bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n    prefix: 'C',\n    name: 'base32padupper',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n    prefix: 'v',\n    name: 'base32hex',\n    alphabet: '0123456789abcdefghijklmnopqrstuv',\n    bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n    prefix: 'V',\n    name: 'base32hexupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n    bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n    prefix: 't',\n    name: 'base32hexpad',\n    alphabet: '0123456789abcdefghijklmnopqrstuv=',\n    bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n    prefix: 'T',\n    name: 'base32hexpadupper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n    prefix: 'h',\n    name: 'base32z',\n    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n    bitsPerChar: 5\n});\n//# sourceMappingURL=base32.js.map","import { baseX } from './base.js';\nexport const base36 = baseX({\n    prefix: 'k',\n    name: 'base36',\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n    prefix: 'K',\n    name: 'base36upper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base36.js.map","import { baseX } from './base.js';\nexport const base58btc = baseX({\n    name: 'base58btc',\n    prefix: 'z',\n    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n    name: 'base58flickr',\n    prefix: 'Z',\n    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base58.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n    prefix: '7',\n    name: 'base8',\n    alphabet: '01234567',\n    bitsPerChar: 3\n});\n//# sourceMappingURL=base8.js.map","import { fromString, toString } from '../bytes.js';\nimport { from } from './base.js';\nexport const identity = from({\n    prefix: '\\x00',\n    name: 'identity',\n    encode: (buf) => toString(buf),\n    decode: (str) => fromString(str)\n});\n//# sourceMappingURL=identity.js.map","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 0x0200;\nexport function encode(node) {\n    return textEncoder.encode(JSON.stringify(node));\n}\nexport function decode(data) {\n    return JSON.parse(textDecoder.decode(data));\n}\n//# sourceMappingURL=json.js.map","import * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base2 from './bases/base2.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base8 from './bases/base8.js';\nimport * as identityBase from './bases/identity.js';\nimport * as json from './codecs/json.js';\nimport * as raw from './codecs/raw.js';\nimport * as identity from './hashes/identity.js';\nimport * as sha2 from './hashes/sha2.js';\nimport { CID, hasher, digest, varint, bytes } from './index.js';\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji };\nexport const hashes = { ...sha2, ...identity };\nexport const codecs = { raw, json };\nexport { CID, hasher, digest, varint, bytes };\n//# sourceMappingURL=basics.js.map","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec('utf8', 'u', (buf) => {\n    const decoder = new TextDecoder('utf8');\n    return 'u' + decoder.decode(buf);\n}, (str) => {\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', (buf) => {\n    let string = 'a';\n    for (let i = 0; i < buf.length; i++) {\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str) => {\n    str = str.substring(1);\n    const buf = allocUnsafe(str.length);\n    for (let i = 0; i < str.length; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    'utf-8': string,\n    hex: bases.base16,\n    latin1: ascii,\n    ascii,\n    binary: ascii,\n    ...bases\n};\nexport default BASES;\n//# sourceMappingURL=bases.js.map","import bases, {} from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map","/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\n/** Most significant bit of a byte */\nconst MSB = 0x80;\n/** Rest of the bits in a byte */\nconst REST = 0x7f;\nexport function encodingLength(value) {\n    if (value < N1) {\n        return 1;\n    }\n    if (value < N2) {\n        return 2;\n    }\n    if (value < N3) {\n        return 3;\n    }\n    if (value < N4) {\n        return 4;\n    }\n    if (value < N5) {\n        return 5;\n    }\n    if (value < N6) {\n        return 6;\n    }\n    if (value < N7) {\n        return 7;\n    }\n    if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n        throw new RangeError('Could not encode varint');\n    }\n    return 8;\n}\nexport function encodeUint8Array(value, buf, offset = 0) {\n    switch (encodingLength(value)) {\n        case 8: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 7: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 6: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 5: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value /= 128;\n        }\n        case 4: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 3: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 2: {\n            buf[offset++] = (value & 0xFF) | MSB;\n            value >>>= 7;\n        }\n        case 1: {\n            buf[offset++] = (value & 0xFF);\n            value >>>= 7;\n            break;\n        }\n        default: throw new Error('unreachable');\n    }\n    return buf;\n}\nexport function encodeUint8ArrayList(value, buf, offset = 0) {\n    switch (encodingLength(value)) {\n        case 8: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 7: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 6: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 5: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value /= 128;\n        }\n        case 4: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 3: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 2: {\n            buf.set(offset++, (value & 0xFF) | MSB);\n            value >>>= 7;\n        }\n        case 1: {\n            buf.set(offset++, (value & 0xFF));\n            value >>>= 7;\n            break;\n        }\n        default: throw new Error('unreachable');\n    }\n    return buf;\n}\nexport function decodeUint8Array(buf, offset) {\n    let b = buf[offset];\n    let res = 0;\n    res += b & REST;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 1];\n    res += (b & REST) << 7;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 2];\n    res += (b & REST) << 14;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 3];\n    res += (b & REST) << 21;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 4];\n    res += (b & REST) * N4;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 5];\n    res += (b & REST) * N5;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 6];\n    res += (b & REST) * N6;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf[offset + 7];\n    res += (b & REST) * N7;\n    if (b < MSB) {\n        return res;\n    }\n    throw new RangeError('Could not decode varint');\n}\nexport function decodeUint8ArrayList(buf, offset) {\n    let b = buf.get(offset);\n    let res = 0;\n    res += b & REST;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 1);\n    res += (b & REST) << 7;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 2);\n    res += (b & REST) << 14;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 3);\n    res += (b & REST) << 21;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 4);\n    res += (b & REST) * N4;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 5);\n    res += (b & REST) * N5;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 6);\n    res += (b & REST) * N6;\n    if (b < MSB) {\n        return res;\n    }\n    b = buf.get(offset + 7);\n    res += (b & REST) * N7;\n    if (b < MSB) {\n        return res;\n    }\n    throw new RangeError('Could not decode varint');\n}\nexport function encode(value, buf, offset = 0) {\n    if (buf == null) {\n        buf = allocUnsafe(encodingLength(value));\n    }\n    if (buf instanceof Uint8Array) {\n        return encodeUint8Array(value, buf, offset);\n    }\n    else {\n        return encodeUint8ArrayList(value, buf, offset);\n    }\n}\nexport function decode(buf, offset = 0) {\n    if (buf instanceof Uint8Array) {\n        return decodeUint8Array(buf, offset);\n    }\n    else {\n        return decodeUint8ArrayList(buf, offset);\n    }\n}\n//# sourceMappingURL=index.js.map","import { baseX } from './base.js';\nexport const base10 = baseX({\n    prefix: '9',\n    name: 'base10',\n    alphabet: '0123456789'\n});\n//# sourceMappingURL=base10.js.map","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n    prefix: 'f',\n    name: 'base16',\n    alphabet: '0123456789abcdef',\n    bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n    prefix: 'F',\n    name: 'base16upper',\n    alphabet: '0123456789ABCDEF',\n    bitsPerChar: 4\n});\n//# sourceMappingURL=base16.js.map","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n    prefix: '0',\n    name: 'base2',\n    alphabet: '01',\n    bitsPerChar: 1\n});\n//# sourceMappingURL=base2.js.map","import { from } from './base.js';\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂');\nconst alphabetBytesToChars = (alphabet.reduce((p, c, i) => { p[i] = c; return p; }, ([])));\nconst alphabetCharsToBytes = (alphabet.reduce((p, c, i) => { p[c.codePointAt(0)] = i; return p; }, ([])));\nfunction encode(data) {\n    return data.reduce((p, c) => {\n        p += alphabetBytesToChars[c];\n        return p;\n    }, '');\n}\nfunction decode(str) {\n    const byts = [];\n    for (const char of str) {\n        const byt = alphabetCharsToBytes[char.codePointAt(0)];\n        if (byt === undefined) {\n            throw new Error(`Non-base256emoji character: ${char}`);\n        }\n        byts.push(byt);\n    }\n    return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n    prefix: '🚀',\n    name: 'base256emoji',\n    encode,\n    decode\n});\n//# sourceMappingURL=base256emoji.js.map","import { baseX } from './base.js';\nexport const base36 = baseX({\n    prefix: 'k',\n    name: 'base36',\n    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n    prefix: 'K',\n    name: 'base36upper',\n    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n//# sourceMappingURL=base36.js.map","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n    prefix: 'm',\n    name: 'base64',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n    prefix: 'M',\n    name: 'base64pad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n    bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n    prefix: 'u',\n    name: 'base64url',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n    bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n    prefix: 'U',\n    name: 'base64urlpad',\n    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n    bitsPerChar: 6\n});\n//# sourceMappingURL=base64.js.map","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n    prefix: '7',\n    name: 'base8',\n    alphabet: '01234567',\n    bitsPerChar: 3\n});\n//# sourceMappingURL=base8.js.map","import { fromString, toString } from '../bytes.js';\nimport { from } from './base.js';\nexport const identity = from({\n    prefix: '\\x00',\n    name: 'identity',\n    encode: (buf) => toString(buf),\n    decode: (str) => fromString(str)\n});\n//# sourceMappingURL=identity.js.map","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 0x0200;\nexport function encode(node) {\n    return textEncoder.encode(JSON.stringify(node));\n}\nexport function decode(data) {\n    return JSON.parse(textDecoder.decode(data));\n}\n//# sourceMappingURL=json.js.map","import * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base2 from './bases/base2.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base8 from './bases/base8.js';\nimport * as identityBase from './bases/identity.js';\nimport * as json from './codecs/json.js';\nimport * as raw from './codecs/raw.js';\nimport * as identity from './hashes/identity.js';\nimport * as sha2 from './hashes/sha2.js';\nimport { CID, hasher, digest, varint, bytes } from './index.js';\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji };\nexport const hashes = { ...sha2, ...identity };\nexport const codecs = { raw, json };\nexport { CID, hasher, digest, varint, bytes };\n//# sourceMappingURL=basics.js.map","import { asUint8Array } from './util/as-uint8array.js';\nimport bases, {} from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n    }\n    // add multibase prefix\n    return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n//# sourceMappingURL=from-string.js.map","import { isIPv4, isIPv6 } from '@chainsafe/is-ip';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport { isIP } from '@chainsafe/is-ip';\nexport const isV4 = isIPv4;\nexport const isV6 = isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map","const V = -1;\nexport const names = {};\nexport const codes = {};\nexport const table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nexport function createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport { IpNet } from '@chainsafe/netmask';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nconst ip4Protocol = getProtocol('ip4');\nconst ip6Protocol = getProtocol('ip6');\nconst ipcidrProtocol = getProtocol('ipcidr');\nexport function convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return uint8ArrayToString(buf, 'base16'); // no clue. convert to hex\n    }\n}\nexport function convertToBytes(proto, str) {\n    const protocol = getProtocol(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return uint8ArrayFromString(str, 'base16'); // no clue. convert from hex\n    }\n}\nexport function convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new IpNet(addr, mask);\n}\nconst decoders = Object.values(bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!ip.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = uint8ArrayFromString(str);\n    const size = Uint8Array.from(varint.encode(buf.length));\n    return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = varint.decode(buf);\n    buf = buf.slice(varint.encodingLength(size));\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(varint.encode(mh.length));\n    return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(varint.encode(mb.length));\n    return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = varint.decode(buf);\n    const hash = buf.slice(varint.encodingLength(size));\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = varint.decode(buf);\n    const address = buf.slice(varint.encodingLength(size));\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = uint8ArrayToString(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map","import * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nexport function stringToMultiaddrParts(str) {\n    str = cleanPath(str);\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    const parts = str.split('/').slice(1);\n    if (parts.length === 1 && parts[0] === '') {\n        return {\n            bytes: new Uint8Array(),\n            string: '/',\n            tuples: [],\n            stringTuples: [],\n            path: null\n        };\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = getProtocol(part);\n        if (proto.size === 0) {\n            tuples.push([proto.code]);\n            stringTuples.push([proto.code]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = cleanPath(parts.slice(p).join('/'));\n            tuples.push([proto.code, convertToBytes(proto.code, path)]);\n            stringTuples.push([proto.code, path]);\n            break;\n        }\n        const bytes = convertToBytes(proto.code, parts[p]);\n        tuples.push([proto.code, bytes]);\n        stringTuples.push([proto.code, convertToString(proto.code, bytes)]);\n    }\n    return {\n        string: stringTuplesToString(stringTuples),\n        bytes: tuplesToBytes(tuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\nexport function bytesToMultiaddrParts(bytes) {\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    let i = 0;\n    while (i < bytes.length) {\n        const code = varint.decode(bytes, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, bytes.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            stringTuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = bytes.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > bytes.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n        const stringAddr = convertToString(code, addr);\n        stringTuples.push([code, stringAddr]);\n        if (p.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = stringAddr;\n            break;\n        }\n    }\n    return {\n        bytes: Uint8Array.from(bytes),\n        string: stringTuplesToString(stringTuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n    return uint8ArrayConcat(tuples.map((tup) => {\n        const proto = getProtocol(tup[0]);\n        let buf = Uint8Array.from(varint.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    }));\n}\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr));\n        return size + varint.encodingLength(size);\n    }\n}\nexport function bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = varint.decode(buf, i);\n        const n = varint.encodingLength(code);\n        const p = getProtocol(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\nexport function cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nexport function ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\n//# sourceMappingURL=codec.js.map","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [\n    getProtocol('dns').code,\n    getProtocol('dns4').code,\n    getProtocol('dns6').code,\n    getProtocol('dnsaddr').code\n];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        let parts;\n        if (addr instanceof Uint8Array) {\n            parts = bytesToMultiaddrParts(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            parts = stringToMultiaddrParts(addr);\n        }\n        else if (isMultiaddr(addr)) { // Multiaddr\n            parts = bytesToMultiaddrParts(addr.bytes);\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n        this.bytes = parts.bytes;\n        this.#string = parts.string;\n        this.#tuples = parts.tuples;\n        this.#stringTuples = parts.stringTuples;\n        this.#path = parts.path;\n    }\n    toString() {\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = getProtocol('tcp');\n        const udp = getProtocol('udp');\n        const ip4 = getProtocol('ip4');\n        const ip6 = getProtocol('ip6');\n        const dns6 = getProtocol('dns6');\n        const ip6zone = getProtocol('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = getProtocol(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = getProtocol(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n    }\n    protoCodes() {\n        return this.#tuples.map(([code]) => code);\n    }\n    protoNames() {\n        return this.#tuples.map(([code]) => getProtocol(code).name);\n    }\n    tuples() {\n        return this.#tuples;\n    }\n    stringTuples() {\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new Multiaddr(addr);\n        return new Multiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new Multiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            let tuples = [];\n            this.stringTuples().forEach(([code, name]) => {\n                if (code === names.p2p.code) {\n                    tuples.push([code, name]);\n                }\n                // if this is a p2p-circuit address, return the target peer id if present\n                // not the peer id of the relay\n                if (code === names['p2p-circuit'].code) {\n                    tuples = [];\n                }\n            });\n            // Get the last ipfs tuple ['p2p', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        return this.#path;\n    }\n    equals(addr) {\n        return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const addresses = await resolver(this, options);\n        return addresses.map((a) => new Multiaddr(a));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${this.#string})`;\n    }\n}\n//# sourceMappingURL=multiaddr.js.map","/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n * const addr =  multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * const addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolvers\n *\n * `multiaddr` allows multiaddrs to be resolved when appropriate resolvers are provided. This module already has resolvers available, but you can also create your own.  Resolvers should always be set in the same module that is calling `multiaddr.resolve()` to avoid conflicts if multiple versions of `multiaddr` are in your dependency tree.\n *\n * To provide multiaddr resolvers you can do:\n *\n * ```js\n * import { resolvers  } from '@multiformats/multiaddr'\n *\n * resolvers.set('dnsaddr', resolvers.dnsaddrResolver)\n * ```\n *\n * The available resolvers are:\n *\n * | Name              | type      | Description                         |\n * | ----------------- | --------- | ----------------------------------- |\n * | `dnsaddrResolver` | `dnsaddr` | dnsaddr resolution with TXT Records |\n *\n * A resolver receives a `Multiaddr` as a parameter and returns a `Promise<Array<string>>`.\n */\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js';\nimport { getProtocol } from './protocols-table.js';\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n    return Boolean(value?.[symbol]);\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n    return new MultiaddrClass(addr);\n}\nexport { getProtocol as protocols };\n//# sourceMappingURL=index.js.map","// p2p multi-address code\nexport const CODE_P2P = 421;\nexport const CODE_CIRCUIT = 290;\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 2000;\n//# sourceMappingURL=constants.js.map","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n","import { abortableSource } from 'abortable-iterator';\nimport { CLOSE_TIMEOUT } from './constants.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:webrtc-star:socket');\n/**\n * Convert a socket into a MultiaddrConnection\n * https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n */\nexport function toMultiaddrConnection(socket, options) {\n    const { sink, source } = socket;\n    const maConn = {\n        remoteAddr: options.remoteAddr,\n        async sink(source) {\n            if (options.signal != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await sink(source);\n            }\n            catch (err) {\n                // If aborted we can safely ignore\n                if (err.type !== 'aborted') {\n                    // If the source errored the socket will already have been destroyed by\n                    // toIterable.duplex(). If the socket errored it will already be\n                    // destroyed. There's nothing to do here except log the error & return.\n                    log.error(err);\n                }\n            }\n        },\n        source: (options.signal != null) ? abortableSource(source, options.signal) : source,\n        timeline: { open: Date.now() },\n        async close() {\n            if (socket.closed) {\n                return;\n            }\n            const start = Date.now();\n            // Attempt to end the socket. If it takes longer to close than the\n            // timeout, destroy it manually.\n            const timeout = setTimeout(() => {\n                if (maConn.remoteAddr != null) {\n                    const { host, port } = maConn.remoteAddr.toOptions();\n                    log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n                }\n                if (!socket.closed) {\n                    socket.close().catch(err => {\n                        log.error('could not close socket', err);\n                    });\n                }\n            }, CLOSE_TIMEOUT);\n            try {\n                await socket.close();\n            }\n            finally {\n                clearTimeout(timeout);\n            }\n        }\n    };\n    socket.addEventListener('close', () => {\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }, {\n        once: true\n    });\n    return maConn;\n}\n//# sourceMappingURL=socket-to-conn.js.map","import { multiaddr, isName } from '@multiformats/multiaddr';\nexport function cleanUrlSIO(ma) {\n    const maStrSplit = ma.toString().split('/');\n    const tcpProto = ma.protos()[1].name;\n    const wsProto = ma.protos()[2].name;\n    const tcpPort = ma.stringTuples()[1][1];\n    if (tcpProto !== 'tcp' || (wsProto !== 'ws' && wsProto !== 'wss')) {\n        throw new Error(`invalid multiaddr: ${ma.toString()}`);\n    }\n    if (!isName(ma)) {\n        return `http://${maStrSplit[2]}:${maStrSplit[4]}`;\n    }\n    if (wsProto === 'ws') {\n        return `http://${maStrSplit[2]}${tcpPort == null || tcpPort === '80' ? '' : `:${tcpPort}`}`;\n    }\n    if (wsProto === 'wss') {\n        return `https://${maStrSplit[2]}${tcpPort == null || tcpPort === '443' ? '' : `:${tcpPort}`}`;\n    }\n    throw new Error('invalid multiaddr: ' + ma.toString());\n}\nexport function cleanMultiaddr(maStr) {\n    const legacy = '/libp2p-webrtc-star';\n    if (maStr.startsWith(legacy)) {\n        maStr = maStr.substring(legacy.length, maStr.length);\n        let ma = multiaddr(maStr);\n        const tuppleIPFS = ma.stringTuples().filter((tupple) => {\n            return tupple[0] === 421; // ipfs code\n        })[0];\n        if (tuppleIPFS[1] == null) {\n            throw new Error('invalid multiaddr: ' + maStr);\n        }\n        ma = ma.decapsulate('p2p');\n        ma = ma.encapsulate('/p2p-webrtc-star');\n        ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`);\n        maStr = ma.toString();\n    }\n    return maStr;\n}\n//# sourceMappingURL=utils.js.map","import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { connect } from 'socket.io-client';\nimport pDefer from 'p-defer';\nimport { WebRTCReceiver } from '@libp2p/webrtc-peer';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanUrlSIO } from './utils.js';\nimport { CODE_P2P } from './constants.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:webrtc-star:listener');\nconst sioOptions = {\n    transports: ['websocket'],\n    path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed\n};\nclass SigServer extends EventEmitter {\n    constructor(signallingUrl, signallingAddr, upgrader, handler, channelOptions) {\n        super();\n        this.signallingAddr = signallingAddr;\n        this.socket = connect(signallingUrl, sioOptions);\n        this.connections = [];\n        this.channels = new Map();\n        this.pendingSignals = new Map();\n        this.upgrader = upgrader;\n        this.handler = handler;\n        this.channelOptions = channelOptions;\n        this.handleWsHandshake = this.handleWsHandshake.bind(this);\n        let previouslyConnected = false;\n        this.socket.on('connect_error', err => {\n            // @ts-expect-error `.type` is missing from the types\n            if (previouslyConnected && err.type === 'TransportError') {\n                // if we've had an open connection before, and this is a\n                // transport error, let socket.io's reconnect logic take over\n                return;\n            }\n            this.dispatchEvent(new CustomEvent('error', {\n                detail: err\n            }));\n        });\n        this.socket.on('error', (err) => {\n            this.dispatchEvent(new CustomEvent('error', {\n                detail: err\n            }));\n        });\n        this.socket.on('ws-handshake', this.handleWsHandshake);\n        this.socket.on('ws-peer', (maStr) => {\n            this.dispatchEvent(new CustomEvent('peer', {\n                detail: maStr\n            }));\n        });\n        this.socket.on('connect', () => {\n            this.socket.emit('ss-join', this.signallingAddr.toString());\n            if (previouslyConnected) {\n                this.dispatchEvent(new CustomEvent('reconnect'));\n            }\n        });\n        this.socket.once('connect', () => {\n            // make sure we can reconnect in future\n            previouslyConnected = true;\n            this.dispatchEvent(new CustomEvent('listening'));\n        });\n        this.socket.on('disconnect', () => {\n            this.dispatchEvent(new CustomEvent('disconnect'));\n        });\n    }\n    _createChannel(intentId, srcMultiaddr, dstMultiaddr) {\n        const channelOptions = {\n            ...this.channelOptions\n        };\n        const channel = new WebRTCReceiver(channelOptions);\n        const onError = (evt) => {\n            const err = evt.detail;\n            log.error('incoming connection errored', err);\n        };\n        channel.addEventListener('error', onError);\n        channel.addEventListener('close', () => {\n            channel.removeEventListener('error', onError);\n        }, {\n            once: true\n        });\n        channel.addEventListener('signal', (evt) => {\n            const signal = evt.detail;\n            this.socket.emit('ss-handshake', {\n                intentId,\n                srcMultiaddr,\n                dstMultiaddr,\n                answer: true,\n                signal\n            });\n        });\n        channel.addEventListener('ready', () => {\n            const maConn = toMultiaddrConnection(channel, { remoteAddr: this.signallingAddr });\n            log('new inbound connection %s', maConn.remoteAddr);\n            try {\n                this.upgrader.upgradeInbound(maConn)\n                    .then(conn => {\n                    log('inbound connection %s upgraded', maConn.remoteAddr);\n                    this.connections.push(maConn);\n                    const untrackConn = () => {\n                        this.connections = this.connections.filter(c => c !== maConn);\n                        this.channels.delete(intentId);\n                        this.pendingSignals.delete(intentId);\n                    };\n                    channel.addEventListener('close', untrackConn, {\n                        once: true\n                    });\n                    this.dispatchEvent(new CustomEvent('connection', {\n                        detail: conn\n                    }));\n                    this.handler(conn);\n                })\n                    .catch(err => {\n                    log.error('inbound connection failed to upgrade', err);\n                    maConn.close().catch(err => {\n                        log.error('inbound connection failed to close after failing to upgrade', err);\n                    });\n                });\n            }\n            catch (err) {\n                log.error('inbound connection failed to upgrade', err);\n                maConn.close().catch(err => {\n                    log.error('inbound connection failed to close after failing to upgrade', err);\n                });\n            }\n        }, {\n            once: true\n        });\n        return channel;\n    }\n    handleWsHandshake(offer) {\n        log('incoming handshake. signal type \"%s\" is answer %s', offer.signal.type, offer.answer);\n        if (offer.answer === true || offer.err != null || offer.intentId == null) {\n            return;\n        }\n        const intentId = offer.intentId;\n        let pendingSignals = this.pendingSignals.get(intentId);\n        if (pendingSignals == null) {\n            pendingSignals = [];\n            this.pendingSignals.set(intentId, pendingSignals);\n        }\n        pendingSignals.push(offer);\n        let channel = this.channels.get(intentId);\n        if (channel == null) {\n            if (offer.signal.type !== 'offer') {\n                log('handshake is not an offer and channel does not exist, buffering until we receive an offer');\n                return;\n            }\n            log('creating new channel to handle offer handshake');\n            channel = this._createChannel(offer.intentId, offer.srcMultiaddr, offer.dstMultiaddr);\n            this.channels.set(intentId, channel);\n        }\n        else {\n            log('channel already exists, using it to handle handshake');\n        }\n        while (pendingSignals.length > 0) {\n            const handshake = pendingSignals.shift();\n            if (handshake?.signal != null) {\n                channel.handleSignal(handshake.signal);\n            }\n        }\n    }\n    async close() {\n        // Close listener\n        this.socket.emit('ss-leave', this.signallingAddr.toString());\n        this.socket.removeAllListeners();\n        this.socket.close();\n        await Promise.all([\n            ...this.connections.map(async (maConn) => { await maConn.close(); }),\n            ...Array.from(this.channels.values()).map(async (channel) => { await channel.close(); })\n        ]);\n        this.dispatchEvent(new CustomEvent('close'));\n    }\n}\nclass WebRTCListener extends EventEmitter {\n    constructor(upgrader, handler, peerId, transport, options) {\n        super();\n        this.upgrader = upgrader;\n        this.handler = handler;\n        this.peerId = peerId;\n        this.transport = transport;\n        this.options = options;\n    }\n    async listen(ma) {\n        // Should only be used if not already listening\n        if (this.listeningAddr != null) {\n            throw errCode(new Error('listener already in use'), 'ERR_ALREADY_LISTENING');\n        }\n        const defer = pDefer(); // eslint-disable-line @typescript-eslint/no-invalid-void-type\n        // Should be kept unmodified\n        this.listeningAddr = ma;\n        let signallingAddr;\n        if (!ma.protoCodes().includes(CODE_P2P)) {\n            signallingAddr = ma.encapsulate(`/p2p/${this.peerId.toString()}`);\n        }\n        else {\n            signallingAddr = ma;\n        }\n        const signallingUrl = this.signallingUrl = cleanUrlSIO(ma);\n        log('connecting to signalling server on: %s', this.signallingUrl);\n        const server = new SigServer(this.signallingUrl, signallingAddr, this.upgrader, this.handler, this.options.channelOptions);\n        server.addEventListener('error', (evt) => {\n            const err = evt.detail;\n            log('error connecting to signalling server %o', err);\n            server.close().catch(err => {\n                log.error('error closing server after error', err);\n            });\n            defer.reject(err);\n        });\n        server.addEventListener('listening', () => {\n            log('connected to signalling server');\n            this.dispatchEvent(new CustomEvent('listening'));\n            defer.resolve();\n        });\n        server.addEventListener('peer', (evt) => {\n            this.transport.peerDiscovered(evt.detail);\n        });\n        server.addEventListener('connection', (evt) => {\n            const conn = evt.detail;\n            if (conn.remoteAddr == null) {\n                try {\n                    conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toString()}`);\n                }\n                catch (err) {\n                    log.error('could not determine remote address', err);\n                }\n            }\n            this.dispatchEvent(new CustomEvent('connection', {\n                detail: conn\n            }));\n        });\n        server.addEventListener('disconnect', () => {\n            // Ensure we error if we try to dial while we are disconnected from\n            // the signalling server\n            this.transport.sigServers.delete(signallingUrl);\n        });\n        server.addEventListener('reconnect', () => {\n            // We can dial via the signalling server again\n            this.transport.sigServers.set(signallingUrl, server);\n        });\n        // Store listen and signal reference addresses\n        this.transport.sigServers.set(this.signallingUrl, server);\n        await defer.promise;\n    }\n    async close() {\n        if (this.signallingUrl != null) {\n            const server = this.transport.sigServers.get(this.signallingUrl);\n            if (server != null) {\n                await server.close();\n                this.transport.sigServers.delete(this.signallingUrl);\n            }\n        }\n        this.dispatchEvent(new CustomEvent('close'));\n        // Reset state\n        this.listeningAddr = undefined;\n    }\n    getAddrs() {\n        if (this.listeningAddr != null) {\n            return [\n                this.listeningAddr\n            ];\n        }\n        return [];\n    }\n}\nexport function createListener(upgrader, handler, peerId, transport, options) {\n    return new WebRTCListener(upgrader, handler, peerId, transport, options);\n}\n//# sourceMappingURL=listener.js.map","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array(buf) {\n    if (globalThis.Buffer != null) {\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    return buf;\n}\n//# sourceMappingURL=as-uint8array.js.map","import { asUint8Array } from './util/as-uint8array.js';\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc(size = 0) {\n    if (globalThis.Buffer?.alloc != null) {\n        return asUint8Array(globalThis.Buffer.alloc(size));\n    }\n    return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n    if (globalThis.Buffer?.allocUnsafe != null) {\n        return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n    }\n    return new Uint8Array(size);\n}\n//# sourceMappingURL=alloc.js.map","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","// @ts-check\n\nimport { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n    return {\n        name,\n        prefix,\n        encoder: {\n            name,\n            prefix,\n            encode\n        },\n        decoder: {\n            decode\n        }\n    };\n}\nconst string = createCodec('utf8', 'u', (buf) => {\n    const decoder = new TextDecoder('utf8');\n    return 'u' + decoder.decode(buf);\n}, (str) => {\n    const encoder = new TextEncoder();\n    return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', (buf) => {\n    let string = 'a';\n    for (let i = 0; i < buf.length; i++) {\n        string += String.fromCharCode(buf[i]);\n    }\n    return string;\n}, (str) => {\n    str = str.substring(1);\n    const buf = allocUnsafe(str.length);\n    for (let i = 0; i < str.length; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n});\nconst BASES = {\n    utf8: string,\n    'utf-8': string,\n    hex: bases.base16,\n    latin1: ascii,\n    ascii,\n    binary: ascii,\n    ...bases\n};\nexport default BASES;\n//# sourceMappingURL=bases.js.map","import bases, {} from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n    const base = bases[encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n        return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map","import { logger } from '@libp2p/logger';\nimport errcode from 'err-code';\nimport { AbortError } from 'abortable-iterator';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT } from './constants.js';\nimport { createListener } from './listener.js';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanMultiaddr, cleanUrlSIO } from './utils.js';\nimport { WebRTCInitiator } from '@libp2p/webrtc-peer';\nimport randomBytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-transport';\nimport { symbol as peerDiscoverySymbol } from '@libp2p/interface-peer-discovery';\nconst webrtcSupport = 'RTCPeerConnection' in globalThis;\nconst log = logger('libp2p:webrtc-star');\nconst noop = () => { };\nexport class WebRTCStarDiscovery extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.started = false;\n    }\n    get [peerDiscoverySymbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/webrtc-star-discovery';\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    dispatchEvent(event) {\n        if (!this.isStarted()) {\n            return false;\n        }\n        return super.dispatchEvent(event);\n    }\n}\n/**\n * @class WebRTCStar\n */\nexport class WebRTCStar {\n    constructor(init) {\n        if (init?.wrtc != null) {\n            this.wrtc = init.wrtc;\n        }\n        // Keep Signalling references\n        this.sigServers = new Map();\n        // Discovery\n        this._discovery = new WebRTCStarDiscovery();\n        this.discovery = () => this._discovery;\n        this.peerDiscovered = this.peerDiscovered.bind(this);\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/webrtc-star';\n    }\n    async dial(ma, options) {\n        const rawConn = await this._connect(ma, options);\n        const maConn = toMultiaddrConnection(rawConn, { remoteAddr: ma, signal: options.signal });\n        log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options.signal?.aborted === true) {\n            throw new AbortError();\n        }\n        const channelOptions = {\n            ...(options.channelOptions ?? {})\n        };\n        // Use custom WebRTC implementation\n        if (this.wrtc != null) {\n            channelOptions.wrtc = this.wrtc;\n        }\n        const cOpts = ma.toOptions();\n        const intentId = uint8ArrayToString(randomBytes(36), 'hex');\n        return await new Promise((resolve, reject) => {\n            const sio = this.sigServers.get(cleanUrlSIO(ma));\n            if (sio?.socket == null) {\n                reject(errcode(new Error('unknown signal server to use'), 'ERR_UNKNOWN_SIGNAL_SERVER'));\n                return;\n            }\n            let connected = false;\n            log('dialing %s:%s', cOpts.host, cOpts.port);\n            const channel = new WebRTCInitiator(channelOptions);\n            const onError = (evt) => {\n                const err = evt.detail;\n                if (!connected) {\n                    const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;\n                    log.error(msg);\n                    done(err);\n                }\n            };\n            const onReady = () => {\n                connected = true;\n                log('connection opened %s:%s', cOpts.host, cOpts.port);\n                done();\n            };\n            const onAbort = () => {\n                log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n                channel.close().finally(() => {\n                    done(new AbortError());\n                });\n            };\n            const done = (err) => {\n                channel.removeEventListener('ready', onReady);\n                options.signal?.removeEventListener('abort', onAbort);\n                if (err == null) {\n                    resolve(channel);\n                }\n                else {\n                    reject(err);\n                }\n            };\n            channel.addEventListener('ready', onReady, {\n                once: true\n            });\n            channel.addEventListener('close', () => {\n                channel.removeEventListener('error', onError);\n            });\n            options.signal?.addEventListener('abort', onAbort);\n            channel.addEventListener('signal', (evt) => {\n                const signal = evt.detail;\n                sio.socket.emit('ss-handshake', {\n                    intentId,\n                    srcMultiaddr: sio.signallingAddr.toString(),\n                    dstMultiaddr: ma.toString(),\n                    signal\n                });\n            });\n            sio.socket.on('ws-handshake', (offer) => {\n                if (offer.intentId === intentId && offer.err != null) {\n                    channel.close().finally(() => {\n                        reject(errcode(new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n                    });\n                }\n                if (offer.intentId !== intentId || offer.answer == null || channel.closed) {\n                    return;\n                }\n                channel.handleSignal(offer.signal);\n            });\n        });\n    }\n    /**\n     * Creates a WebrtcStar listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`.\n     */\n    createListener(options) {\n        if (!webrtcSupport && this.wrtc == null) {\n            throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n        }\n        options.channelOptions = options.channelOptions ?? {};\n        if (this.wrtc != null) {\n            options.channelOptions.wrtc = this.wrtc;\n        }\n        if (this.peerId == null) {\n            throw errcode(new Error('PeerId not set'), 'ERR_MISSING_PEER_ID');\n        }\n        return createListener(options.upgrader, options.handler ?? noop, this.peerId, this, options);\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter((ma) => {\n            if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n                return false;\n            }\n            return mafmt.P2PWebRTCStar.matches(ma);\n        });\n    }\n    peerDiscovered(maStr) {\n        log('peer discovered: %s', maStr);\n        maStr = cleanMultiaddr(maStr);\n        const ma = multiaddr(maStr);\n        const peerIdStr = ma.getPeerId();\n        if (peerIdStr == null) {\n            return;\n        }\n        const peerId = peerIdFromString(peerIdStr);\n        this._discovery.dispatchEvent(new CustomEvent('peer', {\n            detail: {\n                id: peerId,\n                multiaddrs: [ma],\n                protocols: []\n            }\n        }));\n    }\n}\n//# sourceMappingURL=transport.js.map","import { WebRTCStar } from './transport.js';\nexport function webRTCStar(init = {}) {\n    const transport = new WebRTCStar(init);\n    return {\n        transport: (components) => {\n            transport.peerId = components.peerId;\n            return transport;\n        },\n        discovery: transport.discovery\n    };\n}\n//# sourceMappingURL=index.js.map"],"names":["TopicValidatorResult","FaultTolerance","CodeError","message","code","props","equals","aa","bb","ii","coerce","o","fromString","str","toString","b","base","ALPHABET","name","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","src","_brrp__multiformats_scope_baseX","Encoder$2","prefix","baseEncode","bytes","Decoder$2","baseDecode","text","decoder","or","ComposedDecoder$2","decoders","input","left","right","ComposedDecoder","Codec$2","Encoder","Decoder","from","Codec","baseX","alphabet","basex","bitsPerChar","codes","end","out","bits","written","value","data","pad","mask","rfc4648","base58btc","base58flickr","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","encode_1","MSB","REST","MSBALL","INT","num","offset","oldOffset","read","MSB$1","REST$1","buf","res","shift","counter","l","N1","N2","N3","N4","N5","N6","N7","N8","N9","varint","_brrp_varint","encodeTo","int","target","encodingLength","create","digest","sizeOffset","varint.encodingLength","digestOffset","varint.encodeTo","Digest","multihash","varint.decode","a","equalBytes","format","link","version","toStringV0","baseCache","toStringV1","cache","cid","CID","DAG_PB_CODE","SHA_256_CODE","Digest.create","other","self","unknown","Digest.equals","encodeCID","cidSymbol","Digest.decode","remainder","specs","prefixSize","multihashBytes","digestBytes","Digest.Digest","initialBytes","next","codec","multihashCode","digestSize","multihashSize","parseCIDtoBytes","codeOffset","hashOffset","Encoder$1","Decoder$1","ComposedDecoder$1","Codec$1","base10","base16","base16upper","base2","alphabetBytesToChars","p","c","alphabetCharsToBytes","byts","char","byt","base256emoji","base36","base36upper","base64","base64pad","base64url","base64urlpad","base8","identity","bases","identityBase","base58","createCodec","ascii","allocUnsafe","BASES","array","encoding","encodeUint8Array","encodeUint8ArrayList","decodeUint8Array","decodeUint8ArrayList","asUint8Array","isV4","isIPv4","isV6","isIPv6","toBytes","ip","byte","sections","isv4","v4Buffer","uint8ArrayToString","argv","word","view","result","V","names","table","row","proto","createProtocol","resolvable","path","getProtocol","convertToString","bytes2ip","bytes2str","bytes2port","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh2bytes","onion2bytes","onion32bytes","mb2bytes","uint8ArrayFromString","anybaseDecoder","acc","d","ipString","ip.isIP","ip.toBytes","ipBuff","ip.toString","port","varint.encode","uint8ArrayConcat","hash","mh","mbstr","mb","address","addr","portBuf","addrBytes","portBytes","stringToMultiaddrParts","cleanPath","tuples","stringTuples","parts","part","ParseError","stringTuplesToString","tuplesToBytes","bytesToMultiaddrParts","n","sizeForAddr","stringAddr","tup","inspect","symbol","DNS_CODES","Multiaddr","#string","#tuples","#stringTuples","#path","isMultiaddr","family","transport","host","zone","tcp","udp","ip4","ip6","dns6","ip6zone","addrString","s","tuple","peerIdStr","uint8ArrayEquals","options","resolvableProto","resolver","resolvers","protos","isName","multiaddr","MultiaddrClass","CODE_P2P","CODE_CIRCUIT","CLOSE_TIMEOUT","url","uri","loc","obj","parse","on","ev","fn","RESERVED_EVENTS","Socket","Emitter","io","nsp","opts","args","packet","PacketType","id","ack","isTransportWritable","_a","timeout","timer","withErr","resolve","reject","arg1","arg2","err","responseArgs","force","reason","description","listeners","listener","sent","pid","subDestroy","compress","Backoff","ms","rand","deviation","min","max","jitter","Manager","installTimerFunctions","_parser","parser","v","Engine","socket","openSubDestroy","onError","errorSub","e","nextTick","nsps","encodedPackets","delay","attempt","lookup","parsed","sameNamespace","newConnection","log","logger","toMultiaddrConnection","sink","maConn","abortableSource","start","cleanUrlSIO","ma","maStrSplit","tcpProto","wsProto","tcpPort","cleanMultiaddr","maStr","legacy","tuppleIPFS","tupple","sioOptions","SigServer","EventEmitter","signallingUrl","signallingAddr","upgrader","handler","channelOptions","connect","previouslyConnected","CustomEvent","intentId","srcMultiaddr","dstMultiaddr","channel","WebRTCReceiver","evt","signal","conn","untrackConn","offer","pendingSignals","handshake","WebRTCListener","peerId","errCode","defer","pDefer","server","createListener","webrtcSupport","noop","WebRTCStarDiscovery","peerDiscoverySymbol","event","WebRTCStar","init","rawConn","AbortError","cOpts","randomBytes","sio","errcode","connected","WebRTCInitiator","msg","done","onReady","onAbort","multiaddrs","mafmt.P2PWebRTCStar","peerIdFromString","webRTCStar","components"],"mappings":"+RAoBO,IAAIA,IACV,SAAUA,EAAsB,CAI7BA,EAAqB,OAAY,SAIjCA,EAAqB,OAAY,SAIjCA,EAAqB,OAAY,QACrC,GAAGA,KAAyBA,GAAuB,CAAA,EAAG,EC3B/C,IAAIC,IACV,SAAUA,EAAgB,CAIvBA,EAAeA,EAAe,UAAe,CAAC,EAAI,YAIlDA,EAAeA,EAAe,SAAc,CAAC,EAAI,UACrD,GAAGA,KAAmBA,GAAiB,CAAA,EAAG,ECDnC,MAAMC,WAAkB,KAAM,CACjC,KACA,MACA,YAAYC,EAASC,EAAMC,EAAO,CAC9B,MAAMF,CAAO,EACb,KAAK,KAAOC,EACZ,KAAK,KAAOC,GAAO,MAAQ,YAC3B,KAAK,MAAQA,GAAS,EACzB,CACL,CCjBO,SAASC,GAAOC,EAAIC,EAAI,CAC3B,GAAID,IAAOC,EACP,MAAO,GACX,GAAID,EAAG,aAAeC,EAAG,WACrB,MAAO,GAEX,QAASC,EAAK,EAAGA,EAAKF,EAAG,WAAYE,IACjC,GAAIF,EAAGE,CAAE,IAAMD,EAAGC,CAAE,EAChB,MAAO,GAGf,MAAO,EACX,CACO,SAASC,GAAOC,EAAG,CACtB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aAClD,OAAOA,EACX,GAAIA,aAAa,YACb,OAAO,IAAI,WAAWA,CAAC,EAC3B,GAAI,YAAY,OAAOA,CAAC,EACpB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE9D,MAAM,IAAI,MAAM,mCAAmC,CACvD,CAIO,SAASC,GAAWC,EAAK,CAC5B,OAAO,IAAI,YAAW,EAAG,OAAOA,CAAG,CACvC,CACO,SAASC,GAASC,EAAG,CACxB,OAAO,IAAI,YAAW,EAAG,OAAOA,CAAC,CACrC,CC7BA,SAASC,GAAKC,EAAUC,EAAM,CAC1B,GAAID,EAAS,QAAU,IACnB,MAAM,IAAI,UAAU,mBAAmB,EAG3C,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACjCD,EAASC,CAAC,EAAI,IAElB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACtC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IACjB,MAAM,IAAI,UAAUD,EAAI,eAAe,EAE3CH,EAASI,CAAE,EAAIF,CAClB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAI3C,SAASI,EAAOC,EAAQ,CAUpB,GARIA,aAAkB,aAEb,YAAY,OAAOA,CAAM,EAC9BA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAEtE,MAAM,QAAQA,CAAM,IACzBA,EAAS,WAAW,KAAKA,CAAM,IAE/B,EAAEA,aAAkB,YACpB,MAAM,IAAI,UAAU,qBAAqB,EAE7C,GAAIA,EAAO,SAAW,EAClB,MAAO,GAOX,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GACzCA,IACAF,IAMJ,QAHII,GAASD,EAAOD,GAAUL,EAAU,IAAO,EAC3CQ,EAAM,IAAI,WAAWD,CAAI,EAEtBF,IAAWC,GAAM,CAIpB,QAHIG,EAAQP,EAAOG,CAAM,EAErBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYM,IAAQ,GAAKA,IAAOhB,IACzEe,GAAU,IAAMD,EAAIE,CAAG,IAAO,EAC9BF,EAAIE,CAAG,EAAKD,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE/B,GAAIY,IAAU,EACV,MAAM,IAAI,MAAM,gBAAgB,EAEpCL,EAASV,EACTW,GACH,CAGD,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAChCA,IAIJ,QADIzB,EAAMY,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EACjBzB,GAAOI,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAEnC,OAAOzB,CACV,CAID,SAAS0B,EAAaV,EAAQ,CAC1B,GAAI,OAAOA,GAAW,SAClB,MAAM,IAAI,UAAU,iBAAiB,EAEzC,GAAIA,EAAO,SAAW,EAClB,OAAO,IAAI,WAEf,IAAIW,EAAM,EAEV,GAAIX,EAAOW,CAAG,IAAM,IAMpB,SAFIV,EAAS,EACTC,EAAS,EACNF,EAAOW,CAAG,IAAMf,GACnBK,IACAU,IAMJ,QAHIN,GAAUL,EAAO,OAASW,GAAOd,EAAU,IAAO,EAClDe,EAAO,IAAI,WAAWP,CAAI,EAEvBL,EAAOW,CAAG,GAAG,CAEhB,IAAIJ,EAAQjB,EAASU,EAAO,WAAWW,CAAG,CAAC,EAE3C,GAAIJ,IAAU,IACV,OAGJ,QADIf,EAAI,EACCqB,EAAMR,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYW,IAAQ,GAAKA,IAAOrB,IACzEe,GAAUZ,EAAOiB,EAAKC,CAAG,IAAO,EAChCD,EAAKC,CAAG,EAAKN,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE9B,GAAIA,IAAU,EACV,MAAM,IAAI,MAAM,gBAAgB,EAEpCL,EAASV,EACTmB,GACH,CAED,GAAIX,EAAOW,CAAG,IAAM,IAKpB,SADIG,EAAMT,EAAOH,EACVY,IAAQT,GAAQO,EAAKE,CAAG,IAAM,GACjCA,IAIJ,QAFIC,EAAM,IAAI,WAAWd,GAAUI,EAAOS,EAAI,EAC1CvB,EAAIU,EACDa,IAAQT,GACXU,EAAIxB,GAAG,EAAIqB,EAAKE,GAAK,EAEzB,OAAOC,GACV,CAID,SAASC,EAAOC,EAAQ,CACpB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EACA,OAAOA,EAEX,MAAM,IAAI,MAAM,OAAO7B,CAAI,YAAY,CAC1C,CACD,MAAO,CACH,OAAQU,EACR,aAAcW,EACd,OAAQM,CAChB,CACA,CACA,IAAIG,GAAMhC,GACNiC,GAAkCD,GChKtC,IAAAE,GAAA,KAAc,CACV,KACA,OACA,WACA,YAAYhC,EAAMiC,EAAQC,EAAY,CAClC,KAAK,KAAOlC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,CACrB,CACD,OAAOC,EAAO,CACV,GAAIA,aAAiB,WACjB,MAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAWA,CAAK,CAAC,GAG9C,MAAM,MAAM,mCAAmC,CAEtD,CACL,EAMAC,GAAA,KAAc,CACV,KACA,OACA,WACA,gBACA,YAAYpC,EAAMiC,EAAQI,EAAY,CAIlC,GAHA,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EAEVA,EAAO,YAAY,CAAC,IAAM,OAC1B,MAAM,IAAI,MAAM,0BAA0B,EAE9C,KAAK,gBAAkBA,EAAO,YAAY,CAAC,EAC3C,KAAK,WAAaI,CACrB,CACD,OAAOC,EAAM,CACT,GAAI,OAAOA,GAAS,SAAU,CAC1B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC7B,MAAM,MAAM,qCAAqC,KAAK,UAAUA,CAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE,EAEnJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CACxD,KAEG,OAAM,MAAM,mCAAmC,CAEtD,CACD,GAAGC,EAAS,CACR,OAAOC,GAAG,KAAMD,CAAO,CAC1B,CACL,EACAE,GAAA,KAAsB,CAClB,SACA,YAAYC,EAAU,CAClB,KAAK,SAAWA,CACnB,CACD,GAAGH,EAAS,CACR,OAAOC,GAAG,KAAMD,CAAO,CAC1B,CACD,OAAOI,EAAO,CACV,MAAMV,EAASU,EAAM,CAAC,EAChBJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,GAAW,KACX,OAAOA,EAAQ,OAAOI,CAAK,EAG3B,MAAM,WAAW,qCAAqC,KAAK,UAAUA,CAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAE3J,CACL,EACO,SAASH,GAAGI,EAAMC,EAAO,CAE5B,OAAO,IAAIC,GAAgB,CACvB,GAAIF,EAAK,UAAY,CAAE,CAACA,EAAK,MAAM,EAAGA,CAAM,EAC5C,GAAIC,EAAM,UAAY,CAAE,CAACA,EAAM,MAAM,EAAGA,CAAO,CACvD,CAAK,CACL,CACO,IAAAE,GAAA,KAAY,CACf,KACA,OACA,WACA,WACA,QACA,QACA,YAAY/C,EAAMiC,EAAQC,EAAYG,EAAY,CAC9C,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQhD,EAAMiC,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQjD,EAAMiC,EAAQI,CAAU,CACtD,CACD,OAAOM,EAAO,CACV,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACnC,CACD,OAAOA,EAAO,CACV,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACnC,CACL,EACO,SAASO,GAAK,CAAE,KAAAlD,EAAM,OAAAiC,EAAQ,OAAAvB,EAAQ,OAAAiB,CAAM,EAAI,CACnD,OAAO,IAAIwB,GAAMnD,EAAMiC,EAAQvB,EAAQiB,CAAM,CACjD,CACO,SAASyB,EAAM,CAAE,KAAApD,EAAM,OAAAiC,EAAQ,SAAAoB,CAAQ,EAAI,CAC9C,KAAM,CAAE,OAAA3C,EAAQ,OAAAiB,CAAM,EAAK2B,GAAMD,EAAUrD,CAAI,EAC/C,OAAOkD,GAAK,CACR,OAAAjB,EACA,KAAAjC,EACA,OAAAU,EACA,OAAS4B,GAAS9C,GAAOmC,EAAOW,CAAI,CAAC,CAC7C,CAAK,CACL,CACA,SAASX,GAAOC,EAAQyB,EAAUE,EAAavD,EAAM,CAEjD,MAAMwD,EAAQ,CAAA,EACd,QAASrD,EAAI,EAAGA,EAAIkD,EAAS,OAAQ,EAAElD,EACnCqD,EAAMH,EAASlD,CAAC,CAAC,EAAIA,EAGzB,IAAIsD,EAAM7B,EAAO,OACjB,KAAOA,EAAO6B,EAAM,CAAC,IAAM,KACvB,EAAEA,EAGN,MAAMC,EAAM,IAAI,WAAYD,EAAMF,EAAc,EAAK,CAAC,EAEtD,IAAII,EAAO,EACP9B,EAAS,EACT+B,EAAU,EACd,QAASzD,EAAI,EAAGA,EAAIsD,EAAK,EAAEtD,EAAG,CAE1B,MAAM0D,EAAQL,EAAM5B,EAAOzB,CAAC,CAAC,EAC7B,GAAI0D,IAAU,OACV,MAAM,IAAI,YAAY,OAAO7D,CAAI,YAAY,EAGjD6B,EAAUA,GAAU0B,EAAeM,EACnCF,GAAQJ,EAEJI,GAAQ,IACRA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAQ/B,GAAU8B,EAE1C,CAED,GAAIA,GAAQJ,GAAgB,IAAQ1B,GAAW,EAAI8B,EAC/C,MAAM,IAAI,YAAY,wBAAwB,EAElD,OAAOD,CACX,CACA,SAAShD,GAAOoD,EAAMT,EAAUE,EAAa,CACzC,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GACNC,EAAO,EACP9B,EAAS,EACb,QAAS1B,EAAI,EAAGA,EAAI2D,EAAK,OAAQ,EAAE3D,EAK/B,IAHA0B,EAAUA,GAAU,EAAKiC,EAAK3D,CAAC,EAC/BwD,GAAQ,EAEDA,EAAOJ,GACVI,GAAQJ,EACRG,GAAOL,EAASW,EAAQnC,GAAU8B,CAAK,EAQ/C,GAJIA,IAAS,IACTD,GAAOL,EAASW,EAAQnC,GAAW0B,EAAcI,CAAM,GAGvDI,EACA,KAASL,EAAI,OAASH,EAAe,GACjCG,GAAO,IAGf,OAAOA,CACX,CAIO,SAASO,EAAQ,CAAE,KAAAjE,EAAM,OAAAiC,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,EAAI,CAC7D,OAAOH,GAAK,CACR,OAAAjB,EACA,KAAAjC,EACA,OAAO2C,EAAO,CACV,OAAOjC,GAAOiC,EAAOU,EAAUE,CAAW,CAC7C,EACD,OAAOZ,EAAO,CACV,OAAOhB,GAAOgB,EAAOU,EAAUE,EAAavD,CAAI,CACnD,CACT,CAAK,CACL,CCvMO,MAAMkE,EAAYd,EAAM,CAC3B,KAAM,YACN,OAAQ,IACR,SAAU,4DACd,CAAC,EACYe,GAAef,EAAM,CAC9B,KAAM,eACN,OAAQ,IACR,SAAU,4DACd,CAAC,4HCTYgB,EAASH,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYI,GAAcJ,EAAQ,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYK,GAAYL,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYM,GAAiBN,EAAQ,CAClC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYO,GAAYP,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYQ,GAAiBR,EAAQ,CAClC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYS,GAAeT,EAAQ,CAChC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYU,GAAoBV,EAAQ,CACrC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYW,GAAUX,EAAQ,CAC3B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACjB,CAAC,sOCrDD,IAAIY,GAAWnE,GACXoE,GAAM,IAAMC,GAAO,IAAMC,GAAS,CAACD,GAAME,GAAM,KAAK,IAAI,EAAG,EAAE,EAMjE,SAASvE,GAAOwE,EAAKxB,EAAKyB,EAAQ,CAC9BzB,EAAMA,GAAO,GACbyB,EAASA,GAAU,EAEnB,QADIC,EAAYD,EACTD,GAAOD,IACVvB,EAAIyB,GAAQ,EAAKD,EAAM,IAAQJ,GAC/BI,GAAO,IAEX,KAAOA,EAAMF,IACTtB,EAAIyB,GAAQ,EAAKD,EAAM,IAAQJ,GAC/BI,KAAS,EAEb,OAAAxB,EAAIyB,CAAM,EAAID,EAAM,EAEpBxE,GAAO,MAAQyE,EAASC,EAAY,EAC7B1B,CACX,CACA,IAAI/B,GAAS0D,GACTC,GAAQ,IAAMC,GAAS,IAK3B,SAASF,GAAKG,EAAKL,EAAQ,CACvB,IAAIM,EAAM,EAAGN,EAASA,GAAU,EAAGO,EAAQ,EAAGC,EAAUR,EAAQtF,EAAG+F,EAAIJ,EAAI,OAC3E,EAAG,CACC,GAAIG,GAAWC,EAEX,MAAAP,GAAK,MAAQ,EACP,IAAI,WAAW,yBAAyB,EAElDxF,EAAI2F,EAAIG,GAAS,EACjBF,GAAOC,EAAQ,IACR7F,EAAI0F,KAAWG,GACf7F,EAAI0F,IAAU,KAAK,IAAI,EAAGG,CAAK,EACtCA,GAAS,CACjB,OAAa7F,GAAKyF,IAEd,OAAAD,GAAK,MAAQM,EAAUR,EAChBM,CACX,CACA,IAAII,GAAK,KAAK,IAAI,EAAG,CAAC,EAClBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBxF,GAAS,SAAgCgD,EAAO,CAChD,OAAQA,EAAQgC,GAAK,EACfhC,EAAQiC,GAAK,EACTjC,EAAQkC,GAAK,EACTlC,EAAQmC,GAAK,EACTnC,EAAQoC,GAAK,EACTpC,EAAQqC,GAAK,EACTrC,EAAQsC,GAAK,EACTtC,EAAQuC,GAAK,EACTvC,EAAQwC,GAAK,EACT,EAC1C,EACIC,GAAS,CACT,OAAQzB,GACR,OAAQlD,GACR,eAAgBd,EACpB,EACI0F,GAAeD,GC1EZ,SAAS3E,GAAOmC,EAAMqB,EAAS,EAAG,CAErC,MAAO,CADMmB,GAAO,OAAOxC,EAAMqB,CAAM,EACzBmB,GAAO,OAAO,KAAK,CACrC,CACO,SAASE,GAASC,EAAKC,EAAQvB,EAAS,EAAG,CAC9CmB,OAAAA,GAAO,OAAOG,EAAKC,EAAQvB,CAAM,EAC1BuB,CACX,CACO,SAASC,GAAeF,EAAK,CAChC,OAAOH,GAAO,eAAeG,CAAG,CACpC,CCNO,SAASG,GAAO1H,EAAM2H,EAAQ,CACjC,MAAM7F,EAAO6F,EAAO,WACdC,EAAaC,GAAsB7H,CAAI,EACvC8H,EAAeF,EAAaC,GAAsB/F,CAAI,EACtDmB,EAAQ,IAAI,WAAW6E,EAAehG,CAAI,EAChDiG,OAAAA,GAAgB/H,EAAMiD,EAAO,CAAC,EAC9B8E,GAAgBjG,EAAMmB,EAAO2E,CAAU,EACvC3E,EAAM,IAAI0E,EAAQG,CAAY,EACvB,IAAIE,GAAOhI,EAAM8B,EAAM6F,EAAQ1E,CAAK,CAC/C,CAIO,SAASR,GAAOwF,EAAW,CAC9B,MAAMhF,EAAQ3C,GAAO2H,CAAS,EACxB,CAACjI,EAAM4H,CAAU,EAAIM,GAAcjF,CAAK,EACxC,CAACnB,EAAMgG,CAAY,EAAII,GAAcjF,EAAM,SAAS2E,CAAU,CAAC,EAC/DD,EAAS1E,EAAM,SAAS2E,EAAaE,CAAY,EACvD,GAAIH,EAAO,aAAe7F,EACtB,MAAM,IAAI,MAAM,kBAAkB,EAEtC,OAAO,IAAIkG,GAAOhI,EAAM8B,EAAM6F,EAAQ1E,CAAK,CAC/C,CACO,SAAS/C,GAAOiI,EAAGxH,EAAG,CACzB,GAAIwH,IAAMxH,EACN,MAAO,GAEN,CACD,MAAMiE,EAAOjE,EACb,OAAQwH,EAAE,OAASvD,EAAK,MACpBuD,EAAE,OAASvD,EAAK,MAChBA,EAAK,iBAAiB,YACtBwD,GAAWD,EAAE,MAAOvD,EAAK,KAAK,CACrC,CACL,CAKO,MAAMoD,EAAO,CAChB,KACA,KACA,OACA,MAIA,YAAYhI,EAAM8B,EAAM6F,EAAQ1E,EAAO,CACnC,KAAK,KAAOjD,EACZ,KAAK,KAAO8B,EACZ,KAAK,OAAS6F,EACd,KAAK,MAAQ1E,CAChB,CACL,CCnDO,SAASoF,GAAOC,EAAM1H,EAAM,CAC/B,KAAM,CAAE,MAAAqC,EAAO,QAAAsF,CAAS,EAAGD,EAC3B,OAAQC,EAAO,CACX,IAAK,GACD,OAAOC,GAAWvF,EAAOwF,GAAUH,CAAI,EAAG1H,GAAQoE,EAAU,OAAO,EACvE,QACI,OAAO0D,GAAWzF,EAAOwF,GAAUH,CAAI,EAAI1H,GAAQsE,EAAO,QACjE,CACL,CASA,MAAMyD,GAAQ,IAAI,QAClB,SAASF,GAAUG,EAAK,CACpB,MAAMH,EAAYE,GAAM,IAAIC,CAAG,EAC/B,GAAIH,GAAa,KAAM,CACnB,MAAMA,EAAY,IAAI,IACtBE,OAAAA,GAAM,IAAIC,EAAKH,CAAS,EACjBA,CACV,CACD,OAAOA,CACX,CACO,MAAMI,CAAI,CACb,KACA,QACA,UACA,MACA,IAMA,YAAYN,EAASvI,EAAMiI,EAAWhF,EAAO,CACzC,KAAK,KAAOjD,EACZ,KAAK,QAAUuI,EACf,KAAK,UAAYN,EACjB,KAAK,MAAQhF,EAGb,KAAK,GAAG,EAAIA,CACf,CAOD,IAAI,OAAQ,CACR,OAAO,IACV,CAED,IAAI,YAAa,CACb,OAAO,KAAK,MAAM,UACrB,CAED,IAAI,YAAa,CACb,OAAO,KAAK,MAAM,UACrB,CACD,MAAO,CACH,OAAQ,KAAK,QAAO,CAChB,IAAK,GACD,OAAO,KAEX,IAAK,GAAG,CACJ,KAAM,CAAE,KAAAjD,EAAM,UAAAiI,CAAW,EAAG,KAC5B,GAAIjI,IAAS8I,EACT,MAAM,IAAI,MAAM,0CAA0C,EAG9D,GAAIb,EAAU,OAASc,GACnB,MAAM,IAAI,MAAM,oDAAoD,EAExE,OAAQF,EAAI,SAASZ,CAAS,CACjC,CACD,QACI,MAAM,MAAM,+BAA+B,KAAK,OAAO,4CAA4C,CAE1G,CACJ,CACD,MAAO,CACH,OAAQ,KAAK,QAAO,CAChB,IAAK,GAAG,CACJ,KAAM,CAAE,KAAAjI,EAAM,OAAA2H,GAAW,KAAK,UACxBM,EAAYe,GAAchJ,EAAM2H,CAAM,EAC5C,OAAQkB,EAAI,SAAS,KAAK,KAAMZ,CAAS,CAC5C,CACD,IAAK,GACD,OAAO,KAEX,QACI,MAAM,MAAM,+BAA+B,KAAK,OAAO,4CAA4C,CAE1G,CACJ,CACD,OAAOgB,EAAO,CACV,OAAOJ,EAAI,OAAO,KAAMI,CAAK,CAChC,CACD,OAAO,OAAOC,EAAMD,EAAO,CACvB,MAAME,EAAUF,EAChB,OAAQE,GAAW,MACfD,EAAK,OAASC,EAAQ,MACtBD,EAAK,UAAYC,EAAQ,SACzBC,GAAcF,EAAK,UAAWC,EAAQ,SAAS,CACtD,CACD,SAASvI,EAAM,CACX,OAAOyH,GAAO,KAAMzH,CAAI,CAC3B,CACD,QAAS,CACL,MAAO,CAAE,IAAKyH,GAAO,IAAI,CAAC,CAC7B,CACD,MAAO,CACH,OAAO,IACV,CACD,CAAC,OAAO,WAAW,EAAI,MAEvB,CAAC,OAAO,IAAI,4BAA4B,CAAC,GAAI,CACzC,MAAO,OAAO,KAAK,SAAU,CAAA,GAChC,CAWD,OAAO,MAAM5E,EAAO,CAChB,GAAIA,GAAS,KACT,OAAO,KAEX,MAAMkB,EAAQlB,EACd,GAAIkB,aAAiBkE,EAEjB,OAAOlE,EAEN,GAAKA,EAAM,GAAG,GAAK,MAAQA,EAAM,GAAG,IAAMA,EAAM,OAAUA,EAAM,QAAUA,EAAO,CAMlF,KAAM,CAAE,QAAA4D,EAAS,KAAAvI,EAAM,UAAAiI,EAAW,MAAAhF,CAAK,EAAK0B,EAC5C,OAAO,IAAIkE,EAAIN,EAASvI,EAAMiI,EAAWhF,GAASoG,GAAUd,EAASvI,EAAMiI,EAAU,KAAK,CAAC,CAC9F,SACQtD,EAAM2E,EAAS,IAAM,GAAM,CAIhC,KAAM,CAAE,QAAAf,EAAS,UAAAN,EAAW,KAAAjI,CAAI,EAAK2E,EAC/BgD,EAAS4B,GAActB,CAAS,EACtC,OAAOY,EAAI,OAAON,EAASvI,EAAM2H,CAAM,CAC1C,KAIG,QAAO,IAEd,CAMD,OAAO,OAAOY,EAASvI,EAAM2H,EAAQ,CACjC,GAAI,OAAO3H,GAAS,SAChB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,GAAI,EAAE2H,EAAO,iBAAiB,YAC1B,MAAM,IAAI,MAAM,gBAAgB,EAEpC,OAAQY,EAAO,CACX,IAAK,GAAG,CACJ,GAAIvI,IAAS8I,EACT,MAAM,IAAI,MAAM,wCAAwCA,CAAW,kBAAkB,EAGrF,OAAO,IAAID,EAAIN,EAASvI,EAAM2H,EAAQA,EAAO,KAAK,CAEzD,CACD,IAAK,GAAG,CACJ,MAAM1E,EAAQoG,GAAUd,EAASvI,EAAM2H,EAAO,KAAK,EACnD,OAAO,IAAIkB,EAAIN,EAASvI,EAAM2H,EAAQ1E,CAAK,CAC9C,CACD,QACI,MAAM,IAAI,MAAM,iBAAiB,CAExC,CACJ,CAID,OAAO,SAAS0E,EAAQ,CACpB,OAAOkB,EAAI,OAAO,EAAGC,EAAanB,CAAM,CAC3C,CAOD,OAAO,SAAS3H,EAAM2H,EAAQ,CAC1B,OAAOkB,EAAI,OAAO,EAAG7I,EAAM2H,CAAM,CACpC,CAQD,OAAO,OAAO1E,EAAO,CACjB,KAAM,CAAC2F,EAAKY,CAAS,EAAIX,EAAI,YAAY5F,CAAK,EAC9C,GAAIuG,EAAU,SAAW,EACrB,MAAM,IAAI,MAAM,kBAAkB,EAEtC,OAAOZ,CACV,CAUD,OAAO,YAAY3F,EAAO,CACtB,MAAMwG,EAAQZ,EAAI,aAAa5F,CAAK,EAC9ByG,EAAaD,EAAM,KAAOA,EAAM,cAChCE,EAAiBrJ,GAAO2C,EAAM,SAASyG,EAAYA,EAAaD,EAAM,aAAa,CAAC,EAC1F,GAAIE,EAAe,aAAeF,EAAM,cACpC,MAAM,IAAI,MAAM,kBAAkB,EAEtC,MAAMG,EAAcD,EAAe,SAASF,EAAM,cAAgBA,EAAM,UAAU,EAC5E9B,EAAS,IAAIkC,GAAcJ,EAAM,cAAeA,EAAM,WAAYG,EAAaD,CAAc,EAInG,MAAO,CAHKF,EAAM,UAAY,EACxBZ,EAAI,SAASlB,CAAM,EACnBkB,EAAI,SAASY,EAAM,MAAO9B,CAAM,EACzB1E,EAAM,SAASwG,EAAM,IAAI,CAAC,CAC1C,CAUD,OAAO,aAAaK,EAAc,CAC9B,IAAI7D,EAAS,EACb,MAAM8D,EAAO,IAAM,CACf,KAAM,CAAC9I,EAAGU,CAAM,EAAIuG,GAAc4B,EAAa,SAAS7D,CAAM,CAAC,EAC/D,OAAAA,GAAUtE,EACHV,CACnB,EACQ,IAAIsH,EAAUwB,IACVC,EAAQlB,EASZ,GARIP,IAAY,IAEZA,EAAU,EACVtC,EAAS,GAGT+D,EAAQD,EAAI,EAEZxB,IAAY,GAAKA,IAAY,EAC7B,MAAM,IAAI,WAAW,uBAAuBA,CAAO,EAAE,EAEzD,MAAMmB,EAAazD,EACbgE,EAAgBF,IAChBG,EAAaH,IACbjI,EAAOmE,EAASiE,EAChBC,EAAgBrI,EAAO4H,EAC7B,MAAO,CAAE,QAAAnB,EAAS,MAAAyB,EAAO,cAAAC,EAAe,WAAAC,EAAY,cAAAC,EAAe,KAAArI,EACtE,CAOD,OAAO,MAAML,EAAQb,EAAM,CACvB,KAAM,CAACmC,EAAQE,CAAK,EAAImH,GAAgB3I,EAAQb,CAAI,EAC9CgI,EAAMC,EAAI,OAAO5F,CAAK,EAC5B,GAAI2F,EAAI,UAAY,GAAKnH,EAAO,CAAC,IAAM,IACnC,MAAM,MAAM,wDAAwD,EAGxE,OAAAgH,GAAUG,CAAG,EAAE,IAAI7F,EAAQtB,CAAM,EAC1BmH,CACV,CACL,CACA,SAASwB,GAAgB3I,EAAQb,EAAM,CACnC,OAAQa,EAAO,CAAC,EAAC,CAEb,IAAK,IAAK,CACN,MAAM4B,EAAUzC,GAAQoE,EACxB,MAAO,CACHA,EAAU,OACV3B,EAAQ,OAAO,GAAG2B,EAAU,MAAM,GAAGvD,CAAM,EAAE,CAC7D,CACS,CACD,KAAKuD,EAAU,OAAQ,CACnB,MAAM3B,EAAUzC,GAAQoE,EACxB,MAAO,CAACA,EAAU,OAAQ3B,EAAQ,OAAO5B,CAAM,CAAC,CACnD,CACD,KAAKyD,EAAO,OAAQ,CAChB,MAAM7B,EAAUzC,GAAQsE,EACxB,MAAO,CAACA,EAAO,OAAQ7B,EAAQ,OAAO5B,CAAM,CAAC,CAChD,CACD,QAAS,CACL,GAAIb,GAAQ,KACR,MAAM,MAAM,iFAAiF,EAEjG,MAAO,CAACa,EAAO,CAAC,EAAGb,EAAK,OAAOa,CAAM,CAAC,CACzC,CACJ,CACL,CACA,SAAS+G,GAAWvF,EAAO0F,EAAO/H,EAAM,CACpC,KAAM,CAAE,OAAAmC,CAAQ,EAAGnC,EACnB,GAAImC,IAAWiC,EAAU,OACrB,MAAM,MAAM,8BAA8BpE,EAAK,IAAI,WAAW,EAElE,MAAMgI,EAAMD,EAAM,IAAI5F,CAAM,EAC5B,GAAI6F,GAAO,KAAM,CACb,MAAMA,EAAMhI,EAAK,OAAOqC,CAAK,EAAE,MAAM,CAAC,EACtC,OAAA0F,EAAM,IAAI5F,EAAQ6F,CAAG,EACdA,CACV,KAEG,QAAOA,CAEf,CACA,SAASF,GAAWzF,EAAO0F,EAAO/H,EAAM,CACpC,KAAM,CAAE,OAAAmC,CAAQ,EAAGnC,EACbgI,EAAMD,EAAM,IAAI5F,CAAM,EAC5B,GAAI6F,GAAO,KAAM,CACb,MAAMA,EAAMhI,EAAK,OAAOqC,CAAK,EAC7B,OAAA0F,EAAM,IAAI5F,EAAQ6F,CAAG,EACdA,CACV,KAEG,QAAOA,CAEf,CACA,MAAME,EAAc,IACdC,GAAe,GACrB,SAASM,GAAUd,EAASvI,EAAMiI,EAAW,CACzC,MAAMoC,EAAaxC,GAAsBU,CAAO,EAC1C+B,EAAaD,EAAaxC,GAAsB7H,CAAI,EACpDiD,EAAQ,IAAI,WAAWqH,EAAarC,EAAU,UAAU,EAC9DF,OAAAA,GAAgBQ,EAAStF,EAAO,CAAC,EACjC8E,GAAgB/H,EAAMiD,EAAOoH,CAAU,EACvCpH,EAAM,IAAIgF,EAAWqC,CAAU,EACxBrH,CACX,CACA,MAAMqG,GAAY,OAAO,IAAI,kBAAkB,EC/VxC,SAAShJ,GAAOC,EAAG,CACtB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aAClD,OAAOA,EACX,GAAIA,aAAa,YACb,OAAO,IAAI,WAAWA,CAAC,EAC3B,GAAI,YAAY,OAAOA,CAAC,EACpB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE9D,MAAM,IAAI,MAAM,mCAAmC,CACvD,CAIO,SAASC,GAAWC,EAAK,CAC5B,OAAO,IAAI,YAAW,EAAG,OAAOA,CAAG,CACvC,CACO,SAASC,GAASC,EAAG,CACxB,OAAO,IAAI,YAAW,EAAG,OAAOA,CAAC,CACrC,CC7BA,SAASC,GAAKC,EAAUC,EAAM,CAC1B,GAAID,EAAS,QAAU,IACnB,MAAM,IAAI,UAAU,mBAAmB,EAG3C,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACjCD,EAASC,CAAC,EAAI,IAElB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACtC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IACjB,MAAM,IAAI,UAAUD,EAAI,eAAe,EAE3CH,EAASI,CAAE,EAAIF,CAClB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAI3C,SAASI,EAAOC,EAAQ,CAUpB,GARIA,aAAkB,aAEb,YAAY,OAAOA,CAAM,EAC9BA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAEtE,MAAM,QAAQA,CAAM,IACzBA,EAAS,WAAW,KAAKA,CAAM,IAE/B,EAAEA,aAAkB,YACpB,MAAM,IAAI,UAAU,qBAAqB,EAE7C,GAAIA,EAAO,SAAW,EAClB,MAAO,GAOX,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GACzCA,IACAF,IAMJ,QAHII,GAASD,EAAOD,GAAUL,EAAU,IAAO,EAC3CQ,EAAM,IAAI,WAAWD,CAAI,EAEtBF,IAAWC,GAAM,CAIpB,QAHIG,EAAQP,EAAOG,CAAM,EAErBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYM,IAAQ,GAAKA,IAAOhB,IACzEe,GAAU,IAAMD,EAAIE,CAAG,IAAO,EAC9BF,EAAIE,CAAG,EAAKD,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE/B,GAAIY,IAAU,EACV,MAAM,IAAI,MAAM,gBAAgB,EAEpCL,EAASV,EACTW,GACH,CAGD,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAChCA,IAIJ,QADIzB,EAAMY,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EACjBzB,GAAOI,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAEnC,OAAOzB,CACV,CAID,SAAS0B,EAAaV,EAAQ,CAC1B,GAAI,OAAOA,GAAW,SAClB,MAAM,IAAI,UAAU,iBAAiB,EAEzC,GAAIA,EAAO,SAAW,EAClB,OAAO,IAAI,WAEf,IAAIW,EAAM,EAEV,GAAIX,EAAOW,CAAG,IAAM,IAMpB,SAFIV,EAAS,EACTC,EAAS,EACNF,EAAOW,CAAG,IAAMf,GACnBK,IACAU,IAMJ,QAHIN,GAAUL,EAAO,OAASW,GAAOd,EAAU,IAAO,EAClDe,EAAO,IAAI,WAAWP,CAAI,EAEvBL,EAAOW,CAAG,GAAG,CAEhB,IAAIJ,EAAQjB,EAASU,EAAO,WAAWW,CAAG,CAAC,EAE3C,GAAIJ,IAAU,IACV,OAGJ,QADIf,EAAI,EACCqB,EAAMR,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYW,IAAQ,GAAKA,IAAOrB,IACzEe,GAAUZ,EAAOiB,EAAKC,CAAG,IAAO,EAChCD,EAAKC,CAAG,EAAKN,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE9B,GAAIA,IAAU,EACV,MAAM,IAAI,MAAM,gBAAgB,EAEpCL,EAASV,EACTmB,GACH,CAED,GAAIX,EAAOW,CAAG,IAAM,IAKpB,SADIG,EAAMT,EAAOH,EACVY,IAAQT,GAAQO,EAAKE,CAAG,IAAM,GACjCA,IAIJ,QAFIC,EAAM,IAAI,WAAWd,GAAUI,EAAOS,EAAI,EAC1CvB,EAAIU,EACDa,IAAQT,GACXU,EAAIxB,GAAG,EAAIqB,EAAKE,GAAK,EAEzB,OAAOC,GACV,CAID,SAASC,EAAOC,EAAQ,CACpB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EACA,OAAOA,EAEX,MAAM,IAAI,MAAM,OAAO7B,CAAI,YAAY,CAC1C,CACD,MAAO,CACH,OAAQU,EACR,aAAcW,EACd,OAAQM,CAChB,CACA,CACA,IAAIG,GAAMhC,GACNiC,GAAkCD,GChKtC,IAAA2H,GAAA,KAAc,CACV,KACA,OACA,WACA,YAAYzJ,EAAMiC,EAAQC,EAAY,CAClC,KAAK,KAAOlC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,CACrB,CACD,OAAOC,EAAO,CACV,GAAIA,aAAiB,WACjB,MAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAWA,CAAK,CAAC,GAG9C,MAAM,MAAM,mCAAmC,CAEtD,CACL,EAMAuH,GAAA,KAAc,CACV,KACA,OACA,WACA,gBACA,YAAY1J,EAAMiC,EAAQI,EAAY,CAIlC,GAHA,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EAEVA,EAAO,YAAY,CAAC,IAAM,OAC1B,MAAM,IAAI,MAAM,0BAA0B,EAE9C,KAAK,gBAAkBA,EAAO,YAAY,CAAC,EAC3C,KAAK,WAAaI,CACrB,CACD,OAAOC,EAAM,CACT,GAAI,OAAOA,GAAS,SAAU,CAC1B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC7B,MAAM,MAAM,qCAAqC,KAAK,UAAUA,CAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE,EAEnJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CACxD,KAEG,OAAM,MAAM,mCAAmC,CAEtD,CACD,GAAGC,EAAS,CACR,OAAOC,GAAG,KAAMD,CAAO,CAC1B,CACL,EACAoH,GAAA,KAAsB,CAClB,SACA,YAAYjH,EAAU,CAClB,KAAK,SAAWA,CACnB,CACD,GAAGH,EAAS,CACR,OAAOC,GAAG,KAAMD,CAAO,CAC1B,CACD,OAAOI,EAAO,CACV,MAAMV,EAASU,EAAM,CAAC,EAChBJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,GAAW,KACX,OAAOA,EAAQ,OAAOI,CAAK,EAG3B,MAAM,WAAW,qCAAqC,KAAK,UAAUA,CAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAE3J,CACL,EACO,SAASH,GAAGI,EAAMC,EAAO,CAE5B,OAAO,IAAIC,GAAgB,CACvB,GAAIF,EAAK,UAAY,CAAE,CAACA,EAAK,MAAM,EAAGA,CAAM,EAC5C,GAAIC,EAAM,UAAY,CAAE,CAACA,EAAM,MAAM,EAAGA,CAAO,CACvD,CAAK,CACL,CACO,IAAA+G,GAAA,KAAY,CACf,KACA,OACA,WACA,WACA,QACA,QACA,YAAY5J,EAAMiC,EAAQC,EAAYG,EAAY,CAC9C,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQhD,EAAMiC,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQjD,EAAMiC,EAAQI,CAAU,CACtD,CACD,OAAOM,EAAO,CACV,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACnC,CACD,OAAOA,EAAO,CACV,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACnC,CACL,EACO,SAASO,GAAK,CAAE,KAAAlD,EAAM,OAAAiC,EAAQ,OAAAvB,EAAQ,OAAAiB,CAAM,EAAI,CACnD,OAAO,IAAIwB,GAAMnD,EAAMiC,EAAQvB,EAAQiB,CAAM,CACjD,CACO,SAASyB,EAAM,CAAE,KAAApD,EAAM,OAAAiC,EAAQ,SAAAoB,CAAQ,EAAI,CAC9C,KAAM,CAAE,OAAA3C,EAAQ,OAAAiB,CAAM,EAAK2B,GAAMD,EAAUrD,CAAI,EAC/C,OAAOkD,GAAK,CACR,OAAAjB,EACA,KAAAjC,EACA,OAAAU,EACA,OAAS4B,GAAS9C,GAAOmC,EAAOW,CAAI,CAAC,CAC7C,CAAK,CACL,CACA,SAASX,GAAOC,EAAQyB,EAAUE,EAAavD,EAAM,CAEjD,MAAMwD,EAAQ,CAAA,EACd,QAASrD,EAAI,EAAGA,EAAIkD,EAAS,OAAQ,EAAElD,EACnCqD,EAAMH,EAASlD,CAAC,CAAC,EAAIA,EAGzB,IAAIsD,EAAM7B,EAAO,OACjB,KAAOA,EAAO6B,EAAM,CAAC,IAAM,KACvB,EAAEA,EAGN,MAAMC,EAAM,IAAI,WAAYD,EAAMF,EAAc,EAAK,CAAC,EAEtD,IAAII,EAAO,EACP9B,EAAS,EACT+B,EAAU,EACd,QAASzD,EAAI,EAAGA,EAAIsD,EAAK,EAAEtD,EAAG,CAE1B,MAAM0D,EAAQL,EAAM5B,EAAOzB,CAAC,CAAC,EAC7B,GAAI0D,IAAU,OACV,MAAM,IAAI,YAAY,OAAO7D,CAAI,YAAY,EAGjD6B,EAAUA,GAAU0B,EAAeM,EACnCF,GAAQJ,EAEJI,GAAQ,IACRA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAQ/B,GAAU8B,EAE1C,CAED,GAAIA,GAAQJ,GAAgB,IAAQ1B,GAAW,EAAI8B,EAC/C,MAAM,IAAI,YAAY,wBAAwB,EAElD,OAAOD,CACX,CACA,SAAShD,GAAOoD,EAAMT,EAAUE,EAAa,CACzC,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GACNC,EAAO,EACP9B,EAAS,EACb,QAAS1B,EAAI,EAAGA,EAAI2D,EAAK,OAAQ,EAAE3D,EAK/B,IAHA0B,EAAUA,GAAU,EAAKiC,EAAK3D,CAAC,EAC/BwD,GAAQ,EAEDA,EAAOJ,GACVI,GAAQJ,EACRG,GAAOL,EAASW,EAAQnC,GAAU8B,CAAK,EAQ/C,GAJIA,IAAS,IACTD,GAAOL,EAASW,EAAQnC,GAAW0B,EAAcI,CAAM,GAGvDI,EACA,KAASL,EAAI,OAASH,EAAe,GACjCG,GAAO,IAGf,OAAOA,CACX,CAIO,SAASO,EAAQ,CAAE,KAAAjE,EAAM,OAAAiC,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,EAAI,CAC7D,OAAOH,GAAK,CACR,OAAAjB,EACA,KAAAjC,EACA,OAAO2C,EAAO,CACV,OAAOjC,GAAOiC,EAAOU,EAAUE,CAAW,CAC7C,EACD,OAAOZ,EAAO,CACV,OAAOhB,GAAOgB,EAAOU,EAAUE,EAAavD,CAAI,CACnD,CACT,CAAK,CACL,CCvMO,MAAM6J,GAASzG,EAAM,CACxB,OAAQ,IACR,KAAM,SACN,SAAU,YACd,CAAC,0GCJY0G,GAAS7F,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACjB,CAAC,EACY8F,GAAc9F,EAAQ,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACjB,CAAC,yHCXY+F,GAAQ/F,EAAQ,CACzB,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACjB,CAAC,yGCLKZ,GAAW,MAAM,KAAK,weAAwe,EAC9f4G,GAAwB5G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAE/J,CAAC,EAAIgK,EAAUD,GAAO,CAAE,CAAA,EACjFE,GAAwB/G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAEC,EAAE,YAAY,CAAC,CAAC,EAAIhK,EAAU+J,GAAO,CAAE,CAAA,EACtG,SAASxJ,GAAOoD,EAAM,CAClB,OAAOA,EAAK,OAAO,CAACoG,EAAGC,KACnBD,GAAKD,GAAqBE,CAAC,EACpBD,GACR,EAAE,CACT,CACA,SAASvI,GAAOhC,EAAK,CACjB,MAAM0K,EAAO,CAAA,EACb,UAAWC,KAAQ3K,EAAK,CACpB,MAAM4K,EAAMH,GAAqBE,EAAK,YAAY,CAAC,CAAC,EACpD,GAAIC,IAAQ,OACR,MAAM,IAAI,MAAM,+BAA+BD,CAAI,EAAE,EAEzDD,EAAK,KAAKE,CAAG,CAChB,CACD,OAAO,IAAI,WAAWF,CAAI,CAC9B,CACO,MAAMG,GAAetH,GAAK,CAC7B,OAAQ,KACR,KAAM,eACV,OAAIxC,GACJ,OAAIiB,EACJ,CAAC,gHCzBYyC,GAASH,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYI,GAAcJ,EAAQ,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYK,GAAYL,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYM,GAAiBN,EAAQ,CAClC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYO,GAAYP,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYQ,GAAiBR,EAAQ,CAClC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACjB,CAAC,EACYS,GAAeT,EAAQ,CAChC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYU,GAAoBV,EAAQ,CACrC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACjB,CAAC,EACYW,GAAUX,EAAQ,CAC3B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACjB,CAAC,uOCrDYwG,GAASrH,EAAM,CACxB,OAAQ,IACR,KAAM,SACN,SAAU,sCACd,CAAC,EACYsH,GAActH,EAAM,CAC7B,OAAQ,IACR,KAAM,cACN,SAAU,sCACd,CAAC,yHCTYc,GAAYd,EAAM,CAC3B,KAAM,YACN,OAAQ,IACR,SAAU,4DACd,CAAC,EACYe,GAAef,EAAM,CAC9B,KAAM,eACN,OAAQ,IACR,SAAU,4DACd,CAAC,6HCTYuH,GAAS1G,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACjB,CAAC,EACY2G,GAAY3G,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACjB,CAAC,EACY4G,GAAY5G,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACjB,CAAC,EACY6G,GAAe7G,EAAQ,CAChC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACjB,CAAC,oJCvBY8G,GAAQ9G,EAAQ,CACzB,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACjB,CAAC,yGCJY+G,GAAW9H,GAAK,CACzB,OAAQ,KACR,KAAM,WACN,OAASsC,GAAQ5F,GAAS4F,CAAG,EAC7B,OAAS7F,GAAQD,GAAWC,CAAG,CACnC,CAAC,4GCPmB,IAAI,YACJ,IAAI,YCcjB,MAAMsL,GAAQ,CAAE,GAAGC,GAAc,GAAGlB,GAAO,GAAGe,GAAO,GAAGlB,GAAQ,GAAGC,GAAQ,GAAG1F,GAAQ,GAAGqG,GAAQ,GAAGU,GAAQ,GAAGR,GAAQ,GAAGH,EAAc,ECb/I,SAASY,GAAYpL,EAAMiC,EAAQvB,EAAQiB,EAAQ,CAC/C,MAAO,CACH,KAAA3B,EACA,OAAAiC,EACA,QAAS,CACL,KAAAjC,EACA,OAAAiC,EACA,OAAAvB,CACH,EACD,QAAS,CACL,OAAAiB,CACH,CACT,CACA,CACA,MAAMC,GAASwJ,GAAY,OAAQ,IAAM5F,GAE9B,IADS,IAAI,YAAY,MAAM,EACjB,OAAOA,CAAG,EAC/B7F,GACgB,IAAI,cACL,OAAOA,EAAI,UAAU,CAAC,CAAC,CACzC,EACK0L,GAAQD,GAAY,QAAS,IAAM5F,GAAQ,CAC7C,IAAI5D,EAAS,IACb,QAASzB,EAAI,EAAGA,EAAIqF,EAAI,OAAQrF,IAC5ByB,GAAU,OAAO,aAAa4D,EAAIrF,CAAC,CAAC,EAExC,OAAOyB,CACX,EAAIjC,GAAQ,CACRA,EAAMA,EAAI,UAAU,CAAC,EACrB,MAAM6F,EAAM8F,GAAY3L,EAAI,MAAM,EAClC,QAASQ,EAAI,EAAGA,EAAIR,EAAI,OAAQQ,IAC5BqF,EAAIrF,CAAC,EAAIR,EAAI,WAAWQ,CAAC,EAE7B,OAAOqF,CACX,CAAC,EACK+F,GAAQ,CACV,KAAM3J,GACN,QAASA,GACT,IAAKqJ,GAAM,OACX,OAAQI,GACZ,MAAIA,GACA,OAAQA,GACR,GAAGJ,EACP,ECrCO,SAASrL,EAAS4L,EAAOC,EAAW,OAAQ,CAC/C,MAAM3L,EAAOmL,GAAMQ,CAAQ,EAC3B,GAAI3L,GAAQ,KACR,MAAM,IAAI,MAAM,yBAAyB2L,CAAQ,GAAG,EAExD,OAAKA,IAAa,QAAUA,IAAa,UAAY,WAAW,QAAU,MAAQ,WAAW,OAAO,MAAQ,KACjG,WAAW,OAAO,KAAKD,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAAE,SAAS,MAAM,EAG5F1L,EAAK,QAAQ,OAAO0L,CAAK,EAAE,UAAU,CAAC,CACjD,CChBA,MAAM3F,GAAK,KAAK,IAAI,EAAG,CAAC,EAClBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EACnBC,GAAK,KAAK,IAAI,EAAG,EAAE,EAEnBrB,EAAM,IAENC,EAAO,IACN,SAAS4B,EAAe9C,EAAO,CAClC,GAAIA,EAAQgC,GACR,MAAO,GAEX,GAAIhC,EAAQiC,GACR,MAAO,GAEX,GAAIjC,EAAQkC,GACR,MAAO,GAEX,GAAIlC,EAAQmC,GACR,MAAO,GAEX,GAAInC,EAAQoC,GACR,MAAO,GAEX,GAAIpC,EAAQqC,GACR,MAAO,GAEX,GAAIrC,EAAQsC,GACR,MAAO,GAEX,GAAI,OAAO,kBAAoB,MAAQtC,EAAQ,OAAO,iBAClD,MAAM,IAAI,WAAW,yBAAyB,EAElD,MAAO,EACX,CACO,SAAS6H,GAAiB7H,EAAO2B,EAAKL,EAAS,EAAG,CACrD,OAAQwB,EAAe9C,CAAK,EAAC,CACzB,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,GAAS,IAEb,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,GAAS,IAEb,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,GAAS,IAEb,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,GAAS,IAEb,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,KAAW,EAEf,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,KAAW,EAEf,IAAK,GACD2B,EAAIL,GAAQ,EAAKtB,EAAQ,IAAQiB,EACjCjB,KAAW,EAEf,IAAK,GAAG,CACJ2B,EAAIL,GAAQ,EAAKtB,EAAQ,IACzBA,KAAW,EACX,KACH,CACD,QAAS,MAAM,IAAI,MAAM,aAAa,CACzC,CACD,OAAO2B,CACX,CACO,SAASmG,GAAqB9H,EAAO2B,EAAKL,EAAS,EAAG,CACzD,OAAQwB,EAAe9C,CAAK,EAAC,CACzB,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,GAAS,IAEb,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,GAAS,IAEb,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,GAAS,IAEb,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,GAAS,IAEb,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,KAAW,EAEf,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,KAAW,EAEf,IAAK,GACD2B,EAAI,IAAIL,IAAWtB,EAAQ,IAAQiB,CAAG,EACtCjB,KAAW,EAEf,IAAK,GAAG,CACJ2B,EAAI,IAAIL,IAAWtB,EAAQ,GAAI,EAC/BA,KAAW,EACX,KACH,CACD,QAAS,MAAM,IAAI,MAAM,aAAa,CACzC,CACD,OAAO2B,CACX,CACO,SAASoG,GAAiBpG,EAAKL,EAAQ,CAC1C,IAAItF,EAAI2F,EAAIL,CAAM,EACdM,EAAM,EAqCV,GApCAA,GAAO5F,EAAIkF,EACPlF,EAAIiF,IAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,IAAS,EACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,IAAS,GACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,IAAS,GACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,GAAQiB,GAChBnG,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,GAAQkB,GAChBpG,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,GAAQmB,GAChBrG,EAAIiF,KAGRjF,EAAI2F,EAAIL,EAAS,CAAC,EAClBM,IAAQ5F,EAAIkF,GAAQoB,GAChBtG,EAAIiF,GACJ,OAAOW,EAEX,MAAM,IAAI,WAAW,yBAAyB,CAClD,CACO,SAASoG,GAAqBrG,EAAKL,EAAQ,CAC9C,IAAItF,EAAI2F,EAAI,IAAIL,CAAM,EAClBM,EAAM,EAqCV,GApCAA,GAAO5F,EAAIkF,EACPlF,EAAIiF,IAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,IAAS,EACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,IAAS,GACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,IAAS,GACjBlF,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,GAAQiB,GAChBnG,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,GAAQkB,GAChBpG,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,GAAQmB,GAChBrG,EAAIiF,KAGRjF,EAAI2F,EAAI,IAAIL,EAAS,CAAC,EACtBM,IAAQ5F,EAAIkF,GAAQoB,GAChBtG,EAAIiF,GACJ,OAAOW,EAEX,MAAM,IAAI,WAAW,yBAAyB,CAClD,CACO,SAAS/E,GAAOmD,EAAO2B,EAAKL,EAAS,EAAG,CAI3C,OAHIK,GAAO,OACPA,EAAM8F,GAAY3E,EAAe9C,CAAK,CAAC,GAEvC2B,aAAe,WACRkG,GAAiB7H,EAAO2B,EAAKL,CAAM,EAGnCwG,GAAqB9H,EAAO2B,EAAKL,CAAM,CAEtD,CACO,SAASxD,EAAO6D,EAAKL,EAAS,EAAG,CACpC,OAAIK,aAAe,WACRoG,GAAiBpG,EAAKL,CAAM,EAG5B0G,GAAqBrG,EAAKL,CAAM,CAE/C,CC/NO,MAAM0E,GAASzG,EAAM,CACxB,OAAQ,IACR,KAAM,SACN,SAAU,YACd,CAAC,0GCJY0G,GAAS7F,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACjB,CAAC,EACY8F,GAAc9F,EAAQ,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACjB,CAAC,yHCXY+F,GAAQ/F,EAAQ,CACzB,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACjB,CAAC,yGCLKZ,GAAW,MAAM,KAAK,weAAwe,EAC9f4G,GAAwB5G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAE/J,CAAC,EAAIgK,EAAUD,GAAO,CAAE,CAAA,EACjFE,GAAwB/G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAEC,EAAE,YAAY,CAAC,CAAC,EAAIhK,EAAU+J,GAAO,CAAE,CAAA,EACtG,SAASxJ,GAAOoD,EAAM,CAClB,OAAOA,EAAK,OAAO,CAACoG,EAAGC,KACnBD,GAAKD,GAAqBE,CAAC,EACpBD,GACR,EAAE,CACT,CACA,SAASvI,GAAOhC,EAAK,CACjB,MAAM0K,EAAO,CAAA,EACb,UAAWC,KAAQ3K,EAAK,CACpB,MAAM4K,EAAMH,GAAqBE,EAAK,YAAY,CAAC,CAAC,EACpD,GAAIC,IAAQ,OACR,MAAM,IAAI,MAAM,+BAA+BD,CAAI,EAAE,EAEzDD,EAAK,KAAKE,CAAG,CAChB,CACD,OAAO,IAAI,WAAWF,CAAI,CAC9B,CACO,MAAMG,GAAetH,GAAK,CAC7B,OAAQ,KACR,KAAM,eACV,OAAIxC,GACJ,OAAIiB,EACJ,CAAC,gHCzBY8I,GAASrH,EAAM,CACxB,OAAQ,IACR,KAAM,SACN,SAAU,sCACd,CAAC,EACYsH,GAActH,EAAM,CAC7B,OAAQ,IACR,KAAM,cACN,SAAU,sCACd,CAAC,yHCTYuH,GAAS1G,EAAQ,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACjB,CAAC,EACY2G,GAAY3G,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACjB,CAAC,EACY4G,GAAY5G,EAAQ,CAC7B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACjB,CAAC,EACY6G,GAAe7G,EAAQ,CAChC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACjB,CAAC,oJCvBY8G,GAAQ9G,EAAQ,CACzB,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACjB,CAAC,yGCJY+G,GAAW9H,GAAK,CACzB,OAAQ,KACR,KAAM,WACN,OAASsC,GAAQ5F,GAAS4F,CAAG,EAC7B,OAAS7F,GAAQD,GAAWC,CAAG,CACnC,CAAC,4GCPmB,IAAI,YACJ,IAAI,YCcjB,MAAMsL,GAAQ,CAAE,GAAGC,GAAc,GAAGlB,GAAO,GAAGe,GAAO,GAAGlB,GAAQ,GAAGC,GAAQ,GAAG1F,GAAQ,GAAGqG,GAAQ,GAAGU,GAAQ,GAAGR,GAAQ,GAAGH,EAAc,ECNxI,SAAS9K,GAAWkC,EAAQ6J,EAAW,OAAQ,CAClD,MAAM3L,EAAOmL,GAAMQ,CAAQ,EAC3B,GAAI3L,GAAQ,KACR,MAAM,IAAI,MAAM,yBAAyB2L,CAAQ,GAAG,EAExD,OAAKA,IAAa,QAAUA,IAAa,UAAY,WAAW,QAAU,MAAQ,WAAW,OAAO,MAAQ,KACjGK,GAAa,WAAW,OAAO,KAAKlK,EAAQ,OAAO,CAAC,EAGxD9B,EAAK,QAAQ,OAAO,GAAGA,EAAK,MAAM,GAAG8B,CAAM,EAAE,CACxD,CChBO,MAAMmK,GAAOC,GACPC,GAAOC,GAGPC,GAAU,SAAUC,EAAI,CACjC,IAAIjH,EAAS,EAEb,GADAiH,EAAKA,EAAG,SAAU,EAAC,KAAI,EACnBL,GAAKK,CAAE,EAAG,CACV,MAAMjK,EAAQ,IAAI,WAAWgD,EAAS,CAAC,EACvC,OAAAiH,EAAG,MAAM,KAAK,EAAE,QAASC,GAAS,CAC9BlK,EAAMgD,GAAQ,EAAI,SAASkH,EAAM,EAAE,EAAI,GACnD,CAAS,EACMlK,CACV,CACD,GAAI8J,GAAKG,CAAE,EAAG,CACV,MAAME,EAAWF,EAAG,MAAM,IAAK,CAAC,EAChC,IAAIjM,EACJ,IAAKA,EAAI,EAAGA,EAAImM,EAAS,OAAQnM,IAAK,CAClC,MAAMoM,EAAOR,GAAKO,EAASnM,CAAC,CAAC,EAC7B,IAAIqM,EACAD,IACAC,EAAWL,GAAQG,EAASnM,CAAC,CAAC,EAC9BmM,EAASnM,CAAC,EAAIsM,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,GAE/DA,GAAY,MAAQ,EAAErM,EAAI,GAC1BmM,EAAS,OAAOnM,EAAG,EAAGsM,EAAmBD,EAAS,MAAM,EAAG,CAAC,EAAG,QAAQ,CAAC,CAE/E,CACD,GAAIF,EAAS,CAAC,IAAM,GAChB,KAAOA,EAAS,OAAS,GACrBA,EAAS,QAAQ,GAAG,UAEnBA,EAASA,EAAS,OAAS,CAAC,IAAM,GACvC,KAAOA,EAAS,OAAS,GACrBA,EAAS,KAAK,GAAG,UAEhBA,EAAS,OAAS,EAAG,CAC1B,IAAKnM,EAAI,EAAGA,EAAImM,EAAS,QAAUA,EAASnM,CAAC,IAAM,GAAIA,IACnD,CACJ,MAAMuM,EAAO,CAACvM,EAAG,CAAC,EAClB,IAAKA,EAAI,EAAImM,EAAS,OAAQnM,EAAI,EAAGA,IACjCuM,EAAK,KAAK,GAAG,EAEjBJ,EAAS,OAAO,MAAMA,EAAUI,CAAI,CACvC,CACD,MAAMvK,EAAQ,IAAI,WAAWgD,EAAS,EAAE,EACxC,IAAKhF,EAAI,EAAGA,EAAImM,EAAS,OAAQnM,IAAK,CAClC,MAAMwM,EAAO,SAASL,EAASnM,CAAC,EAAG,EAAE,EACrCgC,EAAMgD,GAAQ,EAAKwH,GAAQ,EAAK,IAChCxK,EAAMgD,GAAQ,EAAIwH,EAAO,GAC5B,CACD,OAAOxK,CACV,CACD,MAAM,IAAI,MAAM,oBAAoB,CACxC,EAEavC,GAAW,SAAU4F,EAAKL,EAAS,EAAGtE,EAAQ,CACvDsE,EAAS,CAAC,CAACA,EACXtE,EAASA,GAAW2E,EAAI,OAASL,EACjC,MAAMyH,EAAO,IAAI,SAASpH,EAAI,MAAM,EACpC,GAAI3E,IAAW,EAAG,CACd,MAAMgM,EAAS,CAAA,EAEf,QAAS1M,EAAI,EAAGA,EAAIU,EAAQV,IACxB0M,EAAO,KAAKrH,EAAIL,EAAShF,CAAC,CAAC,EAE/B,OAAO0M,EAAO,KAAK,GAAG,CACzB,CACD,GAAIhM,IAAW,GAAI,CACf,MAAMgM,EAAS,CAAA,EAEf,QAAS1M,EAAI,EAAGA,EAAIU,EAAQV,GAAK,EAC7B0M,EAAO,KAAKD,EAAK,UAAUzH,EAAShF,CAAC,EAAE,SAAS,EAAE,CAAC,EAEvD,OAAO0M,EAAO,KAAK,GAAG,EACjB,QAAQ,qBAAsB,QAAQ,EACtC,QAAQ,SAAU,IAAI,CAC9B,CACD,MAAO,EACX,EClFMC,EAAI,GACGC,EAAQ,CAAA,EACRvJ,GAAQ,CAAA,EACRwJ,GAAQ,CACjB,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,EAAG,GAAI,KAAK,EACb,CAAC,GAAI,GAAI,MAAM,EACf,CAAC,GAAI,IAAK,KAAK,EACf,CAAC,GAAIF,EAAG,SAAS,EACjB,CAAC,GAAI,EAAG,QAAQ,EAChB,CAAC,GAAIA,EAAG,MAAO,EAAI,EACnB,CAAC,GAAIA,EAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,EAAG,OAAQ,EAAI,EACpB,CAAC,GAAIA,EAAG,UAAW,EAAI,EACvB,CAAC,IAAK,GAAI,MAAM,EAChB,CAAC,IAAK,GAAI,KAAK,EACf,CAAC,IAAK,EAAG,iBAAiB,EAC1B,CAAC,IAAK,EAAG,mBAAmB,EAC5B,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAK,EAAG,eAAe,EACxB,CAAC,IAAK,EAAG,QAAQ,EACjB,CAAC,IAAK,EAAG,aAAa,EACtB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,EAAG,OAAQ,GAAO,EAAI,EAI5B,CAAC,IAAKA,EAAG,MAAM,EAEf,CAAC,IAAKA,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,OAAO,EAChB,CAAC,IAAK,GAAI,OAAO,EACjB,CAAC,IAAK,IAAK,QAAQ,EACnB,CAAC,IAAKA,EAAG,UAAU,EACnB,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAKA,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAK,EAAG,SAAS,EAClB,CAAC,IAAK,EAAG,cAAc,EACvB,CAAC,IAAKA,EAAG,UAAU,EACnB,CAAC,IAAK,EAAG,IAAI,EACb,CAAC,IAAK,EAAG,KAAK,EACd,CAAC,IAAK,EAAG,oBAAoB,EAC7B,CAAC,IAAK,EAAG,MAAM,EACf,CAAC,IAAKA,EAAG,QAAQ,CACrB,EAEAE,GAAM,QAAQC,GAAO,CACjB,MAAMC,EAAQC,GAAe,GAAGF,CAAG,EACnCzJ,GAAM0J,EAAM,IAAI,EAAIA,EACpBH,EAAMG,EAAM,IAAI,EAAIA,CACxB,CAAC,EACM,SAASC,GAAejO,EAAM8B,EAAMhB,EAAMoN,EAAYC,EAAM,CAC/D,MAAO,CACH,KAAAnO,EACA,KAAA8B,EACA,KAAAhB,EACA,WAAY,EAAQoN,EACpB,KAAM,EAAQC,CACtB,CACA,CAaO,SAASC,EAAYJ,EAAO,CAC/B,GAAI,OAAOA,GAAU,SAAU,CAC3B,GAAI1J,GAAM0J,CAAK,GAAK,KAChB,OAAO1J,GAAM0J,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,SACQ,OAAOA,GAAU,SAAU,CAChC,GAAIH,EAAMG,CAAK,GAAK,KAChB,OAAOH,EAAMG,CAAK,EAEtB,MAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE,CACpD,CACD,MAAM,IAAI,MAAM,6BAA6B,OAAOA,CAAK,EAAE,CAC/D,CCvEoBI,EAAY,KAAK,EACjBA,EAAY,KAAK,EACdA,EAAY,QAAQ,EAYpC,SAASC,GAAgBL,EAAO1H,EAAK,CAExC,OADiB8H,EAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACL,IAAK,IACD,OAAOM,GAAShI,CAAG,EACvB,IAAK,IACD,OAAOiI,GAAUjI,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAOkI,GAAWlI,CAAG,EAAE,WAC3B,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAOiI,GAAUjI,CAAG,EACxB,IAAK,KACD,OAAOmI,GAASnI,CAAG,EACvB,IAAK,KACD,OAAOoI,GAAYpI,CAAG,EAC1B,IAAK,KACD,OAAOoI,GAAYpI,CAAG,EAC1B,IAAK,KACD,OAAOqI,GAASrI,CAAG,EACvB,QACI,OAAOiH,EAAmBjH,EAAK,QAAQ,CAC9C,CACL,CACO,SAASsI,GAAeZ,EAAOvN,EAAK,CAEvC,OADiB2N,EAAYJ,CAAK,EACjB,KAAI,CACjB,IAAK,GACD,OAAOa,GAASpO,CAAG,EACvB,IAAK,IACD,OAAOoO,GAASpO,CAAG,EACvB,IAAK,IACD,OAAOqO,GAAUrO,CAAG,EACxB,IAAK,GACL,IAAK,KACL,IAAK,IACL,IAAK,KACD,OAAOsO,GAAW,SAAStO,EAAK,EAAE,CAAC,EACvC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAOqO,GAAUrO,CAAG,EACxB,IAAK,KACD,OAAOuO,GAASvO,CAAG,EACvB,IAAK,KACD,OAAOwO,GAAYxO,CAAG,EAC1B,IAAK,KACD,OAAOyO,GAAazO,CAAG,EAC3B,IAAK,KACD,OAAO0O,GAAS1O,CAAG,EACvB,QACI,OAAO2O,GAAqB3O,EAAK,QAAQ,CAChD,CACL,CAiBA,MAAM+C,GAAW,OAAO,OAAOuI,EAAK,EAAE,IAAKd,GAAMA,EAAE,OAAO,EACpDoE,GAAkB,UAAY,CAChC,IAAIC,EAAM9L,GAAS,CAAC,EAAE,GAAGA,GAAS,CAAC,CAAC,EACpC,OAAAA,GAAS,MAAM,CAAC,EAAE,QAAS+L,GAAOD,EAAMA,EAAI,GAAGC,CAAC,CAAE,EAC3CD,CACX,IACA,SAAST,GAASW,EAAU,CACxB,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOE,GAAWF,CAAQ,CAC9B,CACA,SAASlB,GAASqB,EAAQ,CACtB,MAAMH,EAAWI,GAAYD,EAAQ,EAAGA,EAAO,MAAM,EACrD,GAAIH,GAAY,KACZ,MAAM,IAAI,MAAM,oBAAoB,EAExC,GAAI,CAACC,GAAQD,CAAQ,EACjB,MAAM,IAAI,MAAM,oBAAoB,EAExC,OAAOA,CACX,CACA,SAAST,GAAWc,EAAM,CACtB,MAAMvJ,EAAM,IAAI,YAAY,CAAC,EAE7B,OADa,IAAI,SAASA,CAAG,EACxB,UAAU,EAAGuJ,CAAI,EACf,IAAI,WAAWvJ,CAAG,CAC7B,CACA,SAASkI,GAAWlI,EAAK,CAErB,OADa,IAAI,SAASA,EAAI,MAAM,EACxB,UAAUA,EAAI,UAAU,CACxC,CACA,SAASwI,GAAUrO,EAAK,CACpB,MAAM6F,EAAM8I,GAAqB3O,CAAG,EAC9BqB,EAAO,WAAW,KAAKgO,GAAcxJ,EAAI,MAAM,CAAC,EACtD,OAAOyJ,EAAiB,CAACjO,EAAMwE,CAAG,EAAGxE,EAAK,OAASwE,EAAI,MAAM,CACjE,CACA,SAASiI,GAAUjI,EAAK,CACpB,MAAMxE,EAAOoG,EAAc5B,CAAG,EAE9B,GADAA,EAAMA,EAAI,MAAMuB,EAAsB/F,CAAI,CAAC,EACvCwE,EAAI,SAAWxE,EACf,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAOyL,EAAmBjH,CAAG,CACjC,CACA,SAAS0I,GAASgB,EAAM,CACpB,IAAIC,EACAD,EAAK,CAAC,IAAM,KAAOA,EAAK,CAAC,IAAM,IAC/BC,EAAK1G,GAAcvE,EAAU,OAAO,IAAIgL,CAAI,EAAE,CAAC,EAAE,MAGjDC,EAAKpH,EAAI,MAAMmH,CAAI,EAAE,UAAU,MAGnC,MAAMlO,EAAO,WAAW,KAAKgO,GAAcG,EAAG,MAAM,CAAC,EACrD,OAAOF,EAAiB,CAACjO,EAAMmO,CAAE,EAAGnO,EAAK,OAASmO,EAAG,MAAM,CAC/D,CACA,SAASd,GAASe,EAAO,CACrB,MAAMC,EAAKd,GAAe,OAAOa,CAAK,EAChCpO,EAAO,WAAW,KAAKgO,GAAcK,EAAG,MAAM,CAAC,EACrD,OAAOJ,EAAiB,CAACjO,EAAMqO,CAAE,EAAGrO,EAAK,OAASqO,EAAG,MAAM,CAC/D,CACA,SAASxB,GAASrI,EAAK,CACnB,MAAMxE,EAAOoG,EAAc5B,CAAG,EACxB0J,EAAO1J,EAAI,MAAMuB,EAAsB/F,CAAI,CAAC,EAClD,GAAIkO,EAAK,SAAWlO,EAChB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,MAAO,IAAMyL,EAAmByC,EAAM,WAAW,CACrD,CAIA,SAASvB,GAASnI,EAAK,CACnB,MAAMxE,EAAOoG,EAAc5B,CAAG,EACxB8J,EAAU9J,EAAI,MAAMuB,EAAsB/F,CAAI,CAAC,EACrD,GAAIsO,EAAQ,SAAWtO,EACnB,MAAM,IAAI,MAAM,sBAAsB,EAE1C,OAAOyL,EAAmB6C,EAAS,WAAW,CAClD,CACA,SAASnB,GAAYxO,EAAK,CACtB,MAAM4P,EAAO5P,EAAI,MAAM,GAAG,EAC1B,GAAI4P,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,2BAA2B,EAGrF,MAAM/J,EAAMpB,EAAO,OAAO,IAAMmL,EAAK,CAAC,CAAC,EAEjCR,EAAO,SAASQ,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIR,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMS,EAAUvB,GAAWc,CAAI,EAC/B,OAAOE,EAAiB,CAACzJ,EAAKgK,CAAO,EAAGhK,EAAI,OAASgK,EAAQ,MAAM,CACvE,CACA,SAASpB,GAAazO,EAAK,CACvB,MAAM4P,EAAO5P,EAAI,MAAM,GAAG,EAC1B,GAAI4P,EAAK,SAAW,EAChB,MAAM,IAAI,MAAM,kCAAkCA,EAAK,KAAK,MAAM,CAAC,qCAAqC,EAE5G,GAAIA,EAAK,CAAC,EAAE,SAAW,GACnB,MAAM,IAAI,MAAM,+BAA+BA,EAAK,CAAC,CAAC,4BAA4B,EAGtF,MAAM/J,EAAMpB,EAAO,OAAO,IAAImL,EAAK,CAAC,CAAC,EAAE,EAEjCR,EAAO,SAASQ,EAAK,CAAC,EAAG,EAAE,EACjC,GAAIR,EAAO,GAAKA,EAAO,MACnB,MAAM,IAAI,MAAM,uCAAuC,EAE3D,MAAMS,EAAUvB,GAAWc,CAAI,EAC/B,OAAOE,EAAiB,CAACzJ,EAAKgK,CAAO,EAAGhK,EAAI,OAASgK,EAAQ,MAAM,CACvE,CACA,SAAS5B,GAAYpI,EAAK,CACtB,MAAMiK,EAAYjK,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,EACvCkK,EAAYlK,EAAI,MAAMA,EAAI,OAAS,CAAC,EACpC+J,EAAO9C,EAAmBgD,EAAW,QAAQ,EAC7CV,EAAOrB,GAAWgC,CAAS,EACjC,MAAO,GAAGH,CAAI,IAAIR,CAAI,EAC1B,CCxOO,SAASY,GAAuBhQ,EAAK,CACxCA,EAAMiQ,GAAUjQ,CAAG,EACnB,MAAMkQ,EAAS,CAAA,EACTC,EAAe,CAAA,EACrB,IAAIzC,EAAO,KACX,MAAM0C,EAAQpQ,EAAI,MAAM,GAAG,EAAE,MAAM,CAAC,EACpC,GAAIoQ,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,GACnC,MAAO,CACH,MAAO,IAAI,WACX,OAAQ,IACR,OAAQ,CAAE,EACV,aAAc,CAAE,EAChB,KAAM,IAClB,EAEI,QAAS7F,EAAI,EAAGA,EAAI6F,EAAM,OAAQ7F,IAAK,CACnC,MAAM8F,EAAOD,EAAM7F,CAAC,EACdgD,EAAQI,EAAY0C,CAAI,EAC9B,GAAI9C,EAAM,OAAS,EAAG,CAClB2C,EAAO,KAAK,CAAC3C,EAAM,IAAI,CAAC,EACxB4C,EAAa,KAAK,CAAC5C,EAAM,IAAI,CAAC,EAE9B,QACH,CAED,GADAhD,IACIA,GAAK6F,EAAM,OACX,MAAME,GAAW,oBAAsBtQ,CAAG,EAG9C,GAAIuN,EAAM,OAAS,GAAM,CAIrBG,EAAOuC,GAAUG,EAAM,MAAM7F,CAAC,EAAE,KAAK,GAAG,CAAC,EACzC2F,EAAO,KAAK,CAAC3C,EAAM,KAAMY,GAAeZ,EAAM,KAAMG,CAAI,CAAC,CAAC,EAC1DyC,EAAa,KAAK,CAAC5C,EAAM,KAAMG,CAAI,CAAC,EACpC,KACH,CACD,MAAMlL,EAAQ2L,GAAeZ,EAAM,KAAM6C,EAAM7F,CAAC,CAAC,EACjD2F,EAAO,KAAK,CAAC3C,EAAM,KAAM/K,CAAK,CAAC,EAC/B2N,EAAa,KAAK,CAAC5C,EAAM,KAAMK,GAAgBL,EAAM,KAAM/K,CAAK,CAAC,CAAC,CACrE,CACD,MAAO,CACH,OAAQ+N,GAAqBJ,CAAY,EACzC,MAAOK,GAAcN,CAAM,EAC3B,OAAAA,EACA,aAAAC,EACA,KAAAzC,CACR,CACA,CACO,SAAS+C,GAAsBjO,EAAO,CACzC,MAAM0N,EAAS,CAAA,EACTC,EAAe,CAAA,EACrB,IAAIzC,EAAO,KACPlN,EAAI,EACR,KAAOA,EAAIgC,EAAM,QAAQ,CACrB,MAAMjD,EAAOkI,EAAcjF,EAAOhC,CAAC,EAC7BkQ,EAAItJ,EAAsB7H,CAAI,EAC9BgL,EAAIoD,EAAYpO,CAAI,EACpB8B,EAAOsP,GAAYpG,EAAG/H,EAAM,MAAMhC,EAAIkQ,CAAC,CAAC,EAC9C,GAAIrP,IAAS,EAAG,CACZ6O,EAAO,KAAK,CAAC3Q,CAAI,CAAC,EAClB4Q,EAAa,KAAK,CAAC5Q,CAAI,CAAC,EACxBiB,GAAKkQ,EAEL,QACH,CACD,MAAMd,EAAOpN,EAAM,MAAMhC,EAAIkQ,EAAGlQ,EAAIkQ,EAAIrP,CAAI,EAE5C,GADAb,GAAMa,EAAOqP,EACTlQ,EAAIgC,EAAM,OACV,MAAM8N,GAAW,+BAAiCxD,EAAmBtK,EAAO,QAAQ,CAAC,EAGzF0N,EAAO,KAAK,CAAC3Q,EAAMqQ,CAAI,CAAC,EACxB,MAAMgB,EAAahD,GAAgBrO,EAAMqQ,CAAI,EAE7C,GADAO,EAAa,KAAK,CAAC5Q,EAAMqR,CAAU,CAAC,EAChCrG,EAAE,OAAS,GAAM,CAIjBmD,EAAOkD,EACP,KACH,CACJ,CACD,MAAO,CACH,MAAO,WAAW,KAAKpO,CAAK,EAC5B,OAAQ+N,GAAqBJ,CAAY,EACzC,OAAAD,EACA,aAAAC,EACA,KAAAzC,CACR,CACA,CAIA,SAAS6C,GAAqBL,EAAQ,CAClC,MAAME,EAAQ,CAAA,EACd,OAAAF,EAAO,IAAKW,GAAQ,CAChB,MAAMtD,EAAQI,EAAYkD,EAAI,CAAC,CAAC,EAChC,OAAAT,EAAM,KAAK7C,EAAM,IAAI,EACjBsD,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,MAC5BT,EAAM,KAAKS,EAAI,CAAC,CAAC,EAEd,IACf,CAAK,EACMZ,GAAUG,EAAM,KAAK,GAAG,CAAC,CACpC,CAIO,SAASI,GAAcN,EAAQ,CAClC,OAAOZ,EAAiBY,EAAO,IAAKW,GAAQ,CACxC,MAAMtD,EAAQI,EAAYkD,EAAI,CAAC,CAAC,EAChC,IAAIhL,EAAM,WAAW,KAAKwJ,GAAc9B,EAAM,IAAI,CAAC,EACnD,OAAIsD,EAAI,OAAS,GAAKA,EAAI,CAAC,GAAK,OAC5BhL,EAAMyJ,EAAiB,CAACzJ,EAAKgL,EAAI,CAAC,CAAC,CAAC,GAEjChL,CACV,CAAA,CAAC,CACN,CAIA,SAAS8K,GAAYpG,EAAGqF,EAAM,CAC1B,GAAIrF,EAAE,KAAO,EACT,OAAOA,EAAE,KAAO,EAEf,GAAIA,EAAE,OAAS,EAChB,MAAO,GAEN,CACD,MAAMlJ,EAAOoG,EAAcmI,aAAgB,WAAaA,EAAO,WAAW,KAAKA,CAAI,CAAC,EACpF,OAAOvO,EAAO+F,EAAsB/F,CAAI,CAC3C,CACL,CAyBO,SAAS4O,GAAUjQ,EAAK,CAC3B,MAAO,IAAMA,EAAI,KAAM,EAAC,MAAM,GAAG,EAAE,OAAQ0H,GAAMA,CAAC,EAAE,KAAK,GAAG,CAChE,CACO,SAAS4I,GAAWtQ,EAAK,CAC5B,OAAO,IAAI,MAAM,0BAA4BA,CAAG,CACpD,CCpJA,MAAM8Q,GAAU,OAAO,IAAI,4BAA4B,EAC1CC,GAAS,OAAO,IAAI,sCAAsC,EACjEC,GAAY,CACdrD,EAAY,KAAK,EAAE,KACnBA,EAAY,MAAM,EAAE,KACpBA,EAAY,MAAM,EAAE,KACpBA,EAAY,SAAS,EAAE,IAC3B,EAIO,MAAMsD,CAAU,CACnB,MACAC,GACAC,GACAC,GACAC,GACA,CAACN,EAAM,EAAI,GACX,YAAYnB,EAAM,CAEVA,GAAQ,OACRA,EAAO,IAEX,IAAIQ,EACJ,GAAIR,aAAgB,WAChBQ,EAAQK,GAAsBb,CAAI,UAE7B,OAAOA,GAAS,SAAU,CAC/B,GAAIA,EAAK,OAAS,GAAKA,EAAK,OAAO,CAAC,IAAM,IACtC,MAAM,IAAI,MAAM,cAAcA,CAAI,yBAAyB,EAE/DQ,EAAQJ,GAAuBJ,CAAI,CACtC,SACQ0B,GAAY1B,CAAI,EACrBQ,EAAQK,GAAsBb,EAAK,KAAK,MAGxC,OAAM,IAAI,MAAM,qDAAqD,EAEzE,KAAK,MAAQQ,EAAM,MACnB,KAAKc,GAAUd,EAAM,OACrB,KAAKe,GAAUf,EAAM,OACrB,KAAKgB,GAAgBhB,EAAM,aAC3B,KAAKiB,GAAQjB,EAAM,IACtB,CACD,UAAW,CACP,OAAO,KAAKc,EACf,CACD,QAAS,CACL,OAAO,KAAK,UACf,CACD,WAAY,CACR,IAAIK,EACAC,EACAC,EACArC,EACAsC,EAAO,GACX,MAAMC,EAAMhE,EAAY,KAAK,EACvBiE,EAAMjE,EAAY,KAAK,EACvBkE,EAAMlE,EAAY,KAAK,EACvBmE,EAAMnE,EAAY,KAAK,EACvBoE,EAAOpE,EAAY,MAAM,EACzBqE,EAAUrE,EAAY,SAAS,EACrC,SAAW,CAACpO,EAAM2E,CAAK,IAAK,KAAK,aAAY,EACrC3E,IAASyS,EAAQ,OACjBN,EAAO,IAAIxN,GAAS,EAAE,IAGtB8M,GAAU,SAASzR,CAAI,IACvBiS,EAAYG,EAAI,KAChBvC,EAAO,IACPqC,EAAO,GAAGvN,GAAS,EAAE,GAAGwN,CAAI,GAC5BH,EAAShS,IAASwS,EAAK,KAAO,EAAI,IAElCxS,IAASoS,EAAI,MAAQpS,IAASqS,EAAI,QAClCJ,EAAY7D,EAAYpO,CAAI,EAAE,KAC9B6P,EAAO,SAASlL,GAAS,EAAE,IAE3B3E,IAASsS,EAAI,MAAQtS,IAASuS,EAAI,QAClCN,EAAY7D,EAAYpO,CAAI,EAAE,KAC9BkS,EAAO,GAAGvN,GAAS,EAAE,GAAGwN,CAAI,GAC5BH,EAAShS,IAASuS,EAAI,KAAO,EAAI,GAGzC,GAAIP,GAAU,MAAQC,GAAa,MAAQC,GAAQ,MAAQrC,GAAQ,KAC/D,MAAM,IAAI,MAAM,qGAAqG,EAQzH,MANa,CACT,OAAAmC,EACA,KAAAE,EACA,UAAAD,EACA,KAAApC,CACZ,CAEK,CACD,QAAS,CACL,OAAO,KAAK+B,GAAQ,IAAI,CAAC,CAAC5R,CAAI,IAAM,OAAO,OAAO,CAAA,EAAIoO,EAAYpO,CAAI,CAAC,CAAC,CAC3E,CACD,YAAa,CACT,OAAO,KAAK4R,GAAQ,IAAI,CAAC,CAAC5R,CAAI,IAAMA,CAAI,CAC3C,CACD,YAAa,CACT,OAAO,KAAK4R,GAAQ,IAAI,CAAC,CAAC5R,CAAI,IAAMoO,EAAYpO,CAAI,EAAE,IAAI,CAC7D,CACD,QAAS,CACL,OAAO,KAAK4R,EACf,CACD,cAAe,CACX,OAAO,KAAKC,EACf,CACD,YAAYxB,EAAM,CACd,OAAAA,EAAO,IAAIqB,EAAUrB,CAAI,EAClB,IAAIqB,EAAU,KAAK,SAAU,EAAGrB,EAAK,SAAQ,CAAE,CACzD,CACD,YAAYA,EAAM,CACd,MAAMqC,EAAarC,EAAK,WAClBsC,EAAI,KAAK,WACT1R,EAAI0R,EAAE,YAAYD,CAAU,EAClC,GAAIzR,EAAI,EACJ,MAAM,IAAI,MAAM,WAAW,KAAK,UAAU,iCAAiCoP,EAAK,SAAU,CAAA,EAAE,EAEhG,OAAO,IAAIqB,EAAUiB,EAAE,MAAM,EAAG1R,CAAC,CAAC,CACrC,CACD,gBAAgBjB,EAAM,CAClB,MAAM2Q,EAAS,KAAK,SACpB,QAAS1P,EAAI0P,EAAO,OAAS,EAAG1P,GAAK,EAAGA,IACpC,GAAI0P,EAAO1P,CAAC,EAAE,CAAC,IAAMjB,EACjB,OAAO,IAAI0R,EAAUT,GAAcN,EAAO,MAAM,EAAG1P,CAAC,CAAC,CAAC,EAG9D,OAAO,IACV,CACD,WAAY,CACR,GAAI,CACA,IAAI0P,EAAS,CAAA,EACb,KAAK,aAAY,EAAG,QAAQ,CAAC,CAAC3Q,EAAMc,CAAI,IAAM,CACtCd,IAAS6N,EAAM,IAAI,MACnB8C,EAAO,KAAK,CAAC3Q,EAAMc,CAAI,CAAC,EAIxBd,IAAS6N,EAAM,aAAa,EAAE,OAC9B8C,EAAS,CAAA,EAE7B,CAAa,EAED,MAAMiC,EAAQjC,EAAO,MACrB,GAAIiC,IAAQ,CAAC,GAAK,KAAM,CACpB,MAAMC,EAAYD,EAAM,CAAC,EAGzB,OAAIC,EAAU,CAAC,IAAM,KAAOA,EAAU,CAAC,IAAM,IAClCtF,EAAmBvI,EAAU,OAAO,IAAI6N,CAAS,EAAE,EAAG,WAAW,EAGrEtF,EAAmB1E,EAAI,MAAMgK,CAAS,EAAE,UAAU,MAAO,WAAW,CAC9E,CACD,OAAO,IACV,MACS,CACN,OAAO,IACV,CACJ,CACD,SAAU,CACN,OAAO,KAAKf,EACf,CACD,OAAOzB,EAAM,CACT,OAAOyC,GAAiB,KAAK,MAAOzC,EAAK,KAAK,CACjD,CACD,MAAM,QAAQ0C,EAAS,CACnB,MAAMC,EAAkB,KAAK,OAAQ,EAAC,KAAMhI,GAAMA,EAAE,UAAU,EAE9D,GAAIgI,GAAmB,KACnB,MAAO,CAAC,IAAI,EAEhB,MAAMC,EAAWC,GAAU,IAAIF,EAAgB,IAAI,EACnD,GAAIC,GAAY,KACZ,MAAM,IAAInT,GAAU,6BAA6BkT,EAAgB,IAAI,GAAI,2BAA2B,EAGxG,OADkB,MAAMC,EAAS,KAAMF,CAAO,GAC7B,IAAK5K,GAAM,IAAIuJ,EAAUvJ,CAAC,CAAC,CAC/C,CACD,aAAc,CACV,MAAM4K,EAAU,KAAK,YACrB,GAAIA,EAAQ,YAAc,OAASA,EAAQ,YAAc,MACrD,MAAM,IAAI,MAAM,gEAAgEA,EAAQ,SAAS,uDAAuD,EAE5J,MAAO,CACH,OAAQA,EAAQ,OAChB,QAASA,EAAQ,KACjB,KAAMA,EAAQ,IAC1B,CACK,CACD,mBAAmB1C,EAAM,CACrB,MAAM8C,GAAU9C,GAAQ,MAAM,OAAM,EAOpC,MANI,EAAA8C,EAAO,SAAW,GAGlBA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAG3CA,EAAO,CAAC,EAAE,OAAS,GAAKA,EAAO,CAAC,EAAE,OAAS,IAIlD,CAaD,CAAC5B,EAAO,GAAI,CACR,MAAO,aAAa,KAAKI,EAAO,GACnC,CACL,CC5KO,MAAMuB,GAAY,IAAI,IAyDtB,SAASE,GAAO/C,EAAM,CACzB,OAAK0B,GAAY1B,CAAI,EAIdA,EAAK,SAAS,KAAMrC,GAAUA,EAAM,UAAU,EAH1C,EAIf,CAeO,SAAS+D,GAAYpN,EAAO,CAC/B,MAAO,EAAQA,IAAQ6M,EAAM,CACjC,CAcO,SAAS6B,GAAUhD,EAAM,CAC5B,OAAO,IAAIiD,EAAejD,CAAI,CAClC,CCrKO,MAAMkD,GAAW,IACXC,GAAe,IAEfC,GAAgB,ICMtB,SAASC,GAAIC,EAAKxF,EAAO,GAAIyF,EAAK,CACrC,IAAIC,EAAMF,EAEVC,EAAMA,GAAQ,OAAO,SAAa,KAAe,SACrCD,GAAR,OACAA,EAAMC,EAAI,SAAW,KAAOA,EAAI,MAEhC,OAAOD,GAAQ,WACHA,EAAI,OAAO,CAAC,IAApB,MACYA,EAAI,OAAO,CAAC,IAApB,IACAA,EAAMC,EAAI,SAAWD,EAGrBA,EAAMC,EAAI,KAAOD,GAGpB,sBAAsB,KAAKA,CAAG,IACX,OAAOC,EAAvB,IACAD,EAAMC,EAAI,SAAW,KAAOD,EAG5BA,EAAM,WAAaA,GAI3BE,EAAMC,GAAMH,CAAG,GAGdE,EAAI,OACD,cAAc,KAAKA,EAAI,QAAQ,EAC/BA,EAAI,KAAO,KAEN,eAAe,KAAKA,EAAI,QAAQ,IACrCA,EAAI,KAAO,QAGnBA,EAAI,KAAOA,EAAI,MAAQ,IAEvB,MAAM3B,EADO2B,EAAI,KAAK,QAAQ,GAAG,IAAM,GACnB,IAAMA,EAAI,KAAO,IAAMA,EAAI,KAE/C,OAAAA,EAAI,GAAKA,EAAI,SAAW,MAAQ3B,EAAO,IAAM2B,EAAI,KAAO1F,EAExD0F,EAAI,KACAA,EAAI,SACA,MACA3B,GACC0B,GAAOA,EAAI,OAASC,EAAI,KAAO,GAAK,IAAMA,EAAI,MAChDA,CACX,CC1DO,SAASE,EAAGF,EAAKG,EAAIC,EAAI,CAC5B,OAAAJ,EAAI,GAAGG,EAAIC,CAAE,EACN,UAAsB,CACzBJ,EAAI,IAAIG,EAAIC,CAAE,CACtB,CACA,CCEA,MAAMC,GAAkB,OAAO,OAAO,CAClC,QAAS,EACT,cAAe,EACf,WAAY,EACZ,cAAe,EAEf,YAAa,EACb,eAAgB,CACpB,CAAC,EAyBM,MAAMC,WAAeC,EAAQ,CAIhC,YAAYC,EAAIC,EAAKC,EAAM,CACvB,QAeA,KAAK,UAAY,GAKjB,KAAK,UAAY,GAIjB,KAAK,cAAgB,GAIrB,KAAK,WAAa,GAOlB,KAAK,OAAS,GAKd,KAAK,UAAY,EACjB,KAAK,IAAM,EACX,KAAK,KAAO,GACZ,KAAK,MAAQ,GACb,KAAK,GAAKF,EACV,KAAK,IAAMC,EACPC,GAAQA,EAAK,OACb,KAAK,KAAOA,EAAK,MAErB,KAAK,MAAQ,OAAO,OAAO,CAAE,EAAEA,CAAI,EAC/B,KAAK,GAAG,cACR,KAAK,KAAI,CAChB,CAeD,IAAI,cAAe,CACf,MAAO,CAAC,KAAK,SAChB,CAMD,WAAY,CACR,GAAI,KAAK,KACL,OACJ,MAAMF,EAAK,KAAK,GAChB,KAAK,KAAO,CACRN,EAAGM,EAAI,OAAQ,KAAK,OAAO,KAAK,IAAI,CAAC,EACrCN,EAAGM,EAAI,SAAU,KAAK,SAAS,KAAK,IAAI,CAAC,EACzCN,EAAGM,EAAI,QAAS,KAAK,QAAQ,KAAK,IAAI,CAAC,EACvCN,EAAGM,EAAI,QAAS,KAAK,QAAQ,KAAK,IAAI,CAAC,CACnD,CACK,CAkBD,IAAI,QAAS,CACT,MAAO,CAAC,CAAC,KAAK,IACjB,CAWD,SAAU,CACN,OAAI,KAAK,UACE,MACX,KAAK,UAAS,EACT,KAAK,GAAG,eACT,KAAK,GAAG,OACG,KAAK,GAAG,cAAnB,QACA,KAAK,OAAM,EACR,KACV,CAID,MAAO,CACH,OAAO,KAAK,SACf,CAgBD,QAAQG,EAAM,CACV,OAAAA,EAAK,QAAQ,SAAS,EACtB,KAAK,KAAK,MAAM,KAAMA,CAAI,EACnB,IACV,CAkBD,KAAKR,KAAOQ,EAAM,CACd,GAAIN,GAAgB,eAAeF,CAAE,EACjC,MAAM,IAAI,MAAM,IAAMA,EAAG,SAAQ,EAAK,4BAA4B,EAGtE,GADAQ,EAAK,QAAQR,CAAE,EACX,KAAK,MAAM,SAAW,CAAC,KAAK,MAAM,WAAa,CAAC,KAAK,MAAM,SAC3D,YAAK,YAAYQ,CAAI,EACd,KAEX,MAAMC,EAAS,CACX,KAAMC,EAAW,MACjB,KAAMF,CAClB,EAIQ,GAHAC,EAAO,QAAU,GACjBA,EAAO,QAAQ,SAAW,KAAK,MAAM,WAAa,GAE/B,OAAOD,EAAKA,EAAK,OAAS,CAAC,GAA1C,WAA6C,CAC7C,MAAMG,EAAK,KAAK,MACVC,EAAMJ,EAAK,MACjB,KAAK,qBAAqBG,EAAIC,CAAG,EACjCH,EAAO,GAAKE,CACf,CACD,MAAME,EAAsB,KAAK,GAAG,QAChC,KAAK,GAAG,OAAO,WACf,KAAK,GAAG,OAAO,UAAU,SAE7B,OADsB,KAAK,MAAM,WAAa,CAACA,GAAuB,CAAC,KAAK,aAGnE,KAAK,WACV,KAAK,wBAAwBJ,CAAM,EACnC,KAAK,OAAOA,CAAM,GAGlB,KAAK,WAAW,KAAKA,CAAM,GAE/B,KAAK,MAAQ,GACN,IACV,CAID,qBAAqBE,EAAIC,EAAK,CAC1B,IAAIE,EACJ,MAAMC,GAAWD,EAAK,KAAK,MAAM,WAAa,MAAQA,IAAO,OAASA,EAAK,KAAK,MAAM,WACtF,GAAIC,IAAY,OAAW,CACvB,KAAK,KAAKJ,CAAE,EAAIC,EAChB,MACH,CAED,MAAMI,EAAQ,KAAK,GAAG,aAAa,IAAM,CACrC,OAAO,KAAK,KAAKL,CAAE,EACnB,QAAS1T,EAAI,EAAGA,EAAI,KAAK,WAAW,OAAQA,IACpC,KAAK,WAAWA,CAAC,EAAE,KAAO0T,GAC1B,KAAK,WAAW,OAAO1T,EAAG,CAAC,EAGnC2T,EAAI,KAAK,KAAM,IAAI,MAAM,yBAAyB,CAAC,CACtD,EAAEG,CAAO,EACV,KAAK,KAAKJ,CAAE,EAAI,IAAIH,IAAS,CAEzB,KAAK,GAAG,eAAeQ,CAAK,EAC5BJ,EAAI,MAAM,KAAM,CAAC,KAAM,GAAGJ,CAAI,CAAC,CAC3C,CACK,CAiBD,YAAYR,KAAOQ,EAAM,CAErB,MAAMS,EAAU,KAAK,MAAM,UAAY,QAAa,KAAK,MAAM,aAAe,OAC9E,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpCX,EAAK,KAAK,CAACY,EAAMC,IACTJ,EACOG,EAAOD,EAAOC,CAAI,EAAIF,EAAQG,CAAI,EAGlCH,EAAQE,CAAI,CAE1B,EACD,KAAK,KAAKpB,EAAI,GAAGQ,CAAI,CACjC,CAAS,CACJ,CAMD,YAAYA,EAAM,CACd,IAAII,EACA,OAAOJ,EAAKA,EAAK,OAAS,CAAC,GAAM,aACjCI,EAAMJ,EAAK,OAEf,MAAMC,EAAS,CACX,GAAI,KAAK,YACT,SAAU,EACV,QAAS,GACT,KAAAD,EACA,MAAO,OAAO,OAAO,CAAE,UAAW,EAAM,EAAE,KAAK,KAAK,CAChE,EACQA,EAAK,KAAK,CAACc,KAAQC,IACXd,IAAW,KAAK,OAAO,CAAC,EAExB,QAEaa,IAAQ,KAEjBb,EAAO,SAAW,KAAK,MAAM,UAC7B,KAAK,OAAO,QACRG,GACAA,EAAIU,CAAG,IAKf,KAAK,OAAO,QACRV,GACAA,EAAI,KAAM,GAAGW,CAAY,GAGjCd,EAAO,QAAU,GACV,KAAK,cACf,EACD,KAAK,OAAO,KAAKA,CAAM,EACvB,KAAK,YAAW,CACnB,CAOD,YAAYe,EAAQ,GAAO,CACvB,GAAI,CAAC,KAAK,WAAa,KAAK,OAAO,SAAW,EAC1C,OAEJ,MAAMf,EAAS,KAAK,OAAO,CAAC,EACxBA,EAAO,SAAW,CAACe,IAGvBf,EAAO,QAAU,GACjBA,EAAO,WACP,KAAK,MAAQA,EAAO,MACpB,KAAK,KAAK,MAAM,KAAMA,EAAO,IAAI,EACpC,CAOD,OAAOA,EAAQ,CACXA,EAAO,IAAM,KAAK,IAClB,KAAK,GAAG,QAAQA,CAAM,CACzB,CAMD,QAAS,CACD,OAAO,KAAK,MAAQ,WACpB,KAAK,KAAM7P,GAAS,CAChB,KAAK,mBAAmBA,CAAI,CAC5C,CAAa,EAGD,KAAK,mBAAmB,KAAK,IAAI,CAExC,CAOD,mBAAmBA,EAAM,CACrB,KAAK,OAAO,CACR,KAAM8P,EAAW,QACjB,KAAM,KAAK,KACL,OAAO,OAAO,CAAE,IAAK,KAAK,KAAM,OAAQ,KAAK,WAAa,EAAE9P,CAAI,EAChEA,CAClB,CAAS,CACJ,CAOD,QAAQ0Q,EAAK,CACJ,KAAK,WACN,KAAK,aAAa,gBAAiBA,CAAG,CAE7C,CAQD,QAAQG,EAAQC,EAAa,CACzB,KAAK,UAAY,GACjB,OAAO,KAAK,GACZ,KAAK,aAAa,aAAcD,EAAQC,CAAW,CACtD,CAOD,SAASjB,EAAQ,CAEb,GADsBA,EAAO,MAAQ,KAAK,IAG1C,OAAQA,EAAO,KAAI,CACf,KAAKC,EAAW,QACRD,EAAO,MAAQA,EAAO,KAAK,IAC3B,KAAK,UAAUA,EAAO,KAAK,IAAKA,EAAO,KAAK,GAAG,EAG/C,KAAK,aAAa,gBAAiB,IAAI,MAAM,2LAA2L,CAAC,EAE7O,MACJ,KAAKC,EAAW,MAChB,KAAKA,EAAW,aACZ,KAAK,QAAQD,CAAM,EACnB,MACJ,KAAKC,EAAW,IAChB,KAAKA,EAAW,WACZ,KAAK,MAAMD,CAAM,EACjB,MACJ,KAAKC,EAAW,WACZ,KAAK,aAAY,EACjB,MACJ,KAAKA,EAAW,cACZ,KAAK,QAAO,EACZ,MAAMY,EAAM,IAAI,MAAMb,EAAO,KAAK,OAAO,EAEzCa,EAAI,KAAOb,EAAO,KAAK,KACvB,KAAK,aAAa,gBAAiBa,CAAG,EACtC,KACP,CACJ,CAOD,QAAQb,EAAQ,CACZ,MAAMD,EAAOC,EAAO,MAAQ,GAChBA,EAAO,IAAf,MACAD,EAAK,KAAK,KAAK,IAAIC,EAAO,EAAE,CAAC,EAE7B,KAAK,UACL,KAAK,UAAUD,CAAI,EAGnB,KAAK,cAAc,KAAK,OAAO,OAAOA,CAAI,CAAC,CAElD,CACD,UAAUA,EAAM,CACZ,GAAI,KAAK,eAAiB,KAAK,cAAc,OAAQ,CACjD,MAAMmB,EAAY,KAAK,cAAc,MAAK,EAC1C,UAAWC,KAAYD,EACnBC,EAAS,MAAM,KAAMpB,CAAI,CAEhC,CACD,MAAM,KAAK,MAAM,KAAMA,CAAI,EACvB,KAAK,MAAQA,EAAK,QAAU,OAAOA,EAAKA,EAAK,OAAS,CAAC,GAAM,WAC7D,KAAK,YAAcA,EAAKA,EAAK,OAAS,CAAC,EAE9C,CAMD,IAAIG,EAAI,CACJ,MAAMzL,EAAO,KACb,IAAI2M,EAAO,GACX,OAAO,YAAarB,EAAM,CAElBqB,IAEJA,EAAO,GACP3M,EAAK,OAAO,CACR,KAAMwL,EAAW,IACjB,GAAIC,EACJ,KAAMH,CACtB,CAAa,EACb,CACK,CAOD,MAAMC,EAAQ,CACV,MAAMG,EAAM,KAAK,KAAKH,EAAO,EAAE,EACZ,OAAOG,GAAtB,aACAA,EAAI,MAAM,KAAMH,EAAO,IAAI,EAC3B,OAAO,KAAK,KAAKA,EAAO,EAAE,EAIjC,CAMD,UAAUE,EAAImB,EAAK,CACf,KAAK,GAAKnB,EACV,KAAK,UAAYmB,GAAO,KAAK,OAASA,EACtC,KAAK,KAAOA,EACZ,KAAK,UAAY,GACjB,KAAK,aAAY,EACjB,KAAK,aAAa,SAAS,EAC3B,KAAK,YAAY,EAAI,CACxB,CAMD,cAAe,CACX,KAAK,cAAc,QAAStB,GAAS,KAAK,UAAUA,CAAI,CAAC,EACzD,KAAK,cAAgB,GACrB,KAAK,WAAW,QAASC,GAAW,CAChC,KAAK,wBAAwBA,CAAM,EACnC,KAAK,OAAOA,CAAM,CAC9B,CAAS,EACD,KAAK,WAAa,EACrB,CAMD,cAAe,CACX,KAAK,QAAO,EACZ,KAAK,QAAQ,sBAAsB,CACtC,CAQD,SAAU,CACF,KAAK,OAEL,KAAK,KAAK,QAASsB,GAAeA,EAAY,CAAA,EAC9C,KAAK,KAAO,QAEhB,KAAK,GAAG,SAAY,IAAI,CAC3B,CAiBD,YAAa,CACT,OAAI,KAAK,WACL,KAAK,OAAO,CAAE,KAAMrB,EAAW,UAAY,CAAA,EAG/C,KAAK,QAAO,EACR,KAAK,WAEL,KAAK,QAAQ,sBAAsB,EAEhC,IACV,CAMD,OAAQ,CACJ,OAAO,KAAK,YACf,CAUD,SAASsB,EAAU,CACf,YAAK,MAAM,SAAWA,EACf,IACV,CAUD,IAAI,UAAW,CACX,YAAK,MAAM,SAAW,GACf,IACV,CAcD,QAAQjB,EAAS,CACb,YAAK,MAAM,QAAUA,EACd,IACV,CAYD,MAAMa,EAAU,CACZ,YAAK,cAAgB,KAAK,eAAiB,CAAA,EAC3C,KAAK,cAAc,KAAKA,CAAQ,EACzB,IACV,CAYD,WAAWA,EAAU,CACjB,YAAK,cAAgB,KAAK,eAAiB,CAAA,EAC3C,KAAK,cAAc,QAAQA,CAAQ,EAC5B,IACV,CAmBD,OAAOA,EAAU,CACb,GAAI,CAAC,KAAK,cACN,OAAO,KAEX,GAAIA,EAAU,CACV,MAAMD,EAAY,KAAK,cACvB,QAAS1U,EAAI,EAAGA,EAAI0U,EAAU,OAAQ1U,IAClC,GAAI2U,IAAaD,EAAU1U,CAAC,EACxB,OAAA0U,EAAU,OAAO1U,EAAG,CAAC,EACd,IAGlB,MAEG,KAAK,cAAgB,GAEzB,OAAO,IACV,CAKD,cAAe,CACX,OAAO,KAAK,eAAiB,EAChC,CAcD,cAAc2U,EAAU,CACpB,YAAK,sBAAwB,KAAK,uBAAyB,CAAA,EAC3D,KAAK,sBAAsB,KAAKA,CAAQ,EACjC,IACV,CAcD,mBAAmBA,EAAU,CACzB,YAAK,sBAAwB,KAAK,uBAAyB,CAAA,EAC3D,KAAK,sBAAsB,QAAQA,CAAQ,EACpC,IACV,CAmBD,eAAeA,EAAU,CACrB,GAAI,CAAC,KAAK,sBACN,OAAO,KAEX,GAAIA,EAAU,CACV,MAAMD,EAAY,KAAK,sBACvB,QAAS1U,EAAI,EAAGA,EAAI0U,EAAU,OAAQ1U,IAClC,GAAI2U,IAAaD,EAAU1U,CAAC,EACxB,OAAA0U,EAAU,OAAO1U,EAAG,CAAC,EACd,IAGlB,MAEG,KAAK,sBAAwB,GAEjC,OAAO,IACV,CAKD,sBAAuB,CACnB,OAAO,KAAK,uBAAyB,EACxC,CAQD,wBAAwBwT,EAAQ,CAC5B,GAAI,KAAK,uBAAyB,KAAK,sBAAsB,OAAQ,CACjE,MAAMkB,EAAY,KAAK,sBAAsB,MAAK,EAClD,UAAWC,KAAYD,EACnBC,EAAS,MAAM,KAAMnB,EAAO,IAAI,CAEvC,CACJ,CACL,CC1zBO,SAASwB,EAAQ1B,EAAM,CAC1BA,EAAOA,GAAQ,GACf,KAAK,GAAKA,EAAK,KAAO,IACtB,KAAK,IAAMA,EAAK,KAAO,IACvB,KAAK,OAASA,EAAK,QAAU,EAC7B,KAAK,OAASA,EAAK,OAAS,GAAKA,EAAK,QAAU,EAAIA,EAAK,OAAS,EAClE,KAAK,SAAW,CACpB,CAOA0B,EAAQ,UAAU,SAAW,UAAY,CACrC,IAAIC,EAAK,KAAK,GAAK,KAAK,IAAI,KAAK,OAAQ,KAAK,UAAU,EACxD,GAAI,KAAK,OAAQ,CACb,IAAIC,EAAO,KAAK,SACZC,EAAY,KAAK,MAAMD,EAAO,KAAK,OAASD,CAAE,EAClDA,EAAM,KAAK,MAAMC,EAAO,EAAE,EAAI,EAA2BD,EAAKE,EAAtBF,EAAKE,CAChD,CACD,OAAO,KAAK,IAAIF,EAAI,KAAK,GAAG,EAAI,CACpC,EAMAD,EAAQ,UAAU,MAAQ,UAAY,CAClC,KAAK,SAAW,CACpB,EAMAA,EAAQ,UAAU,OAAS,SAAUI,EAAK,CACtC,KAAK,GAAKA,CACd,EAMAJ,EAAQ,UAAU,OAAS,SAAUK,EAAK,CACtC,KAAK,IAAMA,CACf,EAMAL,EAAQ,UAAU,UAAY,SAAUM,EAAQ,CAC5C,KAAK,OAASA,CAClB,EC3DO,MAAMC,WAAgBpC,EAAQ,CACjC,YAAYT,EAAKY,EAAM,CACnB,IAAIO,EACJ,QACA,KAAK,KAAO,GACZ,KAAK,KAAO,GACRnB,GAAoB,OAAOA,GAApB,WACPY,EAAOZ,EACPA,EAAM,QAEVY,EAAOA,GAAQ,GACfA,EAAK,KAAOA,EAAK,MAAQ,aACzB,KAAK,KAAOA,EACZkC,GAAsB,KAAMlC,CAAI,EAChC,KAAK,aAAaA,EAAK,eAAiB,EAAK,EAC7C,KAAK,qBAAqBA,EAAK,sBAAwB,GAAQ,EAC/D,KAAK,kBAAkBA,EAAK,mBAAqB,GAAI,EACrD,KAAK,qBAAqBA,EAAK,sBAAwB,GAAI,EAC3D,KAAK,qBAAqBO,EAAKP,EAAK,uBAAyB,MAAQO,IAAO,OAASA,EAAK,EAAG,EAC7F,KAAK,QAAU,IAAImB,EAAQ,CACvB,IAAK,KAAK,kBAAmB,EAC7B,IAAK,KAAK,qBAAsB,EAChC,OAAQ,KAAK,oBAAqB,CAC9C,CAAS,EACD,KAAK,QAAgB1B,EAAK,SAAb,KAAuB,IAAQA,EAAK,OAAO,EACxD,KAAK,YAAc,SACnB,KAAK,IAAMZ,EACX,MAAM+C,EAAUnC,EAAK,QAAUoC,GAC/B,KAAK,QAAU,IAAID,EAAQ,QAC3B,KAAK,QAAU,IAAIA,EAAQ,QAC3B,KAAK,aAAenC,EAAK,cAAgB,GACrC,KAAK,cACL,KAAK,KAAI,CAChB,CACD,aAAaqC,EAAG,CACZ,OAAK,UAAU,QAEf,KAAK,cAAgB,CAAC,CAACA,EAChB,MAFI,KAAK,aAGnB,CACD,qBAAqBA,EAAG,CACpB,OAAIA,IAAM,OACC,KAAK,uBAChB,KAAK,sBAAwBA,EACtB,KACV,CACD,kBAAkBA,EAAG,CACjB,IAAI9B,EACJ,OAAI8B,IAAM,OACC,KAAK,oBAChB,KAAK,mBAAqBA,GACzB9B,EAAK,KAAK,WAAa,MAAQA,IAAO,QAAkBA,EAAG,OAAO8B,CAAC,EAC7D,KACV,CACD,oBAAoBA,EAAG,CACnB,IAAI9B,EACJ,OAAI8B,IAAM,OACC,KAAK,sBAChB,KAAK,qBAAuBA,GAC3B9B,EAAK,KAAK,WAAa,MAAQA,IAAO,QAAkBA,EAAG,UAAU8B,CAAC,EAChE,KACV,CACD,qBAAqBA,EAAG,CACpB,IAAI9B,EACJ,OAAI8B,IAAM,OACC,KAAK,uBAChB,KAAK,sBAAwBA,GAC5B9B,EAAK,KAAK,WAAa,MAAQA,IAAO,QAAkBA,EAAG,OAAO8B,CAAC,EAC7D,KACV,CACD,QAAQA,EAAG,CACP,OAAK,UAAU,QAEf,KAAK,SAAWA,EACT,MAFI,KAAK,QAGnB,CAOD,sBAAuB,CAEf,CAAC,KAAK,eACN,KAAK,eACL,KAAK,QAAQ,WAAa,GAE1B,KAAK,UAAS,CAErB,CAQD,KAAK3C,EAAI,CACL,GAAI,CAAC,KAAK,YAAY,QAAQ,MAAM,EAChC,OAAO,KACX,KAAK,OAAS,IAAI4C,GAAO,KAAK,IAAK,KAAK,IAAI,EAC5C,MAAMC,EAAS,KAAK,OACd5N,EAAO,KACb,KAAK,YAAc,UACnB,KAAK,cAAgB,GAErB,MAAM6N,EAAiBhD,EAAG+C,EAAQ,OAAQ,UAAY,CAClD5N,EAAK,OAAM,EACX+K,GAAMA,EAAE,CACpB,CAAS,EACK+C,EAAW1B,GAAQ,CACrB,KAAK,QAAO,EACZ,KAAK,YAAc,SACnB,KAAK,aAAa,QAASA,CAAG,EAC1BrB,EACAA,EAAGqB,CAAG,EAIN,KAAK,qBAAoB,CAEzC,EAEc2B,EAAWlD,EAAG+C,EAAQ,QAASE,CAAO,EAC5C,GAAc,KAAK,WAAf,GAAyB,CACzB,MAAMjC,EAAU,KAAK,SAEfC,EAAQ,KAAK,aAAa,IAAM,CAClC+B,IACAC,EAAQ,IAAI,MAAM,SAAS,CAAC,EAC5BF,EAAO,MAAK,CACf,EAAE/B,CAAO,EACN,KAAK,KAAK,WACVC,EAAM,MAAK,EAEf,KAAK,KAAK,KAAK,IAAM,CACjB,KAAK,eAAeA,CAAK,CACzC,CAAa,CACJ,CACD,YAAK,KAAK,KAAK+B,CAAc,EAC7B,KAAK,KAAK,KAAKE,CAAQ,EAChB,IACV,CAOD,QAAQhD,EAAI,CACR,OAAO,KAAK,KAAKA,CAAE,CACtB,CAMD,QAAS,CAEL,KAAK,QAAO,EAEZ,KAAK,YAAc,OACnB,KAAK,aAAa,MAAM,EAExB,MAAM6C,EAAS,KAAK,OACpB,KAAK,KAAK,KAAK/C,EAAG+C,EAAQ,OAAQ,KAAK,OAAO,KAAK,IAAI,CAAC,EAAG/C,EAAG+C,EAAQ,OAAQ,KAAK,OAAO,KAAK,IAAI,CAAC,EAAG/C,EAAG+C,EAAQ,QAAS,KAAK,QAAQ,KAAK,IAAI,CAAC,EAAG/C,EAAG+C,EAAQ,QAAS,KAAK,QAAQ,KAAK,IAAI,CAAC,EAAG/C,EAAG,KAAK,QAAS,UAAW,KAAK,UAAU,KAAK,IAAI,CAAC,CAAC,CAC5P,CAMD,QAAS,CACL,KAAK,aAAa,MAAM,CAC3B,CAMD,OAAOnP,EAAM,CACT,GAAI,CACA,KAAK,QAAQ,IAAIA,CAAI,CACxB,OACMsS,EAAG,CACN,KAAK,QAAQ,cAAeA,CAAC,CAChC,CACJ,CAMD,UAAUzC,EAAQ,CAEd0C,GAAS,IAAM,CACX,KAAK,aAAa,SAAU1C,CAAM,CAC9C,EAAW,KAAK,YAAY,CACvB,CAMD,QAAQa,EAAK,CACT,KAAK,aAAa,QAASA,CAAG,CACjC,CAOD,OAAOhB,EAAKC,EAAM,CACd,IAAIuC,EAAS,KAAK,KAAKxC,CAAG,EAC1B,OAAKwC,EAII,KAAK,cAAgB,CAACA,EAAO,QAClCA,EAAO,QAAO,GAJdA,EAAS,IAAI3C,GAAO,KAAMG,EAAKC,CAAI,EACnC,KAAK,KAAKD,CAAG,EAAIwC,GAKdA,CACV,CAOD,SAASA,EAAQ,CACb,MAAMM,EAAO,OAAO,KAAK,KAAK,IAAI,EAClC,UAAW9C,KAAO8C,EAEd,GADe,KAAK,KAAK9C,CAAG,EACjB,OACP,OAGR,KAAK,OAAM,CACd,CAOD,QAAQG,EAAQ,CACZ,MAAM4C,EAAiB,KAAK,QAAQ,OAAO5C,CAAM,EACjD,QAASxT,EAAI,EAAGA,EAAIoW,EAAe,OAAQpW,IACvC,KAAK,OAAO,MAAMoW,EAAepW,CAAC,EAAGwT,EAAO,OAAO,CAE1D,CAMD,SAAU,CACN,KAAK,KAAK,QAASsB,GAAeA,EAAY,CAAA,EAC9C,KAAK,KAAK,OAAS,EACnB,KAAK,QAAQ,SAChB,CAMD,QAAS,CACL,KAAK,cAAgB,GACrB,KAAK,cAAgB,GACrB,KAAK,QAAQ,cAAc,EACvB,KAAK,QACL,KAAK,OAAO,OACnB,CAMD,YAAa,CACT,OAAO,KAAK,QACf,CAMD,QAAQN,EAAQC,EAAa,CACzB,KAAK,QAAO,EACZ,KAAK,QAAQ,QACb,KAAK,YAAc,SACnB,KAAK,aAAa,QAASD,EAAQC,CAAW,EAC1C,KAAK,eAAiB,CAAC,KAAK,eAC5B,KAAK,UAAS,CAErB,CAMD,WAAY,CACR,GAAI,KAAK,eAAiB,KAAK,cAC3B,OAAO,KACX,MAAMxM,EAAO,KACb,GAAI,KAAK,QAAQ,UAAY,KAAK,sBAC9B,KAAK,QAAQ,QACb,KAAK,aAAa,kBAAkB,EACpC,KAAK,cAAgB,OAEpB,CACD,MAAMoO,EAAQ,KAAK,QAAQ,SAAQ,EACnC,KAAK,cAAgB,GACrB,MAAMtC,EAAQ,KAAK,aAAa,IAAM,CAC9B9L,EAAK,gBAET,KAAK,aAAa,oBAAqBA,EAAK,QAAQ,QAAQ,EAExD,CAAAA,EAAK,eAETA,EAAK,KAAMoM,GAAQ,CACXA,GACApM,EAAK,cAAgB,GACrBA,EAAK,UAAS,EACd,KAAK,aAAa,kBAAmBoM,CAAG,GAGxCpM,EAAK,YAAW,CAExC,CAAiB,EACJ,EAAEoO,CAAK,EACJ,KAAK,KAAK,WACVtC,EAAM,MAAK,EAEf,KAAK,KAAK,KAAK,IAAM,CACjB,KAAK,eAAeA,CAAK,CACzC,CAAa,CACJ,CACJ,CAMD,aAAc,CACV,MAAMuC,EAAU,KAAK,QAAQ,SAC7B,KAAK,cAAgB,GACrB,KAAK,QAAQ,QACb,KAAK,aAAa,YAAaA,CAAO,CACzC,CACL,CC/VA,MAAM5O,EAAQ,CAAA,EACd,SAAS6O,GAAO7D,EAAKY,EAAM,CACnB,OAAOZ,GAAQ,WACfY,EAAOZ,EACPA,EAAM,QAEVY,EAAOA,GAAQ,GACf,MAAMkD,EAAS/D,GAAIC,EAAKY,EAAK,MAAQ,YAAY,EAC3C9S,EAASgW,EAAO,OAChB9C,EAAK8C,EAAO,GACZtJ,EAAOsJ,EAAO,KACdC,EAAgB/O,EAAMgM,CAAE,GAAKxG,KAAQxF,EAAMgM,CAAE,EAAE,KAC/CgD,EAAgBpD,EAAK,UACvBA,EAAK,sBAAsB,GACjBA,EAAK,YAAf,IACAmD,EACJ,IAAIrD,EACJ,OAAIsD,EACAtD,EAAK,IAAImC,GAAQ/U,EAAQ8S,CAAI,GAGxB5L,EAAMgM,CAAE,IACThM,EAAMgM,CAAE,EAAI,IAAI6B,GAAQ/U,EAAQ8S,CAAI,GAExCF,EAAK1L,EAAMgM,CAAE,GAEb8C,EAAO,OAAS,CAAClD,EAAK,QACtBA,EAAK,MAAQkD,EAAO,UAEjBpD,EAAG,OAAOoD,EAAO,KAAMlD,CAAI,CACtC,CAGA,OAAO,OAAOiD,GAAQ,CAClB,QAAAhB,GACA,OAAArC,GACA,GAAIqD,GACJ,QAASA,EACb,CAAC,ECzCD,MAAMI,GAAMC,GAAO,2BAA2B,EAKvC,SAASC,GAAsBhB,EAAQ/D,EAAS,CACnD,KAAM,CAAE,KAAAgF,EAAM,OAAAtW,CAAQ,EAAGqV,EACnBkB,EAAS,CACX,WAAYjF,EAAQ,WACpB,MAAM,KAAKtR,EAAQ,CACXsR,EAAQ,QAAU,OAClBtR,EAASwW,GAAgBxW,EAAQsR,EAAQ,MAAM,GAEnD,GAAI,CACA,MAAMgF,EAAKtW,CAAM,CACpB,OACM6T,EAAK,CAEJA,EAAI,OAAS,WAIbsC,GAAI,MAAMtC,CAAG,CAEpB,CACJ,EACD,OAASvC,EAAQ,QAAU,KAAQkF,GAAgBxW,EAAQsR,EAAQ,MAAM,EAAItR,EAC7E,SAAU,CAAE,KAAM,KAAK,IAAG,CAAI,EAC9B,MAAM,OAAQ,CACV,GAAIqV,EAAO,OACP,OAEJ,MAAMoB,EAAQ,KAAK,MAGbnD,EAAU,WAAW,IAAM,CAC7B,GAAIiD,EAAO,YAAc,KAAM,CAC3B,KAAM,CAAE,KAAA9F,EAAM,KAAArC,CAAI,EAAKmI,EAAO,WAAW,YACzCJ,GAAI,qEAAsE1F,EAAMrC,EAAM,KAAK,IAAG,EAAKqI,CAAK,CAC3G,CACIpB,EAAO,QACRA,EAAO,MAAK,EAAG,MAAMxB,GAAO,CACxBsC,GAAI,MAAM,yBAA0BtC,CAAG,CAC/D,CAAqB,CAER,EAAE7B,EAAa,EAChB,GAAI,CACA,MAAMqD,EAAO,OAChB,QACO,CACJ,aAAa/B,CAAO,CACvB,CACJ,CACT,EACI,OAAA+B,EAAO,iBAAiB,QAAS,IAAM,CAI/BkB,EAAO,SAAS,OAAS,OACzBA,EAAO,SAAS,MAAQ,KAAK,IAAG,EAE5C,EAAO,CACC,KAAM,EACd,CAAK,EACMA,CACX,CCnEO,SAASG,GAAYC,EAAI,CAC5B,MAAMC,EAAaD,EAAG,SAAU,EAAC,MAAM,GAAG,EACpCE,EAAWF,EAAG,OAAQ,EAAC,CAAC,EAAE,KAC1BG,EAAUH,EAAG,OAAQ,EAAC,CAAC,EAAE,KACzBI,EAAUJ,EAAG,aAAc,EAAC,CAAC,EAAE,CAAC,EACtC,GAAIE,IAAa,OAAUC,IAAY,MAAQA,IAAY,MACvD,MAAM,IAAI,MAAM,sBAAsBH,EAAG,SAAQ,CAAE,EAAE,EAEzD,GAAI,CAAChF,GAAOgF,CAAE,EACV,MAAO,UAAUC,EAAW,CAAC,CAAC,IAAIA,EAAW,CAAC,CAAC,GAEnD,GAAIE,IAAY,KACZ,MAAO,UAAUF,EAAW,CAAC,CAAC,GAAGG,GAAW,MAAQA,IAAY,KAAO,GAAK,IAAIA,CAAO,EAAE,GAE7F,GAAID,IAAY,MACZ,MAAO,WAAWF,EAAW,CAAC,CAAC,GAAGG,GAAW,MAAQA,IAAY,MAAQ,GAAK,IAAIA,CAAO,EAAE,GAE/F,MAAM,IAAI,MAAM,sBAAwBJ,EAAG,SAAU,CAAA,CACzD,CACO,SAASK,GAAeC,EAAO,CAClC,MAAMC,EAAS,sBACf,GAAID,EAAM,WAAWC,CAAM,EAAG,CAC1BD,EAAQA,EAAM,UAAUC,EAAO,OAAQD,EAAM,MAAM,EACnD,IAAIN,EAAK/E,GAAUqF,CAAK,EACxB,MAAME,EAAaR,EAAG,aAAc,EAAC,OAAQS,GAClCA,EAAO,CAAC,IAAM,GACxB,EAAE,CAAC,EACJ,GAAID,EAAW,CAAC,GAAK,KACjB,MAAM,IAAI,MAAM,sBAAwBF,CAAK,EAEjDN,EAAKA,EAAG,YAAY,KAAK,EACzBA,EAAKA,EAAG,YAAY,kBAAkB,EACtCA,EAAKA,EAAG,YAAY,QAAQQ,EAAW,CAAC,CAAC,EAAE,EAC3CF,EAAQN,EAAG,UACd,CACD,OAAOM,CACX,CC5BA,MAAMd,EAAMC,GAAO,6BAA6B,EAC1CiB,GAAa,CACf,WAAY,CAAC,WAAW,EACxB,KAAM,kBACV,EACA,MAAMC,WAAkBC,EAAa,CACjC,YAAYC,EAAeC,EAAgBC,EAAUC,EAASC,EAAgB,CAC1E,QACA,KAAK,eAAiBH,EACtB,KAAK,OAASI,GAAQL,EAAeH,EAAU,EAC/C,KAAK,YAAc,GACnB,KAAK,SAAW,IAAI,IACpB,KAAK,eAAiB,IAAI,IAC1B,KAAK,SAAWK,EAChB,KAAK,QAAUC,EACf,KAAK,eAAiBC,EACtB,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,EACzD,IAAIE,EAAsB,GAC1B,KAAK,OAAO,GAAG,gBAAiBjE,GAAO,CAE/BiE,GAAuBjE,EAAI,OAAS,kBAKxC,KAAK,cAAc,IAAIkE,EAAY,QAAS,CACxC,OAAQlE,CACX,CAAA,CAAC,CACd,CAAS,EACD,KAAK,OAAO,GAAG,QAAUA,GAAQ,CAC7B,KAAK,cAAc,IAAIkE,EAAY,QAAS,CACxC,OAAQlE,CACX,CAAA,CAAC,CACd,CAAS,EACD,KAAK,OAAO,GAAG,eAAgB,KAAK,iBAAiB,EACrD,KAAK,OAAO,GAAG,UAAYoD,GAAU,CACjC,KAAK,cAAc,IAAIc,EAAY,OAAQ,CACvC,OAAQd,CACX,CAAA,CAAC,CACd,CAAS,EACD,KAAK,OAAO,GAAG,UAAW,IAAM,CAC5B,KAAK,OAAO,KAAK,UAAW,KAAK,eAAe,SAAQ,CAAE,EACtDa,GACA,KAAK,cAAc,IAAIC,EAAY,WAAW,CAAC,CAE/D,CAAS,EACD,KAAK,OAAO,KAAK,UAAW,IAAM,CAE9BD,EAAsB,GACtB,KAAK,cAAc,IAAIC,EAAY,WAAW,CAAC,CAC3D,CAAS,EACD,KAAK,OAAO,GAAG,aAAc,IAAM,CAC/B,KAAK,cAAc,IAAIA,EAAY,YAAY,CAAC,CAC5D,CAAS,CACJ,CACD,eAAeC,EAAUC,EAAcC,EAAc,CACjD,MAAMN,EAAiB,CACnB,GAAG,KAAK,cACpB,EACcO,EAAU,IAAIC,GAAeR,CAAc,EAC3CrC,EAAW8C,GAAQ,CACrB,MAAMxE,EAAMwE,EAAI,OAChBlC,EAAI,MAAM,8BAA+BtC,CAAG,CACxD,EACQ,OAAAsE,EAAQ,iBAAiB,QAAS5C,CAAO,EACzC4C,EAAQ,iBAAiB,QAAS,IAAM,CACpCA,EAAQ,oBAAoB,QAAS5C,CAAO,CACxD,EAAW,CACC,KAAM,EAClB,CAAS,EACD4C,EAAQ,iBAAiB,SAAWE,GAAQ,CACxC,MAAMC,EAASD,EAAI,OACnB,KAAK,OAAO,KAAK,eAAgB,CAC7B,SAAAL,EACA,aAAAC,EACA,aAAAC,EACA,OAAQ,GACR,OAAAI,CAChB,CAAa,CACb,CAAS,EACDH,EAAQ,iBAAiB,QAAS,IAAM,CACpC,MAAM5B,EAASF,GAAsB8B,EAAS,CAAE,WAAY,KAAK,cAAc,CAAE,EACjFhC,EAAI,4BAA6BI,EAAO,UAAU,EAClD,GAAI,CACA,KAAK,SAAS,eAAeA,CAAM,EAC9B,KAAKgC,GAAQ,CACdpC,EAAI,iCAAkCI,EAAO,UAAU,EACvD,KAAK,YAAY,KAAKA,CAAM,EAC5B,MAAMiC,EAAc,IAAM,CACtB,KAAK,YAAc,KAAK,YAAY,OAAOhP,GAAKA,IAAM+M,CAAM,EAC5D,KAAK,SAAS,OAAOyB,CAAQ,EAC7B,KAAK,eAAe,OAAOA,CAAQ,CAC3D,EACoBG,EAAQ,iBAAiB,QAASK,EAAa,CAC3C,KAAM,EAC9B,CAAqB,EACD,KAAK,cAAc,IAAIT,EAAY,aAAc,CAC7C,OAAQQ,CACX,CAAA,CAAC,EACF,KAAK,QAAQA,CAAI,CACrC,CAAiB,EACI,MAAM1E,GAAO,CACdsC,EAAI,MAAM,uCAAwCtC,CAAG,EACrD0C,EAAO,MAAK,EAAG,MAAM1C,GAAO,CACxBsC,EAAI,MAAM,8DAA+DtC,CAAG,CACpG,CAAqB,CACrB,CAAiB,CACJ,OACMA,EAAK,CACRsC,EAAI,MAAM,uCAAwCtC,CAAG,EACrD0C,EAAO,MAAK,EAAG,MAAM1C,GAAO,CACxBsC,EAAI,MAAM,8DAA+DtC,CAAG,CAChG,CAAiB,CACJ,CACb,EAAW,CACC,KAAM,EAClB,CAAS,EACMsE,CACV,CACD,kBAAkBM,EAAO,CAErB,GADAtC,EAAI,oDAAqDsC,EAAM,OAAO,KAAMA,EAAM,MAAM,EACpFA,EAAM,SAAW,IAAQA,EAAM,KAAO,MAAQA,EAAM,UAAY,KAChE,OAEJ,MAAMT,EAAWS,EAAM,SACvB,IAAIC,EAAiB,KAAK,eAAe,IAAIV,CAAQ,EACjDU,GAAkB,OAClBA,EAAiB,CAAA,EACjB,KAAK,eAAe,IAAIV,EAAUU,CAAc,GAEpDA,EAAe,KAAKD,CAAK,EACzB,IAAIN,EAAU,KAAK,SAAS,IAAIH,CAAQ,EACxC,GAAIG,GAAW,KAAM,CACjB,GAAIM,EAAM,OAAO,OAAS,QAAS,CAC/BtC,EAAI,2FAA2F,EAC/F,MACH,CACDA,EAAI,gDAAgD,EACpDgC,EAAU,KAAK,eAAeM,EAAM,SAAUA,EAAM,aAAcA,EAAM,YAAY,EACpF,KAAK,SAAS,IAAIT,EAAUG,CAAO,CACtC,MAEGhC,EAAI,sDAAsD,EAE9D,KAAOuC,EAAe,OAAS,GAAG,CAC9B,MAAMC,EAAYD,EAAe,QAC7BC,GAAW,QAAU,MACrBR,EAAQ,aAAaQ,EAAU,MAAM,CAE5C,CACJ,CACD,MAAM,OAAQ,CAEV,KAAK,OAAO,KAAK,WAAY,KAAK,eAAe,SAAQ,CAAE,EAC3D,KAAK,OAAO,qBACZ,KAAK,OAAO,QACZ,MAAM,QAAQ,IAAI,CACd,GAAG,KAAK,YAAY,IAAI,MAAOpC,GAAW,CAAE,MAAMA,EAAO,MAAO,EAAG,EACnE,GAAG,MAAM,KAAK,KAAK,SAAS,OAAM,CAAE,EAAE,IAAI,MAAO4B,GAAY,CAAE,MAAMA,EAAQ,MAAK,CAAG,CAAE,CACnG,CAAS,EACD,KAAK,cAAc,IAAIJ,EAAY,OAAO,CAAC,CAC9C,CACL,CACA,MAAMa,WAAuBrB,EAAa,CACtC,YAAYG,EAAUC,EAASkB,EAAQrI,EAAWc,EAAS,CACvD,QACA,KAAK,SAAWoG,EAChB,KAAK,QAAUC,EACf,KAAK,OAASkB,EACd,KAAK,UAAYrI,EACjB,KAAK,QAAUc,CAClB,CACD,MAAM,OAAOqF,EAAI,CAEb,GAAI,KAAK,eAAiB,KACtB,MAAMmC,EAAQ,IAAI,MAAM,yBAAyB,EAAG,uBAAuB,EAE/E,MAAMC,EAAQC,KAEd,KAAK,cAAgBrC,EACrB,IAAIc,EACCd,EAAG,WAAY,EAAC,SAAS7E,EAAQ,EAIlC2F,EAAiBd,EAHjBc,EAAiBd,EAAG,YAAY,QAAQ,KAAK,OAAO,UAAU,EAAE,EAKpE,MAAMa,EAAgB,KAAK,cAAgBd,GAAYC,CAAE,EACzDR,EAAI,yCAA0C,KAAK,aAAa,EAChE,MAAM8C,EAAS,IAAI3B,GAAU,KAAK,cAAeG,EAAgB,KAAK,SAAU,KAAK,QAAS,KAAK,QAAQ,cAAc,EACzHwB,EAAO,iBAAiB,QAAUZ,GAAQ,CACtC,MAAMxE,EAAMwE,EAAI,OAChBlC,EAAI,2CAA4CtC,CAAG,EACnDoF,EAAO,MAAK,EAAG,MAAMpF,GAAO,CACxBsC,EAAI,MAAM,mCAAoCtC,CAAG,CACjE,CAAa,EACDkF,EAAM,OAAOlF,CAAG,CAC5B,CAAS,EACDoF,EAAO,iBAAiB,YAAa,IAAM,CACvC9C,EAAI,gCAAgC,EACpC,KAAK,cAAc,IAAI4B,EAAY,WAAW,CAAC,EAC/CgB,EAAM,QAAO,CACzB,CAAS,EACDE,EAAO,iBAAiB,OAASZ,GAAQ,CACrC,KAAK,UAAU,eAAeA,EAAI,MAAM,CACpD,CAAS,EACDY,EAAO,iBAAiB,aAAeZ,GAAQ,CAC3C,MAAME,EAAOF,EAAI,OACjB,GAAIE,EAAK,YAAc,KACnB,GAAI,CACAA,EAAK,WAAa5B,EAAG,gBAAgB7E,EAAQ,EAAE,YAAY,QAAQyG,EAAK,WAAW,SAAU,CAAA,EAAE,CAClG,OACM1E,EAAK,CACRsC,EAAI,MAAM,qCAAsCtC,CAAG,CACtD,CAEL,KAAK,cAAc,IAAIkE,EAAY,aAAc,CAC7C,OAAQQ,CACX,CAAA,CAAC,CACd,CAAS,EACDU,EAAO,iBAAiB,aAAc,IAAM,CAGxC,KAAK,UAAU,WAAW,OAAOzB,CAAa,CAC1D,CAAS,EACDyB,EAAO,iBAAiB,YAAa,IAAM,CAEvC,KAAK,UAAU,WAAW,IAAIzB,EAAeyB,CAAM,CAC/D,CAAS,EAED,KAAK,UAAU,WAAW,IAAI,KAAK,cAAeA,CAAM,EACxD,MAAMF,EAAM,OACf,CACD,MAAM,OAAQ,CACV,GAAI,KAAK,eAAiB,KAAM,CAC5B,MAAME,EAAS,KAAK,UAAU,WAAW,IAAI,KAAK,aAAa,EAC3DA,GAAU,OACV,MAAMA,EAAO,QACb,KAAK,UAAU,WAAW,OAAO,KAAK,aAAa,EAE1D,CACD,KAAK,cAAc,IAAIlB,EAAY,OAAO,CAAC,EAE3C,KAAK,cAAgB,MACxB,CACD,UAAW,CACP,OAAI,KAAK,eAAiB,KACf,CACH,KAAK,aACrB,EAEe,EACV,CACL,CACO,SAASmB,GAAexB,EAAUC,EAASkB,EAAQrI,EAAWc,EAAS,CAC1E,OAAO,IAAIsH,GAAelB,EAAUC,EAASkB,EAAQrI,EAAWc,CAAO,CAC3E,CCrQO,SAASnG,GAAatG,EAAK,CAC9B,OAAI,WAAW,QAAU,KACd,IAAI,WAAWA,EAAI,OAAQA,EAAI,WAAYA,EAAI,UAAU,EAE7DA,CACX,CCOO,SAAS8F,GAAYtK,EAAO,EAAG,CAClC,OAAI,WAAW,QAAQ,aAAe,KAC3B8K,GAAa,WAAW,OAAO,YAAY9K,CAAI,CAAC,EAEpD,IAAI,WAAWA,CAAI,CAC9B,CChBA,SAASlB,GAAMC,EAAUC,EAAM,CAC7B,GAAID,EAAS,QAAU,IAAO,MAAM,IAAI,UAAU,mBAAmB,EAErE,QADIE,EAAW,IAAI,WAAW,GAAG,EACxBC,EAAI,EAAGA,EAAID,EAAS,OAAQC,IACnCD,EAASC,CAAC,EAAI,IAEhB,QAASC,EAAI,EAAGA,EAAIJ,EAAS,OAAQI,IAAK,CACxC,IAAIC,EAAIL,EAAS,OAAOI,CAAC,EACrBE,EAAKD,EAAE,WAAW,CAAC,EACvB,GAAIH,EAASI,CAAE,IAAM,IAAO,MAAM,IAAI,UAAUD,EAAI,eAAe,EACnEH,EAASI,CAAE,EAAIF,CAChB,CACD,IAAIG,EAAOP,EAAS,OAChBQ,EAASR,EAAS,OAAO,CAAC,EAC1BS,EAAS,KAAK,IAAIF,CAAI,EAAI,KAAK,IAAI,GAAG,EACtCG,EAAU,KAAK,IAAI,GAAG,EAAI,KAAK,IAAIH,CAAI,EAC3C,SAASI,EAAQC,EAAQ,CAMvB,GALIA,aAAkB,aAAuB,YAAY,OAAOA,CAAM,EACpEA,EAAS,IAAI,WAAWA,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAClE,MAAM,QAAQA,CAAM,IAC7BA,EAAS,WAAW,KAAKA,CAAM,IAE7B,EAAEA,aAAkB,YAAe,MAAM,IAAI,UAAU,qBAAqB,EAChF,GAAIA,EAAO,SAAW,EAAK,MAAO,GAMlC,QAJIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAOJ,EAAO,OACXG,IAAWC,GAAQJ,EAAOG,CAAM,IAAM,GAC3CA,IACAF,IAMF,QAHII,GAASD,EAAOD,GAAUL,EAAU,IAAO,EAC3CQ,EAAM,IAAI,WAAWD,CAAI,EAEtBF,IAAWC,GAAM,CAItB,QAHIG,EAAQP,EAAOG,CAAM,EAErBX,EAAI,EACCgB,EAAMH,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYM,IAAQ,GAAKA,IAAOhB,IAC3Ee,GAAU,IAAMD,EAAIE,CAAG,IAAO,EAC9BF,EAAIE,CAAG,EAAKD,EAAQZ,IAAU,EAC9BY,EAASA,EAAQZ,IAAU,EAE7B,GAAIY,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACTW,GACD,CAGD,QADIM,EAAMJ,EAAOH,EACVO,IAAQJ,GAAQC,EAAIG,CAAG,IAAM,GAClCA,IAIF,QADIzB,EAAMY,EAAO,OAAOK,CAAM,EACvBQ,EAAMJ,EAAM,EAAEI,EAAOzB,GAAOI,EAAS,OAAOkB,EAAIG,CAAG,CAAC,EAC3D,OAAOzB,CACR,CACD,SAAS0B,EAAcV,EAAQ,CAC7B,GAAI,OAAOA,GAAW,SAAY,MAAM,IAAI,UAAU,iBAAiB,EACvE,GAAIA,EAAO,SAAW,EAAK,OAAO,IAAI,WACtC,IAAIW,EAAM,EAEV,GAAIX,EAAOW,CAAG,IAAM,IAIpB,SAFIV,EAAS,EACTC,EAAS,EACNF,EAAOW,CAAG,IAAMf,GACrBK,IACAU,IAMF,QAHIN,GAAUL,EAAO,OAASW,GAAOd,EAAU,IAAO,EAClDe,EAAO,IAAI,WAAWP,CAAI,EAEvBL,EAAOW,CAAG,GAAG,CAElB,IAAIJ,EAAQjB,EAASU,EAAO,WAAWW,CAAG,CAAC,EAE3C,GAAIJ,IAAU,IAAO,OAErB,QADIf,EAAI,EACCqB,EAAMR,EAAO,GAAIE,IAAU,GAAKf,EAAIU,IAAYW,IAAQ,GAAKA,IAAOrB,IAC3Ee,GAAUZ,EAAOiB,EAAKC,CAAG,IAAO,EAChCD,EAAKC,CAAG,EAAKN,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAIA,IAAU,EAAK,MAAM,IAAI,MAAM,gBAAgB,EACnDL,EAASV,EACTmB,GACD,CAED,GAAIX,EAAOW,CAAG,IAAM,IAGpB,SADIG,EAAMT,EAAOH,EACVY,IAAQT,GAAQO,EAAKE,CAAG,IAAM,GACnCA,IAIF,QAFIC,EAAM,IAAI,WAAWd,GAAUI,EAAOS,EAAI,EAC1CvB,EAAIU,EACDa,IAAQT,GACbU,EAAIxB,GAAG,EAAIqB,EAAKE,GAAK,EAEvB,OAAOC,GACR,CACD,SAASC,EAAQC,EAAQ,CACvB,IAAIC,EAASR,EAAaO,CAAM,EAChC,GAAIC,EAAU,OAAOA,EACrB,MAAM,IAAI,MAAM,OAAO7B,CAAI,YAAY,CACxC,CACD,MAAO,CACL,OAAQU,EACR,aAAcW,EACd,OAAQM,CACT,CACH,CACA,IAAIG,GAAMhC,GAENiC,GAAkCD,GCtFtC,MAAMtC,GAASC,GAAK,CAClB,GAAIA,aAAa,YAAcA,EAAE,YAAY,OAAS,aAAc,OAAOA,EAC3E,GAAIA,aAAa,YAAa,OAAO,IAAI,WAAWA,CAAC,EACrD,GAAI,YAAY,OAAOA,CAAC,EACtB,OAAO,IAAI,WAAWA,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAU,EAE5D,MAAM,IAAI,MAAM,mCAAmC,CACrD,EAaMC,GAAaC,GAAQ,IAAI,YAAW,EAAI,OAAOA,CAAG,EAMlDC,GAAWC,GAAM,IAAI,YAAa,EAAE,OAAOA,CAAC,EC/ClD,MAAMmD,EAAQ,CAMZ,YAAahD,EAAMiC,EAAQC,EAAY,CACrC,KAAK,KAAOlC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,CACnB,CAMD,OAAQC,EAAO,CACb,GAAIA,aAAiB,WACnB,MAAO,GAAG,KAAK,MAAM,GAAG,KAAK,WAAWA,CAAK,CAAC,GAE9C,MAAM,MAAM,mCAAmC,CAElD,CACH,CAiBA,MAAMc,EAAQ,CAMZ,YAAajD,EAAMiC,EAAQI,EAAY,CAIrC,GAHA,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EAEVA,EAAO,YAAY,CAAC,IAAM,OAC5B,MAAM,IAAI,MAAM,0BAA0B,EAG5C,KAAK,gBAAyCA,EAAO,YAAY,CAAC,EAClE,KAAK,WAAaI,CACnB,CAKD,OAAQC,EAAM,CACZ,GAAI,OAAOA,GAAS,SAAU,CAC5B,GAAIA,EAAK,YAAY,CAAC,IAAM,KAAK,gBAC/B,MAAM,MAAM,qCAAqC,KAAK,UAAUA,CAAI,CAAC,KAAK,KAAK,IAAI,+CAA+C,KAAK,MAAM,EAAE,EAEjJ,OAAO,KAAK,WAAWA,EAAK,MAAM,KAAK,OAAO,MAAM,CAAC,CAC3D,KACM,OAAM,MAAM,mCAAmC,CAElD,CAOD,GAAIC,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CACH,CAYA,MAAMO,EAAgB,CAIpB,YAAaJ,EAAU,CACrB,KAAK,SAAWA,CACjB,CAOD,GAAIH,EAAS,CACX,OAAOC,GAAG,KAAMD,CAAO,CACxB,CAMD,OAAQI,EAAO,CACb,MAAMV,EAAgCU,EAAM,CAAC,EACvCJ,EAAU,KAAK,SAASN,CAAM,EACpC,GAAIM,EACF,OAAOA,EAAQ,OAAOI,CAAK,EAE3B,MAAM,WAAW,qCAAqC,KAAK,UAAUA,CAAK,CAAC,+BAA+B,OAAO,KAAK,KAAK,QAAQ,CAAC,gBAAgB,CAEvJ,CACH,CASO,MAAMH,GAAK,CAACI,EAAMC,IAAU,IAAIC,GAA6C,CAClF,GAAIF,EAAK,UAAY,CAAE,CAAoCA,EAAM,MAAM,EAAGA,CAAM,EAChF,GAAIC,EAAM,UAAY,CAAE,CAAoCA,EAAO,MAAM,EAAGA,CAAO,CACrF,CAAG,EAaI,MAAMM,EAAM,CAOjB,YAAanD,EAAMiC,EAAQC,EAAYG,EAAY,CACjD,KAAK,KAAOrC,EACZ,KAAK,OAASiC,EACd,KAAK,WAAaC,EAClB,KAAK,WAAaG,EAClB,KAAK,QAAU,IAAIW,GAAQhD,EAAMiC,EAAQC,CAAU,EACnD,KAAK,QAAU,IAAIe,GAAQjD,EAAMiC,EAAQI,CAAU,CACpD,CAKD,OAAQM,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CAKD,OAAQA,EAAO,CACb,OAAO,KAAK,QAAQ,OAAOA,CAAK,CACjC,CACH,CAYO,MAAMO,GAAO,CAAC,CAAE,KAAAlD,EAAM,OAAAiC,EAAQ,OAAAvB,EAAQ,OAAAiB,CAAQ,IACnD,IAAIwB,GAAMnD,EAAMiC,EAAQvB,EAAQiB,CAAM,EAW3ByB,EAAQ,CAAC,CAAE,OAAAnB,EAAQ,KAAAjC,EAAM,SAAAqD,CAAQ,IAAO,CACnD,KAAM,CAAE,OAAA3C,EAAQ,OAAAiB,CAAM,EAAK2B,GAAMD,EAAUrD,CAAI,EAC/C,OAAOkD,GAAK,CACV,OAAAjB,EACA,KAAAjC,EACA,OAAAU,EAIA,OAAQ4B,GAAQ9C,GAAOmC,EAAOW,CAAI,CAAC,CACvC,CAAG,CACH,EASMX,GAAS,CAACC,EAAQyB,EAAUE,EAAavD,IAAS,CAGtD,MAAMwD,EAAQ,CAAE,EAChB,QAASrD,EAAI,EAAGA,EAAIkD,EAAS,OAAQ,EAAElD,EACrCqD,EAAMH,EAASlD,CAAC,CAAC,EAAIA,EAIvB,IAAIsD,EAAM7B,EAAO,OACjB,KAAOA,EAAO6B,EAAM,CAAC,IAAM,KACzB,EAAEA,EAIJ,MAAMC,EAAM,IAAI,WAAYD,EAAMF,EAAc,EAAK,CAAC,EAGtD,IAAII,EAAO,EACP9B,EAAS,EACT+B,EAAU,EACd,QAASzD,EAAI,EAAGA,EAAIsD,EAAK,EAAEtD,EAAG,CAE5B,MAAM0D,EAAQL,EAAM5B,EAAOzB,CAAC,CAAC,EAC7B,GAAI0D,IAAU,OACZ,MAAM,IAAI,YAAY,OAAO7D,CAAI,YAAY,EAI/C6B,EAAUA,GAAU0B,EAAeM,EACnCF,GAAQJ,EAGJI,GAAQ,IACVA,GAAQ,EACRD,EAAIE,GAAS,EAAI,IAAQ/B,GAAU8B,EAEtC,CAGD,GAAIA,GAAQJ,GAAe,IAAQ1B,GAAW,EAAI8B,EAChD,MAAM,IAAI,YAAY,wBAAwB,EAGhD,OAAOD,CACT,EAQMhD,GAAS,CAACoD,EAAMT,EAAUE,IAAgB,CAC9C,MAAMQ,EAAMV,EAASA,EAAS,OAAS,CAAC,IAAM,IACxCW,GAAQ,GAAKT,GAAe,EAClC,IAAIG,EAAM,GAENC,EAAO,EACP9B,EAAS,EACb,QAAS1B,EAAI,EAAGA,EAAI2D,EAAK,OAAQ,EAAE3D,EAMjC,IAJA0B,EAAUA,GAAU,EAAKiC,EAAK3D,CAAC,EAC/BwD,GAAQ,EAGDA,EAAOJ,GACZI,GAAQJ,EACRG,GAAOL,EAASW,EAAQnC,GAAU8B,CAAK,EAU3C,GALIA,IACFD,GAAOL,EAASW,EAAQnC,GAAW0B,EAAcI,CAAM,GAIrDI,EACF,KAAQL,EAAI,OAASH,EAAe,GAClCG,GAAO,IAIX,OAAOA,CACT,EAaaO,EAAU,CAAC,CAAE,KAAAjE,EAAM,OAAAiC,EAAQ,YAAAsB,EAAa,SAAAF,CAAQ,IACpDH,GAAK,CACV,OAAAjB,EACA,KAAAjC,EACA,OAAQ2C,EAAO,CACb,OAAOjC,GAAOiC,EAAOU,EAAUE,CAAW,CAC3C,EACD,OAAQZ,EAAO,CACb,OAAOhB,GAAOgB,EAAOU,EAAUE,EAAavD,CAAI,CACjD,CACL,CAAG,ECvVU6J,GAASzG,EAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,YACZ,CAAC,0GCFY0G,GAAS7F,EAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mBACV,YAAa,CACf,CAAC,EAEY8F,GAAc9F,EAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mBACV,YAAa,CACf,CAAC,yHCZY+F,GAAQ/F,EAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,KACV,YAAa,CACf,CAAC,yGCPKZ,GAAW,MAAM,KAAK,weAAwe,EAC9f4G,GAAgD5G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAE/J,CAAC,EAAIgK,EAAUD,GAA6B,CAAE,CAAA,EAC/HE,GAAgD/G,GAAS,OAAO,CAAC6G,EAAGC,EAAGhK,KAAQ+J,EAAyBC,EAAE,YAAY,CAAC,GAAMhK,EAAU+J,GAA6B,CAAA,GAM1K,SAASxJ,GAAQoD,EAAM,CACrB,OAAOA,EAAK,OAAO,CAACoG,EAAGC,KACrBD,GAAKD,GAAqBE,CAAC,EACpBD,GACN,EAAE,CACP,CAMA,SAASvI,GAAQhC,EAAK,CACpB,MAAM0K,EAAO,CAAE,EACf,UAAWC,KAAQ3K,EAAK,CACtB,MAAM4K,EAAMH,GAA4CE,EAAK,YAAY,CAAC,CAAG,EAC7E,GAAIC,IAAQ,OACV,MAAM,IAAI,MAAM,+BAA+BD,CAAI,EAAE,EAEvDD,EAAK,KAAKE,CAAG,CACd,CACD,OAAO,IAAI,WAAWF,CAAI,CAC5B,CAEO,MAAMG,GAAetH,GAAK,CAC/B,OAAQ,KACR,KAAM,eACN,OAAAxC,GACA,OAAAiB,EACF,CAAC,gHCpCYyC,GAASH,EAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYI,GAAcJ,EAAQ,CACjC,OAAQ,IACR,KAAM,cACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYK,GAAYL,EAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYM,GAAiBN,EAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYO,GAAYP,EAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYQ,GAAiBR,EAAQ,CACpC,OAAQ,IACR,KAAM,iBACN,SAAU,mCACV,YAAa,CACf,CAAC,EAEYS,GAAeT,EAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYU,GAAoBV,EAAQ,CACvC,OAAQ,IACR,KAAM,oBACN,SAAU,oCACV,YAAa,CACf,CAAC,EAEYW,GAAUX,EAAQ,CAC7B,OAAQ,IACR,KAAM,UACN,SAAU,mCACV,YAAa,CACf,CAAC,uOC7DYwG,GAASrH,EAAM,CAC1B,OAAQ,IACR,KAAM,SACN,SAAU,sCACZ,CAAC,EAEYsH,GAActH,EAAM,CAC/B,OAAQ,IACR,KAAM,cACN,SAAU,sCACZ,CAAC,yHCVYc,GAAYd,EAAM,CAC7B,KAAM,YACN,OAAQ,IACR,SAAU,4DACZ,CAAC,EAEYe,GAAef,EAAM,CAChC,KAAM,eACN,OAAQ,IACR,SAAU,4DACZ,CAAC,6HCRYuH,GAAS1G,EAAQ,CAC5B,OAAQ,IACR,KAAM,SACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEY2G,GAAY3G,EAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,oEACV,YAAa,CACf,CAAC,EAEY4G,GAAY5G,EAAQ,CAC/B,OAAQ,IACR,KAAM,YACN,SAAU,mEACV,YAAa,CACf,CAAC,EAEY6G,GAAe7G,EAAQ,CAClC,OAAQ,IACR,KAAM,eACN,SAAU,oEACV,YAAa,CACf,CAAC,oJC1BY8G,GAAQ9G,EAAQ,CAC3B,OAAQ,IACR,KAAM,QACN,SAAU,WACV,YAAa,CACf,CAAC,yGCJY+G,GAAW9H,GAAK,CAC3B,OAAQ,KACR,KAAM,WACN,OAASsC,GAAQ5F,GAAS4F,CAAG,EAC7B,OAAS7F,GAAQD,GAAWC,CAAG,CACjC,CAAC,4GCHmB,IAAI,YACJ,IAAI,YCUxB,MAAMsL,GAAQ,CAAE,GAAGC,GAAc,GAAGlB,GAAO,GAAGe,GAAO,GAAGlB,GAAQ,GAAGC,GAAQ,GAAG1F,GAAQ,GAAGqG,GAAQ,GAAGU,GAAQ,GAAGR,GAAQ,GAAGH,EAAY,EChBtI,SAASY,GAAYpL,EAAMiC,EAAQvB,EAAQiB,EAAQ,CAC/C,MAAO,CACH,KAAA3B,EACA,OAAAiC,EACA,QAAS,CACL,KAAAjC,EACA,OAAAiC,EACA,OAAAvB,CACH,EACD,QAAS,CACL,OAAAiB,CACH,CACT,CACA,CACA,MAAMC,GAASwJ,GAAY,OAAQ,IAAM5F,GAE9B,IADS,IAAI,YAAY,MAAM,EACjB,OAAOA,CAAG,EAC/B7F,GACgB,IAAI,cACL,OAAOA,EAAI,UAAU,CAAC,CAAC,CACzC,EACK0L,GAAQD,GAAY,QAAS,IAAM5F,GAAQ,CAC7C,IAAI5D,EAAS,IACb,QAASzB,EAAI,EAAGA,EAAIqF,EAAI,OAAQrF,IAC5ByB,GAAU,OAAO,aAAa4D,EAAIrF,CAAC,CAAC,EAExC,OAAOyB,CACX,EAAIjC,GAAQ,CACRA,EAAMA,EAAI,UAAU,CAAC,EACrB,MAAM6F,EAAM8F,GAAY3L,EAAI,MAAM,EAClC,QAASQ,EAAI,EAAGA,EAAIR,EAAI,OAAQQ,IAC5BqF,EAAIrF,CAAC,EAAIR,EAAI,WAAWQ,CAAC,EAE7B,OAAOqF,CACX,CAAC,EACK+F,GAAQ,CACV,KAAM3J,GACN,QAASA,GACT,IAAKqJ,GAAM,OACX,OAAQI,GACR,MAAAA,GACA,OAAQA,GACR,GAAGJ,EACP,ECrCO,SAASrL,GAAS4L,EAAOC,EAAW,OAAQ,CAC/C,MAAM3L,EAAOmL,GAAMQ,CAAQ,EAC3B,GAAI3L,GAAQ,KACR,MAAM,IAAI,MAAM,yBAAyB2L,CAAQ,GAAG,EAExD,OAAKA,IAAa,QAAUA,IAAa,UAAY,WAAW,QAAU,MAAQ,WAAW,OAAO,MAAQ,KACjG,WAAW,OAAO,KAAKD,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAAE,SAAS,MAAM,EAG5F1L,EAAK,QAAQ,OAAO0L,CAAK,EAAE,UAAU,CAAC,CACjD,CCFA,MAAMsO,GAAgB,sBAAuB,WACvChD,EAAMC,GAAO,oBAAoB,EACjCgD,GAAO,IAAM,CAAA,EACZ,MAAMC,WAA4B9B,EAAa,CAClD,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,QAAU,EAClB,CACD,IAAK+B,EAAmB,GAAI,CACxB,MAAO,EACV,CACD,IAAK,OAAO,WAAW,GAAI,CACvB,MAAO,+BACV,CACD,WAAY,CACR,OAAO,KAAK,OACf,CACD,MAAM,OAAQ,CACV,KAAK,QAAU,EAClB,CACD,MAAM,MAAO,CACT,KAAK,QAAU,EAClB,CACD,cAAcC,EAAO,CACjB,OAAK,KAAK,YAGH,MAAM,cAAcA,CAAK,EAFrB,EAGd,CACL,CAIO,MAAMC,EAAW,CACpB,YAAYC,EAAM,CACVA,GAAM,MAAQ,OACd,KAAK,KAAOA,EAAK,MAGrB,KAAK,WAAa,IAAI,IAEtB,KAAK,WAAa,IAAIJ,GACtB,KAAK,UAAY,IAAM,KAAK,WAC5B,KAAK,eAAiB,KAAK,eAAe,KAAK,IAAI,CACtD,CACD,IAAKtJ,EAAM,GAAI,CACX,MAAO,EACV,CACD,IAAK,OAAO,WAAW,GAAI,CACvB,MAAO,qBACV,CACD,MAAM,KAAK4G,EAAIrF,EAAS,CACpB,MAAMoI,EAAU,MAAM,KAAK,SAAS/C,EAAIrF,CAAO,EACzCiF,EAASF,GAAsBqD,EAAS,CAAE,WAAY/C,EAAI,OAAQrF,EAAQ,MAAM,CAAE,EACxF6E,EAAI,6BAA8BI,EAAO,UAAU,EACnD,MAAMgC,EAAO,MAAMjH,EAAQ,SAAS,gBAAgBiF,CAAM,EAC1D,OAAAJ,EAAI,kCAAmCI,EAAO,UAAU,EACjDgC,CACV,CACD,MAAM,SAAS5B,EAAIrF,EAAS,CACxB,GAAIA,EAAQ,QAAQ,UAAY,GAC5B,MAAM,IAAIqI,GAEd,MAAM/B,EAAiB,CACnB,GAAItG,EAAQ,gBAAkB,CAAE,CAC5C,EAEY,KAAK,MAAQ,OACbsG,EAAe,KAAO,KAAK,MAE/B,MAAMgC,EAAQjD,EAAG,YACXqB,EAAWlM,GAAmB+N,GAAY,EAAE,EAAG,KAAK,EAC1D,OAAO,MAAM,IAAI,QAAQ,CAACpG,EAASC,IAAW,CAC1C,MAAMoG,EAAM,KAAK,WAAW,IAAIpD,GAAYC,CAAE,CAAC,EAC/C,GAAImD,GAAK,QAAU,KAAM,CACrBpG,EAAOqG,EAAQ,IAAI,MAAM,8BAA8B,EAAG,2BAA2B,CAAC,EACtF,MACH,CACD,IAAIC,EAAY,GAChB7D,EAAI,gBAAiByD,EAAM,KAAMA,EAAM,IAAI,EAC3C,MAAMzB,EAAU,IAAI8B,GAAgBrC,CAAc,EAC5CrC,EAAW8C,GAAQ,CACrB,MAAMxE,EAAMwE,EAAI,OAChB,GAAI,CAAC2B,EAAW,CACZ,MAAME,EAAM,oBAAoBN,EAAM,IAAI,IAAIA,EAAM,IAAI,KAAK/F,EAAI,OAAO,GACxEsC,EAAI,MAAM+D,CAAG,EACbC,EAAKtG,CAAG,CACX,CACjB,EACkBuG,EAAU,IAAM,CAClBJ,EAAY,GACZ7D,EAAI,0BAA2ByD,EAAM,KAAMA,EAAM,IAAI,EACrDO,GAChB,EACkBE,EAAU,IAAM,CAClBlE,EAAI,MAAM,2BAA4ByD,EAAM,KAAMA,EAAM,IAAI,EAC5DzB,EAAQ,QAAQ,QAAQ,IAAM,CAC1BgC,EAAK,IAAIR,EAAY,CACzC,CAAiB,CACjB,EACkBQ,EAAQtG,GAAQ,CAClBsE,EAAQ,oBAAoB,QAASiC,CAAO,EAC5C9I,EAAQ,QAAQ,oBAAoB,QAAS+I,CAAO,EAChDxG,GAAO,KACPJ,EAAQ0E,CAAO,EAGfzE,EAAOG,CAAG,CAE9B,EACYsE,EAAQ,iBAAiB,QAASiC,EAAS,CACvC,KAAM,EACtB,CAAa,EACDjC,EAAQ,iBAAiB,QAAS,IAAM,CACpCA,EAAQ,oBAAoB,QAAS5C,CAAO,CAC5D,CAAa,EACDjE,EAAQ,QAAQ,iBAAiB,QAAS+I,CAAO,EACjDlC,EAAQ,iBAAiB,SAAWE,GAAQ,CACxC,MAAMC,EAASD,EAAI,OACnByB,EAAI,OAAO,KAAK,eAAgB,CAC5B,SAAA9B,EACA,aAAc8B,EAAI,eAAe,SAAU,EAC3C,aAAcnD,EAAG,SAAU,EAC3B,OAAA2B,CACpB,CAAiB,CACjB,CAAa,EACDwB,EAAI,OAAO,GAAG,eAAiBrB,GAAU,CACjCA,EAAM,WAAaT,GAAYS,EAAM,KAAO,MAC5CN,EAAQ,QAAQ,QAAQ,IAAM,CAC1BzE,EAAOqG,EAAQ,IAAI,MAAMtB,EAAM,GAAG,EAAG,uBAAuB,CAAC,CACrF,CAAqB,EAED,EAAAA,EAAM,WAAaT,GAAYS,EAAM,QAAU,MAAQN,EAAQ,SAGnEA,EAAQ,aAAaM,EAAM,MAAM,CACjD,CAAa,CACb,CAAS,CACJ,CAMD,eAAenH,EAAS,CACpB,GAAI,CAAC6H,IAAiB,KAAK,MAAQ,KAC/B,MAAMY,EAAQ,IAAI,MAAM,mBAAmB,EAAG,uBAAuB,EAMzE,GAJAzI,EAAQ,eAAiBA,EAAQ,gBAAkB,CAAA,EAC/C,KAAK,MAAQ,OACbA,EAAQ,eAAe,KAAO,KAAK,MAEnC,KAAK,QAAU,KACf,MAAMyI,EAAQ,IAAI,MAAM,gBAAgB,EAAG,qBAAqB,EAEpE,OAAOb,GAAe5H,EAAQ,SAAUA,EAAQ,SAAW8H,GAAM,KAAK,OAAQ,KAAM9H,CAAO,CAC9F,CAID,OAAOgJ,EAAY,CACf,OAAAA,EAAa,MAAM,QAAQA,CAAU,EAAIA,EAAa,CAACA,CAAU,EAC1DA,EAAW,OAAQ3D,GAClBA,EAAG,WAAU,EAAG,SAAS5E,EAAY,EAC9B,GAEJwI,GAAoB,QAAQ5D,CAAE,CACxC,CACJ,CACD,eAAeM,EAAO,CAClBd,EAAI,sBAAuBc,CAAK,EAChCA,EAAQD,GAAeC,CAAK,EAC5B,MAAMN,EAAK/E,GAAUqF,CAAK,EACpB7F,EAAYuF,EAAG,YACrB,GAAIvF,GAAa,KACb,OAEJ,MAAMyH,EAAS2B,GAAiBpJ,CAAS,EACzC,KAAK,WAAW,cAAc,IAAI2G,EAAY,OAAQ,CAClD,OAAQ,CACJ,GAAIc,EACJ,WAAY,CAAClC,CAAE,EACf,UAAW,CAAE,CAChB,CACJ,CAAA,CAAC,CACL,CACL,CCzMO,SAAS8D,GAAWhB,EAAO,GAAI,CAClC,MAAMjJ,EAAY,IAAIgJ,GAAWC,CAAI,EACrC,MAAO,CACH,UAAYiB,IACRlK,EAAU,OAASkK,EAAW,OACvBlK,GAEX,UAAWA,EAAU,SAC7B,CACA","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77]}