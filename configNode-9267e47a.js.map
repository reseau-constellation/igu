{"version":3,"file":"configNode-9267e47a.js","sources":["../../../../node_modules/get-iterator/index.js","../../../../node_modules/stream-to-it/sink.js","../../../../node_modules/stream-to-it/duplex.js","../../../../node_modules/stream-to-it/transform.js","../../../../node_modules/stream-to-it/index.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/common.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/v4/constants.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/address-error.js","../../../../node_modules/@achingbrain/ip-address/node_modules/jsbn/index.js","../../../../node_modules/sprintf-js/src/sprintf.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/ipv4.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/v6/constants.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/v6/helpers.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/v6/regular-expressions.js","../../../../node_modules/@achingbrain/ip-address/dist/esm/lib/ipv6.js","../../../../node_modules/@libp2p/utils/dist/src/ip-port-to-multiaddr.js","../../../../node_modules/@libp2p/tcp/dist/src/constants.js","../../../../node_modules/@libp2p/tcp/dist/src/utils.js","../../../../node_modules/@libp2p/tcp/dist/src/socket-to-conn.js","../../../../node_modules/@libp2p/tcp/dist/src/listener.js","../../../../node_modules/@libp2p/tcp/dist/src/index.js","../../../../node_modules/@constl/ipa/dist/sfip/configÃ‰lectron.js"],"sourcesContent":["// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nmodule.exports = function getIterator (obj) {\n  if (obj) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n","const getIterator = require('get-iterator')\n\nmodule.exports = writable => async source => {\n  source = getIterator(source)\n\n  const maybeEndSource = (source) => {\n    if (typeof source.return === 'function') source.return()\n  }\n\n  let error = null\n  let errCb = null\n  const errorHandler = (err) => {\n    error = err\n    if (errCb) errCb(err)\n    // When the writable errors, try to end the source to exit iteration early\n    maybeEndSource(source)\n  }\n\n  let closeCb = null\n  let closed = false\n  const closeHandler = () => {\n    closed = true\n    if (closeCb) closeCb()\n  }\n\n  let finishCb = null\n  let finished = false\n  const finishHandler = () => {\n    finished = true\n    if (finishCb) finishCb()\n  }\n\n  let drainCb = null\n  const drainHandler = () => {\n    if (drainCb) drainCb()\n  }\n\n  const waitForDrainOrClose = () => {\n    return new Promise((resolve, reject) => {\n      closeCb = drainCb = resolve\n      errCb = reject\n      writable.once('drain', drainHandler)\n    })\n  }\n\n  const waitForDone = () => {\n    // Immediately try to end the source\n    maybeEndSource(source)\n    return new Promise((resolve, reject) => {\n      if (closed || finished || error) return resolve()\n      finishCb = closeCb = resolve\n      errCb = reject\n    })\n  }\n\n  const cleanup = () => {\n    writable.removeListener('error', errorHandler)\n    writable.removeListener('close', closeHandler)\n    writable.removeListener('finish', finishHandler)\n    writable.removeListener('drain', drainHandler)\n  }\n\n  writable.once('error', errorHandler)\n  writable.once('close', closeHandler)\n  writable.once('finish', finishHandler)\n\n  try {\n    for await (const value of source) {\n      if (!writable.writable || writable.destroyed || error) break\n\n      if (writable.write(value) === false) {\n        await waitForDrainOrClose()\n      }\n    }\n  } catch (err) {\n    // error is set by stream error handler so only destroy stream if source threw\n    if (!error) {\n      writable.destroy()\n    }\n\n    // could we be obscuring an error here?\n    error = err\n  }\n\n  try {\n    // We're done writing, end everything (n.b. stream may be destroyed at this point but then this is a no-op)\n    if (writable.writable) {\n      writable.end()\n    }\n\n    // Wait until we close or finish. This supports halfClosed streams\n    await waitForDone()\n\n    // Notify the user an error occurred\n    if (error) throw error\n  } finally {\n    // Clean up listeners\n    cleanup()\n  }\n}\n","const toSink = require('./sink')\nconst toSource = require('./source')\n\nmodule.exports = duplex => ({ sink: toSink(duplex), source: toSource(duplex) })\n","const toDuplex = require('./duplex')\n\nmodule.exports = transform => async function * (source) {\n  const duplex = toDuplex(transform)\n  // In a transform the sink and source are connected, an error in the sink\n  // will be thrown in the source also. Catch the sink error to avoid unhandled\n  // rejections and yield from the source.\n  let sinkError\n  duplex.sink(source).catch(err => { sinkError = err })\n\n  yield * duplex.source\n  if (sinkError) throw sinkError\n}\n","module.exports = require('./source')\nmodule.exports.source = require('./source')\nmodule.exports.sink = require('./sink')\nmodule.exports.transform = require('./transform')\nmodule.exports.duplex = require('./duplex')\n","export function isInSubnet(address) {\n    if (this.subnetMask < address.subnetMask) {\n        return false;\n    }\n    if (this.mask(address.subnetMask) === address.mask()) {\n        return true;\n    }\n    return false;\n}\nexport function isCorrect(defaultBits) {\n    return function () {\n        if (this.addressMinusSuffix !== this.correctForm()) {\n            return false;\n        }\n        if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n            return true;\n        }\n        return this.parsedSubnet === String(this.subnetMask);\n    };\n}\n//# sourceMappingURL=common.js.map","export const BITS = 32;\nexport const GROUPS = 4;\nexport const RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;\nexport const RE_SUBNET_STRING = /\\/\\d{1,2}$/;\n//# sourceMappingURL=constants.js.map","export class AddressError extends Error {\n    constructor(message, parseMessage) {\n        super(message);\n        this.name = 'AddressError';\n        if (parseMessage !== null) {\n            this.parseMessage = parseMessage;\n        }\n    }\n}\n//# sourceMappingURL=address-error.js.map","(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))    // force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {    // ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\n\n    // For best results, put code like\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n    // in your main HTML document.\n\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n\n    // Mix in a 32-bit integer into the pool\n    function rng_seed_int(x) {\n      rng_pool[rng_pptr++] ^= x & 255;\n      rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n      rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n    }\n\n    // Mix in the current time (w/milliseconds) into the pool\n    function rng_seed_time() {\n      rng_seed_int(new Date().getTime());\n    }\n\n    // Initialize the pool with junk if needed.\n    if(rng_pool == null) {\n      rng_pool = new Array();\n      rng_pptr = 0;\n      var t;\n      if(typeof window !== \"undefined\" && window.crypto) {\n        if (window.crypto.getRandomValues) {\n          // Use webcrypto if available\n          var ua = new Uint8Array(32);\n          window.crypto.getRandomValues(ua);\n          for(t = 0; t < 32; ++t)\n            rng_pool[rng_pptr++] = ua[t];\n        }\n        else if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n          // Extract entropy (256 bits) from NS4 RNG if available\n          var z = window.crypto.random(32);\n          for(t = 0; t < z.length; ++t)\n            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n        }\n      }\n      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n        t = Math.floor(65536 * Math.random());\n        rng_pool[rng_pptr++] = t >>> 8;\n        rng_pool[rng_pptr++] = t & 255;\n      }\n      rng_pptr = 0;\n      rng_seed_time();\n      //rng_seed_int(window.screenX);\n      //rng_seed_int(window.screenY);\n    }\n\n    function rng_get_byte() {\n      if(rng_state == null) {\n        rng_seed_time();\n        rng_state = prng_newstate();\n        rng_state.init(rng_pool);\n        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n          rng_pool[rng_pptr] = 0;\n        rng_pptr = 0;\n        //rng_pool = null;\n      }\n      // TODO: allow reseeding after first request\n      return rng_state.next();\n    }\n\n    function rng_get_bytes(ba) {\n      var i;\n      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n    }\n\n    function SecureRandom() {}\n\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n\n    // prng4.js - uses Arcfour as a PRNG\n\n    function Arcfour() {\n      this.i = 0;\n      this.j = 0;\n      this.S = new Array();\n    }\n\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    function ARC4init(key) {\n      var i, j, t;\n      for(i = 0; i < 256; ++i)\n        this.S[i] = i;\n      j = 0;\n      for(i = 0; i < 256; ++i) {\n        j = (j + this.S[i] + key[i % key.length]) & 255;\n        t = this.S[i];\n        this.S[i] = this.S[j];\n        this.S[j] = t;\n      }\n      this.i = 0;\n      this.j = 0;\n    }\n\n    function ARC4next() {\n      var t;\n      this.i = (this.i + 1) & 255;\n      this.j = (this.j + this.S[this.i]) & 255;\n      t = this.S[this.i];\n      this.S[this.i] = this.S[this.j];\n      this.S[this.j] = t;\n      return this.S[(t + this.S[this.i]) & 255];\n    }\n\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n\n    // Plug in your RNG constructor here\n    function prng_newstate() {\n      return new Arcfour();\n    }\n\n    // Pool size must be a multiple of 4 and greater than 32.\n    // An array of bytes the size of the pool will be passed to init()\n    var rng_psize = 256;\n\n    if (typeof exports !== 'undefined') {\n        exports = module.exports = {\n            default: BigInteger,\n            BigInteger: BigInteger,\n            SecureRandom: SecureRandom,\n        };\n    } else {\n        this.jsbn = {\n          BigInteger: BigInteger,\n          SecureRandom: SecureRandom\n        };\n    }\n\n}).call(this);\n","/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n","/* eslint-disable no-param-reassign */\nimport * as common from './common.js';\nimport * as constants from './v4/constants.js';\nimport { AddressError } from './address-error.js';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\nexport class Address4 {\n    constructor(address) {\n        this.groups = constants.GROUPS;\n        this.parsedAddress = [];\n        this.parsedSubnet = '';\n        this.subnet = '/32';\n        this.subnetMask = 32;\n        this.v4 = true;\n        /**\n         * Returns true if the address is correct, false otherwise\n         * @memberof Address4\n         * @instance\n         * @returns {Boolean}\n         */\n        this.isCorrect = common.isCorrect(constants.BITS);\n        /**\n         * Returns true if the given address is in the subnet of the current address\n         * @memberof Address4\n         * @instance\n         * @returns {boolean}\n         */\n        this.isInSubnet = common.isInSubnet;\n        this.address = address;\n        const subnet = constants.RE_SUBNET_STRING.exec(address);\n        if (subnet) {\n            this.parsedSubnet = subnet[0].replace('/', '');\n            this.subnetMask = parseInt(this.parsedSubnet, 10);\n            this.subnet = `/${this.subnetMask}`;\n            if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n                throw new AddressError('Invalid subnet mask.');\n            }\n            address = address.replace(constants.RE_SUBNET_STRING, '');\n        }\n        this.addressMinusSuffix = address;\n        this.parsedAddress = this.parse(address);\n    }\n    static isValid(address) {\n        try {\n            // eslint-disable-next-line no-new\n            new Address4(address);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /*\n     * Parses a v4 address\n     */\n    parse(address) {\n        const groups = address.split('.');\n        if (!address.match(constants.RE_ADDRESS)) {\n            throw new AddressError('Invalid IPv4 address.');\n        }\n        return groups;\n    }\n    /**\n     * Returns the correct form of an address\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    correctForm() {\n        return this.parsedAddress.map((part) => parseInt(part, 10)).join('.');\n    }\n    /**\n     * Converts a hex string to an IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {string} hex - a hex string to convert\n     * @returns {Address4}\n     */\n    static fromHex(hex) {\n        const padded = hex.replace(/:/g, '').padStart(8, '0');\n        const groups = [];\n        let i;\n        for (i = 0; i < 8; i += 2) {\n            const h = padded.slice(i, i + 2);\n            groups.push(parseInt(h, 16));\n        }\n        return new Address4(groups.join('.'));\n    }\n    /**\n     * Converts an integer into a IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {integer} integer - a number to convert\n     * @returns {Address4}\n     */\n    static fromInteger(integer) {\n        return Address4.fromHex(integer.toString(16));\n    }\n    /**\n     * Return an address from in-addr.arpa form\n     * @memberof Address4\n     * @static\n     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n     * @returns {Adress4}\n     * @example\n     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n     * address.correctForm(); // '192.0.2.42'\n     */\n    static fromArpa(arpaFormAddress) {\n        // remove ending \".in-addr.arpa.\" or just \".\"\n        const leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n        const address = leader.split('.').reverse().join('.');\n        return new Address4(address);\n    }\n    /**\n     * Converts an IPv4 address object to a hex string\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    toHex() {\n        return this.parsedAddress.map((part) => sprintf('%02x', parseInt(part, 10))).join(':');\n    }\n    /**\n     * Converts an IPv4 address object to an array of bytes\n     * @memberof Address4\n     * @instance\n     * @returns {Array}\n     */\n    toArray() {\n        return this.parsedAddress.map((part) => parseInt(part, 10));\n    }\n    /**\n     * Converts an IPv4 address object to an IPv6 address group\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    toGroup6() {\n        const output = [];\n        let i;\n        for (i = 0; i < constants.GROUPS; i += 2) {\n            const hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n            output.push(sprintf('%x', parseInt(hex, 16)));\n        }\n        return output.join(':');\n    }\n    /**\n     * Returns the address as a BigInteger\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    bigInteger() {\n        return new BigInteger(this.parsedAddress.map((n) => sprintf('%02x', parseInt(n, 10))).join(''), 16);\n    }\n    /**\n     * Helper function getting start address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    _startAddress() {\n        return new BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The first address in the range given by this address' subnet.\n     * Often referred to as the Network Address.\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    startAddress() {\n        return Address4.fromBigInteger(this._startAddress());\n    }\n    /**\n     * The first host address in the range given by this address's subnet ie\n     * the first address after the Network Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    startAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address4.fromBigInteger(this._startAddress().add(adjust));\n    }\n    /**\n     * Helper function getting end address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n    _endAddress() {\n        return new BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The last address in the range given by this address' subnet\n     * Often referred to as the Broadcast\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    endAddress() {\n        return Address4.fromBigInteger(this._endAddress());\n    }\n    /**\n     * The last host address in the range given by this address's subnet ie\n     * the last address prior to the Broadcast Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n    endAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n    }\n    /**\n     * Converts a BigInteger to a v4 address object\n     * @memberof Address4\n     * @static\n     * @param {BigInteger} bigInteger - a BigInteger to convert\n     * @returns {Address4}\n     */\n    static fromBigInteger(bigInteger) {\n        return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n    }\n    /**\n     * Returns the first n bits of the address, defaulting to the\n     * subnet mask\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    mask(mask) {\n        if (mask === undefined) {\n            mask = this.subnetMask;\n        }\n        return this.getBitsBase2(0, mask);\n    }\n    /**\n     * Returns the bits in the given range as a base-2 string\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n    getBitsBase2(start, end) {\n        return this.binaryZeroPad().slice(start, end);\n    }\n    /**\n     * Return the reversed ip6.arpa form of the address\n     * @memberof Address4\n     * @param {Object} options\n     * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n     * @instance\n     * @returns {String}\n     */\n    reverseForm(options) {\n        if (!options) {\n            options = {};\n        }\n        const reversed = this.correctForm().split('.').reverse().join('.');\n        if (options.omitSuffix) {\n            return reversed;\n        }\n        return sprintf('%s.in-addr.arpa.', reversed);\n    }\n    /**\n     * Returns true if the given address is a multicast address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n    isMulticast() {\n        return this.isInSubnet(new Address4('224.0.0.0/4'));\n    }\n    /**\n     * Returns a zero-padded base-2 string representation of the address\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n    binaryZeroPad() {\n        return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n    }\n    /**\n     * Groups an IPv4 address for inclusion at the end of an IPv6 address\n     * @returns {String}\n     */\n    groupForV6() {\n        const segments = this.parsedAddress;\n        return this.address.replace(constants.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n    }\n}\n//# sourceMappingURL=ipv4.js.map","export const BITS = 128;\nexport const GROUPS = 8;\n/**\n * Represents IPv6 address scopes\n * @memberof Address6\n * @static\n */\nexport const SCOPES = {\n    0: 'Reserved',\n    1: 'Interface local',\n    2: 'Link local',\n    4: 'Admin local',\n    5: 'Site local',\n    8: 'Organization local',\n    14: 'Global',\n    15: 'Reserved',\n};\n/**\n * Represents IPv6 address types\n * @memberof Address6\n * @static\n */\nexport const TYPES = {\n    'ff01::1/128': 'Multicast (All nodes on this interface)',\n    'ff01::2/128': 'Multicast (All routers on this interface)',\n    'ff02::1/128': 'Multicast (All nodes on this link)',\n    'ff02::2/128': 'Multicast (All routers on this link)',\n    'ff05::2/128': 'Multicast (All routers in this site)',\n    'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',\n    'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',\n    'ff02::9/128': 'Multicast (RIP routers)',\n    'ff02::a/128': 'Multicast (EIGRP routers)',\n    'ff02::d/128': 'Multicast (PIM routers)',\n    'ff02::16/128': 'Multicast (MLDv2 reports)',\n    'ff01::fb/128': 'Multicast (mDNSv6)',\n    'ff02::fb/128': 'Multicast (mDNSv6)',\n    'ff05::fb/128': 'Multicast (mDNSv6)',\n    'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',\n    'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',\n    'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',\n    'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',\n    '::/128': 'Unspecified',\n    '::1/128': 'Loopback',\n    'ff00::/8': 'Multicast',\n    'fe80::/10': 'Link-local unicast',\n};\n/**\n * A regular expression that matches bad characters in an IPv6 address\n * @memberof Address6\n * @static\n */\nexport const RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;\n/**\n * A regular expression that matches an incorrect IPv6 address\n * @memberof Address6\n * @static\n */\nexport const RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/gi;\n/**\n * A regular expression that matches an IPv6 subnet\n * @memberof Address6\n * @static\n */\nexport const RE_SUBNET_STRING = /\\/\\d{1,3}(?=%|$)/;\n/**\n * A regular expression that matches an IPv6 zone\n * @memberof Address6\n * @static\n */\nexport const RE_ZONE_STRING = /%.*$/;\nexport const RE_URL = new RegExp(/^\\[{0,1}([0-9a-f:]+)\\]{0,1}/);\nexport const RE_URL_WITH_PORT = new RegExp(/\\[([0-9a-f:]+)\\]:([0-9]{1,5})/);\n//# sourceMappingURL=constants.js.map","import { sprintf } from 'sprintf-js';\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nexport function spanAllZeroes(s) {\n    return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexport function spanAll(s, offset = 0) {\n    const letters = s.split('');\n    return letters\n        .map((n, i) => sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?\n    )\n        .join('');\n}\nfunction spanLeadingZeroesSimple(group) {\n    return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexport function spanLeadingZeroes(address) {\n    const groups = address.split(':');\n    return groups.map((g) => spanLeadingZeroesSimple(g)).join(':');\n}\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexport function simpleGroup(addressString, offset = 0) {\n    const groups = addressString.split(':');\n    return groups.map((g, i) => {\n        if (/group-v4/.test(g)) {\n            return g;\n        }\n        return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n    });\n}\n//# sourceMappingURL=helpers.js.map","import * as v6 from './constants.js';\nimport { sprintf } from 'sprintf-js';\nexport function groupPossibilities(possibilities) {\n    return sprintf('(%s)', possibilities.join('|'));\n}\nexport function padGroup(group) {\n    if (group.length < 4) {\n        return sprintf('0{0,%d}%s', 4 - group.length, group);\n    }\n    return group;\n}\nexport const ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\nexport function simpleRegularExpression(groups) {\n    const zeroIndexes = [];\n    groups.forEach((group, i) => {\n        const groupInteger = parseInt(group, 16);\n        if (groupInteger === 0) {\n            zeroIndexes.push(i);\n        }\n    });\n    // You can technically elide a single 0, this creates the regular expressions\n    // to match that eventuality\n    const possibilities = zeroIndexes.map((zeroIndex) => groups\n        .map((group, i) => {\n        if (i === zeroIndex) {\n            const elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n            return groupPossibilities([padGroup(group), elision]);\n        }\n        return padGroup(group);\n    })\n        .join(':'));\n    // The simplest case\n    possibilities.push(groups.map(padGroup).join(':'));\n    return groupPossibilities(possibilities);\n}\nexport function possibleElisions(elidedGroups, moreLeft, moreRight) {\n    const left = moreLeft ? '' : ':';\n    const right = moreRight ? '' : ':';\n    const possibilities = [];\n    // 1. elision of everything (::)\n    if (!moreLeft && !moreRight) {\n        possibilities.push('::');\n    }\n    // 2. complete elision of the middle\n    if (moreLeft && moreRight) {\n        possibilities.push('');\n    }\n    if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\n        // 3. complete elision of one side\n        possibilities.push(':');\n    }\n    // 4. elision from the left side\n    possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\n    // 5. elision from the right side\n    possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\n    // 6. no elision\n    possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\n    // 7. elision (including sloppy elision) from the middle\n    for (let groups = 1; groups < elidedGroups - 1; groups++) {\n        for (let position = 1; position < elidedGroups - groups; position++) {\n            possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n        }\n    }\n    return groupPossibilities(possibilities);\n}\n//# sourceMappingURL=regular-expressions.js.map","/* eslint-disable prefer-destructuring */\n/* eslint-disable no-param-reassign */\nimport * as common from './common.js';\nimport * as constants4 from './v4/constants.js';\nimport * as constants6 from './v6/constants.js';\nimport * as helpers from './v6/helpers.js';\nimport { Address4 } from './ipv4.js';\nimport { ADDRESS_BOUNDARY, possibleElisions, simpleRegularExpression, } from './v6/regular-expressions.js';\nimport { AddressError } from './address-error.js';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\nfunction assert(condition) {\n    if (!condition) {\n        throw new Error('Assertion failed.');\n    }\n}\nfunction addCommas(number) {\n    const r = /(\\d+)(\\d{3})/;\n    while (r.test(number)) {\n        number = number.replace(r, '$1,$2');\n    }\n    return number;\n}\nfunction spanLeadingZeroes4(n) {\n    n = n.replace(/^(0{1,})([1-9]+)$/, '<span class=\"parse-error\">$1</span>$2');\n    n = n.replace(/^(0{1,})(0)$/, '<span class=\"parse-error\">$1</span>$2');\n    return n;\n}\n/*\n * A helper function to compact an array\n */\nfunction compact(address, slice) {\n    const s1 = [];\n    const s2 = [];\n    let i;\n    for (i = 0; i < address.length; i++) {\n        if (i < slice[0]) {\n            s1.push(address[i]);\n        }\n        else if (i > slice[1]) {\n            s2.push(address[i]);\n        }\n    }\n    return s1.concat(['compact']).concat(s2);\n}\nfunction paddedHex(octet) {\n    return sprintf('%04x', parseInt(octet, 16));\n}\nfunction unsignByte(b) {\n    // eslint-disable-next-line no-bitwise\n    return b & 0xff;\n}\n/**\n * Represents an IPv6 address\n * @class Address6\n * @param {string} address - An IPv6 address string\n * @param {number} [groups=8] - How many octets to parse\n * @example\n * var address = new Address6('2001::/32');\n */\nexport class Address6 {\n    constructor(address, optionalGroups) {\n        this.addressMinusSuffix = '';\n        this.parsedSubnet = '';\n        this.subnet = '/128';\n        this.subnetMask = 128;\n        this.v4 = false;\n        this.zone = '';\n        // #region Attributes\n        /**\n         * Returns true if the given address is in the subnet of the current address\n         * @memberof Address6\n         * @instance\n         * @returns {boolean}\n         */\n        this.isInSubnet = common.isInSubnet;\n        /**\n         * Returns true if the address is correct, false otherwise\n         * @memberof Address6\n         * @instance\n         * @returns {boolean}\n         */\n        this.isCorrect = common.isCorrect(constants6.BITS);\n        if (optionalGroups === undefined) {\n            this.groups = constants6.GROUPS;\n        }\n        else {\n            this.groups = optionalGroups;\n        }\n        this.address = address;\n        const subnet = constants6.RE_SUBNET_STRING.exec(address);\n        if (subnet) {\n            this.parsedSubnet = subnet[0].replace('/', '');\n            this.subnetMask = parseInt(this.parsedSubnet, 10);\n            this.subnet = `/${this.subnetMask}`;\n            if (Number.isNaN(this.subnetMask) ||\n                this.subnetMask < 0 ||\n                this.subnetMask > constants6.BITS) {\n                throw new AddressError('Invalid subnet mask.');\n            }\n            address = address.replace(constants6.RE_SUBNET_STRING, '');\n        }\n        else if (/\\//.test(address)) {\n            throw new AddressError('Invalid subnet mask.');\n        }\n        const zone = constants6.RE_ZONE_STRING.exec(address);\n        if (zone) {\n            this.zone = zone[0];\n            address = address.replace(constants6.RE_ZONE_STRING, '');\n        }\n        this.addressMinusSuffix = address;\n        this.parsedAddress = this.parse(this.addressMinusSuffix);\n    }\n    static isValid(address) {\n        try {\n            // eslint-disable-next-line no-new\n            new Address6(address);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Convert a BigInteger to a v6 address object\n     * @memberof Address6\n     * @static\n     * @param {BigInteger} bigInteger - a BigInteger to convert\n     * @returns {Address6}\n     * @example\n     * var bigInteger = new BigInteger('1000000000000');\n     * var address = Address6.fromBigInteger(bigInteger);\n     * address.correctForm(); // '::e8:d4a5:1000'\n     */\n    static fromBigInteger(bigInteger) {\n        const hex = bigInteger.toString(16).padStart(32, '0');\n        const groups = [];\n        let i;\n        for (i = 0; i < constants6.GROUPS; i++) {\n            groups.push(hex.slice(i * 4, (i + 1) * 4));\n        }\n        return new Address6(groups.join(':'));\n    }\n    /**\n     * Convert a URL (with optional port number) to an address object\n     * @memberof Address6\n     * @static\n     * @param {string} url - a URL with optional port number\n     * @example\n     * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');\n     * addressAndPort.address.correctForm(); // 'ffff::'\n     * addressAndPort.port; // 8080\n     */\n    static fromURL(url) {\n        let host;\n        let port = null;\n        let result;\n        // If we have brackets parse them and find a port\n        if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {\n            result = constants6.RE_URL_WITH_PORT.exec(url);\n            if (result === null) {\n                return {\n                    error: 'failed to parse address with port',\n                    address: null,\n                    port: null,\n                };\n            }\n            host = result[1];\n            port = result[2];\n            // If there's a URL extract the address\n        }\n        else if (url.indexOf('/') !== -1) {\n            // Remove the protocol prefix\n            url = url.replace(/^[a-z0-9]+:\\/\\//, '');\n            // Parse the address\n            result = constants6.RE_URL.exec(url);\n            if (result === null) {\n                return {\n                    error: 'failed to parse address from URL',\n                    address: null,\n                    port: null,\n                };\n            }\n            host = result[1];\n            // Otherwise just assign the URL to the host and let the library parse it\n        }\n        else {\n            host = url;\n        }\n        // If there's a port convert it to an integer\n        if (port) {\n            port = parseInt(port, 10);\n            // squelch out of range ports\n            if (port < 0 || port > 65536) {\n                port = null;\n            }\n        }\n        else {\n            // Standardize `undefined` to `null`\n            port = null;\n        }\n        return {\n            address: new Address6(host),\n            port,\n        };\n    }\n    /**\n     * Create an IPv6-mapped address given an IPv4 address\n     * @memberof Address6\n     * @static\n     * @param {string} address - An IPv4 address string\n     * @returns {Address6}\n     * @example\n     * var address = Address6.fromAddress4('192.168.0.1');\n     * address.correctForm(); // '::ffff:c0a8:1'\n     * address.to4in6(); // '::ffff:192.168.0.1'\n     */\n    static fromAddress4(address) {\n        const address4 = new Address4(address);\n        const mask6 = constants6.BITS - (constants4.BITS - address4.subnetMask);\n        return new Address6(`::ffff:${address4.correctForm()}/${mask6}`);\n    }\n    /**\n     * Return an address from ip6.arpa form\n     * @memberof Address6\n     * @static\n     * @param {string} arpaFormAddress - an 'ip6.arpa' form address\n     * @returns {Adress6}\n     * @example\n     * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)\n     * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'\n     */\n    static fromArpa(arpaFormAddress) {\n        // remove ending \".ip6.arpa.\" or just \".\"\n        let address = arpaFormAddress.replace(/(\\.ip6\\.arpa)?\\.$/, '');\n        const semicolonAmount = 7;\n        // correct ip6.arpa form with ending removed will be 63 characters\n        if (address.length !== 63) {\n            throw new AddressError(\"Invalid 'ip6.arpa' form.\");\n        }\n        const parts = address.split('.').reverse();\n        for (let i = semicolonAmount; i > 0; i--) {\n            const insertIndex = i * 4;\n            parts.splice(insertIndex, 0, ':');\n        }\n        address = parts.join('');\n        return new Address6(address);\n    }\n    /**\n     * Return the Microsoft UNC transcription of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String} the Microsoft UNC transcription of the address\n     */\n    microsoftTranscription() {\n        return sprintf('%s.ipv6-literal.net', this.correctForm().replace(/:/g, '-'));\n    }\n    /**\n     * Return the first n bits of the address, defaulting to the subnet mask\n     * @memberof Address6\n     * @instance\n     * @param {number} [mask=subnet] - the number of bits to mask\n     * @returns {String} the first n bits of the address as a string\n     */\n    mask(mask = this.subnetMask) {\n        return this.getBitsBase2(0, mask);\n    }\n    /**\n     * Return the number of possible subnets of a given size in the address\n     * @memberof Address6\n     * @instance\n     * @param {number} [size=128] - the subnet size\n     * @returns {String}\n     */\n    // TODO: probably useful to have a numeric version of this too\n    possibleSubnets(subnetSize = 128) {\n        const availableBits = constants6.BITS - this.subnetMask;\n        const subnetBits = Math.abs(subnetSize - constants6.BITS);\n        const subnetPowers = availableBits - subnetBits;\n        if (subnetPowers < 0) {\n            return '0';\n        }\n        return addCommas(new BigInteger('2', 10).pow(subnetPowers).toString(10));\n    }\n    /**\n     * Helper function getting start address.\n     * @memberof Address6\n     * @instance\n     * @returns {BigInteger}\n     */\n    _startAddress() {\n        return new BigInteger(this.mask() + '0'.repeat(constants6.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The first address in the range given by this address' subnet\n     * Often referred to as the Network Address.\n     * @memberof Address6\n     * @instance\n     * @returns {Address6}\n     */\n    startAddress() {\n        return Address6.fromBigInteger(this._startAddress());\n    }\n    /**\n     * The first host address in the range given by this address's subnet ie\n     * the first address after the Network Address\n     * @memberof Address6\n     * @instance\n     * @returns {Address6}\n     */\n    startAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address6.fromBigInteger(this._startAddress().add(adjust));\n    }\n    /**\n     * Helper function getting end address.\n     * @memberof Address6\n     * @instance\n     * @returns {BigInteger}\n     */\n    _endAddress() {\n        return new BigInteger(this.mask() + '1'.repeat(constants6.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The last address in the range given by this address' subnet\n     * Often referred to as the Broadcast\n     * @memberof Address6\n     * @instance\n     * @returns {Address6}\n     */\n    endAddress() {\n        return Address6.fromBigInteger(this._endAddress());\n    }\n    /**\n     * The last host address in the range given by this address's subnet ie\n     * the last address prior to the Broadcast Address\n     * @memberof Address6\n     * @instance\n     * @returns {Address6}\n     */\n    endAddressExclusive() {\n        const adjust = new BigInteger('1');\n        return Address6.fromBigInteger(this._endAddress().subtract(adjust));\n    }\n    /**\n     * Return the scope of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    getScope() {\n        let scope = constants6.SCOPES[this.getBits(12, 16).intValue()];\n        if (this.getType() === 'Global unicast' && scope !== 'Link local') {\n            scope = 'Global';\n        }\n        return scope || 'Unknown';\n    }\n    /**\n     * Return the type of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    getType() {\n        for (const subnet of Object.keys(constants6.TYPES)) {\n            if (this.isInSubnet(new Address6(subnet))) {\n                return constants6.TYPES[subnet];\n            }\n        }\n        return 'Global unicast';\n    }\n    /**\n     * Return the bits in the given range as a BigInteger\n     * @memberof Address6\n     * @instance\n     * @returns {BigInteger}\n     */\n    getBits(start, end) {\n        return new BigInteger(this.getBitsBase2(start, end), 2);\n    }\n    /**\n     * Return the bits in the given range as a base-2 string\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    getBitsBase2(start, end) {\n        return this.binaryZeroPad().slice(start, end);\n    }\n    /**\n     * Return the bits in the given range as a base-16 string\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    getBitsBase16(start, end) {\n        const length = end - start;\n        if (length % 4 !== 0) {\n            throw new Error('Length of bits to retrieve must be divisible by four');\n        }\n        return this.getBits(start, end)\n            .toString(16)\n            .padStart(length / 4, '0');\n    }\n    /**\n     * Return the bits that are set past the subnet mask length\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    getBitsPastSubnet() {\n        return this.getBitsBase2(this.subnetMask, constants6.BITS);\n    }\n    /**\n     * Return the reversed ip6.arpa form of the address\n     * @memberof Address6\n     * @param {Object} options\n     * @param {boolean} options.omitSuffix - omit the \"ip6.arpa\" suffix\n     * @instance\n     * @returns {String}\n     */\n    reverseForm(options) {\n        if (!options) {\n            options = {};\n        }\n        const characters = Math.floor(this.subnetMask / 4);\n        const reversed = this.canonicalForm()\n            .replace(/:/g, '')\n            .split('')\n            .slice(0, characters)\n            .reverse()\n            .join('.');\n        if (characters > 0) {\n            if (options.omitSuffix) {\n                return reversed;\n            }\n            return sprintf('%s.ip6.arpa.', reversed);\n        }\n        if (options.omitSuffix) {\n            return '';\n        }\n        return 'ip6.arpa.';\n    }\n    /**\n     * Return the correct form of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    correctForm() {\n        let i;\n        let groups = [];\n        let zeroCounter = 0;\n        const zeroes = [];\n        for (i = 0; i < this.parsedAddress.length; i++) {\n            const value = parseInt(this.parsedAddress[i], 16);\n            if (value === 0) {\n                zeroCounter++;\n            }\n            if (value !== 0 && zeroCounter > 0) {\n                if (zeroCounter > 1) {\n                    zeroes.push([i - zeroCounter, i - 1]);\n                }\n                zeroCounter = 0;\n            }\n        }\n        // Do we end with a string of zeroes?\n        if (zeroCounter > 1) {\n            zeroes.push([this.parsedAddress.length - zeroCounter, this.parsedAddress.length - 1]);\n        }\n        const zeroLengths = zeroes.map((n) => n[1] - n[0] + 1);\n        if (zeroes.length > 0) {\n            const index = zeroLengths.indexOf(Math.max(...zeroLengths));\n            groups = compact(this.parsedAddress, zeroes[index]);\n        }\n        else {\n            groups = this.parsedAddress;\n        }\n        for (i = 0; i < groups.length; i++) {\n            if (groups[i] !== 'compact') {\n                groups[i] = parseInt(groups[i], 16).toString(16);\n            }\n        }\n        let correct = groups.join(':');\n        correct = correct.replace(/^compact$/, '::');\n        correct = correct.replace(/^compact|compact$/, ':');\n        correct = correct.replace(/compact/, '');\n        return correct;\n    }\n    /**\n     * Return a zero-padded base-2 string representation of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     * @example\n     * var address = new Address6('2001:4860:4001:803::1011');\n     * address.binaryZeroPad();\n     * // '0010000000000001010010000110000001000000000000010000100000000011\n     * //  0000000000000000000000000000000000000000000000000001000000010001'\n     */\n    binaryZeroPad() {\n        return this.bigInteger().toString(2).padStart(constants6.BITS, '0');\n    }\n    // TODO: Improve the semantics of this helper function\n    parse4in6(address) {\n        const groups = address.split(':');\n        const lastGroup = groups.slice(-1)[0];\n        const address4 = lastGroup.match(constants4.RE_ADDRESS);\n        if (address4) {\n            this.parsedAddress4 = address4[0];\n            this.address4 = new Address4(this.parsedAddress4);\n            for (let i = 0; i < this.address4.groups; i++) {\n                if (/^0[0-9]+/.test(this.address4.parsedAddress[i])) {\n                    throw new AddressError(\"IPv4 addresses can't have leading zeroes.\", address.replace(constants4.RE_ADDRESS, this.address4.parsedAddress.map(spanLeadingZeroes4).join('.')));\n                }\n            }\n            this.v4 = true;\n            groups[groups.length - 1] = this.address4.toGroup6();\n            address = groups.join(':');\n        }\n        return address;\n    }\n    // TODO: Make private?\n    parse(address) {\n        address = this.parse4in6(address);\n        const badCharacters = address.match(constants6.RE_BAD_CHARACTERS);\n        if (badCharacters) {\n            throw new AddressError(sprintf('Bad character%s detected in address: %s', badCharacters.length > 1 ? 's' : '', badCharacters.join('')), address.replace(constants6.RE_BAD_CHARACTERS, '<span class=\"parse-error\">$1</span>'));\n        }\n        const badAddress = address.match(constants6.RE_BAD_ADDRESS);\n        if (badAddress) {\n            throw new AddressError(sprintf('Address failed regex: %s', badAddress.join('')), address.replace(constants6.RE_BAD_ADDRESS, '<span class=\"parse-error\">$1</span>'));\n        }\n        let groups = [];\n        const halves = address.split('::');\n        if (halves.length === 2) {\n            let first = halves[0].split(':');\n            let last = halves[1].split(':');\n            if (first.length === 1 && first[0] === '') {\n                first = [];\n            }\n            if (last.length === 1 && last[0] === '') {\n                last = [];\n            }\n            const remaining = this.groups - (first.length + last.length);\n            if (!remaining) {\n                throw new AddressError('Error parsing groups');\n            }\n            this.elidedGroups = remaining;\n            this.elisionBegin = first.length;\n            this.elisionEnd = first.length + this.elidedGroups;\n            groups = groups.concat(first);\n            for (let i = 0; i < remaining; i++) {\n                groups.push('0');\n            }\n            groups = groups.concat(last);\n        }\n        else if (halves.length === 1) {\n            groups = address.split(':');\n            this.elidedGroups = 0;\n        }\n        else {\n            throw new AddressError('Too many :: groups found');\n        }\n        groups = groups.map((group) => sprintf('%x', parseInt(group, 16)));\n        if (groups.length !== this.groups) {\n            throw new AddressError('Incorrect number of groups found');\n        }\n        return groups;\n    }\n    /**\n     * Return the canonical form of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    canonicalForm() {\n        return this.parsedAddress.map(paddedHex).join(':');\n    }\n    /**\n     * Return the decimal form of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    decimal() {\n        return this.parsedAddress.map((n) => sprintf('%05d', parseInt(n, 16))).join(':');\n    }\n    /**\n     * Return the address as a BigInteger\n     * @memberof Address6\n     * @instance\n     * @returns {BigInteger}\n     */\n    bigInteger() {\n        return new BigInteger(this.parsedAddress.map(paddedHex).join(''), 16);\n    }\n    /**\n     * Return the last two groups of this address as an IPv4 address string\n     * @memberof Address6\n     * @instance\n     * @returns {Address4}\n     * @example\n     * var address = new Address6('2001:4860:4001::1825:bf11');\n     * address.to4().correctForm(); // '24.37.191.17'\n     */\n    to4() {\n        const binary = this.binaryZeroPad().split('');\n        return Address4.fromHex(new BigInteger(binary.slice(96, 128).join(''), 2).toString(16));\n    }\n    /**\n     * Return the v4-in-v6 form of the address\n     * @memberof Address6\n     * @instance\n     * @returns {String}\n     */\n    to4in6() {\n        const address4 = this.to4();\n        const address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6);\n        const correct = address6.correctForm();\n        let infix = '';\n        if (!/:$/.test(correct)) {\n            infix = ':';\n        }\n        return correct + infix + address4.address;\n    }\n    /**\n     * Return an object containing the Teredo properties of the address\n     * @memberof Address6\n     * @instance\n     * @returns {Object}\n     */\n    inspectTeredo() {\n        /*\n        - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).\n        - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that\n          is used.\n        - Bits 64 to 79 can be used to define some flags. Currently only the\n          higher order bit is used; it is set to 1 if the Teredo client is\n          located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista\n          and Windows Server 2008 implementations, more bits are used. In those\n          implementations, the format for these 16 bits is \"CRAAAAUG AAAAAAAA\",\n          where \"C\" remains the \"Cone\" flag. The \"R\" bit is reserved for future\n          use. The \"U\" bit is for the Universal/Local flag (set to 0). The \"G\" bit\n          is Individual/Group flag (set to 0). The A bits are set to a 12-bit\n          randomly generated number chosen by the Teredo client to introduce\n          additional protection for the Teredo node against IPv6-based scanning\n          attacks.\n        - Bits 80 to 95 contains the obfuscated UDP port number. This is the\n          port number that is mapped by the NAT to the Teredo client with all\n          bits inverted.\n        - Bits 96 to 127 contains the obfuscated IPv4 address. This is the\n          public IPv4 address of the NAT with all bits inverted.\n        */\n        const prefix = this.getBitsBase16(0, 32);\n        const udpPort = this.getBits(80, 96).xor(new BigInteger('ffff', 16)).toString();\n        const server4 = Address4.fromHex(this.getBitsBase16(32, 64));\n        const client4 = Address4.fromHex(this.getBits(96, 128).xor(new BigInteger('ffffffff', 16)).toString(16));\n        const flags = this.getBits(64, 80);\n        const flagsBase2 = this.getBitsBase2(64, 80);\n        const coneNat = flags.testBit(15);\n        const reserved = flags.testBit(14);\n        const groupIndividual = flags.testBit(8);\n        const universalLocal = flags.testBit(9);\n        const nonce = new BigInteger(flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16), 2).toString(10);\n        return {\n            prefix: sprintf('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),\n            server4: server4.address,\n            client4: client4.address,\n            flags: flagsBase2,\n            coneNat,\n            microsoft: {\n                reserved,\n                universalLocal,\n                groupIndividual,\n                nonce,\n            },\n            udpPort,\n        };\n    }\n    /**\n     * Return an object containing the 6to4 properties of the address\n     * @memberof Address6\n     * @instance\n     * @returns {Object}\n     */\n    inspect6to4() {\n        /*\n        - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).\n        - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.\n        */\n        const prefix = this.getBitsBase16(0, 16);\n        const gateway = Address4.fromHex(this.getBitsBase16(16, 48));\n        return {\n            prefix: sprintf('%s', prefix.slice(0, 4)),\n            gateway: gateway.address,\n        };\n    }\n    /**\n     * Return a v6 6to4 address from a v6 v4inv6 address\n     * @memberof Address6\n     * @instance\n     * @returns {Address6}\n     */\n    to6to4() {\n        if (!this.is4()) {\n            return null;\n        }\n        const addr6to4 = [\n            '2002',\n            this.getBitsBase16(96, 112),\n            this.getBitsBase16(112, 128),\n            '',\n            '/16',\n        ].join(':');\n        return new Address6(addr6to4);\n    }\n    /**\n     * Return a byte array\n     * @memberof Address6\n     * @instance\n     * @returns {Array}\n     */\n    toByteArray() {\n        const byteArray = this.bigInteger().toByteArray();\n        // work around issue where `toByteArray` returns a leading 0 element\n        if (byteArray.length === 17 && byteArray[0] === 0) {\n            return byteArray.slice(1);\n        }\n        return byteArray;\n    }\n    /**\n     * Return an unsigned byte array\n     * @memberof Address6\n     * @instance\n     * @returns {Array}\n     */\n    toUnsignedByteArray() {\n        return this.toByteArray().map(unsignByte);\n    }\n    /**\n     * Convert a byte array to an Address6 object\n     * @memberof Address6\n     * @static\n     * @returns {Address6}\n     */\n    static fromByteArray(bytes) {\n        return this.fromUnsignedByteArray(bytes.map(unsignByte));\n    }\n    /**\n     * Convert an unsigned byte array to an Address6 object\n     * @memberof Address6\n     * @static\n     * @returns {Address6}\n     */\n    static fromUnsignedByteArray(bytes) {\n        const BYTE_MAX = new BigInteger('256', 10);\n        let result = new BigInteger('0', 10);\n        let multiplier = new BigInteger('1', 10);\n        for (let i = bytes.length - 1; i >= 0; i--) {\n            result = result.add(multiplier.multiply(new BigInteger(bytes[i].toString(10), 10)));\n            multiplier = multiplier.multiply(BYTE_MAX);\n        }\n        return Address6.fromBigInteger(result);\n    }\n    /**\n     * Returns true if the address is in the canonical form, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    isCanonical() {\n        return this.addressMinusSuffix === this.canonicalForm();\n    }\n    /**\n     * Returns true if the address is a link local address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    isLinkLocal() {\n        // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'\n        if (this.getBitsBase2(0, 64) ===\n            '1111111010000000000000000000000000000000000000000000000000000000') {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns true if the address is a multicast address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    isMulticast() {\n        return this.getType() === 'Multicast';\n    }\n    /**\n     * Returns true if the address is a v4-in-v6 address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    is4() {\n        return this.v4;\n    }\n    /**\n     * Returns true if the address is a Teredo address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    isTeredo() {\n        return this.isInSubnet(new Address6('2001::/32'));\n    }\n    /**\n     * Returns true if the address is a 6to4 address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    is6to4() {\n        return this.isInSubnet(new Address6('2002::/16'));\n    }\n    /**\n     * Returns true if the address is a loopback address, false otherwise\n     * @memberof Address6\n     * @instance\n     * @returns {boolean}\n     */\n    isLoopback() {\n        return this.getType() === 'Loopback';\n    }\n    // #endregion\n    // #region HTML\n    /**\n     * @returns {String} the address in link form with a default port of 80\n     */\n    href(optionalPort) {\n        if (optionalPort === undefined) {\n            optionalPort = '';\n        }\n        else {\n            optionalPort = sprintf(':%s', optionalPort);\n        }\n        return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n    }\n    /**\n     * @returns {String} a link suitable for conveying the address via a URL hash\n     */\n    link(options) {\n        if (!options) {\n            options = {};\n        }\n        if (options.className === undefined) {\n            options.className = '';\n        }\n        if (options.prefix === undefined) {\n            options.prefix = '/#address=';\n        }\n        if (options.v4 === undefined) {\n            options.v4 = false;\n        }\n        let formFunction = this.correctForm;\n        if (options.v4) {\n            formFunction = this.to4in6;\n        }\n        if (options.className) {\n            return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>', options.prefix, formFunction.call(this), options.className);\n        }\n        return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix, formFunction.call(this));\n    }\n    /**\n     * Groups an address\n     * @returns {String}\n     */\n    group() {\n        if (this.elidedGroups === 0) {\n            // The simple case\n            return helpers.simpleGroup(this.address).join(':');\n        }\n        assert(typeof this.elidedGroups === 'number');\n        assert(typeof this.elisionBegin === 'number');\n        // The elided case\n        const output = [];\n        const [left, right] = this.address.split('::');\n        if (left.length) {\n            output.push(...helpers.simpleGroup(left));\n        }\n        else {\n            output.push('');\n        }\n        const classes = ['hover-group'];\n        for (let i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {\n            classes.push(sprintf('group-%d', i));\n        }\n        output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n        if (right.length) {\n            output.push(...helpers.simpleGroup(right, this.elisionEnd));\n        }\n        else {\n            output.push('');\n        }\n        if (this.is4()) {\n            assert(this.address4 instanceof Address4);\n            output.pop();\n            output.push(this.address4.groupForV6());\n        }\n        return output.join(':');\n    }\n    // #endregion\n    // #region Regular expressions\n    /**\n     * Generate a regular expression string that can be used to find or validate\n     * all variations of this address\n     * @memberof Address6\n     * @instance\n     * @param {boolean} substringSearch\n     * @returns {string}\n     */\n    regularExpressionString(substringSearch = false) {\n        let output = [];\n        // TODO: revisit why this is necessary\n        const address6 = new Address6(this.correctForm());\n        if (address6.elidedGroups === 0) {\n            // The simple case\n            output.push(simpleRegularExpression(address6.parsedAddress));\n        }\n        else if (address6.elidedGroups === constants6.GROUPS) {\n            // A completely elided address\n            output.push(possibleElisions(constants6.GROUPS));\n        }\n        else {\n            // A partially elided address\n            const halves = address6.address.split('::');\n            if (halves[0].length) {\n                output.push(simpleRegularExpression(halves[0].split(':')));\n            }\n            assert(typeof address6.elidedGroups === 'number');\n            output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));\n            if (halves[1].length) {\n                output.push(simpleRegularExpression(halves[1].split(':')));\n            }\n            output = [output.join(':')];\n        }\n        if (!substringSearch) {\n            output = [\n                '(?=^|',\n                ADDRESS_BOUNDARY,\n                '|[^\\\\w\\\\:])(',\n                ...output,\n                ')(?=[^\\\\w\\\\:]|',\n                ADDRESS_BOUNDARY,\n                '|$)',\n            ];\n        }\n        return output.join('');\n    }\n    /**\n     * Generate a regular expression that can be used to find or validate all\n     * variations of this address.\n     * @memberof Address6\n     * @instance\n     * @param {boolean} substringSearch\n     * @returns {RegExp}\n     */\n    regularExpression(substringSearch = false) {\n        return new RegExp(this.regularExpressionString(substringSearch), 'i');\n    }\n}\n//# sourceMappingURL=ipv6.js.map","import { logger } from '@libp2p/logger';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { Address4, Address6 } from '@achingbrain/ip-address';\nconst log = logger('libp2p:ip-port-to-multiaddr');\nexport const Errors = {\n    ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n    ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n    ERR_INVALID_IP: 'ERR_INVALID_IP'\n};\n/**\n * Transform an IP, Port pair into a multiaddr\n */\nexport function ipPortToMultiaddr(ip, port) {\n    if (typeof ip !== 'string') {\n        throw errCode(new Error(`invalid ip provided: ${ip}`), Errors.ERR_INVALID_IP_PARAMETER); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    }\n    if (typeof port === 'string') {\n        port = parseInt(port);\n    }\n    if (isNaN(port)) {\n        throw errCode(new Error(`invalid port provided: ${port}`), Errors.ERR_INVALID_PORT_PARAMETER);\n    }\n    try {\n        // Test valid IPv4\n        new Address4(ip); // eslint-disable-line no-new\n        return multiaddr(`/ip4/${ip}/tcp/${port}`);\n    }\n    catch { }\n    try {\n        // Test valid IPv6\n        const ip6 = new Address6(ip);\n        return ip6.is4()\n            ? multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)\n            : multiaddr(`/ip6/${ip}/tcp/${port}`);\n    }\n    catch (err) {\n        const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`;\n        log.error(errMsg);\n        throw errCode(new Error(errMsg), Errors.ERR_INVALID_IP);\n    }\n}\n//# sourceMappingURL=ip-port-to-multiaddr.js.map","// p2p multi-address code\nexport const CODE_P2P = 421;\nexport const CODE_CIRCUIT = 290;\nexport const CODE_UNIX = 400;\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 2000;\n// Close the socket if there is no activity after this long in ms\nexport const SOCKET_TIMEOUT = 30000;\n//# sourceMappingURL=constants.js.map","import { multiaddr } from '@multiformats/multiaddr';\nimport os from 'os';\nimport path from 'path';\nconst ProtoFamily = { ip4: 'IPv4', ip6: 'IPv6' };\nexport function multiaddrToNetConfig(addr) {\n    const listenPath = addr.getPath();\n    // unix socket listening\n    if (listenPath != null) {\n        if (os.platform() === 'win32') {\n            // Use named pipes on Windows systems.\n            return { path: path.join('\\\\\\\\.\\\\pipe\\\\', listenPath) };\n        }\n        else {\n            return { path: listenPath };\n        }\n    }\n    // tcp listening\n    return addr.toOptions();\n}\nexport function getMultiaddrs(proto, ip, port) {\n    const toMa = (ip) => multiaddr(`/${proto}/${ip}/tcp/${port}`);\n    return (isAnyAddr(ip) ? getNetworkAddrs(ProtoFamily[proto]) : [ip]).map(toMa);\n}\nexport function isAnyAddr(ip) {\n    return ['0.0.0.0', '::'].includes(ip);\n}\nconst networks = os.networkInterfaces();\nfunction getNetworkAddrs(family) {\n    const addresses = [];\n    for (const [, netAddrs] of Object.entries(networks)) {\n        if (netAddrs != null) {\n            for (const netAddr of netAddrs) {\n                if (netAddr.family === family) {\n                    addresses.push(netAddr.address);\n                }\n            }\n        }\n    }\n    return addresses;\n}\n//# sourceMappingURL=utils.js.map","import { abortableSource } from 'abortable-iterator';\nimport { logger } from '@libp2p/logger';\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it';\nimport { ipPortToMultiaddr as toMultiaddr } from '@libp2p/utils/ip-port-to-multiaddr';\nimport { CLOSE_TIMEOUT, SOCKET_TIMEOUT } from './constants.js';\nimport { multiaddrToNetConfig } from './utils.js';\nimport errCode from 'err-code';\nconst log = logger('libp2p:tcp:socket');\n/**\n * Convert a socket into a MultiaddrConnection\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n */\nexport const toMultiaddrConnection = (socket, options) => {\n    options = options ?? {};\n    const inactivityTimeout = options.socketInactivityTimeout ?? SOCKET_TIMEOUT;\n    const closeTimeout = options.socketCloseTimeout ?? CLOSE_TIMEOUT;\n    // Check if we are connected on a unix path\n    if (options.listeningAddr?.getPath() != null) {\n        options.remoteAddr = options.listeningAddr;\n    }\n    if (options.remoteAddr?.getPath() != null) {\n        options.localAddr = options.remoteAddr;\n    }\n    let remoteAddr;\n    if (options.remoteAddr != null) {\n        remoteAddr = options.remoteAddr;\n    }\n    else {\n        if (socket.remoteAddress == null || socket.remotePort == null) {\n            // this can be undefined if the socket is destroyed (for example, if the client disconnected)\n            // https://nodejs.org/dist/latest-v16.x/docs/api/net.html#socketremoteaddress\n            throw errCode(new Error('Could not determine remote address or port'), 'ERR_NO_REMOTE_ADDRESS');\n        }\n        remoteAddr = toMultiaddr(socket.remoteAddress, socket.remotePort);\n    }\n    const lOpts = multiaddrToNetConfig(remoteAddr);\n    const lOptsStr = lOpts.path ?? `${lOpts.host ?? ''}:${lOpts.port ?? ''}`;\n    const { sink, source } = toIterable.duplex(socket);\n    // by default there is no timeout\n    // https://nodejs.org/dist/latest-v16.x/docs/api/net.html#socketsettimeouttimeout-callback\n    socket.setTimeout(inactivityTimeout, () => {\n        log('%s socket read timeout', lOptsStr);\n        // only destroy with an error if the remote has not sent the FIN message\n        let err;\n        if (socket.readable) {\n            err = errCode(new Error('Socket read timeout'), 'ERR_SOCKET_READ_TIMEOUT');\n        }\n        // if the socket times out due to inactivity we must manually close the connection\n        // https://nodejs.org/dist/latest-v16.x/docs/api/net.html#event-timeout\n        socket.destroy(err);\n    });\n    socket.once('close', () => {\n        log('%s socket read timeout', lOptsStr);\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    });\n    socket.once('end', () => {\n        // the remote sent a FIN packet which means no more data will be sent\n        // https://nodejs.org/dist/latest-v16.x/docs/api/net.html#event-end\n        log('socket ended', maConn.remoteAddr.toString());\n    });\n    const maConn = {\n        async sink(source) {\n            if ((options?.signal) != null) {\n                source = abortableSource(source, options.signal);\n            }\n            try {\n                await sink(source);\n            }\n            catch (err) {\n                // If aborted we can safely ignore\n                if (err.type !== 'aborted') {\n                    // If the source errored the socket will already have been destroyed by\n                    // toIterable.duplex(). If the socket errored it will already be\n                    // destroyed. There's nothing to do here except log the error & return.\n                    log(err);\n                }\n            }\n            // we have finished writing, send the FIN message\n            socket.end();\n        },\n        source: (options.signal != null) ? abortableSource(source, options.signal) : source,\n        // If the remote address was passed, use it - it may have the peer ID encapsulated\n        remoteAddr,\n        timeline: { open: Date.now() },\n        async close() {\n            if (socket.destroyed) {\n                log('%s socket was already destroyed when trying to close', lOptsStr);\n                return;\n            }\n            log('%s closing socket', lOptsStr);\n            await new Promise((resolve, reject) => {\n                const start = Date.now();\n                // Attempt to end the socket. If it takes longer to close than the\n                // timeout, destroy it manually.\n                const timeout = setTimeout(() => {\n                    if (socket.destroyed) {\n                        log('%s is already destroyed', lOptsStr);\n                        resolve();\n                    }\n                    else {\n                        log('%s socket close timeout after %dms, destroying it manually', lOptsStr, Date.now() - start);\n                        // will trigger 'error' and 'close' events that resolves promise\n                        socket.destroy(errCode(new Error('Socket close timeout'), 'ERR_SOCKET_CLOSE_TIMEOUT'));\n                    }\n                }, closeTimeout).unref();\n                socket.once('close', () => {\n                    log('%s socket closed', lOptsStr);\n                    // socket completely closed\n                    clearTimeout(timeout);\n                    resolve();\n                });\n                socket.once('error', (err) => {\n                    log('%s socket error', lOptsStr, err);\n                    // error closing socket\n                    if (maConn.timeline.close == null) {\n                        maConn.timeline.close = Date.now();\n                    }\n                    if (socket.destroyed) {\n                        clearTimeout(timeout);\n                    }\n                    reject(err);\n                });\n                // shorten inactivity timeout\n                socket.setTimeout(closeTimeout);\n                // close writable end of the socket\n                socket.end();\n                if (socket.writableLength > 0) {\n                    // there are outgoing bytes waiting to be sent\n                    socket.once('drain', () => {\n                        log('%s socket drained', lOptsStr);\n                        // all bytes have been sent we can destroy the socket (maybe) before the timeout\n                        socket.destroy();\n                    });\n                }\n                else {\n                    // nothing to send, destroy immediately\n                    socket.destroy();\n                }\n            });\n        }\n    };\n    return maConn;\n};\n//# sourceMappingURL=socket-to-conn.js.map","import net from 'net';\nimport { logger } from '@libp2p/logger';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { CODE_P2P } from './constants.js';\nimport { getMultiaddrs, multiaddrToNetConfig } from './utils.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:tcp:listener');\n/**\n * Attempts to close the given maConn. If a failure occurs, it will be logged\n */\nasync function attemptClose(maConn) {\n    try {\n        await maConn.close();\n    }\n    catch (err) {\n        log.error('an error occurred closing the connection', err);\n    }\n}\nexport class TCPListener extends EventEmitter {\n    constructor(context) {\n        super();\n        this.context = context;\n        /** Keep track of open connections to destroy in case of timeout */\n        this.connections = new Set();\n        this.status = { started: false };\n        context.keepAlive = context.keepAlive ?? true;\n        this.server = net.createServer(context, this.onSocket.bind(this));\n        // https://nodejs.org/api/net.html#servermaxconnections\n        // If set reject connections when the server's connection count gets high\n        // Useful to prevent too resource exhaustion via many open connections on high bursts of activity\n        if (context.maxConnections !== undefined) {\n            this.server.maxConnections = context.maxConnections;\n        }\n        this.server\n            .on('listening', () => this.dispatchEvent(new CustomEvent('listening')))\n            .on('error', err => this.dispatchEvent(new CustomEvent('error', { detail: err })))\n            .on('close', () => this.dispatchEvent(new CustomEvent('close')));\n    }\n    onSocket(socket) {\n        // Avoid uncaught errors caused by unstable connections\n        socket.on('error', err => {\n            log('socket error', err);\n        });\n        let maConn;\n        try {\n            maConn = toMultiaddrConnection(socket, {\n                listeningAddr: this.status.started ? this.status.listeningAddr : undefined,\n                socketInactivityTimeout: this.context.socketInactivityTimeout,\n                socketCloseTimeout: this.context.socketCloseTimeout\n            });\n        }\n        catch (err) {\n            log.error('inbound connection failed', err);\n            return;\n        }\n        log('new inbound connection %s', maConn.remoteAddr);\n        try {\n            this.context.upgrader.upgradeInbound(maConn)\n                .then((conn) => {\n                log('inbound connection %s upgraded', maConn.remoteAddr);\n                this.connections.add(maConn);\n                socket.once('close', () => {\n                    this.connections.delete(maConn);\n                });\n                if (this.context.handler != null) {\n                    this.context.handler(conn);\n                }\n                this.dispatchEvent(new CustomEvent('connection', { detail: conn }));\n            })\n                .catch(async (err) => {\n                log.error('inbound connection failed', err);\n                await attemptClose(maConn);\n            })\n                .catch(err => {\n                log.error('closing inbound connection failed', err);\n            });\n        }\n        catch (err) {\n            log.error('inbound connection failed', err);\n            attemptClose(maConn)\n                .catch(err => {\n                log.error('closing inbound connection failed', err);\n            });\n        }\n    }\n    getAddrs() {\n        if (!this.status.started) {\n            return [];\n        }\n        let addrs = [];\n        const address = this.server.address();\n        const { listeningAddr, peerId } = this.status;\n        if (address == null) {\n            return [];\n        }\n        if (typeof address === 'string') {\n            addrs = [listeningAddr];\n        }\n        else {\n            try {\n                // Because TCP will only return the IPv6 version\n                // we need to capture from the passed multiaddr\n                if (listeningAddr.toString().startsWith('/ip4')) {\n                    addrs = addrs.concat(getMultiaddrs('ip4', address.address, address.port));\n                }\n                else if (address.family === 'IPv6') {\n                    addrs = addrs.concat(getMultiaddrs('ip6', address.address, address.port));\n                }\n            }\n            catch (err) {\n                log.error('could not turn %s:%s into multiaddr', address.address, address.port, err);\n            }\n        }\n        return addrs.map(ma => peerId != null ? ma.encapsulate(`/p2p/${peerId}`) : ma);\n    }\n    async listen(ma) {\n        const peerId = ma.getPeerId();\n        const listeningAddr = peerId == null ? ma.decapsulateCode(CODE_P2P) : ma;\n        this.status = { started: true, listeningAddr, peerId };\n        return await new Promise((resolve, reject) => {\n            const options = multiaddrToNetConfig(listeningAddr);\n            this.server.on('error', (err) => {\n                reject(err);\n            });\n            this.server.listen(options, () => {\n                log('Listening on %s', this.server.address());\n                resolve();\n            });\n        });\n    }\n    async close() {\n        if (!this.server.listening) {\n            return;\n        }\n        await Promise.all(Array.from(this.connections.values()).map(async (maConn) => await attemptClose(maConn)));\n        await new Promise((resolve, reject) => {\n            this.server.close(err => (err != null) ? reject(err) : resolve());\n        });\n    }\n}\n//# sourceMappingURL=listener.js.map","import net from 'net';\nimport * as mafmt from '@multiformats/mafmt';\nimport errCode from 'err-code';\nimport { logger } from '@libp2p/logger';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { TCPListener } from './listener.js';\nimport { multiaddrToNetConfig } from './utils.js';\nimport { AbortError } from '@libp2p/interfaces/errors';\nimport { CODE_CIRCUIT, CODE_P2P, CODE_UNIX } from './constants.js';\nimport { symbol } from '@libp2p/interface-transport';\nconst log = logger('libp2p:tcp');\nclass TCP {\n    constructor(options = {}) {\n        this.opts = options;\n    }\n    get [symbol]() {\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/tcp';\n    }\n    async dial(ma, options) {\n        options.keepAlive = options.keepAlive ?? true;\n        const socket = await this._connect(ma, options);\n        // Avoid uncaught errors caused by unstable connections\n        socket.on('error', err => {\n            log('socket error', err);\n        });\n        const maConn = toMultiaddrConnection(socket, {\n            remoteAddr: ma,\n            signal: options.signal,\n            socketInactivityTimeout: this.opts.outboundSocketInactivityTimeout,\n            socketCloseTimeout: this.opts.socketCloseTimeout\n        });\n        log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options.signal?.aborted === true) {\n            throw new AbortError();\n        }\n        return await new Promise((resolve, reject) => {\n            const start = Date.now();\n            const cOpts = multiaddrToNetConfig(ma);\n            const cOptsStr = cOpts.path ?? `${cOpts.host ?? ''}:${cOpts.port}`;\n            log('dialing %j', cOpts);\n            const rawSocket = net.connect(cOpts);\n            const onError = (err) => {\n                err.message = `connection error ${cOptsStr}: ${err.message}`;\n                done(err);\n            };\n            const onTimeout = () => {\n                log('connection timeout %s', cOptsStr);\n                const err = errCode(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT');\n                // Note: this will result in onError() being called\n                rawSocket.emit('error', err);\n            };\n            const onConnect = () => {\n                log('connection opened %j', cOpts);\n                done();\n            };\n            const onAbort = () => {\n                log('connection aborted %j', cOpts);\n                rawSocket.destroy();\n                done(new AbortError());\n            };\n            const done = (err) => {\n                rawSocket.removeListener('error', onError);\n                rawSocket.removeListener('timeout', onTimeout);\n                rawSocket.removeListener('connect', onConnect);\n                if (options.signal != null) {\n                    options.signal.removeEventListener('abort', onAbort);\n                }\n                if (err != null) {\n                    return reject(err);\n                }\n                resolve(rawSocket);\n            };\n            rawSocket.on('error', onError);\n            rawSocket.on('timeout', onTimeout);\n            rawSocket.on('connect', onConnect);\n            if (options.signal != null) {\n                options.signal.addEventListener('abort', onAbort);\n            }\n        });\n    }\n    /**\n     * Creates a TCP listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`.\n     */\n    createListener(options) {\n        return new TCPListener({\n            ...options,\n            maxConnections: this.opts.maxConnections,\n            socketInactivityTimeout: this.opts.inboundSocketInactivityTimeout,\n            socketCloseTimeout: this.opts.socketCloseTimeout\n        });\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter(ma => {\n            if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n                return false;\n            }\n            if (ma.protoCodes().includes(CODE_UNIX)) {\n                return true;\n            }\n            return mafmt.TCP.matches(ma.decapsulateCode(CODE_P2P));\n        });\n    }\n}\nexport function tcp(init = {}) {\n    return () => {\n        return new TCP(init);\n    };\n}\n//# sourceMappingURL=index.js.map","import { webRTCStar } from \"@libp2p/webrtc-star\";\nimport { webSockets } from \"@libp2p/websockets\";\nimport { webRTCDirect } from \"@libp2p/webrtc-direct\";\nimport { noise } from \"@chainsafe/libp2p-noise\";\nimport { tcp } from \"@libp2p/tcp\";\n// https://github.com/libp2p/js-libp2p/blob/master/doc/CONFIGURATION.md#setup-webrtc-transport-and-discovery\n// https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs-core-config/src/libp2p.browser\n// https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs-core-config/src/libp2p\nexport default async () => {\n    return {\n        transport: [tcp, webRTCStar, webSockets, webRTCDirect],\n        connectionEncryption: [noise],\n    };\n};\n//# sourceMappingURL=config%C3%89lectron.js.map"],"names":["getIterator","obj","require$$0","sink","writable","source","maybeEndSource","error","errCb","errorHandler","err","closeCb","closed","closeHandler","finishCb","finished","finishHandler","drainCb","drainHandler","waitForDrainOrClose","resolve","reject","waitForDone","cleanup","value","toSink","toSource","require$$1","duplex","toDuplex","transform","sinkError","module","require$$2","require$$3","isInSubnet","address","isCorrect","defaultBits","BITS","GROUPS","RE_ADDRESS","RE_SUBNET_STRING","AddressError","message","parseMessage","dbits","canary","j_lm","BigInteger","a","b","c","nbi","am1","i","x","w","j","n","v","am2","xl","xh","l","h","m","am3","inBrowser","BI_FP","BI_RM","BI_RC","rr","vv","int2char","intAt","s","bnpCopyTo","r","bnpFromInt","nbv","bnpFromString","k","mi","sh","bnpClamp","bnToString","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","t","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","bnpMultiplyTo","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","ts","ms","nsh","ys","y0","yt","d1","d2","e","qd","bnMod","Classic","cConvert","cRevert","cReduce","cMulTo","cSqrTo","bnpInvDigit","Montgomery","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","bnSigNum","bnpToRadix","cs","bnpFromRadix","bnpFromNumber","op_or","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","barrettConvert","barrettRevert","barrettReduce","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","bnpModInt","bnModInverse","ac","u","lowprimes","lplim","bnIsProbablePrime","bnpMillerRabin","n1","rng_state","rng_pool","rng_pptr","rng_seed_int","rng_psize","rng_seed_time","ua","rng_get_byte","prng_newstate","rng_get_bytes","ba","SecureRandom","Arcfour","ARC4init","key","ARC4next","this","re","sprintf","sprintf_format","sprintf_parse","vsprintf","fmt","argv","parse_tree","cursor","tree_length","arg","output","ph","pad","pad_character","pad_length","is_positive","sign","sprintf_cache","_fmt","match","arg_names","field_list","replacement_field","field_match","exports","Address4","constants.GROUPS","common.isCorrect","constants.BITS","common.isInSubnet","subnet","constants.RE_SUBNET_STRING","groups","constants.RE_ADDRESS","part","hex","padded","integer","arpaFormAddress","adjust","bigInteger","mask","start","end","options","reversed","segments","SCOPES","TYPES","RE_BAD_CHARACTERS","RE_BAD_ADDRESS","RE_ZONE_STRING","RE_URL","RE_URL_WITH_PORT","spanLeadingZeroesSimple","group","simpleGroup","addressString","offset","groupPossibilities","possibilities","padGroup","ADDRESS_BOUNDARY","simpleRegularExpression","zeroIndexes","zeroIndex","elision","v6.GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position","assert","condition","addCommas","number","spanLeadingZeroes4","compact","slice","s1","s2","paddedHex","octet","unsignByte","Address6","optionalGroups","constants6.BITS","constants6.GROUPS","constants6.RE_SUBNET_STRING","zone","constants6.RE_ZONE_STRING","url","host","port","result","constants6.RE_URL_WITH_PORT","constants6.RE_URL","address4","mask6","constants4.BITS","semicolonAmount","parts","insertIndex","subnetSize","availableBits","subnetBits","subnetPowers","scope","constants6.SCOPES","constants6.TYPES","length","characters","zeroCounter","zeroes","zeroLengths","index","correct","constants4.RE_ADDRESS","badCharacters","constants6.RE_BAD_CHARACTERS","badAddress","constants6.RE_BAD_ADDRESS","halves","first","last","remaining","binary","infix","prefix","udpPort","server4","client4","flags","flagsBase2","coneNat","reserved","groupIndividual","universalLocal","nonce","gateway","addr6to4","byteArray","bytes","BYTE_MAX","multiplier","optionalPort","formFunction","helpers.simpleGroup","classes","substringSearch","address6","log","logger","Errors","ipPortToMultiaddr","ip","errCode","multiaddr","ip6","errMsg","CODE_P2P","CODE_CIRCUIT","CODE_UNIX","CLOSE_TIMEOUT","SOCKET_TIMEOUT","ProtoFamily","multiaddrToNetConfig","addr","listenPath","os","path","getMultiaddrs","proto","toMa","isAnyAddr","getNetworkAddrs","networks","family","addresses","netAddrs","netAddr","toMultiaddrConnection","socket","inactivityTimeout","closeTimeout","remoteAddr","toMultiaddr","lOpts","lOptsStr","toIterable","maConn","abortableSource","timeout","attemptClose","TCPListener","EventEmitter","context","net","CustomEvent","conn","addrs","listeningAddr","peerId","ma","TCP","symbol","AbortError","cOpts","cOptsStr","rawSocket","onError","done","onTimeout","onConnect","onAbort","multiaddrs","mafmt.TCP","tcp","init","configÃ‰lectron","webRTCStar","webSockets","webRTCDirect","noise"],"mappings":"kXAGAA,GAAiB,SAAsBC,EAAK,CAC1C,GAAIA,EAAK,CACP,GAAI,OAAOA,EAAI,OAAO,QAAQ,GAAM,WAClC,OAAOA,EAAI,OAAO,QAAQ,EAAG,EAE/B,GAAI,OAAOA,EAAI,OAAO,aAAa,GAAM,WACvC,OAAOA,EAAI,OAAO,aAAa,EAAG,EAEpC,GAAI,OAAOA,EAAI,MAAS,WACtB,OAAOA,CAEV,CACD,MAAM,IAAI,MAAM,yCAAyC,CAC3D,EChBA,MAAMD,GAAcE,GAEpB,IAAAC,GAAiBC,GAAY,MAAMC,GAAU,CAC3CA,EAASL,GAAYK,CAAM,EAE3B,MAAMC,EAAkBD,GAAW,CAC7B,OAAOA,EAAO,QAAW,YAAYA,EAAO,OAAQ,CACzD,EAED,IAAIE,EAAQ,KACRC,EAAQ,KACZ,MAAMC,EAAgBC,GAAQ,CAC5BH,EAAQG,EACJF,GAAOA,EAAME,CAAG,EAEpBJ,EAAeD,CAAM,CACtB,EAED,IAAIM,EAAU,KACVC,EAAS,GACb,MAAMC,EAAe,IAAM,CACzBD,EAAS,GACLD,GAASA,EAAS,CACvB,EAED,IAAIG,EAAW,KACXC,EAAW,GACf,MAAMC,EAAgB,IAAM,CAC1BD,EAAW,GACPD,GAAUA,EAAU,CACzB,EAED,IAAIG,EAAU,KACd,MAAMC,EAAe,IAAM,CACrBD,GAASA,EAAS,CACvB,EAEKE,EAAsB,IACnB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCV,EAAUM,EAAUG,EACpBZ,EAAQa,EACRjB,EAAS,KAAK,QAASc,CAAY,CACzC,CAAK,EAGGI,EAAc,KAElBhB,EAAeD,CAAM,EACd,IAAI,QAAQ,CAACe,EAASC,IAAW,CACtC,GAAIT,GAAUG,GAAYR,EAAO,OAAOa,EAAS,EACjDN,EAAWH,EAAUS,EACrBZ,EAAQa,CACd,CAAK,GAGGE,EAAU,IAAM,CACpBnB,EAAS,eAAe,QAASK,CAAY,EAC7CL,EAAS,eAAe,QAASS,CAAY,EAC7CT,EAAS,eAAe,SAAUY,CAAa,EAC/CZ,EAAS,eAAe,QAASc,CAAY,CAC9C,EAEDd,EAAS,KAAK,QAASK,CAAY,EACnCL,EAAS,KAAK,QAASS,CAAY,EACnCT,EAAS,KAAK,SAAUY,CAAa,EAErC,GAAI,CACF,gBAAiBQ,KAASnB,EAAQ,CAChC,GAAI,CAACD,EAAS,UAAYA,EAAS,WAAaG,EAAO,MAEnDH,EAAS,MAAMoB,CAAK,IAAM,IAC5B,MAAML,EAAqB,CAE9B,CACF,OAAQT,EAAP,CAEKH,GACHH,EAAS,QAAS,EAIpBG,EAAQG,CACT,CAED,GAAI,CAUF,GARIN,EAAS,UACXA,EAAS,IAAK,EAIhB,MAAMkB,EAAa,EAGff,EAAO,MAAMA,CACrB,QAAY,CAERgB,EAAS,CACV,CACH,ECnGA,MAAME,GAASvB,GACTwB,GAAWC,GAEjB,IAAAC,GAAiBA,IAAW,CAAE,KAAMH,GAAOG,CAAM,EAAG,OAAQF,GAASE,CAAM,CAAG,GCH9E,MAAMC,GAAW3B,GAEjB,IAAA4B,GAAiBA,GAAa,gBAAkBzB,EAAQ,CACtD,MAAMuB,EAASC,GAASC,CAAS,EAIjC,IAAIC,EAIJ,GAHAH,EAAO,KAAKvB,CAAM,EAAE,MAAMK,GAAO,CAAEqB,EAAYrB,EAAK,EAEpD,MAAQkB,EAAO,OACXG,EAAW,MAAMA,CACvB,eCZAC,EAAA,QAAiB9B,GACjB8B,EAAA,QAAA,OAAwB9B,GACxB8B,EAAA,QAAA,KAAsBL,GACtBK,EAAA,QAAA,UAA2BC,GAC3BD,EAAwB,QAAA,OAAAE,yBCJjB,SAASC,GAAWC,EAAS,CAChC,OAAI,KAAK,WAAaA,EAAQ,WACnB,GAEP,KAAK,KAAKA,EAAQ,UAAU,IAAMA,EAAQ,MAIlD,CACO,SAASC,GAAUC,EAAa,CACnC,OAAO,UAAY,CACf,OAAI,KAAK,qBAAuB,KAAK,YAAW,EACrC,GAEP,KAAK,aAAeA,GAAe,CAAC,KAAK,aAClC,GAEJ,KAAK,eAAiB,OAAO,KAAK,UAAU,CAC3D,CACA,CCnBO,MAAMC,EAAO,GACPC,GAAS,EACTC,GAAa,oKACbC,GAAmB,aCHzB,MAAMC,UAAqB,KAAM,CACpC,YAAYC,EAASC,EAAc,CAC/B,MAAMD,CAAO,EACb,KAAK,KAAO,eACRC,IAAiB,OACjB,KAAK,aAAeA,EAE3B,CACL,2ECRC,UAAU,CASP,IAAIC,EAGAC,EAAS,eACTC,GAASD,EAAO,WAAW,SAG/B,SAASE,EAAWC,EAAEC,EAAEC,EAAG,CACtBF,GAAK,OACS,OAAOA,GAAnB,SAAsB,KAAK,WAAWA,EAAEC,EAAEC,CAAC,EACtCD,GAAK,MAAoB,OAAOD,GAAnB,SAAsB,KAAK,WAAWA,EAAE,GAAG,EAC3D,KAAK,WAAWA,EAAEC,CAAC,EAC3B,CAGD,SAASE,GAAM,CAAE,OAAO,IAAIJ,EAAW,IAAI,CAAI,CAU/C,SAASK,EAAIC,EAAEC,EAAEC,EAAEC,EAAEN,EAAEO,EAAG,CACxB,KAAM,EAAEA,GAAK,GAAG,CACd,IAAIC,EAAIJ,EAAE,KAAKD,GAAG,EAAEE,EAAEC,CAAC,EAAEN,EACzBA,EAAI,KAAK,MAAMQ,EAAE,QAAS,EAC1BH,EAAEC,GAAG,EAAIE,EAAE,QACZ,CACD,OAAOR,CACR,CAID,SAASS,EAAIN,EAAEC,EAAEC,EAAEC,EAAEN,EAAEO,EAAG,CAExB,QADIG,EAAKN,EAAE,MAAQO,EAAKP,GAAG,GACrB,EAAEG,GAAK,GAAG,CACd,IAAIK,EAAI,KAAKT,CAAC,EAAE,MACZU,EAAI,KAAKV,GAAG,GAAG,GACfW,EAAIH,EAAGC,EAAEC,EAAEH,EACfE,EAAIF,EAAGE,IAAIE,EAAE,QAAS,IAAIT,EAAEC,CAAC,GAAGN,EAAE,YAClCA,GAAKY,IAAI,KAAKE,IAAI,IAAIH,EAAGE,GAAGb,IAAI,IAChCK,EAAEC,GAAG,EAAIM,EAAE,UACZ,CACD,OAAOZ,CACR,CAGD,SAASe,EAAIZ,EAAEC,EAAEC,EAAEC,EAAEN,EAAEO,EAAG,CAExB,QADIG,EAAKN,EAAE,MAAQO,EAAKP,GAAG,GACrB,EAAEG,GAAK,GAAG,CACd,IAAIK,EAAI,KAAKT,CAAC,EAAE,MACZU,EAAI,KAAKV,GAAG,GAAG,GACfW,EAAIH,EAAGC,EAAEC,EAAEH,EACfE,EAAIF,EAAGE,IAAIE,EAAE,QAAS,IAAIT,EAAEC,CAAC,EAAEN,EAC/BA,GAAKY,GAAG,KAAKE,GAAG,IAAIH,EAAGE,EACvBR,EAAEC,GAAG,EAAIM,EAAE,SACZ,CACD,OAAOZ,CACR,CACD,IAAIgB,EAAY,OAAO,UAAc,IAClCA,GAAapB,GAAS,UAAU,SAAW,+BAC5CC,EAAW,UAAU,GAAKY,EAC1Bf,EAAQ,IAEFsB,GAAapB,GAAS,UAAU,SAAW,YACjDC,EAAW,UAAU,GAAKK,EAC1BR,EAAQ,KAGRG,EAAW,UAAU,GAAKkB,EAC1BrB,EAAQ,IAGVG,EAAW,UAAU,GAAKH,EAC1BG,EAAW,UAAU,IAAO,GAAGH,GAAO,EACtCG,EAAW,UAAU,GAAM,GAAGH,EAE9B,IAAIuB,EAAQ,GACZpB,EAAW,UAAU,GAAK,KAAK,IAAI,EAAEoB,CAAK,EAC1CpB,EAAW,UAAU,GAAKoB,EAAMvB,EAChCG,EAAW,UAAU,GAAK,EAAEH,EAAMuB,EAGlC,IAAIC,EAAQ,uCACRC,EAAQ,IAAI,MACZC,EAAGC,EAEP,IADAD,EAAK,IAAI,WAAW,CAAC,EACjBC,EAAK,EAAGA,GAAM,EAAG,EAAEA,EAAIF,EAAMC,GAAI,EAAIC,EAEzC,IADAD,EAAK,IAAI,WAAW,CAAC,EACjBC,EAAK,GAAIA,EAAK,GAAI,EAAEA,EAAIF,EAAMC,GAAI,EAAIC,EAE1C,IADAD,EAAK,IAAI,WAAW,CAAC,EACjBC,EAAK,GAAIA,EAAK,GAAI,EAAEA,EAAIF,EAAMC,GAAI,EAAIC,EAE1C,SAASC,EAASf,EAAG,CAAE,OAAOW,EAAM,OAAOX,CAAC,CAAI,CAChD,SAASgB,EAAMC,EAAErB,EAAG,CAClB,IAAIH,EAAImB,EAAMK,EAAE,WAAWrB,CAAC,CAAC,EAC7B,OAAQH,GAAS,EAClB,CAGD,SAASyB,EAAUC,EAAG,CACpB,QAAQvB,EAAI,KAAK,EAAE,EAAGA,GAAK,EAAG,EAAEA,EAAGuB,EAAEvB,CAAC,EAAI,KAAKA,CAAC,EAChDuB,EAAE,EAAI,KAAK,EACXA,EAAE,EAAI,KAAK,CACZ,CAGD,SAASC,GAAWvB,EAAG,CACrB,KAAK,EAAI,EACT,KAAK,EAAKA,EAAE,EAAG,GAAG,EACfA,EAAI,EAAG,KAAK,CAAC,EAAIA,EACZA,EAAI,GAAI,KAAK,CAAC,EAAIA,EAAE,KAAK,GAC5B,KAAK,EAAI,CACf,CAGD,SAASwB,EAAIzB,EAAG,CAAE,IAAIuB,EAAIzB,EAAK,EAAE,OAAAyB,EAAE,QAAQvB,CAAC,EAAUuB,CAAI,CAG1D,SAASG,GAAcL,EAAEzB,EAAG,CAC1B,IAAI+B,EACJ,GAAG/B,GAAK,GAAI+B,EAAI,UACR/B,GAAK,EAAG+B,EAAI,UACZ/B,GAAK,IAAK+B,EAAI,UACd/B,GAAK,EAAG+B,EAAI,UACZ/B,GAAK,GAAI+B,EAAI,UACb/B,GAAK,EAAG+B,EAAI,MACf,CAAE,KAAK,UAAUN,EAAEzB,CAAC,EAAG,MAAS,CACrC,KAAK,EAAI,EACT,KAAK,EAAI,EAET,QADI,EAAIyB,EAAE,OAAQO,EAAK,GAAOC,EAAK,EAC7B,EAAE,GAAK,GAAG,CACd,IAAI5B,EAAK0B,GAAG,EAAGN,EAAE,CAAC,EAAE,IAAKD,EAAMC,EAAE,CAAC,EAClC,GAAGpB,EAAI,EAAG,CACLoB,EAAE,OAAO,CAAC,GAAK,MAAKO,EAAK,IAC5B,QACD,CACDA,EAAK,GACFC,GAAM,EACP,KAAK,KAAK,GAAG,EAAI5B,EACX4B,EAAGF,EAAI,KAAK,IAClB,KAAK,KAAK,EAAE,CAAC,IAAM1B,GAAI,GAAI,KAAK,GAAG4B,GAAK,IAAKA,EAC7C,KAAK,KAAK,GAAG,EAAK5B,GAAI,KAAK,GAAG4B,GAG9B,KAAK,KAAK,EAAE,CAAC,GAAK5B,GAAG4B,EACvBA,GAAMF,EACHE,GAAM,KAAK,KAAIA,GAAM,KAAK,GAC9B,CACEF,GAAK,GAAMN,EAAE,CAAC,EAAE,MACjB,KAAK,EAAI,GACNQ,EAAK,IAAG,KAAK,KAAK,EAAE,CAAC,IAAO,GAAI,KAAK,GAAGA,GAAK,GAAIA,IAEtD,KAAK,MAAK,EACPD,GAAIlC,EAAW,KAAK,MAAM,KAAK,IAAI,CACvC,CAGD,SAASoC,IAAW,CAElB,QADIjC,EAAI,KAAK,EAAE,KAAK,GACd,KAAK,EAAI,GAAK,KAAK,KAAK,EAAE,CAAC,GAAKA,GAAG,EAAE,KAAK,CACjD,CAGD,SAASkC,GAAWnC,EAAG,CACrB,GAAG,KAAK,EAAI,EAAG,MAAO,IAAI,KAAK,OAAQ,EAAC,SAASA,CAAC,EAClD,IAAI+B,EACJ,GAAG/B,GAAK,GAAI+B,EAAI,UACR/B,GAAK,EAAG+B,EAAI,UACZ/B,GAAK,EAAG+B,EAAI,UACZ/B,GAAK,GAAI+B,EAAI,UACb/B,GAAK,EAAG+B,EAAI,MACf,QAAO,KAAK,QAAQ/B,CAAC,EAC1B,IAAIoC,GAAM,GAAGL,GAAG,EAAGM,EAAGtB,EAAI,GAAOY,EAAI,GAAIvB,EAAI,KAAK,EAC9CkC,EAAI,KAAK,GAAIlC,EAAE,KAAK,GAAI2B,EAC5B,GAAG3B,KAAM,EAEP,IADGkC,EAAI,KAAK,KAAOD,EAAI,KAAKjC,CAAC,GAAGkC,GAAK,IAAKvB,EAAI,GAAMY,EAAIJ,EAASc,CAAC,GAC5DjC,GAAK,GACNkC,EAAIP,GACLM,GAAK,KAAKjC,CAAC,GAAI,GAAGkC,GAAG,IAAMP,EAAEO,EAC7BD,GAAK,KAAK,EAAEjC,CAAC,IAAIkC,GAAG,KAAK,GAAGP,KAG5BM,EAAK,KAAKjC,CAAC,IAAIkC,GAAGP,GAAIK,EACnBE,GAAK,IAAKA,GAAK,KAAK,GAAI,EAAElC,IAE5BiC,EAAI,IAAGtB,EAAI,IACXA,IAAGY,GAAKJ,EAASc,CAAC,GAGzB,OAAOtB,EAAEY,EAAE,GACZ,CAGD,SAASY,IAAW,CAAE,IAAIZ,EAAIzB,EAAG,EAAI,OAAAJ,EAAW,KAAK,MAAM,KAAK6B,CAAC,EAAUA,CAAI,CAG/E,SAASa,IAAQ,CAAE,OAAQ,KAAK,EAAE,EAAG,KAAK,SAAS,IAAO,CAG1D,SAASC,GAAY1C,EAAG,CACtB,IAAI4B,EAAI,KAAK,EAAE5B,EAAE,EACjB,GAAG4B,GAAK,EAAG,OAAOA,EAClB,IAAIvB,EAAI,KAAK,EAEb,GADAuB,EAAIvB,EAAEL,EAAE,EACL4B,GAAK,EAAG,OAAQ,KAAK,EAAE,EAAG,CAACA,EAAEA,EAChC,KAAM,EAAEvB,GAAK,GAAG,IAAIuB,EAAE,KAAKvB,CAAC,EAAEL,EAAEK,CAAC,IAAM,EAAG,OAAOuB,EACjD,MAAO,EACR,CAGD,SAASe,GAAMrC,EAAG,CAChB,IAAIsB,EAAI,EAAGgB,EACX,OAAIA,EAAEtC,IAAI,KAAO,IAAKA,EAAIsC,EAAGhB,GAAK,KAC9BgB,EAAEtC,GAAG,IAAM,IAAKA,EAAIsC,EAAGhB,GAAK,IAC5BgB,EAAEtC,GAAG,IAAM,IAAKA,EAAIsC,EAAGhB,GAAK,IAC5BgB,EAAEtC,GAAG,IAAM,IAAKA,EAAIsC,EAAGhB,GAAK,IAC5BgB,EAAEtC,GAAG,IAAM,IAAKA,EAAIsC,EAAGhB,GAAK,GACzBA,CACR,CAGD,SAASiB,IAAc,CACrB,OAAG,KAAK,GAAK,EAAU,EAChB,KAAK,IAAI,KAAK,EAAE,GAAGF,GAAM,KAAK,KAAK,EAAE,CAAC,EAAG,KAAK,EAAE,KAAK,EAAG,CAChE,CAGD,SAASG,GAAarC,EAAEmB,EAAG,CACzB,IAAIvB,EACJ,IAAIA,EAAI,KAAK,EAAE,EAAGA,GAAK,EAAG,EAAEA,EAAGuB,EAAEvB,EAAEI,CAAC,EAAI,KAAKJ,CAAC,EAC9C,IAAIA,EAAII,EAAE,EAAGJ,GAAK,EAAG,EAAEA,EAAGuB,EAAEvB,CAAC,EAAI,EACjCuB,EAAE,EAAI,KAAK,EAAEnB,EACbmB,EAAE,EAAI,KAAK,CACZ,CAGD,SAASmB,GAAatC,EAAEmB,EAAG,CACzB,QAAQvB,EAAII,EAAGJ,EAAI,KAAK,EAAG,EAAEA,EAAGuB,EAAEvB,EAAEI,CAAC,EAAI,KAAKJ,CAAC,EAC/CuB,EAAE,EAAI,KAAK,IAAI,KAAK,EAAEnB,EAAE,CAAC,EACzBmB,EAAE,EAAI,KAAK,CACZ,CAGD,SAASoB,GAAYvC,EAAEmB,EAAG,CACxB,IAAIqB,EAAKxC,EAAE,KAAK,GACZyC,EAAM,KAAK,GAAGD,EACdE,GAAM,GAAGD,GAAK,EACdE,EAAK,KAAK,MAAM3C,EAAE,KAAK,EAAE,EAAGP,EAAK,KAAK,GAAG+C,EAAI,KAAK,GAAI5C,EAC1D,IAAIA,EAAI,KAAK,EAAE,EAAGA,GAAK,EAAG,EAAEA,EAC1BuB,EAAEvB,EAAE+C,EAAG,CAAC,EAAK,KAAK/C,CAAC,GAAG6C,EAAKhD,EAC3BA,GAAK,KAAKG,CAAC,EAAE8C,IAAKF,EAEpB,IAAI5C,EAAI+C,EAAG,EAAG/C,GAAK,EAAG,EAAEA,EAAGuB,EAAEvB,CAAC,EAAI,EAClCuB,EAAEwB,CAAE,EAAIlD,EACR0B,EAAE,EAAI,KAAK,EAAEwB,EAAG,EAChBxB,EAAE,EAAI,KAAK,EACXA,EAAE,MAAK,CACR,CAGD,SAASyB,GAAY5C,EAAEmB,EAAG,CACxBA,EAAE,EAAI,KAAK,EACX,IAAIwB,EAAK,KAAK,MAAM3C,EAAE,KAAK,EAAE,EAC7B,GAAG2C,GAAM,KAAK,EAAG,CAAExB,EAAE,EAAI,EAAG,MAAS,CACrC,IAAIqB,EAAKxC,EAAE,KAAK,GACZyC,EAAM,KAAK,GAAGD,EACdE,GAAM,GAAGF,GAAI,EACjBrB,EAAE,CAAC,EAAI,KAAKwB,CAAE,GAAGH,EACjB,QAAQ5C,EAAI+C,EAAG,EAAG/C,EAAI,KAAK,EAAG,EAAEA,EAC9BuB,EAAEvB,EAAE+C,EAAG,CAAC,IAAM,KAAK/C,CAAC,EAAE8C,IAAKD,EAC3BtB,EAAEvB,EAAE+C,CAAE,EAAI,KAAK/C,CAAC,GAAG4C,EAElBA,EAAK,IAAGrB,EAAE,KAAK,EAAEwB,EAAG,CAAC,IAAM,KAAK,EAAED,IAAKD,GAC1CtB,EAAE,EAAI,KAAK,EAAEwB,EACbxB,EAAE,MAAK,CACR,CAGD,SAAS0B,GAAStD,EAAE4B,EAAG,CAErB,QADIvB,EAAI,EAAGH,EAAI,EAAGc,EAAI,KAAK,IAAIhB,EAAE,EAAE,KAAK,CAAC,EACnCK,EAAIW,GACRd,GAAK,KAAKG,CAAC,EAAEL,EAAEK,CAAC,EAChBuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEb,GAAGF,EAAE,EAAI,KAAK,EAAG,CAEf,IADAE,GAAKF,EAAE,EACDK,EAAI,KAAK,GACbH,GAAK,KAAKG,CAAC,EACXuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEbA,GAAK,KAAK,CACX,KACI,CAEH,IADAA,GAAK,KAAK,EACJG,EAAIL,EAAE,GACVE,GAAKF,EAAEK,CAAC,EACRuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEbA,GAAKF,EAAE,CACR,CACD4B,EAAE,EAAK1B,EAAE,EAAG,GAAG,EACZA,EAAI,GAAI0B,EAAEvB,GAAG,EAAI,KAAK,GAAGH,EACpBA,EAAI,IAAG0B,EAAEvB,GAAG,EAAIH,GACxB0B,EAAE,EAAIvB,EACNuB,EAAE,MAAK,CACR,CAID,SAAS2B,GAAcvD,EAAE4B,EAAG,CAC1B,IAAItB,EAAI,KAAK,IAAG,EAAIkD,EAAIxD,EAAE,MACtBK,EAAIC,EAAE,EAEV,IADAsB,EAAE,EAAIvB,EAAEmD,EAAE,EACJ,EAAEnD,GAAK,GAAGuB,EAAEvB,CAAC,EAAI,EACvB,IAAIA,EAAI,EAAGA,EAAImD,EAAE,EAAG,EAAEnD,EAAGuB,EAAEvB,EAAEC,EAAE,CAAC,EAAIA,EAAE,GAAG,EAAEkD,EAAEnD,CAAC,EAAEuB,EAAEvB,EAAE,EAAEC,EAAE,CAAC,EACzDsB,EAAE,EAAI,EACNA,EAAE,MAAK,EACJ,KAAK,GAAK5B,EAAE,GAAGD,EAAW,KAAK,MAAM6B,EAAEA,CAAC,CAC5C,CAGD,SAAS6B,GAAY7B,EAAG,CAGtB,QAFItB,EAAI,KAAK,MACTD,EAAIuB,EAAE,EAAI,EAAEtB,EAAE,EACZ,EAAED,GAAK,GAAGuB,EAAEvB,CAAC,EAAI,EACvB,IAAIA,EAAI,EAAGA,EAAIC,EAAE,EAAE,EAAG,EAAED,EAAG,CACzB,IAAIH,EAAII,EAAE,GAAGD,EAAEC,EAAED,CAAC,EAAEuB,EAAE,EAAEvB,EAAE,EAAE,CAAC,GACzBuB,EAAEvB,EAAEC,EAAE,CAAC,GAAGA,EAAE,GAAGD,EAAE,EAAE,EAAEC,EAAED,CAAC,EAAEuB,EAAE,EAAEvB,EAAE,EAAEH,EAAEI,EAAE,EAAED,EAAE,CAAC,IAAMC,EAAE,KACrDsB,EAAEvB,EAAEC,EAAE,CAAC,GAAKA,EAAE,GACdsB,EAAEvB,EAAEC,EAAE,EAAE,CAAC,EAAI,EAEhB,CACEsB,EAAE,EAAI,IAAGA,EAAEA,EAAE,EAAE,CAAC,GAAKtB,EAAE,GAAGD,EAAEC,EAAED,CAAC,EAAEuB,EAAE,EAAEvB,EAAE,EAAE,CAAC,GAC7CuB,EAAE,EAAI,EACNA,EAAE,MAAK,CACR,CAID,SAAS8B,GAAY1C,EAAE2C,EAAE,EAAG,CAC1B,IAAIC,EAAK5C,EAAE,MACX,GAAG,EAAA4C,EAAG,GAAK,GACX,KAAIC,EAAK,KAAK,MACd,GAAGA,EAAG,EAAID,EAAG,EAAG,CACAD,GAAE,QAAQ,CAAC,EACtB,GAAK,MAAM,KAAK,OAAO,CAAC,EAC3B,MACD,CACE,GAAK,OAAM,EAAIxD,EAAG,GACrB,IAAIqD,EAAIrD,EAAG,EAAI2D,EAAK,KAAK,EAAGC,EAAK/C,EAAE,EAC/BgD,EAAM,KAAK,GAAGrB,GAAMiB,EAAGA,EAAG,EAAE,CAAC,CAAC,EAC/BI,EAAM,GAAKJ,EAAG,SAASI,EAAIR,CAAC,EAAGK,EAAG,SAASG,EAAI,CAAC,IAC5CJ,EAAG,OAAOJ,CAAC,EAAGK,EAAG,OAAO,CAAC,GAChC,IAAII,EAAKT,EAAE,EACPU,EAAKV,EAAES,EAAG,CAAC,EACf,GAAGC,GAAM,EACT,KAAIC,EAAKD,GAAI,GAAG,KAAK,KAAMD,EAAG,EAAGT,EAAES,EAAG,CAAC,GAAG,KAAK,GAAG,GAC9CG,EAAK,KAAK,GAAGD,EAAIE,IAAM,GAAG,KAAK,IAAIF,EAAIG,EAAI,GAAG,KAAK,GACnDjE,EAAI,EAAE,EAAGG,GAAIH,EAAE4D,EAAIrB,EAAKe,GAASxD,EAAG,EAQxC,IAPAqD,EAAE,UAAUhD,GAAEoC,CAAC,EACZ,EAAE,UAAUA,CAAC,GAAK,IACnB,EAAE,EAAE,GAAG,EAAI,EACX,EAAE,MAAMA,EAAE,CAAC,GAEb7C,EAAW,IAAI,UAAUkE,EAAGrB,CAAC,EAC7BA,EAAE,MAAMY,EAAEA,CAAC,EACLA,EAAE,EAAIS,GAAIT,EAAEA,EAAE,GAAG,EAAI,EAC3B,KAAM,EAAEhD,IAAK,GAAG,CAEd,IAAI+D,GAAM,EAAE,EAAElE,CAAC,GAAG6D,EAAI,KAAK,GAAG,KAAK,MAAM,EAAE7D,CAAC,EAAE+D,GAAI,EAAE/D,EAAE,CAAC,EAAEiE,GAAGD,EAAE,EAC9D,IAAI,EAAEhE,CAAC,GAAGmD,EAAE,GAAG,EAAEe,GAAG,EAAE/D,GAAE,EAAEyD,CAAE,GAAKM,GAG/B,IAFAf,EAAE,UAAUhD,GAAEoC,CAAC,EACf,EAAE,MAAMA,EAAE,CAAC,EACL,EAAEvC,CAAC,EAAI,EAAEkE,IAAI,EAAE,MAAM3B,EAAE,CAAC,CAEjC,CACEe,GAAK,OACN,EAAE,UAAUM,EAAGN,CAAC,EACbG,GAAMC,GAAIhE,EAAW,KAAK,MAAM4D,EAAEA,CAAC,GAExC,EAAE,EAAIM,EACN,EAAE,MAAK,EACJD,EAAM,GAAG,EAAE,SAASA,EAAI,CAAC,EACzBF,EAAK,GAAG/D,EAAW,KAAK,MAAM,EAAE,CAAC,GACrC,CAGD,SAASyE,GAAMxE,EAAG,CAChB,IAAI4B,EAAIzB,IACR,YAAK,IAAG,EAAG,SAASH,EAAE,KAAK4B,CAAC,EACzB,KAAK,EAAI,GAAKA,EAAE,UAAU7B,EAAW,IAAI,EAAI,GAAGC,EAAE,MAAM4B,EAAEA,CAAC,EACvDA,CACR,CAGD,SAAS6C,EAAQzD,EAAG,CAAE,KAAK,EAAIA,CAAI,CACnC,SAAS0D,GAASpE,EAAG,CACnB,OAAGA,EAAE,EAAI,GAAKA,EAAE,UAAU,KAAK,CAAC,GAAK,EAAUA,EAAE,IAAI,KAAK,CAAC,EAC/CA,CACb,CACD,SAASqE,GAAQrE,EAAG,CAAE,OAAOA,CAAI,CACjC,SAASsE,GAAQtE,EAAG,CAAEA,EAAE,SAAS,KAAK,EAAE,KAAKA,CAAC,CAAI,CAClD,SAASuE,GAAOvE,EAAEkD,EAAE,EAAG,CAAElD,EAAE,WAAWkD,EAAE,CAAC,EAAG,KAAK,OAAO,CAAC,CAAI,CAC7D,SAASsB,GAAOxE,EAAEsB,EAAG,CAAEtB,EAAE,SAASsB,CAAC,EAAG,KAAK,OAAOA,CAAC,CAAI,CAEvD6C,EAAQ,UAAU,QAAUC,GAC5BD,EAAQ,UAAU,OAASE,GAC3BF,EAAQ,UAAU,OAASG,GAC3BH,EAAQ,UAAU,MAAQI,GAC1BJ,EAAQ,UAAU,MAAQK,GAY1B,SAASC,IAAc,CACrB,GAAG,KAAK,EAAI,EAAG,MAAO,GACtB,IAAIzE,EAAI,KAAK,CAAC,EACd,GAAI,EAAAA,EAAE,GAAS,MAAO,GACtB,IAAIkD,EAAIlD,EAAE,EACV,OAAAkD,EAAKA,GAAG,GAAGlD,EAAE,IAAKkD,GAAI,GACtBA,EAAKA,GAAG,GAAGlD,EAAE,KAAMkD,GAAI,IACvBA,EAAKA,GAAG,IAAKlD,EAAE,OAAQkD,EAAG,QAAU,MAGpCA,EAAKA,GAAG,EAAElD,EAAEkD,EAAE,KAAK,IAAK,KAAK,GAErBA,EAAE,EAAG,KAAK,GAAGA,EAAE,CAACA,CACzB,CAGD,SAASwB,EAAWhE,EAAG,CACrB,KAAK,EAAIA,EACT,KAAK,GAAKA,EAAE,WACZ,KAAK,IAAM,KAAK,GAAG,MACnB,KAAK,IAAM,KAAK,IAAI,GACpB,KAAK,IAAM,GAAIA,EAAE,GAAG,IAAK,EACzB,KAAK,IAAM,EAAEA,EAAE,CAChB,CAGD,SAASiE,GAAY3E,EAAG,CACtB,IAAIsB,EAAIzB,IACR,OAAAG,EAAE,IAAG,EAAG,UAAU,KAAK,EAAE,EAAEsB,CAAC,EAC5BA,EAAE,SAAS,KAAK,EAAE,KAAKA,CAAC,EACrBtB,EAAE,EAAI,GAAKsB,EAAE,UAAU7B,EAAW,IAAI,EAAI,GAAG,KAAK,EAAE,MAAM6B,EAAEA,CAAC,EACzDA,CACR,CAGD,SAASsD,GAAW5E,EAAG,CACrB,IAAIsB,EAAIzB,IACR,OAAAG,EAAE,OAAOsB,CAAC,EACV,KAAK,OAAOA,CAAC,EACNA,CACR,CAGD,SAASuD,GAAW7E,EAAG,CACrB,KAAMA,EAAE,GAAK,KAAK,KAChBA,EAAEA,EAAE,GAAG,EAAI,EACb,QAAQD,EAAI,EAAGA,EAAI,KAAK,EAAE,EAAG,EAAEA,EAAG,CAEhC,IAAIG,EAAIF,EAAED,CAAC,EAAE,MACT+E,EAAM5E,EAAE,KAAK,MAAOA,EAAE,KAAK,KAAKF,EAAED,CAAC,GAAG,IAAI,KAAK,IAAK,KAAK,KAAK,IAAKC,EAAE,GAKzE,IAHAE,EAAIH,EAAE,KAAK,EAAE,EACbC,EAAEE,CAAC,GAAK,KAAK,EAAE,GAAG,EAAE4E,EAAG9E,EAAED,EAAE,EAAE,KAAK,EAAE,CAAC,EAE/BC,EAAEE,CAAC,GAAKF,EAAE,IAAMA,EAAEE,CAAC,GAAKF,EAAE,GAAIA,EAAE,EAAEE,CAAC,GAC1C,CACDF,EAAE,MAAK,EACPA,EAAE,UAAU,KAAK,EAAE,EAAEA,CAAC,EACnBA,EAAE,UAAU,KAAK,CAAC,GAAK,GAAGA,EAAE,MAAM,KAAK,EAAEA,CAAC,CAC9C,CAGD,SAAS+E,GAAU/E,EAAEsB,EAAG,CAAEtB,EAAE,SAASsB,CAAC,EAAG,KAAK,OAAOA,CAAC,CAAI,CAG1D,SAAS0D,GAAUhF,EAAEkD,EAAE,EAAG,CAAElD,EAAE,WAAWkD,EAAE,CAAC,EAAG,KAAK,OAAO,CAAC,CAAI,CAEhEwB,EAAW,UAAU,QAAUC,GAC/BD,EAAW,UAAU,OAASE,GAC9BF,EAAW,UAAU,OAASG,GAC9BH,EAAW,UAAU,MAAQM,GAC7BN,EAAW,UAAU,MAAQK,GAG7B,SAASE,IAAY,CAAE,OAAS,KAAK,EAAE,EAAI,KAAK,CAAC,EAAE,EAAG,KAAK,IAAM,CAAI,CAGrE,SAASC,GAAOlB,EAAEmB,EAAG,CACnB,GAAGnB,EAAI,YAAcA,EAAI,EAAG,OAAOvE,EAAW,IAC9C,IAAI,EAAII,EAAK,EAAEuF,EAAKvF,EAAG,EAAIwF,EAAIF,EAAE,QAAQ,IAAI,EAAGpF,EAAIsC,GAAM2B,CAAC,EAAE,EAE7D,IADAqB,EAAE,OAAO,CAAC,EACJ,EAAEtF,GAAK,GAEX,GADAoF,EAAE,MAAM,EAAEC,CAAE,GACRpB,EAAG,GAAGjE,GAAM,EAAGoF,EAAE,MAAMC,EAAGC,EAAE,CAAC,MAC5B,CAAE,IAAI/C,EAAI,EAAG,EAAI8C,EAAIA,EAAK9C,CAAI,CAErC,OAAO6C,EAAE,OAAO,CAAC,CAClB,CAGD,SAASG,GAAYtB,EAAEtD,EAAG,CACxB,IAAIyE,EACJ,OAAGnB,EAAI,KAAOtD,EAAE,OAAM,EAAIyE,EAAI,IAAIhB,EAAQzD,CAAC,EAAQyE,EAAI,IAAIT,EAAWhE,CAAC,EAChE,KAAK,IAAIsD,EAAEmB,CAAC,CACpB,CAGD1F,EAAW,UAAU,OAAS4B,EAC9B5B,EAAW,UAAU,QAAU8B,GAC/B9B,EAAW,UAAU,WAAagC,GAClChC,EAAW,UAAU,MAAQoC,GAC7BpC,EAAW,UAAU,UAAY+C,GACjC/C,EAAW,UAAU,UAAYgD,GACjChD,EAAW,UAAU,SAAWiD,GAChCjD,EAAW,UAAU,SAAWsD,GAChCtD,EAAW,UAAU,MAAQuD,GAC7BvD,EAAW,UAAU,WAAawD,GAClCxD,EAAW,UAAU,SAAW0D,GAChC1D,EAAW,UAAU,SAAW2D,GAChC3D,EAAW,UAAU,SAAWgF,GAChChF,EAAW,UAAU,OAASwF,GAC9BxF,EAAW,UAAU,IAAMyF,GAG3BzF,EAAW,UAAU,SAAWqC,GAChCrC,EAAW,UAAU,OAASyC,GAC9BzC,EAAW,UAAU,IAAM0C,GAC3B1C,EAAW,UAAU,UAAY2C,GACjC3C,EAAW,UAAU,UAAY8C,GACjC9C,EAAW,UAAU,IAAMyE,GAC3BzE,EAAW,UAAU,UAAY6F,GAGjC7F,EAAW,KAAO+B,EAAI,CAAC,EACvB/B,EAAW,IAAM+B,EAAI,CAAC,EAYtB,SAAS+D,IAAU,CAAE,IAAIjE,EAAIzB,EAAG,EAAI,YAAK,OAAOyB,CAAC,EAAUA,CAAI,CAG/D,SAASkE,IAAa,CACpB,GAAG,KAAK,EAAI,EAAG,CACb,GAAG,KAAK,GAAK,EAAG,OAAO,KAAK,CAAC,EAAE,KAAK,GAC/B,GAAG,KAAK,GAAK,EAAG,MAAO,EAC7B,KACI,IAAG,KAAK,GAAK,EAAG,OAAO,KAAK,CAAC,EAC7B,GAAG,KAAK,GAAK,EAAG,MAAO,GAE5B,OAAS,KAAK,CAAC,GAAI,GAAI,GAAG,KAAK,IAAK,IAAK,KAAK,GAAI,KAAK,CAAC,CACzD,CAGD,SAASC,IAAc,CAAE,OAAQ,KAAK,GAAG,EAAG,KAAK,EAAG,KAAK,CAAC,GAAG,IAAK,EAAK,CAGvE,SAASC,IAAe,CAAE,OAAQ,KAAK,GAAG,EAAG,KAAK,EAAG,KAAK,CAAC,GAAG,IAAK,EAAK,CAGxE,SAASC,GAAarE,EAAG,CAAE,OAAO,KAAK,MAAM,KAAK,IAAI,KAAK,GAAG,KAAK,IAAIA,CAAC,CAAC,CAAI,CAG7E,SAASsE,IAAW,CAClB,OAAG,KAAK,EAAI,EAAU,GACd,KAAK,GAAK,GAAM,KAAK,GAAK,GAAK,KAAK,CAAC,GAAK,EAAW,EACjD,CACb,CAGD,SAASC,GAAWlG,EAAG,CAErB,GADGA,GAAK,OAAMA,EAAI,IACf,KAAK,OAAQ,GAAI,GAAKA,EAAI,GAAKA,EAAI,GAAI,MAAO,IACjD,IAAImG,EAAK,KAAK,UAAUnG,CAAC,EACrBD,EAAI,KAAK,IAAIC,EAAEmG,CAAE,EACjB9D,EAAIR,EAAI9B,CAAC,EAAGwD,EAAIrD,EAAK,EAAEsF,EAAItF,IAAOyB,EAAI,GAE1C,IADA,KAAK,SAASU,EAAEkB,EAAEiC,CAAC,EACbjC,EAAE,OAAQ,EAAG,GACjB5B,GAAK5B,EAAEyF,EAAE,SAAU,GAAE,SAASxF,CAAC,EAAE,OAAO,CAAC,EAAI2B,EAC7C4B,EAAE,SAASlB,EAAEkB,EAAEiC,CAAC,EAElB,OAAOA,EAAE,SAAU,EAAC,SAASxF,CAAC,EAAI2B,CACnC,CAGD,SAASyE,GAAa3E,EAAEzB,EAAG,CACzB,KAAK,QAAQ,CAAC,EACXA,GAAK,OAAMA,EAAI,IAGlB,QAFImG,EAAK,KAAK,UAAUnG,CAAC,EACrBqC,EAAI,KAAK,IAAIrC,EAAEmG,CAAE,EAAGnE,EAAK,GAAOzB,EAAI,EAAGD,EAAI,EACvCF,EAAI,EAAGA,EAAIqB,EAAE,OAAQ,EAAErB,EAAG,CAChC,IAAIC,EAAImB,EAAMC,EAAErB,CAAC,EACjB,GAAGC,EAAI,EAAG,CACLoB,EAAE,OAAOrB,CAAC,GAAK,KAAO,KAAK,UAAY,IAAG4B,EAAK,IAClD,QACD,CACD1B,EAAIN,EAAEM,EAAED,EACL,EAAEE,GAAK4F,IACR,KAAK,UAAU9D,CAAC,EAChB,KAAK,WAAW/B,EAAE,CAAC,EACnBC,EAAI,EACJD,EAAI,EAEP,CACEC,EAAI,IACL,KAAK,UAAU,KAAK,IAAIP,EAAEO,CAAC,CAAC,EAC5B,KAAK,WAAWD,EAAE,CAAC,GAElB0B,GAAIlC,EAAW,KAAK,MAAM,KAAK,IAAI,CACvC,CAGD,SAASuG,GAActG,EAAEC,EAAEC,EAAG,CAC5B,GAAe,OAAOD,GAAnB,SAED,GAAGD,EAAI,EAAG,KAAK,QAAQ,CAAC,MAMtB,KAJA,KAAK,WAAWA,EAAEE,CAAC,EACf,KAAK,QAAQF,EAAE,CAAC,GAClB,KAAK,UAAUD,EAAW,IAAI,UAAUC,EAAE,CAAC,EAAEuG,GAAM,IAAI,EACtD,KAAK,UAAU,KAAK,WAAW,EAAE,CAAC,EAC/B,CAAC,KAAK,gBAAgBtG,CAAC,GAC3B,KAAK,WAAW,EAAE,CAAC,EAChB,KAAK,UAAS,EAAKD,GAAG,KAAK,MAAMD,EAAW,IAAI,UAAUC,EAAE,CAAC,EAAE,IAAI,MAIvE,CAEH,IAAIM,EAAI,IAAI,MAASsC,EAAI5C,EAAE,EAC3BM,EAAE,QAAUN,GAAG,GAAG,EAClBC,EAAE,UAAUK,CAAC,EACVsC,EAAI,EAAGtC,EAAE,CAAC,IAAO,GAAGsC,GAAG,EAAStC,EAAE,CAAC,EAAI,EAC1C,KAAK,WAAWA,EAAE,GAAG,CACtB,CACF,CAGD,SAASkG,IAAgB,CACvB,IAAInG,EAAI,KAAK,EAAGuB,EAAI,IAAI,MACxBA,EAAE,CAAC,EAAI,KAAK,EACZ,IAAIW,EAAI,KAAK,GAAIlC,EAAE,KAAK,GAAI,EAAGiC,EAAGN,EAAI,EACtC,GAAG3B,KAAM,EAGP,IAFGkC,EAAI,KAAK,KAAOD,EAAI,KAAKjC,CAAC,GAAGkC,KAAO,KAAK,EAAE,KAAK,KAAKA,IACtDX,EAAEI,GAAG,EAAIM,EAAG,KAAK,GAAI,KAAK,GAAGC,GACzBlC,GAAK,GACNkC,EAAI,GACLD,GAAK,KAAKjC,CAAC,GAAI,GAAGkC,GAAG,IAAM,EAAEA,EAC7BD,GAAK,KAAK,EAAEjC,CAAC,IAAIkC,GAAG,KAAK,GAAG,KAG5BD,EAAK,KAAKjC,CAAC,IAAIkC,GAAG,GAAI,IACnBA,GAAK,IAAKA,GAAK,KAAK,GAAI,EAAElC,IAE3BiC,EAAE,MAAYA,GAAK,MACpBN,GAAK,IAAM,KAAK,EAAE,OAAUM,EAAE,MAAO,EAAEN,GACvCA,EAAI,GAAKM,GAAK,KAAK,KAAGV,EAAEI,GAAG,EAAIM,GAGtC,OAAOV,CACR,CAED,SAAS6E,GAASzG,EAAG,CAAE,OAAO,KAAK,UAAUA,CAAC,GAAG,CAAK,CACtD,SAAS0G,GAAM1G,EAAG,CAAE,OAAO,KAAK,UAAUA,CAAC,EAAE,EAAG,KAAKA,CAAI,CACzD,SAAS2G,GAAM3G,EAAG,CAAE,OAAO,KAAK,UAAUA,CAAC,EAAE,EAAG,KAAKA,CAAI,CAGzD,SAAS4G,GAAa5G,EAAE6G,EAAG,EAAG,CAC5B,IAAI,EAAGC,EAAG9F,EAAI,KAAK,IAAIhB,EAAE,EAAE,KAAK,CAAC,EACjC,IAAI,EAAI,EAAG,EAAIgB,EAAG,EAAE,EAAG,EAAE,CAAC,EAAI6F,EAAG,KAAK,CAAC,EAAE7G,EAAE,CAAC,CAAC,EAC7C,GAAGA,EAAE,EAAI,KAAK,EAAG,CAEf,IADA8G,EAAI9G,EAAE,EAAE,KAAK,GACT,EAAIgB,EAAG,EAAI,KAAK,EAAG,EAAE,EAAG,EAAE,CAAC,EAAI6F,EAAG,KAAK,CAAC,EAAEC,CAAC,EAC/C,EAAE,EAAI,KAAK,CACZ,KACI,CAEH,IADAA,EAAI,KAAK,EAAE,KAAK,GACZ,EAAI9F,EAAG,EAAIhB,EAAE,EAAG,EAAE,EAAG,EAAE,CAAC,EAAI6G,EAAGC,EAAE9G,EAAE,CAAC,CAAC,EACzC,EAAE,EAAIA,EAAE,CACT,CACD,EAAE,EAAI6G,EAAG,KAAK,EAAE7G,EAAE,CAAC,EACnB,EAAE,MAAK,CACR,CAGD,SAAS+G,GAAOzG,EAAEkD,EAAG,CAAE,OAAOlD,EAAEkD,CAAI,CACpC,SAASwD,GAAMhH,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,UAAUH,EAAE+G,GAAOnF,CAAC,EAAUA,CAAI,CAG1E,SAAS2E,GAAMjG,EAAEkD,EAAG,CAAE,OAAOlD,EAAEkD,CAAI,CACnC,SAASyD,GAAKjH,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,UAAUH,EAAEuG,GAAM3E,CAAC,EAAUA,CAAI,CAGxE,SAASsF,GAAO5G,EAAEkD,EAAG,CAAE,OAAOlD,EAAEkD,CAAI,CACpC,SAAS2D,GAAMnH,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,UAAUH,EAAEkH,GAAOtF,CAAC,EAAUA,CAAI,CAG1E,SAASwF,GAAU9G,EAAEkD,EAAG,CAAE,OAAOlD,EAAE,CAACkD,CAAI,CACxC,SAAS6D,GAASrH,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,UAAUH,EAAEoH,GAAUxF,CAAC,EAAUA,CAAI,CAGhF,SAAS0F,IAAQ,CAEf,QADI1F,EAAIzB,IACAE,EAAI,EAAGA,EAAI,KAAK,EAAG,EAAEA,EAAGuB,EAAEvB,CAAC,EAAI,KAAK,GAAG,CAAC,KAAKA,CAAC,EACtD,OAAAuB,EAAE,EAAI,KAAK,EACXA,EAAE,EAAI,CAAC,KAAK,EACLA,CACR,CAGD,SAAS2F,GAAY9G,EAAG,CACtB,IAAImB,EAAIzB,IACR,OAAGM,EAAI,EAAG,KAAK,SAAS,CAACA,EAAEmB,CAAC,EAAQ,KAAK,SAASnB,EAAEmB,CAAC,EAC9CA,CACR,CAGD,SAAS4F,GAAa/G,EAAG,CACvB,IAAImB,EAAIzB,IACR,OAAGM,EAAI,EAAG,KAAK,SAAS,CAACA,EAAEmB,CAAC,EAAQ,KAAK,SAASnB,EAAEmB,CAAC,EAC9CA,CACR,CAGD,SAAS6F,GAAKnH,EAAG,CACf,GAAGA,GAAK,EAAG,MAAO,GAClB,IAAIsB,EAAI,EACR,OAAItB,EAAE,QAAgBA,IAAM,GAAIsB,GAAK,IACjCtB,EAAE,MAAcA,IAAM,EAAGsB,GAAK,GAC9BtB,EAAE,KAAaA,IAAM,EAAGsB,GAAK,GAC7BtB,EAAE,IAAWA,IAAM,EAAGsB,GAAK,GAC3BtB,EAAE,GAAS,EAAEsB,EACVA,CACR,CAGD,SAAS8F,IAAoB,CAC3B,QAAQrH,EAAI,EAAGA,EAAI,KAAK,EAAG,EAAEA,EAC3B,GAAG,KAAKA,CAAC,GAAK,EAAG,OAAOA,EAAE,KAAK,GAAGoH,GAAK,KAAKpH,CAAC,CAAC,EAChD,OAAG,KAAK,EAAI,EAAU,KAAK,EAAE,KAAK,GAC3B,EACR,CAGD,SAASsH,GAAKrH,EAAG,CAEf,QADIsB,EAAI,EACFtB,GAAK,GAAKA,GAAKA,EAAE,EAAG,EAAEsB,EAC5B,OAAOA,CACR,CAGD,SAASgG,IAAa,CAEpB,QADIhG,EAAI,EAAGtB,EAAI,KAAK,EAAE,KAAK,GACnBD,EAAI,EAAGA,EAAI,KAAK,EAAG,EAAEA,EAAGuB,GAAK+F,GAAK,KAAKtH,CAAC,EAAEC,CAAC,EACnD,OAAOsB,CACR,CAGD,SAASiG,GAAUpH,EAAG,CACpB,IAAID,EAAI,KAAK,MAAMC,EAAE,KAAK,EAAE,EAC5B,OAAGD,GAAK,KAAK,EAAU,KAAK,GAAG,GACvB,KAAKA,CAAC,EAAG,GAAIC,EAAE,KAAK,KAAO,CACpC,CAGD,SAASqH,GAAarH,EAAEoG,EAAI,CAC1B,IAAI,EAAI9G,EAAW,IAAI,UAAUU,CAAC,EAClC,YAAK,UAAU,EAAEoG,EAAG,CAAC,EACd,CACR,CAGD,SAASkB,GAAStH,EAAG,CAAE,OAAO,KAAK,UAAUA,EAAE8F,EAAK,CAAI,CAGxD,SAASyB,GAAWvH,EAAG,CAAE,OAAO,KAAK,UAAUA,EAAE2G,EAAS,CAAI,CAG9D,SAASa,GAAUxH,EAAG,CAAE,OAAO,KAAK,UAAUA,EAAEyG,EAAM,CAAI,CAG1D,SAASgB,GAASlI,EAAE4B,EAAG,CAErB,QADIvB,EAAI,EAAGH,EAAI,EAAGc,EAAI,KAAK,IAAIhB,EAAE,EAAE,KAAK,CAAC,EACnCK,EAAIW,GACRd,GAAK,KAAKG,CAAC,EAAEL,EAAEK,CAAC,EAChBuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEb,GAAGF,EAAE,EAAI,KAAK,EAAG,CAEf,IADAE,GAAKF,EAAE,EACDK,EAAI,KAAK,GACbH,GAAK,KAAKG,CAAC,EACXuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEbA,GAAK,KAAK,CACX,KACI,CAEH,IADAA,GAAK,KAAK,EACJG,EAAIL,EAAE,GACVE,GAAKF,EAAEK,CAAC,EACRuB,EAAEvB,GAAG,EAAIH,EAAE,KAAK,GAChBA,IAAM,KAAK,GAEbA,GAAKF,EAAE,CACR,CACD4B,EAAE,EAAK1B,EAAE,EAAG,GAAG,EACZA,EAAI,EAAG0B,EAAEvB,GAAG,EAAIH,EACXA,EAAI,KAAI0B,EAAEvB,GAAG,EAAI,KAAK,GAAGH,GACjC0B,EAAE,EAAIvB,EACNuB,EAAE,MAAK,CACR,CAGD,SAASuG,GAAMnI,EAAG,CAAE,IAAI4B,EAAIzB,EAAG,EAAI,YAAK,MAAMH,EAAE4B,CAAC,EAAUA,CAAI,CAG/D,SAASwG,GAAWpI,EAAG,CAAE,IAAI4B,EAAIzB,EAAG,EAAI,YAAK,MAAMH,EAAE4B,CAAC,EAAUA,CAAI,CAGpE,SAASyG,GAAWrI,EAAG,CAAE,IAAI4B,EAAIzB,EAAG,EAAI,YAAK,WAAWH,EAAE4B,CAAC,EAAUA,CAAI,CAGzE,SAAS0G,IAAW,CAAE,IAAI1G,EAAIzB,EAAG,EAAI,YAAK,SAASyB,CAAC,EAAUA,CAAI,CAGlE,SAAS2G,GAASvI,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,SAASH,EAAE4B,EAAE,IAAI,EAAUA,CAAI,CAG1E,SAAS4G,GAAYxI,EAAG,CAAE,IAAI4B,EAAIzB,EAAK,EAAE,YAAK,SAASH,EAAE,KAAK4B,CAAC,EAAUA,CAAI,CAG7E,SAAS6G,GAAqBzI,EAAG,CAC/B,IAAI2D,EAAIxD,EAAG,EAAI,EAAIA,EAAG,EACtB,YAAK,SAASH,EAAE2D,EAAE,CAAC,EACZ,IAAI,MAAMA,EAAE,CAAC,CACrB,CAGD,SAAS+E,GAAajI,EAAG,CACvB,KAAK,KAAK,CAAC,EAAI,KAAK,GAAG,EAAEA,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,EAC5C,EAAE,KAAK,EACP,KAAK,MAAK,CACX,CAGD,SAASkI,GAAclI,EAAEF,EAAG,CAC1B,GAAGE,GAAK,EACR,MAAM,KAAK,GAAKF,GAAG,KAAK,KAAK,GAAG,EAAI,EAEpC,IADA,KAAKA,CAAC,GAAKE,EACL,KAAKF,CAAC,GAAK,KAAK,IACpB,KAAKA,CAAC,GAAK,KAAK,GACb,EAAEA,GAAK,KAAK,IAAG,KAAK,KAAK,GAAG,EAAI,GACnC,EAAE,KAAKA,CAAC,EAEX,CAGD,SAASqI,IAAU,CAAE,CACrB,SAASC,GAAKvI,EAAG,CAAE,OAAOA,CAAI,CAC9B,SAASwI,GAAOxI,EAAEkD,EAAE,EAAG,CAAElD,EAAE,WAAWkD,EAAE,CAAC,CAAI,CAC7C,SAASuF,GAAOzI,EAAEsB,EAAG,CAAEtB,EAAE,SAASsB,CAAC,CAAI,CAEvCgH,GAAQ,UAAU,QAAUC,GAC5BD,GAAQ,UAAU,OAASC,GAC3BD,GAAQ,UAAU,MAAQE,GAC1BF,GAAQ,UAAU,MAAQG,GAG1B,SAASC,GAAM1E,EAAG,CAAE,OAAO,KAAK,IAAIA,EAAE,IAAIsE,EAAS,CAAI,CAIvD,SAASK,GAAmBjJ,EAAES,EAAE,EAAG,CACjC,IAAI,EAAI,KAAK,IAAI,KAAK,EAAET,EAAE,EAAES,CAAC,EAG7B,IAFA,EAAE,EAAI,EACN,EAAE,EAAI,EACA,EAAI,GAAG,EAAE,EAAE,CAAC,EAAI,EACtB,IAAID,EACJ,IAAIA,EAAI,EAAE,EAAE,KAAK,EAAG,EAAIA,EAAG,EAAE,EAAG,EAAE,EAAE,KAAK,CAAC,EAAI,KAAK,GAAG,EAAER,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EACzE,IAAIQ,EAAI,KAAK,IAAIR,EAAE,EAAES,CAAC,EAAG,EAAID,EAAG,EAAE,EAAG,KAAK,GAAG,EAAER,EAAE,CAAC,EAAE,EAAE,EAAE,EAAES,EAAE,CAAC,EAC7D,EAAE,MAAK,CACR,CAID,SAASyI,GAAmBlJ,EAAES,EAAE,EAAG,CACjC,EAAEA,EACF,IAAI,EAAI,EAAE,EAAI,KAAK,EAAET,EAAE,EAAES,EAEzB,IADA,EAAE,EAAI,EACA,EAAE,GAAK,GAAG,EAAE,CAAC,EAAI,EACvB,IAAI,EAAI,KAAK,IAAIA,EAAE,KAAK,EAAE,CAAC,EAAG,EAAIT,EAAE,EAAG,EAAE,EACvC,EAAE,KAAK,EAAE,EAAES,CAAC,EAAI,KAAK,GAAGA,EAAE,EAAET,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAES,CAAC,EACnD,EAAE,MAAK,EACP,EAAE,UAAU,EAAE,CAAC,CAChB,CAGD,SAAS0I,EAAQnI,EAAG,CAElB,KAAK,GAAKb,IACV,KAAK,GAAKA,IACVJ,EAAW,IAAI,UAAU,EAAEiB,EAAE,EAAE,KAAK,EAAE,EACtC,KAAK,GAAK,KAAK,GAAG,OAAOA,CAAC,EAC1B,KAAK,EAAIA,CACV,CAED,SAASoI,GAAe9I,EAAG,CACzB,GAAGA,EAAE,EAAI,GAAKA,EAAE,EAAI,EAAE,KAAK,EAAE,EAAG,OAAOA,EAAE,IAAI,KAAK,CAAC,EAC9C,GAAGA,EAAE,UAAU,KAAK,CAAC,EAAI,EAAG,OAAOA,EACjC,IAAIsB,EAAIzB,EAAK,EAAE,OAAAG,EAAE,OAAOsB,CAAC,EAAG,KAAK,OAAOA,CAAC,EAAUA,CAC3D,CAED,SAASyH,GAAc/I,EAAG,CAAE,OAAOA,CAAI,CAGvC,SAASgJ,GAAchJ,EAAG,CAKxB,IAJAA,EAAE,UAAU,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAC3BA,EAAE,EAAI,KAAK,EAAE,EAAE,IAAKA,EAAE,EAAI,KAAK,EAAE,EAAE,EAAGA,EAAE,MAAK,GAChD,KAAK,GAAG,gBAAgB,KAAK,GAAG,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAClD,KAAK,EAAE,gBAAgB,KAAK,GAAG,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAC3CA,EAAE,UAAU,KAAK,EAAE,EAAI,GAAGA,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC,EAEzD,IADAA,EAAE,MAAM,KAAK,GAAGA,CAAC,EACXA,EAAE,UAAU,KAAK,CAAC,GAAK,GAAGA,EAAE,MAAM,KAAK,EAAEA,CAAC,CACjD,CAGD,SAASiJ,GAAajJ,EAAEsB,EAAG,CAAEtB,EAAE,SAASsB,CAAC,EAAG,KAAK,OAAOA,CAAC,CAAI,CAG7D,SAAS4H,GAAalJ,EAAEkD,EAAE,EAAG,CAAElD,EAAE,WAAWkD,EAAE,CAAC,EAAG,KAAK,OAAO,CAAC,CAAI,CAEnE2F,EAAQ,UAAU,QAAUC,GAC5BD,EAAQ,UAAU,OAASE,GAC3BF,EAAQ,UAAU,OAASG,GAC3BH,EAAQ,UAAU,MAAQK,GAC1BL,EAAQ,UAAU,MAAQI,GAG1B,SAASE,GAASnF,EAAEtD,EAAG,CACrB,IAAIX,EAAIiE,EAAE,YAAatC,EAAGJ,EAAIE,EAAI,CAAC,EAAG2D,EACtC,GAAGpF,GAAK,EAAG,OAAOuB,EACVvB,EAAI,GAAI2B,EAAI,EACZ3B,EAAI,GAAI2B,EAAI,EACZ3B,EAAI,IAAK2B,EAAI,EACb3B,EAAI,IAAK2B,EAAI,EAChBA,EAAI,EACN3B,EAAI,EACLoF,EAAI,IAAIhB,EAAQzD,CAAC,EACXA,EAAE,OAAQ,EAChByE,EAAI,IAAI0D,EAAQnI,CAAC,EAEjByE,EAAI,IAAIT,EAAWhE,CAAC,EAGtB,IAAI2E,EAAI,IAAI,MAASlF,EAAI,EAAGiJ,EAAK1H,EAAE,EAAGK,GAAM,GAAGL,GAAG,EAElD,GADA2D,EAAE,CAAC,EAAIF,EAAE,QAAQ,IAAI,EAClBzD,EAAI,EAAG,CACR,IAAI2H,EAAKxJ,IAET,IADAsF,EAAE,MAAME,EAAE,CAAC,EAAEgE,CAAE,EACTlJ,GAAK4B,GACTsD,EAAElF,CAAC,EAAIN,IACPsF,EAAE,MAAMkE,EAAGhE,EAAElF,EAAE,CAAC,EAAEkF,EAAElF,CAAC,CAAC,EACtBA,GAAK,CAER,CAED,IAAID,EAAI8D,EAAE,EAAE,EAAG/D,EAAGqJ,GAAM,GAAMlE,EAAKvF,EAAG,EAAIyC,EAE1C,IADAvC,EAAIsC,GAAM2B,EAAE9D,CAAC,CAAC,EAAE,EACVA,GAAK,GAAG,CAQZ,IAPGH,GAAKqJ,EAAInJ,EAAK+D,EAAE9D,CAAC,GAAIH,EAAEqJ,EAAKrH,GAE7B9B,GAAK+D,EAAE9D,CAAC,GAAI,GAAIH,EAAE,GAAI,IAAMqJ,EAAGrJ,EAC5BG,EAAI,IAAGD,GAAK+D,EAAE9D,EAAE,CAAC,GAAI,KAAK,GAAGH,EAAEqJ,IAGpCjJ,EAAIuB,EACG,EAAAzB,EAAE,IAAWA,IAAM,EAAG,EAAEE,EAE/B,IADIJ,GAAKI,GAAK,IAAKJ,GAAK,KAAK,GAAI,EAAEG,GAChCoJ,GACDjE,EAAEpF,CAAC,EAAE,OAAOqB,CAAC,EACbgI,GAAM,OAEH,CACH,KAAMnJ,EAAI,GAAKgF,EAAE,MAAM7D,EAAE8D,CAAE,EAAGD,EAAE,MAAMC,EAAG9D,CAAC,EAAGnB,GAAK,EAC/CA,EAAI,EAAGgF,EAAE,MAAM7D,EAAE8D,CAAE,GAAU9C,EAAIhB,EAAGA,EAAI8D,EAAIA,EAAK9C,GACpD6C,EAAE,MAAMC,EAAGC,EAAEpF,CAAC,EAAEqB,CAAC,CAClB,CAED,KAAMpB,GAAK,GAAM,EAAA8D,EAAE9D,CAAC,EAAG,GAAGH,IACxBoF,EAAE,MAAM7D,EAAE8D,CAAE,EAAG9C,EAAIhB,EAAGA,EAAI8D,EAAIA,EAAK9C,EAChC,EAAEvC,EAAI,IAAKA,EAAI,KAAK,GAAG,EAAG,EAAEG,EAElC,CACD,OAAOiF,EAAE,OAAO7D,CAAC,CAClB,CAGD,SAASiI,GAAM7J,EAAG,CAChB,IAAIM,EAAK,KAAK,EAAE,EAAG,KAAK,OAAQ,EAAC,KAAK,QAClCkD,EAAKxD,EAAE,EAAE,EAAGA,EAAE,OAAQ,EAACA,EAAE,QAC7B,GAAGM,EAAE,UAAUkD,CAAC,EAAI,EAAG,CAAE,IAAIZ,EAAItC,EAAGA,EAAIkD,EAAGA,EAAIZ,CAAI,CACnD,IAAIvC,EAAIC,EAAE,gBAAe,EAAIqF,EAAInC,EAAE,kBACnC,GAAGmC,EAAI,EAAG,OAAOrF,EAMjB,IALGD,EAAIsF,IAAGA,EAAItF,GACXsF,EAAI,IACLrF,EAAE,SAASqF,EAAErF,CAAC,EACdkD,EAAE,SAASmC,EAAEnC,CAAC,GAEVlD,EAAE,OAAQ,EAAG,IACbD,EAAIC,EAAE,gBAAiB,GAAI,GAAGA,EAAE,SAASD,EAAEC,CAAC,GAC5CD,EAAImD,EAAE,gBAAiB,GAAI,GAAGA,EAAE,SAASnD,EAAEmD,CAAC,EAC7ClD,EAAE,UAAUkD,CAAC,GAAK,GACnBlD,EAAE,MAAMkD,EAAElD,CAAC,EACXA,EAAE,SAAS,EAAEA,CAAC,IAGdkD,EAAE,MAAMlD,EAAEkD,CAAC,EACXA,EAAE,SAAS,EAAEA,CAAC,GAGlB,OAAGmC,EAAI,GAAGnC,EAAE,SAASmC,EAAEnC,CAAC,EACjBA,CACR,CAGD,SAASsG,GAAUrJ,EAAG,CACpB,GAAGA,GAAK,EAAG,MAAO,GAClB,IAAI6B,EAAI,KAAK,GAAG7B,EAAG,EAAK,KAAK,EAAE,EAAGA,EAAE,EAAE,EACtC,GAAG,KAAK,EAAI,EACV,GAAG6B,GAAK,EAAG,EAAI,KAAK,CAAC,EAAE7B,MAClB,SAAQ,EAAI,KAAK,EAAE,EAAG,GAAK,EAAG,EAAE,EAAG,GAAK6B,EAAE,EAAE,KAAK,CAAC,GAAG7B,EAC5D,OAAO,CACR,CAGD,SAASsJ,GAAa/I,EAAG,CACvB,IAAIgJ,EAAKhJ,EAAE,SACX,GAAI,KAAK,OAAQ,GAAIgJ,GAAOhJ,EAAE,OAAM,GAAM,EAAG,OAAOjB,EAAW,KAG/D,QAFIkK,EAAIjJ,EAAE,MAAK,EAAIN,EAAI,KAAK,QACxBV,EAAI8B,EAAI,CAAC,EAAG7B,EAAI6B,EAAI,CAAC,EAAG5B,EAAI4B,EAAI,CAAC,EAAGQ,EAAIR,EAAI,CAAC,EAC3CmI,EAAE,OAAQ,GAAI,GAAG,CACrB,KAAMA,EAAE,UACNA,EAAE,SAAS,EAAEA,CAAC,EACXD,IACE,CAAChK,EAAE,OAAQ,GAAI,CAACC,EAAE,OAAQ,KAAID,EAAE,MAAM,KAAKA,CAAC,EAAGC,EAAE,MAAMe,EAAEf,CAAC,GAC7DD,EAAE,SAAS,EAAEA,CAAC,GAEPC,EAAE,OAAQ,GAAEA,EAAE,MAAMe,EAAEf,CAAC,EAChCA,EAAE,SAAS,EAAEA,CAAC,EAEhB,KAAMS,EAAE,UACNA,EAAE,SAAS,EAAEA,CAAC,EACXsJ,IACE,CAAC9J,EAAE,OAAQ,GAAI,CAACoC,EAAE,OAAQ,KAAIpC,EAAE,MAAM,KAAKA,CAAC,EAAGoC,EAAE,MAAMtB,EAAEsB,CAAC,GAC7DpC,EAAE,SAAS,EAAEA,CAAC,GAEPoC,EAAE,OAAQ,GAAEA,EAAE,MAAMtB,EAAEsB,CAAC,EAChCA,EAAE,SAAS,EAAEA,CAAC,EAEb2H,EAAE,UAAUvJ,CAAC,GAAK,GACnBuJ,EAAE,MAAMvJ,EAAEuJ,CAAC,EACRD,GAAIhK,EAAE,MAAME,EAAEF,CAAC,EAClBC,EAAE,MAAMqC,EAAErC,CAAC,IAGXS,EAAE,MAAMuJ,EAAEvJ,CAAC,EACRsJ,GAAI9J,EAAE,MAAMF,EAAEE,CAAC,EAClBoC,EAAE,MAAMrC,EAAEqC,CAAC,EAEd,CACD,GAAG5B,EAAE,UAAUX,EAAW,GAAG,GAAK,EAAG,OAAOA,EAAW,KACvD,GAAGuC,EAAE,UAAUtB,CAAC,GAAK,EAAG,OAAOsB,EAAE,SAAStB,CAAC,EAC3C,GAAGsB,EAAE,SAAW,EAAGA,EAAE,MAAMtB,EAAEsB,CAAC,MAAQ,QAAOA,EAC7C,OAAGA,EAAE,OAAQ,EAAG,EAAUA,EAAE,IAAItB,CAAC,EAAesB,CACjD,CAED,IAAI4H,EAAY,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,EAC/oBC,IAAS,GAAG,IAAID,EAAUA,EAAU,OAAO,CAAC,EAGhD,SAASE,GAAkB,EAAG,CAC5B,IAAI/J,EAAGC,EAAI,KAAK,IAAG,EACnB,GAAGA,EAAE,GAAK,GAAKA,EAAE,CAAC,GAAK4J,EAAUA,EAAU,OAAO,CAAC,EAAG,CACpD,IAAI7J,EAAI,EAAGA,EAAI6J,EAAU,OAAQ,EAAE7J,EACjC,GAAGC,EAAE,CAAC,GAAK4J,EAAU7J,CAAC,EAAG,MAAO,GAClC,MAAO,EACR,CACD,GAAGC,EAAE,SAAU,MAAO,GAEtB,IADAD,EAAI,EACEA,EAAI6J,EAAU,QAAQ,CAE1B,QADIlJ,EAAIkJ,EAAU7J,CAAC,EAAGG,EAAIH,EAAE,EACtBG,EAAI0J,EAAU,QAAUlJ,EAAImJ,IAAOnJ,GAAKkJ,EAAU1J,GAAG,EAE3D,IADAQ,EAAIV,EAAE,OAAOU,CAAC,EACRX,EAAIG,GAAG,GAAGQ,EAAEkJ,EAAU7J,GAAG,GAAK,EAAG,MAAO,EAC/C,CACD,OAAOC,EAAE,YAAY,CAAC,CACvB,CAGD,SAAS+J,GAAe,EAAG,CACzB,IAAIC,EAAK,KAAK,SAASvK,EAAW,GAAG,EACjCiC,EAAIsI,EAAG,kBACX,GAAGtI,GAAK,EAAG,MAAO,GAClB,IAAIJ,EAAI0I,EAAG,WAAWtI,CAAC,EACvB,EAAK,EAAE,GAAI,EACR,EAAIkI,EAAU,SAAQ,EAAIA,EAAU,QAEvC,QADIlK,EAAIG,IACAE,EAAI,EAAGA,EAAI,EAAG,EAAEA,EAAG,CAEzBL,EAAE,QAAQkK,EAAU,KAAK,MAAM,KAAK,SAASA,EAAU,MAAM,CAAC,CAAC,EAC/D,IAAI1G,EAAIxD,EAAE,OAAO4B,EAAE,IAAI,EACvB,GAAG4B,EAAE,UAAUzD,EAAW,GAAG,GAAK,GAAKyD,EAAE,UAAU8G,CAAE,GAAK,EAAG,CAE3D,QADI9J,EAAI,EACFA,IAAMwB,GAAKwB,EAAE,UAAU8G,CAAE,GAAK,GAElC,GADA9G,EAAIA,EAAE,UAAU,EAAE,IAAI,EACnBA,EAAE,UAAUzD,EAAW,GAAG,GAAK,EAAG,MAAO,GAE9C,GAAGyD,EAAE,UAAU8G,CAAE,GAAK,EAAG,MAAO,EACjC,CACF,CACD,MAAO,EACR,CAGDvK,EAAW,UAAU,UAAYkG,GACjClG,EAAW,UAAU,QAAUoG,GAC/BpG,EAAW,UAAU,UAAYsG,GACjCtG,EAAW,UAAU,WAAauG,GAClCvG,EAAW,UAAU,UAAY6G,GACjC7G,EAAW,UAAU,UAAY+H,GACjC/H,EAAW,UAAU,MAAQmI,GAC7BnI,EAAW,UAAU,UAAY2I,GACjC3I,EAAW,UAAU,WAAa4I,GAClC5I,EAAW,UAAU,gBAAkBkJ,GACvClJ,EAAW,UAAU,gBAAkBmJ,GACvCnJ,EAAW,UAAU,OAAS+J,GAC9B/J,EAAW,UAAU,YAAcsK,GAGnCtK,EAAW,UAAU,MAAQ8F,GAC7B9F,EAAW,UAAU,SAAW+F,GAChC/F,EAAW,UAAU,UAAYgG,GACjChG,EAAW,UAAU,WAAaiG,GAClCjG,EAAW,UAAU,OAASmG,GAC9BnG,EAAW,UAAU,YAAcyG,GACnCzG,EAAW,UAAU,OAAS0G,GAC9B1G,EAAW,UAAU,IAAM2G,GAC3B3G,EAAW,UAAU,IAAM4G,GAC3B5G,EAAW,UAAU,IAAMiH,GAC3BjH,EAAW,UAAU,GAAKkH,GAC1BlH,EAAW,UAAU,IAAMoH,GAC3BpH,EAAW,UAAU,OAASsH,GAC9BtH,EAAW,UAAU,IAAMuH,GAC3BvH,EAAW,UAAU,UAAYwH,GACjCxH,EAAW,UAAU,WAAayH,GAClCzH,EAAW,UAAU,gBAAkB2H,GACvC3H,EAAW,UAAU,SAAW6H,GAChC7H,EAAW,UAAU,QAAU8H,GAC/B9H,EAAW,UAAU,OAASgI,GAC9BhI,EAAW,UAAU,SAAWiI,GAChCjI,EAAW,UAAU,QAAUkI,GAC/BlI,EAAW,UAAU,IAAMoI,GAC3BpI,EAAW,UAAU,SAAWqI,GAChCrI,EAAW,UAAU,SAAWsI,GAChCtI,EAAW,UAAU,OAASwI,GAC9BxI,EAAW,UAAU,UAAYyI,GACjCzI,EAAW,UAAU,mBAAqB0I,GAC1C1I,EAAW,UAAU,OAAS0J,GAC9B1J,EAAW,UAAU,WAAagK,GAClChK,EAAW,UAAU,IAAMiJ,GAC3BjJ,EAAW,UAAU,IAAM8J,GAC3B9J,EAAW,UAAU,gBAAkBqK,GAGvCrK,EAAW,UAAU,OAASuI,GAG9BvI,EAAW,UAAU,QAAUoJ,EAiB/B,IAAIoB,GACAC,EACAC,EAGJ,SAASC,GAAapK,EAAG,CACvBkK,EAASC,GAAU,GAAKnK,EAAI,IAC5BkK,EAASC,GAAU,GAAMnK,GAAK,EAAK,IACnCkK,EAASC,GAAU,GAAMnK,GAAK,GAAM,IACpCkK,EAASC,GAAU,GAAMnK,GAAK,GAAM,IACjCmK,GAAYE,KAAWF,GAAYE,GACvC,CAGD,SAASC,IAAgB,CACvBF,GAAa,IAAI,OAAO,QAAS,CAAA,CAClC,CAGD,GAAGF,GAAY,KAAM,CACnBA,EAAW,IAAI,MACfC,EAAW,EACX,IAAI7H,EACJ,GAAG,OAAO,OAAW,KAAe,OAAO,QACzC,GAAI,OAAO,OAAO,gBAAiB,CAEjC,IAAIiI,GAAK,IAAI,WAAW,EAAE,EAE1B,IADA,OAAO,OAAO,gBAAgBA,EAAE,EAC5BjI,EAAI,EAAGA,EAAI,GAAI,EAAEA,EACnB4H,EAASC,GAAU,EAAII,GAAGjI,CAAC,CAC9B,SACO,UAAU,SAAW,YAAc,UAAU,WAAa,IAAK,CAErE,IAAI6C,GAAI,OAAO,OAAO,OAAO,EAAE,EAC/B,IAAI7C,EAAI,EAAGA,EAAI6C,GAAE,OAAQ,EAAE7C,EACzB4H,EAASC,GAAU,EAAIhF,GAAE,WAAW7C,CAAC,EAAI,GAC5C,EAEH,KAAM6H,EAAWE,IACf/H,EAAI,KAAK,MAAM,MAAQ,KAAK,OAAM,CAAE,EACpC4H,EAASC,GAAU,EAAI7H,IAAM,EAC7B4H,EAASC,GAAU,EAAI7H,EAAI,IAE7B6H,EAAW,EACXG,IAGD,CAED,SAASE,IAAe,CACtB,GAAGP,IAAa,KAAM,CAIpB,IAHAK,KACAL,GAAYQ,GAAa,EACzBR,GAAU,KAAKC,CAAQ,EACnBC,EAAW,EAAGA,EAAWD,EAAS,OAAQ,EAAEC,EAC9CD,EAASC,CAAQ,EAAI,EACvBA,EAAW,CAEZ,CAED,OAAOF,GAAU,MAClB,CAED,SAASS,GAAcC,EAAI,CACzB,IAAI5K,EACJ,IAAIA,EAAI,EAAGA,EAAI4K,EAAG,OAAQ,EAAE5K,EAAG4K,EAAG5K,CAAC,EAAIyK,GAAY,CACpD,CAED,SAASI,IAAe,CAAE,CAE1BA,GAAa,UAAU,UAAYF,GAInC,SAASG,IAAU,CACjB,KAAK,EAAI,EACT,KAAK,EAAI,EACT,KAAK,EAAI,IAAI,KACd,CAGD,SAASC,GAASC,EAAK,CACrB,IAAIhL,EAAGG,EAAGoC,EACV,IAAIvC,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACpB,KAAK,EAAEA,CAAC,EAAIA,EAEd,IADAG,EAAI,EACAH,EAAI,EAAGA,EAAI,IAAK,EAAEA,EACpBG,EAAKA,EAAI,KAAK,EAAEH,CAAC,EAAIgL,EAAIhL,EAAIgL,EAAI,MAAM,EAAK,IAC5CzI,EAAI,KAAK,EAAEvC,CAAC,EACZ,KAAK,EAAEA,CAAC,EAAI,KAAK,EAAEG,CAAC,EACpB,KAAK,EAAEA,CAAC,EAAIoC,EAEd,KAAK,EAAI,EACT,KAAK,EAAI,CACV,CAED,SAAS0I,IAAW,CAClB,IAAI,EACJ,YAAK,EAAK,KAAK,EAAI,EAAK,IACxB,KAAK,EAAK,KAAK,EAAI,KAAK,EAAE,KAAK,CAAC,EAAK,IACrC,EAAI,KAAK,EAAE,KAAK,CAAC,EACjB,KAAK,EAAE,KAAK,CAAC,EAAI,KAAK,EAAE,KAAK,CAAC,EAC9B,KAAK,EAAE,KAAK,CAAC,EAAI,EACV,KAAK,EAAG,EAAI,KAAK,EAAE,KAAK,CAAC,EAAK,GAAG,CACzC,CAEDH,GAAQ,UAAU,KAAOC,GACzBD,GAAQ,UAAU,KAAOG,GAGzB,SAASP,IAAgB,CACvB,OAAO,IAAII,EACZ,CAID,IAAIR,GAAY,IAGF7L,EAAiB,QAAA,CACvB,QAASiB,EACT,WAAYA,EACZ,aAAcmL,EAC1B,CAQA,GAAG,KAAKK,EAAI,+BC90CX,UAAW,CAGR,IAAIC,EAAK,CACL,WAAY,OACZ,SAAU,OACV,SAAU,OACV,cAAe,OACf,OAAQ,UACR,YAAa,eACb,KAAM,MACN,SAAU,OACV,KAAM,YACN,OAAQ,WACR,YAAa,2FACb,IAAK,sBACL,WAAY,wBACZ,aAAc,aACd,KAAM,OACT,EAED,SAASC,EAAQJ,EAAK,CAElB,OAAOK,EAAeC,EAAcN,CAAG,EAAG,SAAS,CACtD,CAED,SAASO,EAASC,EAAKC,EAAM,CACzB,OAAOL,EAAQ,MAAM,KAAM,CAACI,CAAG,EAAE,OAAOC,GAAQ,CAAA,CAAE,CAAC,CACtD,CAED,SAASJ,EAAeK,EAAYD,EAAM,CACtC,IAAIE,EAAS,EAAGC,EAAcF,EAAW,OAAQG,EAAKC,EAAS,GAAI9L,EAAG2B,EAAGoK,EAAIC,EAAKC,EAAeC,EAAYC,GAAaC,EAC1H,IAAKpM,EAAI,EAAGA,EAAI4L,EAAa5L,IACzB,GAAI,OAAO0L,EAAW1L,CAAC,GAAM,SACzB8L,GAAUJ,EAAW1L,CAAC,UAEjB,OAAO0L,EAAW1L,CAAC,GAAM,SAAU,CAExC,GADA+L,EAAKL,EAAW1L,CAAC,EACb+L,EAAG,KAEH,IADAF,EAAMJ,EAAKE,CAAM,EACZhK,EAAI,EAAGA,EAAIoK,EAAG,KAAK,OAAQpK,IAAK,CACjC,GAAIkK,GAAO,KACP,MAAM,IAAI,MAAMT,EAAQ,gEAAiEW,EAAG,KAAKpK,CAAC,EAAGoK,EAAG,KAAKpK,EAAE,CAAC,CAAC,CAAC,EAEtHkK,EAAMA,EAAIE,EAAG,KAAKpK,CAAC,CAAC,CACvB,MAEIoK,EAAG,SACRF,EAAMJ,EAAKM,EAAG,QAAQ,EAGtBF,EAAMJ,EAAKE,GAAQ,EAOvB,GAJIR,EAAG,SAAS,KAAKY,EAAG,IAAI,GAAKZ,EAAG,cAAc,KAAKY,EAAG,IAAI,GAAKF,aAAe,WAC9EA,EAAMA,EAAK,GAGXV,EAAG,YAAY,KAAKY,EAAG,IAAI,GAAM,OAAOF,GAAQ,UAAY,MAAMA,CAAG,EACrE,MAAM,IAAI,UAAUT,EAAQ,0CAA2CS,CAAG,CAAC,EAO/E,OAJIV,EAAG,OAAO,KAAKY,EAAG,IAAI,IACtBI,GAAcN,GAAO,GAGjBE,EAAG,KAAI,CACX,IAAK,IACDF,EAAM,SAASA,EAAK,EAAE,EAAE,SAAS,CAAC,EAClC,MACJ,IAAK,IACDA,EAAM,OAAO,aAAa,SAASA,EAAK,EAAE,CAAC,EAC3C,MACJ,IAAK,IACL,IAAK,IACDA,EAAM,SAASA,EAAK,EAAE,EACtB,MACJ,IAAK,IACDA,EAAM,KAAK,UAAUA,EAAK,KAAME,EAAG,MAAQ,SAASA,EAAG,KAAK,EAAI,CAAC,EACjE,MACJ,IAAK,IACDF,EAAME,EAAG,UAAY,WAAWF,CAAG,EAAE,cAAcE,EAAG,SAAS,EAAI,WAAWF,CAAG,EAAE,cAAe,EAClG,MACJ,IAAK,IACDA,EAAME,EAAG,UAAY,WAAWF,CAAG,EAAE,QAAQE,EAAG,SAAS,EAAI,WAAWF,CAAG,EAC3E,MACJ,IAAK,IACDA,EAAME,EAAG,UAAY,OAAO,OAAOF,EAAI,YAAYE,EAAG,SAAS,CAAC,CAAC,EAAI,WAAWF,CAAG,EACnF,MACJ,IAAK,IACDA,GAAO,SAASA,EAAK,EAAE,IAAM,GAAG,SAAS,CAAC,EAC1C,MACJ,IAAK,IACDA,EAAM,OAAOA,CAAG,EAChBA,EAAOE,EAAG,UAAYF,EAAI,UAAU,EAAGE,EAAG,SAAS,EAAIF,EACvD,MACJ,IAAK,IACDA,EAAM,OAAO,CAAC,CAACA,CAAG,EAClBA,EAAOE,EAAG,UAAYF,EAAI,UAAU,EAAGE,EAAG,SAAS,EAAIF,EACvD,MACJ,IAAK,IACDA,EAAM,OAAO,UAAU,SAAS,KAAKA,CAAG,EAAE,MAAM,EAAG,EAAE,EAAE,YAAa,EACpEA,EAAOE,EAAG,UAAYF,EAAI,UAAU,EAAGE,EAAG,SAAS,EAAIF,EACvD,MACJ,IAAK,IACDA,EAAM,SAASA,EAAK,EAAE,IAAM,EAC5B,MACJ,IAAK,IACDA,EAAMA,EAAI,QAAS,EACnBA,EAAOE,EAAG,UAAYF,EAAI,UAAU,EAAGE,EAAG,SAAS,EAAIF,EACvD,MACJ,IAAK,IACDA,GAAO,SAASA,EAAK,EAAE,IAAM,GAAG,SAAS,EAAE,EAC3C,MACJ,IAAK,IACDA,GAAO,SAASA,EAAK,EAAE,IAAM,GAAG,SAAS,EAAE,EAAE,YAAa,EAC1D,KACP,CACGV,EAAG,KAAK,KAAKY,EAAG,IAAI,EACpBD,GAAUD,GAGNV,EAAG,OAAO,KAAKY,EAAG,IAAI,IAAM,CAACI,IAAeJ,EAAG,OAC/CK,EAAOD,GAAc,IAAM,IAC3BN,EAAMA,EAAI,SAAU,EAAC,QAAQV,EAAG,KAAM,EAAE,GAGxCiB,EAAO,GAEXH,EAAgBF,EAAG,SAAWA,EAAG,WAAa,IAAM,IAAMA,EAAG,SAAS,OAAO,CAAC,EAAI,IAClFG,EAAaH,EAAG,OAASK,EAAOP,GAAK,OACrCG,EAAMD,EAAG,OAASG,EAAa,EAAID,EAAc,OAAOC,CAAU,EAAU,GAC5EJ,GAAUC,EAAG,MAAQK,EAAOP,EAAMG,EAAOC,IAAkB,IAAMG,EAAOJ,EAAMH,EAAMG,EAAMI,EAAOP,EAExG,CAEL,OAAOC,CACV,CAED,IAAIO,EAAgB,OAAO,OAAO,IAAI,EAEtC,SAASf,EAAcE,EAAK,CACxB,GAAIa,EAAcb,CAAG,EACjB,OAAOa,EAAcb,CAAG,EAI5B,QADIc,EAAOd,EAAKe,EAAOb,EAAa,CAAA,EAAIc,EAAY,EAC7CF,GAAM,CACT,IAAKC,EAAQpB,EAAG,KAAK,KAAKmB,CAAI,KAAO,KACjCZ,EAAW,KAAKa,EAAM,CAAC,CAAC,WAElBA,EAAQpB,EAAG,OAAO,KAAKmB,CAAI,KAAO,KACxCZ,EAAW,KAAK,GAAG,WAEba,EAAQpB,EAAG,YAAY,KAAKmB,CAAI,KAAO,KAAM,CACnD,GAAIC,EAAM,CAAC,EAAG,CACVC,GAAa,EACb,IAAIC,EAAa,CAAA,EAAIC,EAAoBH,EAAM,CAAC,EAAGI,EAAc,CAAE,EACnE,IAAKA,EAAcxB,EAAG,IAAI,KAAKuB,CAAiB,KAAO,KAEnD,IADAD,EAAW,KAAKE,EAAY,CAAC,CAAC,GACtBD,EAAoBA,EAAkB,UAAUC,EAAY,CAAC,EAAE,MAAM,KAAO,IAChF,IAAKA,EAAcxB,EAAG,WAAW,KAAKuB,CAAiB,KAAO,KAC1DD,EAAW,KAAKE,EAAY,CAAC,CAAC,WAExBA,EAAcxB,EAAG,aAAa,KAAKuB,CAAiB,KAAO,KACjED,EAAW,KAAKE,EAAY,CAAC,CAAC,MAG9B,OAAM,IAAI,YAAY,8CAA8C,MAK5E,OAAM,IAAI,YAAY,8CAA8C,EAExEJ,EAAM,CAAC,EAAIE,CACd,MAEGD,GAAa,EAEjB,GAAIA,IAAc,EACd,MAAM,IAAI,MAAM,2EAA2E,EAG/Fd,EAAW,KACP,CACI,YAAaa,EAAM,CAAC,EACpB,SAAaA,EAAM,CAAC,EACpB,KAAaA,EAAM,CAAC,EACpB,KAAaA,EAAM,CAAC,EACpB,SAAaA,EAAM,CAAC,EACpB,MAAaA,EAAM,CAAC,EACpB,MAAaA,EAAM,CAAC,EACpB,UAAaA,EAAM,CAAC,EACpB,KAAaA,EAAM,CAAC,CACvB,CACJ,CACJ,KAEG,OAAM,IAAI,YAAY,kCAAkC,EAE5DD,EAAOA,EAAK,UAAUC,EAAM,CAAC,EAAE,MAAM,CACxC,CACD,OAAOF,EAAcb,CAAG,EAAIE,CAC/B,CAOGkB,EAAQ,QAAaxB,EACrBwB,EAAQ,SAAcrB,EAEtB,OAAO,OAAW,MAClB,OAAO,QAAaH,EACpB,OAAO,SAAcG,EAY7B,UC3NO,MAAMsB,CAAS,CAClB,YAAYhO,EAAS,CACjB,KAAK,OAASiO,GACd,KAAK,cAAgB,GACrB,KAAK,aAAe,GACpB,KAAK,OAAS,MACd,KAAK,WAAa,GAClB,KAAK,GAAK,GAOV,KAAK,UAAYC,GAAiBC,CAAc,EAOhD,KAAK,WAAaC,GAClB,KAAK,QAAUpO,EACf,MAAMqO,EAASC,GAA2B,KAAKtO,CAAO,EACtD,GAAIqO,EAAQ,CAIR,GAHA,KAAK,aAAeA,EAAO,CAAC,EAAE,QAAQ,IAAK,EAAE,EAC7C,KAAK,WAAa,SAAS,KAAK,aAAc,EAAE,EAChD,KAAK,OAAS,IAAI,KAAK,aACnB,KAAK,WAAa,GAAK,KAAK,WAAaF,EACzC,MAAM,IAAI5N,EAAa,sBAAsB,EAEjDP,EAAUA,EAAQ,QAAQsO,GAA4B,EAAE,CAC3D,CACD,KAAK,mBAAqBtO,EAC1B,KAAK,cAAgB,KAAK,MAAMA,CAAO,CAC1C,CACD,OAAO,QAAQA,EAAS,CACpB,GAAI,CAEA,WAAIgO,EAAShO,CAAO,EACb,EACV,MACD,CACI,MAAO,EACV,CACJ,CAID,MAAMA,EAAS,CACX,MAAMuO,EAASvO,EAAQ,MAAM,GAAG,EAChC,GAAI,CAACA,EAAQ,MAAMwO,EAAoB,EACnC,MAAM,IAAIjO,EAAa,uBAAuB,EAElD,OAAOgO,CACV,CAOD,aAAc,CACV,OAAO,KAAK,cAAc,IAAKE,GAAS,SAASA,EAAM,EAAE,CAAC,EAAE,KAAK,GAAG,CACvE,CAQD,OAAO,QAAQC,EAAK,CAChB,MAAMC,EAASD,EAAI,QAAQ,KAAM,EAAE,EAAE,SAAS,EAAG,GAAG,EAC9CH,EAAS,CAAA,EACf,IAAIpN,EACJ,IAAKA,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CACvB,MAAMU,EAAI8M,EAAO,MAAMxN,EAAGA,EAAI,CAAC,EAC/BoN,EAAO,KAAK,SAAS1M,EAAG,EAAE,CAAC,CAC9B,CACD,OAAO,IAAImM,EAASO,EAAO,KAAK,GAAG,CAAC,CACvC,CAQD,OAAO,YAAYK,EAAS,CACxB,OAAOZ,EAAS,QAAQY,EAAQ,SAAS,EAAE,CAAC,CAC/C,CAWD,OAAO,SAASC,EAAiB,CAG7B,MAAM7O,EADS6O,EAAgB,QAAQ,wBAAyB,EAAE,EAC3C,MAAM,GAAG,EAAE,QAAS,EAAC,KAAK,GAAG,EACpD,OAAO,IAAIb,EAAShO,CAAO,CAC9B,CAOD,OAAQ,CACJ,OAAO,KAAK,cAAc,IAAKyO,GAASlC,EAAAA,QAAQ,OAAQ,SAASkC,EAAM,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CACxF,CAOD,SAAU,CACN,OAAO,KAAK,cAAc,IAAKA,GAAS,SAASA,EAAM,EAAE,CAAC,CAC7D,CAOD,UAAW,CACP,MAAMxB,EAAS,CAAA,EACf,IAAI9L,EACJ,IAAKA,EAAI,EAAGA,EAAI8M,GAAkB9M,GAAK,EAAG,CACtC,MAAMuN,EAAMnC,EAAAA,QAAQ,WAAY,SAAS,KAAK,cAAcpL,CAAC,EAAG,EAAE,EAAG,SAAS,KAAK,cAAcA,EAAI,CAAC,EAAG,EAAE,CAAC,EAC5G8L,EAAO,KAAKV,EAAAA,QAAQ,KAAM,SAASmC,EAAK,EAAE,CAAC,CAAC,CAC/C,CACD,OAAOzB,EAAO,KAAK,GAAG,CACzB,CAOD,YAAa,CACT,OAAO,IAAIpM,EAAU,WAAC,KAAK,cAAc,IAAKU,GAAMgL,UAAQ,OAAQ,SAAShL,EAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAG,EAAE,CACrG,CAOD,eAAgB,CACZ,OAAO,IAAIV,EAAU,WAAC,KAAK,KAAM,EAAG,IAAI,OAAOsN,EAAiB,KAAK,UAAU,EAAG,CAAC,CACtF,CAQD,cAAe,CACX,OAAOH,EAAS,eAAe,KAAK,cAAe,CAAA,CACtD,CAQD,uBAAwB,CACpB,MAAMc,EAAS,IAAIjO,aAAW,GAAG,EACjC,OAAOmN,EAAS,eAAe,KAAK,cAAa,EAAG,IAAIc,CAAM,CAAC,CAClE,CAOD,aAAc,CACV,OAAO,IAAIjO,EAAU,WAAC,KAAK,KAAM,EAAG,IAAI,OAAOsN,EAAiB,KAAK,UAAU,EAAG,CAAC,CACtF,CAQD,YAAa,CACT,OAAOH,EAAS,eAAe,KAAK,YAAa,CAAA,CACpD,CAQD,qBAAsB,CAClB,MAAMc,EAAS,IAAIjO,aAAW,GAAG,EACjC,OAAOmN,EAAS,eAAe,KAAK,YAAW,EAAG,SAASc,CAAM,CAAC,CACrE,CAQD,OAAO,eAAeC,EAAY,CAC9B,OAAOf,EAAS,YAAY,SAASe,EAAW,SAAU,EAAE,EAAE,CAAC,CAClE,CAQD,KAAKC,EAAM,CACP,OAAIA,IAAS,SACTA,EAAO,KAAK,YAET,KAAK,aAAa,EAAGA,CAAI,CACnC,CAOD,aAAaC,EAAOC,EAAK,CACrB,OAAO,KAAK,cAAe,EAAC,MAAMD,EAAOC,CAAG,CAC/C,CASD,YAAYC,EAAS,CACZA,IACDA,EAAU,CAAA,GAEd,MAAMC,EAAW,KAAK,YAAW,EAAG,MAAM,GAAG,EAAE,QAAS,EAAC,KAAK,GAAG,EACjE,OAAID,EAAQ,WACDC,EAEJ7C,EAAO,QAAC,mBAAoB6C,CAAQ,CAC9C,CAOD,aAAc,CACV,OAAO,KAAK,WAAW,IAAIpB,EAAS,aAAa,CAAC,CACrD,CAOD,eAAgB,CACZ,OAAO,KAAK,WAAU,EAAG,SAAS,CAAC,EAAE,SAASG,EAAgB,GAAG,CACpE,CAKD,YAAa,CACT,MAAMkB,EAAW,KAAK,cACtB,OAAO,KAAK,QAAQ,QAAQb,GAAsBjC,UAAQ,4GAA6G8C,EAAS,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,EAAGA,EAAS,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CACzO,CACL,CCzSO,MAAMlP,EAAO,IACPC,GAAS,EAMTkP,GAAS,CAClB,EAAG,WACH,EAAG,kBACH,EAAG,aACH,EAAG,cACH,EAAG,aACH,EAAG,qBACH,GAAI,SACJ,GAAI,UACR,EAMaC,GAAQ,CACjB,cAAe,0CACf,cAAe,4CACf,cAAe,qCACf,cAAe,uCACf,cAAe,uCACf,cAAe,oCACf,cAAe,mCACf,cAAe,0BACf,cAAe,4BACf,cAAe,0BACf,eAAgB,4BAChB,eAAgB,qBAChB,eAAgB,qBAChB,eAAgB,qBAChB,gBAAiB,6DACjB,gBAAiB,6DACjB,gBAAiB,4CACjB,gBAAiB,4CACjB,SAAU,cACV,UAAW,WACX,WAAY,YACZ,YAAa,oBACjB,EAMaC,GAAoB,mBAMpBC,GAAiB,2CAMjBnP,GAAmB,mBAMnBoP,GAAiB,OACjBC,GAAS,IAAI,OAAO,6BAA6B,EACjDC,GAAmB,IAAI,OAAO,+BAA+B,ECtD1E,SAASC,GAAwBC,EAAO,CACpC,OAAOA,EAAM,QAAQ,QAAS,8BAA8B,CAChE,CAYO,SAASC,GAAYC,EAAeC,EAAS,EAAG,CAEnD,OADeD,EAAc,MAAM,GAAG,EACxB,IAAI,CAACvJ,EAAGtF,IACd,WAAW,KAAKsF,CAAC,EACVA,EAEJ8F,EAAAA,QAAQ,+CAAgDpL,EAAI8O,EAAQJ,GAAwBpJ,CAAC,CAAC,CACxG,CACL,CCrCO,SAASyJ,GAAmBC,EAAe,CAC9C,OAAO5D,EAAAA,QAAQ,OAAQ4D,EAAc,KAAK,GAAG,CAAC,CAClD,CACO,SAASC,GAASN,EAAO,CAC5B,OAAIA,EAAM,OAAS,EACRvD,EAAAA,QAAQ,YAAa,EAAIuD,EAAM,OAAQA,CAAK,EAEhDA,CACX,CACO,MAAMO,GAAmB,gBACzB,SAASC,GAAwB/B,EAAQ,CAC5C,MAAMgC,EAAc,CAAA,EACpBhC,EAAO,QAAQ,CAACuB,EAAO3O,IAAM,CACJ,SAAS2O,EAAO,EAAE,IAClB,GACjBS,EAAY,KAAKpP,CAAC,CAE9B,CAAK,EAGD,MAAMgP,EAAgBI,EAAY,IAAKC,GAAcjC,EAChD,IAAI,CAACuB,EAAO3O,IAAM,CACnB,GAAIA,IAAMqP,EAAW,CACjB,MAAMC,EAAUtP,IAAM,GAAKA,IAAMuP,GAAY,EAAI,IAAM,GACvD,OAAOR,GAAmB,CAACE,GAASN,CAAK,EAAGW,CAAO,CAAC,CACvD,CACD,OAAOL,GAASN,CAAK,CAC7B,CAAK,EACI,KAAK,GAAG,CAAC,EAEd,OAAAK,EAAc,KAAK5B,EAAO,IAAI6B,EAAQ,EAAE,KAAK,GAAG,CAAC,EAC1CF,GAAmBC,CAAa,CAC3C,CACO,SAASQ,GAAiBC,EAAcC,EAAUC,EAAW,CAChE,MAAMC,EAAOF,EAAW,GAAK,IACvBG,EAAQF,EAAY,GAAK,IACzBX,EAAgB,CAAA,EAElB,CAACU,GAAY,CAACC,GACdX,EAAc,KAAK,IAAI,EAGvBU,GAAYC,GACZX,EAAc,KAAK,EAAE,GAEpBW,GAAa,CAACD,GAAc,CAACC,GAAaD,IAE3CV,EAAc,KAAK,GAAG,EAG1BA,EAAc,KAAK5D,UAAQ,oBAAqBwE,EAAMH,EAAe,CAAC,CAAC,EAEvET,EAAc,KAAK5D,UAAQ,oBAAqBqE,EAAe,EAAGI,CAAK,CAAC,EAExEb,EAAc,KAAK5D,EAAO,QAAC,sBAAuBqE,EAAe,CAAC,CAAC,EAEnE,QAASrC,EAAS,EAAGA,EAASqC,EAAe,EAAGrC,IAC5C,QAAS0C,EAAW,EAAGA,EAAWL,EAAerC,EAAQ0C,IACrDd,EAAc,KAAK5D,EAAO,QAAC,oCAAqC0E,EAAUL,EAAeK,EAAW1C,EAAS,CAAC,CAAC,EAGvH,OAAO2B,GAAmBC,CAAa,CAC3C,CCrDA,SAASe,GAAOC,EAAW,CACvB,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,mBAAmB,CAE3C,CACA,SAASC,GAAUC,EAAQ,CACvB,MAAM3O,EAAI,eACV,KAAOA,EAAE,KAAK2O,CAAM,GAChBA,EAASA,EAAO,QAAQ3O,EAAG,OAAO,EAEtC,OAAO2O,CACX,CACA,SAASC,GAAmB/P,EAAG,CAC3B,OAAAA,EAAIA,EAAE,QAAQ,oBAAqB,uCAAuC,EAC1EA,EAAIA,EAAE,QAAQ,eAAgB,uCAAuC,EAC9DA,CACX,CAIA,SAASgQ,GAAQvR,EAASwR,EAAO,CAC7B,MAAMC,EAAK,CAAA,EACLC,EAAK,CAAA,EACX,IAAIvQ,EACJ,IAAKA,EAAI,EAAGA,EAAInB,EAAQ,OAAQmB,IACxBA,EAAIqQ,EAAM,CAAC,EACXC,EAAG,KAAKzR,EAAQmB,CAAC,CAAC,EAEbA,EAAIqQ,EAAM,CAAC,GAChBE,EAAG,KAAK1R,EAAQmB,CAAC,CAAC,EAG1B,OAAOsQ,EAAG,OAAO,CAAC,SAAS,CAAC,EAAE,OAAOC,CAAE,CAC3C,CACA,SAASC,GAAUC,EAAO,CACtB,OAAOrF,EAAAA,QAAQ,OAAQ,SAASqF,EAAO,EAAE,CAAC,CAC9C,CACA,SAASC,GAAW9Q,EAAG,CAEnB,OAAOA,EAAI,GACf,CASO,MAAM+Q,CAAS,CAClB,YAAY9R,EAAS+R,EAAgB,CACjC,KAAK,mBAAqB,GAC1B,KAAK,aAAe,GACpB,KAAK,OAAS,OACd,KAAK,WAAa,IAClB,KAAK,GAAK,GACV,KAAK,KAAO,GAQZ,KAAK,WAAa3D,GAOlB,KAAK,UAAYF,GAAiB8D,CAAe,EAC7CD,IAAmB,OACnB,KAAK,OAASE,GAGd,KAAK,OAASF,EAElB,KAAK,QAAU/R,EACf,MAAMqO,EAAS6D,GAA4B,KAAKlS,CAAO,EACvD,GAAIqO,EAAQ,CAIR,GAHA,KAAK,aAAeA,EAAO,CAAC,EAAE,QAAQ,IAAK,EAAE,EAC7C,KAAK,WAAa,SAAS,KAAK,aAAc,EAAE,EAChD,KAAK,OAAS,IAAI,KAAK,aACnB,OAAO,MAAM,KAAK,UAAU,GAC5B,KAAK,WAAa,GAClB,KAAK,WAAa2D,EAClB,MAAM,IAAIzR,EAAa,sBAAsB,EAEjDP,EAAUA,EAAQ,QAAQkS,GAA6B,EAAE,CAC5D,SACQ,KAAK,KAAKlS,CAAO,EACtB,MAAM,IAAIO,EAAa,sBAAsB,EAEjD,MAAM4R,EAAOC,GAA0B,KAAKpS,CAAO,EAC/CmS,IACA,KAAK,KAAOA,EAAK,CAAC,EAClBnS,EAAUA,EAAQ,QAAQoS,GAA2B,EAAE,GAE3D,KAAK,mBAAqBpS,EAC1B,KAAK,cAAgB,KAAK,MAAM,KAAK,kBAAkB,CAC1D,CACD,OAAO,QAAQA,EAAS,CACpB,GAAI,CAEA,WAAI8R,EAAS9R,CAAO,EACb,EACV,MACD,CACI,MAAO,EACV,CACJ,CAYD,OAAO,eAAe+O,EAAY,CAC9B,MAAML,EAAMK,EAAW,SAAS,EAAE,EAAE,SAAS,GAAI,GAAG,EAC9CR,EAAS,CAAA,EACf,IAAIpN,EACJ,IAAKA,EAAI,EAAGA,EAAI8Q,GAAmB9Q,IAC/BoN,EAAO,KAAKG,EAAI,MAAMvN,EAAI,GAAIA,EAAI,GAAK,CAAC,CAAC,EAE7C,OAAO,IAAI2Q,EAASvD,EAAO,KAAK,GAAG,CAAC,CACvC,CAWD,OAAO,QAAQ8D,EAAK,CAChB,IAAIC,EACAC,EAAO,KACPC,EAEJ,GAAIH,EAAI,QAAQ,GAAG,IAAM,IAAMA,EAAI,QAAQ,IAAI,IAAM,GAAI,CAErD,GADAG,EAASC,GAA4B,KAAKJ,CAAG,EACzCG,IAAW,KACX,MAAO,CACH,MAAO,oCACP,QAAS,KACT,KAAM,IAC1B,EAEYF,EAAOE,EAAO,CAAC,EACfD,EAAOC,EAAO,CAAC,CAElB,SACQH,EAAI,QAAQ,GAAG,IAAM,GAAI,CAK9B,GAHAA,EAAMA,EAAI,QAAQ,kBAAmB,EAAE,EAEvCG,EAASE,GAAkB,KAAKL,CAAG,EAC/BG,IAAW,KACX,MAAO,CACH,MAAO,mCACP,QAAS,KACT,KAAM,IAC1B,EAEYF,EAAOE,EAAO,CAAC,CAElB,MAEGF,EAAOD,EAGX,OAAIE,GACAA,EAAO,SAASA,EAAM,EAAE,GAEpBA,EAAO,GAAKA,EAAO,SACnBA,EAAO,OAKXA,EAAO,KAEJ,CACH,QAAS,IAAIT,EAASQ,CAAI,EAC1B,KAAAC,CACZ,CACK,CAYD,OAAO,aAAavS,EAAS,CACzB,MAAM2S,EAAW,IAAI3E,EAAShO,CAAO,EAC/B4S,EAAQZ,GAAmBa,EAAkBF,EAAS,YAC5D,OAAO,IAAIb,EAAS,UAAUa,EAAS,YAAW,KAAMC,GAAO,CAClE,CAWD,OAAO,SAAS/D,EAAiB,CAE7B,IAAI7O,EAAU6O,EAAgB,QAAQ,oBAAqB,EAAE,EAC7D,MAAMiE,EAAkB,EAExB,GAAI9S,EAAQ,SAAW,GACnB,MAAM,IAAIO,EAAa,0BAA0B,EAErD,MAAMwS,EAAQ/S,EAAQ,MAAM,GAAG,EAAE,QAAO,EACxC,QAASmB,EAAI2R,EAAiB3R,EAAI,EAAGA,IAAK,CACtC,MAAM6R,EAAc7R,EAAI,EACxB4R,EAAM,OAAOC,EAAa,EAAG,GAAG,CACnC,CACD,OAAAhT,EAAU+S,EAAM,KAAK,EAAE,EAChB,IAAIjB,EAAS9R,CAAO,CAC9B,CAOD,wBAAyB,CACrB,OAAOuM,EAAO,QAAC,sBAAuB,KAAK,YAAa,EAAC,QAAQ,KAAM,GAAG,CAAC,CAC9E,CAQD,KAAKyC,EAAO,KAAK,WAAY,CACzB,OAAO,KAAK,aAAa,EAAGA,CAAI,CACnC,CASD,gBAAgBiE,EAAa,IAAK,CAC9B,MAAMC,EAAgBlB,EAAkB,KAAK,WACvCmB,EAAa,KAAK,IAAIF,EAAajB,CAAe,EAClDoB,EAAeF,EAAgBC,EACrC,OAAIC,EAAe,EACR,IAEJhC,GAAU,IAAIvQ,aAAW,IAAK,EAAE,EAAE,IAAIuS,CAAY,EAAE,SAAS,EAAE,CAAC,CAC1E,CAOD,eAAgB,CACZ,OAAO,IAAIvS,EAAU,WAAC,KAAK,KAAM,EAAG,IAAI,OAAOmR,EAAkB,KAAK,UAAU,EAAG,CAAC,CACvF,CAQD,cAAe,CACX,OAAOF,EAAS,eAAe,KAAK,cAAe,CAAA,CACtD,CAQD,uBAAwB,CACpB,MAAMhD,EAAS,IAAIjO,aAAW,GAAG,EACjC,OAAOiR,EAAS,eAAe,KAAK,cAAa,EAAG,IAAIhD,CAAM,CAAC,CAClE,CAOD,aAAc,CACV,OAAO,IAAIjO,EAAU,WAAC,KAAK,KAAM,EAAG,IAAI,OAAOmR,EAAkB,KAAK,UAAU,EAAG,CAAC,CACvF,CAQD,YAAa,CACT,OAAOF,EAAS,eAAe,KAAK,YAAa,CAAA,CACpD,CAQD,qBAAsB,CAClB,MAAMhD,EAAS,IAAIjO,aAAW,GAAG,EACjC,OAAOiR,EAAS,eAAe,KAAK,YAAW,EAAG,SAAShD,CAAM,CAAC,CACrE,CAOD,UAAW,CACP,IAAIuE,EAAQC,GAAkB,KAAK,QAAQ,GAAI,EAAE,EAAE,SAAQ,CAAE,EAC7D,OAAI,KAAK,QAAO,IAAO,kBAAoBD,IAAU,eACjDA,EAAQ,UAELA,GAAS,SACnB,CAOD,SAAU,CACN,UAAWhF,KAAU,OAAO,KAAKkF,EAAgB,EAC7C,GAAI,KAAK,WAAW,IAAIzB,EAASzD,CAAM,CAAC,EACpC,OAAOkF,GAAiBlF,CAAM,EAGtC,MAAO,gBACV,CAOD,QAAQY,EAAOC,EAAK,CAChB,OAAO,IAAIrO,EAAU,WAAC,KAAK,aAAaoO,EAAOC,CAAG,EAAG,CAAC,CACzD,CAOD,aAAaD,EAAOC,EAAK,CACrB,OAAO,KAAK,cAAe,EAAC,MAAMD,EAAOC,CAAG,CAC/C,CAOD,cAAcD,EAAOC,EAAK,CACtB,MAAMsE,EAAStE,EAAMD,EACrB,GAAIuE,EAAS,IAAM,EACf,MAAM,IAAI,MAAM,sDAAsD,EAE1E,OAAO,KAAK,QAAQvE,EAAOC,CAAG,EACzB,SAAS,EAAE,EACX,SAASsE,EAAS,EAAG,GAAG,CAChC,CAOD,mBAAoB,CAChB,OAAO,KAAK,aAAa,KAAK,WAAYxB,CAAe,CAC5D,CASD,YAAY7C,EAAS,CACZA,IACDA,EAAU,CAAA,GAEd,MAAMsE,EAAa,KAAK,MAAM,KAAK,WAAa,CAAC,EAC3CrE,EAAW,KAAK,cAAe,EAChC,QAAQ,KAAM,EAAE,EAChB,MAAM,EAAE,EACR,MAAM,EAAGqE,CAAU,EACnB,QAAS,EACT,KAAK,GAAG,EACb,OAAIA,EAAa,EACTtE,EAAQ,WACDC,EAEJ7C,EAAO,QAAC,eAAgB6C,CAAQ,EAEvCD,EAAQ,WACD,GAEJ,WACV,CAOD,aAAc,CACV,IAAIhO,EACAoN,EAAS,CAAA,EACTmF,EAAc,EAClB,MAAMC,EAAS,CAAA,EACf,IAAKxS,EAAI,EAAGA,EAAI,KAAK,cAAc,OAAQA,IAAK,CAC5C,MAAM/B,EAAQ,SAAS,KAAK,cAAc+B,CAAC,EAAG,EAAE,EAC5C/B,IAAU,GACVsU,IAEAtU,IAAU,GAAKsU,EAAc,IACzBA,EAAc,GACdC,EAAO,KAAK,CAACxS,EAAIuS,EAAavS,EAAI,CAAC,CAAC,EAExCuS,EAAc,EAErB,CAEGA,EAAc,GACdC,EAAO,KAAK,CAAC,KAAK,cAAc,OAASD,EAAa,KAAK,cAAc,OAAS,CAAC,CAAC,EAExF,MAAME,EAAcD,EAAO,IAAKpS,GAAMA,EAAE,CAAC,EAAIA,EAAE,CAAC,EAAI,CAAC,EACrD,GAAIoS,EAAO,OAAS,EAAG,CACnB,MAAME,EAAQD,EAAY,QAAQ,KAAK,IAAI,GAAGA,CAAW,CAAC,EAC1DrF,EAASgD,GAAQ,KAAK,cAAeoC,EAAOE,CAAK,CAAC,CACrD,MAEGtF,EAAS,KAAK,cAElB,IAAKpN,EAAI,EAAGA,EAAIoN,EAAO,OAAQpN,IACvBoN,EAAOpN,CAAC,IAAM,YACdoN,EAAOpN,CAAC,EAAI,SAASoN,EAAOpN,CAAC,EAAG,EAAE,EAAE,SAAS,EAAE,GAGvD,IAAI2S,EAAUvF,EAAO,KAAK,GAAG,EAC7B,OAAAuF,EAAUA,EAAQ,QAAQ,YAAa,IAAI,EAC3CA,EAAUA,EAAQ,QAAQ,oBAAqB,GAAG,EAClDA,EAAUA,EAAQ,QAAQ,UAAW,EAAE,EAChCA,CACV,CAYD,eAAgB,CACZ,OAAO,KAAK,WAAU,EAAG,SAAS,CAAC,EAAE,SAAS9B,EAAiB,GAAG,CACrE,CAED,UAAUhS,EAAS,CACf,MAAMuO,EAASvO,EAAQ,MAAM,GAAG,EAE1B2S,EADYpE,EAAO,MAAM,EAAE,EAAE,CAAC,EACT,MAAMwF,EAAqB,EACtD,GAAIpB,EAAU,CACV,KAAK,eAAiBA,EAAS,CAAC,EAChC,KAAK,SAAW,IAAI3E,EAAS,KAAK,cAAc,EAChD,QAAS7M,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQA,IACtC,GAAI,WAAW,KAAK,KAAK,SAAS,cAAcA,CAAC,CAAC,EAC9C,MAAM,IAAIZ,EAAa,4CAA6CP,EAAQ,QAAQ+T,GAAuB,KAAK,SAAS,cAAc,IAAIzC,EAAkB,EAAE,KAAK,GAAG,CAAC,CAAC,EAGjL,KAAK,GAAK,GACV/C,EAAOA,EAAO,OAAS,CAAC,EAAI,KAAK,SAAS,WAC1CvO,EAAUuO,EAAO,KAAK,GAAG,CAC5B,CACD,OAAOvO,CACV,CAED,MAAMA,EAAS,CACXA,EAAU,KAAK,UAAUA,CAAO,EAChC,MAAMgU,EAAgBhU,EAAQ,MAAMiU,EAA4B,EAChE,GAAID,EACA,MAAM,IAAIzT,EAAagM,UAAQ,0CAA2CyH,EAAc,OAAS,EAAI,IAAM,GAAIA,EAAc,KAAK,EAAE,CAAC,EAAGhU,EAAQ,QAAQiU,GAA8B,qCAAqC,CAAC,EAEhO,MAAMC,EAAalU,EAAQ,MAAMmU,EAAyB,EAC1D,GAAID,EACA,MAAM,IAAI3T,EAAagM,EAAAA,QAAQ,2BAA4B2H,EAAW,KAAK,EAAE,CAAC,EAAGlU,EAAQ,QAAQmU,GAA2B,qCAAqC,CAAC,EAEtK,IAAI5F,EAAS,CAAA,EACb,MAAM6F,EAASpU,EAAQ,MAAM,IAAI,EACjC,GAAIoU,EAAO,SAAW,EAAG,CACrB,IAAIC,EAAQD,EAAO,CAAC,EAAE,MAAM,GAAG,EAC3BE,EAAOF,EAAO,CAAC,EAAE,MAAM,GAAG,EAC1BC,EAAM,SAAW,GAAKA,EAAM,CAAC,IAAM,KACnCA,EAAQ,CAAA,GAERC,EAAK,SAAW,GAAKA,EAAK,CAAC,IAAM,KACjCA,EAAO,CAAA,GAEX,MAAMC,EAAY,KAAK,QAAUF,EAAM,OAASC,EAAK,QACrD,GAAI,CAACC,EACD,MAAM,IAAIhU,EAAa,sBAAsB,EAEjD,KAAK,aAAegU,EACpB,KAAK,aAAeF,EAAM,OAC1B,KAAK,WAAaA,EAAM,OAAS,KAAK,aACtC9F,EAASA,EAAO,OAAO8F,CAAK,EAC5B,QAASlT,EAAI,EAAGA,EAAIoT,EAAWpT,IAC3BoN,EAAO,KAAK,GAAG,EAEnBA,EAASA,EAAO,OAAO+F,CAAI,CAC9B,SACQF,EAAO,SAAW,EACvB7F,EAASvO,EAAQ,MAAM,GAAG,EAC1B,KAAK,aAAe,MAGpB,OAAM,IAAIO,EAAa,0BAA0B,EAGrD,GADAgO,EAASA,EAAO,IAAKuB,GAAUvD,EAAAA,QAAQ,KAAM,SAASuD,EAAO,EAAE,CAAC,CAAC,EAC7DvB,EAAO,SAAW,KAAK,OACvB,MAAM,IAAIhO,EAAa,kCAAkC,EAE7D,OAAOgO,CACV,CAOD,eAAgB,CACZ,OAAO,KAAK,cAAc,IAAIoD,EAAS,EAAE,KAAK,GAAG,CACpD,CAOD,SAAU,CACN,OAAO,KAAK,cAAc,IAAKpQ,GAAMgL,EAAAA,QAAQ,OAAQ,SAAShL,EAAG,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAClF,CAOD,YAAa,CACT,OAAO,IAAIV,EAAU,WAAC,KAAK,cAAc,IAAI8Q,EAAS,EAAE,KAAK,EAAE,EAAG,EAAE,CACvE,CAUD,KAAM,CACF,MAAM6C,EAAS,KAAK,cAAe,EAAC,MAAM,EAAE,EAC5C,OAAOxG,EAAS,QAAQ,IAAInN,EAAU,WAAC2T,EAAO,MAAM,GAAI,GAAG,EAAE,KAAK,EAAE,EAAG,CAAC,EAAE,SAAS,EAAE,CAAC,CACzF,CAOD,QAAS,CACL,MAAM7B,EAAW,KAAK,MAEhBmB,EADW,IAAIhC,EAAS,KAAK,cAAc,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,EAAG,CAAC,EAChD,cACzB,IAAI2C,EAAQ,GACZ,MAAK,KAAK,KAAKX,CAAO,IAClBW,EAAQ,KAELX,EAAUW,EAAQ9B,EAAS,OACrC,CAOD,eAAgB,CAsBZ,MAAM+B,EAAS,KAAK,cAAc,EAAG,EAAE,EACjCC,EAAU,KAAK,QAAQ,GAAI,EAAE,EAAE,IAAI,IAAI9T,EAAU,WAAC,OAAQ,EAAE,CAAC,EAAE,SAAQ,EACvE+T,EAAU5G,EAAS,QAAQ,KAAK,cAAc,GAAI,EAAE,CAAC,EACrD6G,EAAU7G,EAAS,QAAQ,KAAK,QAAQ,GAAI,GAAG,EAAE,IAAI,IAAInN,EAAAA,WAAW,WAAY,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EACjGiU,EAAQ,KAAK,QAAQ,GAAI,EAAE,EAC3BC,EAAa,KAAK,aAAa,GAAI,EAAE,EACrCC,EAAUF,EAAM,QAAQ,EAAE,EAC1BG,EAAWH,EAAM,QAAQ,EAAE,EAC3BI,EAAkBJ,EAAM,QAAQ,CAAC,EACjCK,EAAiBL,EAAM,QAAQ,CAAC,EAChCM,EAAQ,IAAIvU,EAAU,WAACkU,EAAW,MAAM,EAAG,CAAC,EAAIA,EAAW,MAAM,EAAG,EAAE,EAAG,CAAC,EAAE,SAAS,EAAE,EAC7F,MAAO,CACH,OAAQxI,EAAO,QAAC,QAASmI,EAAO,MAAM,EAAG,CAAC,EAAGA,EAAO,MAAM,EAAG,CAAC,CAAC,EAC/D,QAASE,EAAQ,QACjB,QAASC,EAAQ,QACjB,MAAOE,EACP,QAAAC,EACA,UAAW,CACP,SAAAC,EACA,eAAAE,EACA,gBAAAD,EACA,MAAAE,CACH,EACD,QAAAT,CACZ,CACK,CAOD,aAAc,CAKV,MAAMD,EAAS,KAAK,cAAc,EAAG,EAAE,EACjCW,EAAUrH,EAAS,QAAQ,KAAK,cAAc,GAAI,EAAE,CAAC,EAC3D,MAAO,CACH,OAAQzB,EAAO,QAAC,KAAMmI,EAAO,MAAM,EAAG,CAAC,CAAC,EACxC,QAASW,EAAQ,OAC7B,CACK,CAOD,QAAS,CACL,GAAI,CAAC,KAAK,MACN,OAAO,KAEX,MAAMC,EAAW,CACb,OACA,KAAK,cAAc,GAAI,GAAG,EAC1B,KAAK,cAAc,IAAK,GAAG,EAC3B,GACA,KACZ,EAAU,KAAK,GAAG,EACV,OAAO,IAAIxD,EAASwD,CAAQ,CAC/B,CAOD,aAAc,CACV,MAAMC,EAAY,KAAK,WAAY,EAAC,YAAW,EAE/C,OAAIA,EAAU,SAAW,IAAMA,EAAU,CAAC,IAAM,EACrCA,EAAU,MAAM,CAAC,EAErBA,CACV,CAOD,qBAAsB,CAClB,OAAO,KAAK,YAAW,EAAG,IAAI1D,EAAU,CAC3C,CAOD,OAAO,cAAc2D,EAAO,CACxB,OAAO,KAAK,sBAAsBA,EAAM,IAAI3D,EAAU,CAAC,CAC1D,CAOD,OAAO,sBAAsB2D,EAAO,CAChC,MAAMC,EAAW,IAAI5U,EAAAA,WAAW,MAAO,EAAE,EACzC,IAAI2R,EAAS,IAAI3R,EAAAA,WAAW,IAAK,EAAE,EAC/B6U,EAAa,IAAI7U,EAAAA,WAAW,IAAK,EAAE,EACvC,QAASM,EAAIqU,EAAM,OAAS,EAAGrU,GAAK,EAAGA,IACnCqR,EAASA,EAAO,IAAIkD,EAAW,SAAS,IAAI7U,EAAU,WAAC2U,EAAMrU,CAAC,EAAE,SAAS,EAAE,EAAG,EAAE,CAAC,CAAC,EAClFuU,EAAaA,EAAW,SAASD,CAAQ,EAE7C,OAAO3D,EAAS,eAAeU,CAAM,CACxC,CAOD,aAAc,CACV,OAAO,KAAK,qBAAuB,KAAK,cAAa,CACxD,CAOD,aAAc,CAEV,OAAI,KAAK,aAAa,EAAG,EAAE,IACvB,kEAIP,CAOD,aAAc,CACV,OAAO,KAAK,QAAS,IAAK,WAC7B,CAOD,KAAM,CACF,OAAO,KAAK,EACf,CAOD,UAAW,CACP,OAAO,KAAK,WAAW,IAAIV,EAAS,WAAW,CAAC,CACnD,CAOD,QAAS,CACL,OAAO,KAAK,WAAW,IAAIA,EAAS,WAAW,CAAC,CACnD,CAOD,YAAa,CACT,OAAO,KAAK,QAAS,IAAK,UAC7B,CAMD,KAAK6D,EAAc,CACf,OAAIA,IAAiB,OACjBA,EAAe,GAGfA,EAAepJ,EAAO,QAAC,MAAOoJ,CAAY,EAEvCpJ,EAAAA,QAAQ,iBAAkB,KAAK,YAAa,EAAEoJ,CAAY,CACpE,CAID,KAAKxG,EAAS,CACLA,IACDA,EAAU,CAAA,GAEVA,EAAQ,YAAc,SACtBA,EAAQ,UAAY,IAEpBA,EAAQ,SAAW,SACnBA,EAAQ,OAAS,cAEjBA,EAAQ,KAAO,SACfA,EAAQ,GAAK,IAEjB,IAAIyG,EAAe,KAAK,YAIxB,OAHIzG,EAAQ,KACRyG,EAAe,KAAK,QAEpBzG,EAAQ,UACD5C,UAAQ,2CAA4C4C,EAAQ,OAAQyG,EAAa,KAAK,IAAI,EAAGzG,EAAQ,SAAS,EAElH5C,EAAO,QAAC,8BAA+B4C,EAAQ,OAAQyG,EAAa,KAAK,IAAI,CAAC,CACxF,CAKD,OAAQ,CACJ,GAAI,KAAK,eAAiB,EAEtB,OAAOC,GAAoB,KAAK,OAAO,EAAE,KAAK,GAAG,EAErD3E,GAAO,OAAO,KAAK,cAAiB,QAAQ,EAC5CA,GAAO,OAAO,KAAK,cAAiB,QAAQ,EAE5C,MAAMjE,EAAS,CAAA,EACT,CAAC8D,EAAMC,CAAK,EAAI,KAAK,QAAQ,MAAM,IAAI,EACzCD,EAAK,OACL9D,EAAO,KAAK,GAAG4I,GAAoB9E,CAAI,CAAC,EAGxC9D,EAAO,KAAK,EAAE,EAElB,MAAM6I,EAAU,CAAC,aAAa,EAC9B,QAAS3U,EAAI,KAAK,aAAcA,EAAI,KAAK,aAAe,KAAK,aAAcA,IACvE2U,EAAQ,KAAKvJ,EAAAA,QAAQ,WAAYpL,CAAC,CAAC,EAEvC,OAAA8L,EAAO,KAAKV,EAAAA,QAAQ,2BAA4BuJ,EAAQ,KAAK,GAAG,CAAC,CAAC,EAC9D9E,EAAM,OACN/D,EAAO,KAAK,GAAG4I,GAAoB7E,EAAO,KAAK,UAAU,CAAC,EAG1D/D,EAAO,KAAK,EAAE,EAEd,KAAK,QACLiE,GAAO,KAAK,oBAAoBlD,CAAQ,EACxCf,EAAO,IAAG,EACVA,EAAO,KAAK,KAAK,SAAS,WAAY,CAAA,GAEnCA,EAAO,KAAK,GAAG,CACzB,CAWD,wBAAwB8I,EAAkB,GAAO,CAC7C,IAAI9I,EAAS,CAAA,EAEb,MAAM+I,EAAW,IAAIlE,EAAS,KAAK,YAAa,CAAA,EAChD,GAAIkE,EAAS,eAAiB,EAE1B/I,EAAO,KAAKqD,GAAwB0F,EAAS,aAAa,CAAC,UAEtDA,EAAS,eAAiB/D,GAE/BhF,EAAO,KAAK0D,GAAiBsB,EAAiB,CAAC,MAE9C,CAED,MAAMmC,EAAS4B,EAAS,QAAQ,MAAM,IAAI,EACtC5B,EAAO,CAAC,EAAE,QACVnH,EAAO,KAAKqD,GAAwB8D,EAAO,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,EAE7DlD,GAAO,OAAO8E,EAAS,cAAiB,QAAQ,EAChD/I,EAAO,KAAK0D,GAAiBqF,EAAS,aAAc5B,EAAO,CAAC,EAAE,SAAW,EAAGA,EAAO,CAAC,EAAE,SAAW,CAAC,CAAC,EAC/FA,EAAO,CAAC,EAAE,QACVnH,EAAO,KAAKqD,GAAwB8D,EAAO,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,EAE7DnH,EAAS,CAACA,EAAO,KAAK,GAAG,CAAC,CAC7B,CACD,OAAK8I,IACD9I,EAAS,CACL,QACAoD,GACA,eACA,GAAGpD,EACH,iBACAoD,GACA,KAChB,GAEepD,EAAO,KAAK,EAAE,CACxB,CASD,kBAAkB8I,EAAkB,GAAO,CACvC,OAAO,IAAI,OAAO,KAAK,wBAAwBA,CAAe,EAAG,GAAG,CACvE,CACL,CCr8BA,MAAME,GAAMC,GAAO,6BAA6B,EACnCC,GAAS,CAClB,yBAA0B,2BAC1B,2BAA4B,6BAC5B,eAAgB,gBACpB,EAIO,SAASC,GAAkBC,EAAI9D,EAAM,CACxC,GAAI,OAAO8D,GAAO,SACd,MAAMC,EAAQ,IAAI,MAAM,wBAAwBD,GAAI,EAAGF,GAAO,wBAAwB,EAK1F,GAHI,OAAO5D,GAAS,WAChBA,EAAO,SAASA,CAAI,GAEpB,MAAMA,CAAI,EACV,MAAM+D,EAAQ,IAAI,MAAM,0BAA0B/D,GAAM,EAAG4D,GAAO,0BAA0B,EAEhG,GAAI,CAEA,WAAInI,EAASqI,CAAE,EACRE,GAAU,QAAQF,SAAU9D,GAAM,CAC5C,MACD,CAAS,CACT,GAAI,CAEA,MAAMiE,EAAM,IAAI1E,EAASuE,CAAE,EAC3B,OAAOG,EAAI,IAAK,EACVD,GAAU,QAAQC,EAAI,IAAG,EAAG,qBAAqBjE,GAAM,EACvDgE,GAAU,QAAQF,SAAU9D,GAAM,CAC3C,MACD,CACI,MAAMkE,EAAS,6CAA6CJ,KAAM9D,IAClE0D,MAAAA,GAAI,MAAMQ,CAAM,EACVH,EAAQ,IAAI,MAAMG,CAAM,EAAGN,GAAO,cAAc,CACzD,CACL,CCxCO,MAAMO,GAAW,IACXC,GAAe,IACfC,GAAY,IAEZC,GAAgB,IAEhBC,GAAiB,ICJxBC,GAAc,CAAE,IAAK,OAAQ,IAAK,MAAM,EACvC,SAASC,GAAqBC,EAAM,CACvC,MAAMC,EAAaD,EAAK,UAExB,OAAIC,GAAc,KACVC,GAAG,SAAU,IAAK,QAEX,CAAE,KAAMC,GAAK,KAAK,gBAAiBF,CAAU,GAG7C,CAAE,KAAMA,GAIhBD,EAAK,WAChB,CACO,SAASI,GAAcC,EAAOjB,EAAI9D,EAAM,CAC3C,MAAMgF,EAAQlB,GAAOE,GAAU,IAAIe,KAASjB,SAAU9D,GAAM,EAC5D,OAAQiF,GAAUnB,CAAE,EAAIoB,GAAgBV,GAAYO,CAAK,CAAC,EAAI,CAACjB,CAAE,GAAG,IAAIkB,CAAI,CAChF,CACO,SAASC,GAAUnB,EAAI,CAC1B,MAAO,CAAC,UAAW,IAAI,EAAE,SAASA,CAAE,CACxC,CACA,MAAMqB,GAAWP,GAAG,oBACpB,SAASM,GAAgBE,EAAQ,CAC7B,MAAMC,EAAY,CAAA,EAClB,SAAW,CAAG,CAAAC,CAAQ,IAAK,OAAO,QAAQH,EAAQ,EAC9C,GAAIG,GAAY,KACZ,UAAWC,KAAWD,EACdC,EAAQ,SAAWH,GACnBC,EAAU,KAAKE,EAAQ,OAAO,EAK9C,OAAOF,CACX,CC/BA,MAAM3B,EAAMC,GAAO,mBAAmB,EAKzB6B,GAAwB,CAACC,EAAQ7I,IAAY,CACtDA,EAAUA,GAAW,GACrB,MAAM8I,EAAoB9I,EAAQ,yBAA2B2H,GACvDoB,EAAe/I,EAAQ,oBAAsB0H,GAE/C1H,EAAQ,eAAe,QAAO,GAAM,OACpCA,EAAQ,WAAaA,EAAQ,eAE7BA,EAAQ,YAAY,QAAO,GAAM,OACjCA,EAAQ,UAAYA,EAAQ,YAEhC,IAAIgJ,EACJ,GAAIhJ,EAAQ,YAAc,KACtBgJ,EAAahJ,EAAQ,eAEpB,CACD,GAAI6I,EAAO,eAAiB,MAAQA,EAAO,YAAc,KAGrD,MAAM1B,EAAQ,IAAI,MAAM,4CAA4C,EAAG,uBAAuB,EAElG6B,EAAaC,GAAYJ,EAAO,cAAeA,EAAO,UAAU,CACnE,CACD,MAAMK,EAAQrB,GAAqBmB,CAAU,EACvCG,EAAWD,EAAM,MAAQ,GAAGA,EAAM,MAAQ,MAAMA,EAAM,MAAQ,KAC9D,CAAE,KAAAta,EAAM,OAAAE,CAAM,EAAKsa,GAAW,OAAOP,CAAM,EAGjDA,EAAO,WAAWC,EAAmB,IAAM,CACvChC,EAAI,yBAA0BqC,CAAQ,EAEtC,IAAIha,EACA0Z,EAAO,WACP1Z,EAAMgY,EAAQ,IAAI,MAAM,qBAAqB,EAAG,yBAAyB,GAI7E0B,EAAO,QAAQ1Z,CAAG,CAC1B,CAAK,EACD0Z,EAAO,KAAK,QAAS,IAAM,CACvB/B,EAAI,yBAA0BqC,CAAQ,EAIlCE,EAAO,SAAS,OAAS,OACzBA,EAAO,SAAS,MAAQ,KAAK,IAAG,EAE5C,CAAK,EACDR,EAAO,KAAK,MAAO,IAAM,CAGrB/B,EAAI,eAAgBuC,EAAO,WAAW,SAAU,CAAA,CACxD,CAAK,EACD,MAAMA,EAAS,CACX,MAAM,KAAKva,EAAQ,CACVkR,GAAS,QAAW,OACrBlR,EAASwa,GAAgBxa,EAAQkR,EAAQ,MAAM,GAEnD,GAAI,CACA,MAAMpR,EAAKE,CAAM,CACpB,OACMK,EAAP,CAEQA,EAAI,OAAS,WAIb2X,EAAI3X,CAAG,CAEd,CAED0Z,EAAO,IAAG,CACb,EACD,OAAS7I,EAAQ,QAAU,KAAQsJ,GAAgBxa,EAAQkR,EAAQ,MAAM,EAAIlR,EAE7E,WAAAka,EACA,SAAU,CAAE,KAAM,KAAK,IAAG,CAAI,EAC9B,MAAM,OAAQ,CACV,GAAIH,EAAO,UAAW,CAClB/B,EAAI,uDAAwDqC,CAAQ,EACpE,MACH,CACDrC,EAAI,oBAAqBqC,CAAQ,EACjC,MAAM,IAAI,QAAQ,CAACtZ,EAASC,IAAW,CACnC,MAAMgQ,EAAQ,KAAK,MAGbyJ,EAAU,WAAW,IAAM,CACzBV,EAAO,WACP/B,EAAI,0BAA2BqC,CAAQ,EACvCtZ,MAGAiX,EAAI,6DAA8DqC,EAAU,KAAK,IAAG,EAAKrJ,CAAK,EAE9F+I,EAAO,QAAQ1B,EAAQ,IAAI,MAAM,sBAAsB,EAAG,0BAA0B,CAAC,EAE7G,EAAmB4B,CAAY,EAAE,QACjBF,EAAO,KAAK,QAAS,IAAM,CACvB/B,EAAI,mBAAoBqC,CAAQ,EAEhC,aAAaI,CAAO,EACpB1Z,GACpB,CAAiB,EACDgZ,EAAO,KAAK,QAAU1Z,GAAQ,CAC1B2X,EAAI,kBAAmBqC,EAAUha,CAAG,EAEhCka,EAAO,SAAS,OAAS,OACzBA,EAAO,SAAS,MAAQ,KAAK,IAAG,GAEhCR,EAAO,WACP,aAAaU,CAAO,EAExBzZ,EAAOX,CAAG,CAC9B,CAAiB,EAED0Z,EAAO,WAAWE,CAAY,EAE9BF,EAAO,IAAG,EACNA,EAAO,eAAiB,EAExBA,EAAO,KAAK,QAAS,IAAM,CACvB/B,EAAI,oBAAqBqC,CAAQ,EAEjCN,EAAO,QAAO,CACtC,CAAqB,EAIDA,EAAO,QAAO,CAElC,CAAa,CACJ,CACT,EACI,OAAOQ,CACX,EC9IMvC,EAAMC,GAAO,qBAAqB,EAIxC,eAAeyC,GAAaH,EAAQ,CAChC,GAAI,CACA,MAAMA,EAAO,OAChB,OACMla,EAAP,CACI2X,EAAI,MAAM,2CAA4C3X,CAAG,CAC5D,CACL,CACO,MAAMsa,WAAoBC,EAAa,CAC1C,YAAYC,EAAS,CACjB,QACA,KAAK,QAAUA,EAEf,KAAK,YAAc,IAAI,IACvB,KAAK,OAAS,CAAE,QAAS,EAAK,EAC9BA,EAAQ,UAAYA,EAAQ,WAAa,GACzC,KAAK,OAASC,GAAI,aAAaD,EAAS,KAAK,SAAS,KAAK,IAAI,CAAC,EAI5DA,EAAQ,iBAAmB,SAC3B,KAAK,OAAO,eAAiBA,EAAQ,gBAEzC,KAAK,OACA,GAAG,YAAa,IAAM,KAAK,cAAc,IAAIE,GAAY,WAAW,CAAC,CAAC,EACtE,GAAG,QAAS1a,GAAO,KAAK,cAAc,IAAI0a,GAAY,QAAS,CAAE,OAAQ1a,CAAG,CAAE,CAAC,CAAC,EAChF,GAAG,QAAS,IAAM,KAAK,cAAc,IAAI0a,GAAY,OAAO,CAAC,CAAC,CACtE,CACD,SAAShB,EAAQ,CAEbA,EAAO,GAAG,QAAS1Z,GAAO,CACtB2X,EAAI,eAAgB3X,CAAG,CACnC,CAAS,EACD,IAAIka,EACJ,GAAI,CACAA,EAAST,GAAsBC,EAAQ,CACnC,cAAe,KAAK,OAAO,QAAU,KAAK,OAAO,cAAgB,OACjE,wBAAyB,KAAK,QAAQ,wBACtC,mBAAoB,KAAK,QAAQ,kBACjD,CAAa,CACJ,OACM1Z,EAAP,CACI2X,EAAI,MAAM,4BAA6B3X,CAAG,EAC1C,MACH,CACD2X,EAAI,4BAA6BuC,EAAO,UAAU,EAClD,GAAI,CACA,KAAK,QAAQ,SAAS,eAAeA,CAAM,EACtC,KAAMS,GAAS,CAChBhD,EAAI,iCAAkCuC,EAAO,UAAU,EACvD,KAAK,YAAY,IAAIA,CAAM,EAC3BR,EAAO,KAAK,QAAS,IAAM,CACvB,KAAK,YAAY,OAAOQ,CAAM,CAClD,CAAiB,EACG,KAAK,QAAQ,SAAW,MACxB,KAAK,QAAQ,QAAQS,CAAI,EAE7B,KAAK,cAAc,IAAID,GAAY,aAAc,CAAE,OAAQC,CAAM,CAAA,CAAC,CAClF,CAAa,EACI,MAAM,MAAO3a,GAAQ,CACtB2X,EAAI,MAAM,4BAA6B3X,CAAG,EAC1C,MAAMqa,GAAaH,CAAM,CACzC,CAAa,EACI,MAAMla,GAAO,CACd2X,EAAI,MAAM,oCAAqC3X,CAAG,CAClE,CAAa,CACJ,OACMA,EAAP,CACI2X,EAAI,MAAM,4BAA6B3X,CAAG,EAC1Cqa,GAAaH,CAAM,EACd,MAAMla,GAAO,CACd2X,EAAI,MAAM,oCAAqC3X,CAAG,CAClE,CAAa,CACJ,CACJ,CACD,UAAW,CACP,GAAI,CAAC,KAAK,OAAO,QACb,MAAO,GAEX,IAAI4a,EAAQ,CAAA,EACZ,MAAMlZ,EAAU,KAAK,OAAO,QAAO,EAC7B,CAAE,cAAAmZ,EAAe,OAAAC,GAAW,KAAK,OACvC,GAAIpZ,GAAW,KACX,MAAO,GAEX,GAAI,OAAOA,GAAY,SACnBkZ,EAAQ,CAACC,CAAa,MAGtB,IAAI,CAGIA,EAAc,SAAQ,EAAG,WAAW,MAAM,EAC1CD,EAAQA,EAAM,OAAO7B,GAAc,MAAOrX,EAAQ,QAASA,EAAQ,IAAI,CAAC,EAEnEA,EAAQ,SAAW,SACxBkZ,EAAQA,EAAM,OAAO7B,GAAc,MAAOrX,EAAQ,QAASA,EAAQ,IAAI,CAAC,EAE/E,OACM1B,EAAP,CACI2X,EAAI,MAAM,sCAAuCjW,EAAQ,QAASA,EAAQ,KAAM1B,CAAG,CACtF,CAEL,OAAO4a,EAAM,IAAIG,GAAMD,GAAU,KAAOC,EAAG,YAAY,QAAQD,GAAQ,EAAIC,CAAE,CAChF,CACD,MAAM,OAAOA,EAAI,CACb,MAAMD,EAASC,EAAG,YACZF,EAAgBC,GAAU,KAAOC,EAAG,gBAAgB3C,EAAQ,EAAI2C,EACtE,YAAK,OAAS,CAAE,QAAS,GAAM,cAAAF,EAAe,OAAAC,GACvC,MAAM,IAAI,QAAQ,CAACpa,EAASC,IAAW,CAC1C,MAAMkQ,EAAU6H,GAAqBmC,CAAa,EAClD,KAAK,OAAO,GAAG,QAAU7a,GAAQ,CAC7BW,EAAOX,CAAG,CAC1B,CAAa,EACD,KAAK,OAAO,OAAO6Q,EAAS,IAAM,CAC9B8G,EAAI,kBAAmB,KAAK,OAAO,QAAS,CAAA,EAC5CjX,GAChB,CAAa,CACb,CAAS,CACJ,CACD,MAAM,OAAQ,CACL,KAAK,OAAO,YAGjB,MAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,YAAY,OAAQ,CAAA,EAAE,IAAI,MAAOwZ,GAAW,MAAMG,GAAaH,CAAM,CAAC,CAAC,EACzG,MAAM,IAAI,QAAQ,CAACxZ,EAASC,IAAW,CACnC,KAAK,OAAO,MAAMX,GAAQA,GAAO,KAAQW,EAAOX,CAAG,EAAIU,EAAS,CAAA,CAC5E,CAAS,EACJ,CACL,CCjIA,MAAMiX,EAAMC,GAAO,YAAY,EAC/B,MAAMoD,EAAI,CACN,YAAYnK,EAAU,GAAI,CACtB,KAAK,KAAOA,CACf,CACD,IAAKoK,EAAM,GAAI,CACX,MAAO,EACV,CACD,IAAK,OAAO,WAAW,GAAI,CACvB,MAAO,aACV,CACD,MAAM,KAAKF,EAAIlK,EAAS,CACpBA,EAAQ,UAAYA,EAAQ,WAAa,GACzC,MAAM6I,EAAS,MAAM,KAAK,SAASqB,EAAIlK,CAAO,EAE9C6I,EAAO,GAAG,QAAS1Z,GAAO,CACtB2X,EAAI,eAAgB3X,CAAG,CACnC,CAAS,EACD,MAAMka,EAAST,GAAsBC,EAAQ,CACzC,WAAYqB,EACZ,OAAQlK,EAAQ,OAChB,wBAAyB,KAAK,KAAK,gCACnC,mBAAoB,KAAK,KAAK,kBAC1C,CAAS,EACD8G,EAAI,6BAA8BuC,EAAO,UAAU,EACnD,MAAMS,EAAO,MAAM9J,EAAQ,SAAS,gBAAgBqJ,CAAM,EAC1D,OAAAvC,EAAI,kCAAmCuC,EAAO,UAAU,EACjDS,CACV,CACD,MAAM,SAASI,EAAIlK,EAAS,CACxB,GAAIA,EAAQ,QAAQ,UAAY,GAC5B,MAAM,IAAIqK,GAEd,OAAO,MAAM,IAAI,QAAQ,CAACxa,EAASC,IAAW,CAC1C,MAAMgQ,EAAQ,KAAK,MACbwK,EAAQzC,GAAqBqC,CAAE,EAC/BK,EAAWD,EAAM,MAAQ,GAAGA,EAAM,MAAQ,MAAMA,EAAM,OAC5DxD,EAAI,aAAcwD,CAAK,EACvB,MAAME,EAAYZ,GAAI,QAAQU,CAAK,EAC7BG,EAAWtb,GAAQ,CACrBA,EAAI,QAAU,oBAAoBob,MAAapb,EAAI,UACnDub,EAAKvb,CAAG,CACxB,EACkBwb,EAAY,IAAM,CACpB7D,EAAI,wBAAyByD,CAAQ,EACrC,MAAMpb,EAAMgY,EAAQ,IAAI,MAAM,4BAA4B,KAAK,IAAG,EAAKrH,KAAS,EAAG,qBAAqB,EAExG0K,EAAU,KAAK,QAASrb,CAAG,CAC3C,EACkByb,EAAY,IAAM,CACpB9D,EAAI,uBAAwBwD,CAAK,EACjCI,GAChB,EACkBG,EAAU,IAAM,CAClB/D,EAAI,wBAAyBwD,CAAK,EAClCE,EAAU,QAAO,EACjBE,EAAK,IAAIL,EAAY,CACrC,EACkBK,EAAQvb,GAAQ,CAOlB,GANAqb,EAAU,eAAe,QAASC,CAAO,EACzCD,EAAU,eAAe,UAAWG,CAAS,EAC7CH,EAAU,eAAe,UAAWI,CAAS,EACzC5K,EAAQ,QAAU,MAClBA,EAAQ,OAAO,oBAAoB,QAAS6K,CAAO,EAEnD1b,GAAO,KACP,OAAOW,EAAOX,CAAG,EAErBU,EAAQ2a,CAAS,CACjC,EACYA,EAAU,GAAG,QAASC,CAAO,EAC7BD,EAAU,GAAG,UAAWG,CAAS,EACjCH,EAAU,GAAG,UAAWI,CAAS,EAC7B5K,EAAQ,QAAU,MAClBA,EAAQ,OAAO,iBAAiB,QAAS6K,CAAO,CAEhE,CAAS,CACJ,CAMD,eAAe7K,EAAS,CACpB,OAAO,IAAIyJ,GAAY,CACnB,GAAGzJ,EACH,eAAgB,KAAK,KAAK,eAC1B,wBAAyB,KAAK,KAAK,+BACnC,mBAAoB,KAAK,KAAK,kBAC1C,CAAS,CACJ,CAID,OAAO8K,EAAY,CACf,OAAAA,EAAa,MAAM,QAAQA,CAAU,EAAIA,EAAa,CAACA,CAAU,EAC1DA,EAAW,OAAOZ,GACjBA,EAAG,WAAU,EAAG,SAAS1C,EAAY,EAC9B,GAEP0C,EAAG,WAAU,EAAG,SAASzC,EAAS,EAC3B,GAEJsD,GAAU,QAAQb,EAAG,gBAAgB3C,EAAQ,CAAC,CACxD,CACJ,CACL,CACO,SAASyD,GAAIC,EAAO,GAAI,CAC3B,MAAO,IACI,IAAId,GAAIc,CAAI,CAE3B,CCjHA,MAAAC,GAAe,UACJ,CACH,UAAW,CAACF,GAAKG,GAAYC,GAAYC,EAAY,EACrD,qBAAsB,CAACC,EAAK,CACpC"}