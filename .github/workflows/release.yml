name: Publication appli installable
on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but does not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true


defaults:
  run:
    shell: 'bash'


jobs:
  prepare:
    name: Prepare shared data for multi-platform compilation
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.APP_VERSION.outputs.APP_VERSION }}
      COMMIT_TIMESTAMP: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}
      APP_FULL_VERSION: ${{ steps.APP_FULL_VERSION.outputs.APP_FULL_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - id: COMMIT_TIMESTAMP
        run: echo "COMMIT_TIMESTAMP=$(git show -s --format=%ct ${{ github.sha }})" >> $GITHUB_OUTPUT
      - id: APP_VERSION
        run: echo "APP_VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - id: APP_FULL_VERSION
        run: echo "APP_FULL_VERSION=${{ steps.APP_VERSION.outputs.APP_VERSION }}-${{inputs.distribution-channel}}.${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}" >> $GITHUB_OUTPUT
      - run: |
          echo "- \`COMMIT_TIMESTAMP\`: ${{ steps.COMMIT_TIMESTAMP.outputs.COMMIT_TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_VERSION\`: ${{ steps.APP_VERSION.outputs.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`APP_FULL_VERSION\`: ${{ steps.APP_FULL_VERSION.outputs.APP_FULL_VERSION }}" >> $GITHUB_STEP_SUMMARY

  draft_release:
    needs:
        - prepare

    permissions:
      contents: write # Allows this job to create releases

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: pnpm/action-setup@v4.1.0
        with:
          version: latest

      - uses: actions/setup-node@v4

      - run: pnpm install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Compiler l'appli
        run: pnpm compile

      - name: Téléverser au serveur GitHub
        if: ${{ !inputs.dry-run }}
        run: gh release create v${{needs.prepare.outputs.APP_FULL_VERSION}} dist/root* dist/latest*.yml --repo ${{github.repository}}
        env:
          GH_TOKEN: ${{ github.token }}  # GitHub token, automatically provided (No need to define this secret in the repo settings)
