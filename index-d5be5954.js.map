{"version":3,"file":"index-d5be5954.js","sources":["../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/vendor/base-x.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bytes.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/identity.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base2.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base8.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base10.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base16.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base32.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base36.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base58.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base64.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/bases/base256emoji.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/vendor/varint.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/varint.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/hashes/digest.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/codecs/json.js","../../../../node_modules/@libp2p/webtransport/node_modules/multiformats/src/basics.js","../../../../node_modules/@libp2p/webtransport/dist/src/index.js"],"sourcesContent":["// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","import { logger } from '@libp2p/logger';\nimport { noise } from '@chainsafe/libp2p-noise';\nimport { symbol } from '@libp2p/interface-transport';\nimport { protocols } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { bases, digest } from 'multiformats/basics';\nimport { Uint8ArrayList } from 'uint8arraylist';\nconst log = logger('libp2p:webtransport');\n// @ts-expect-error - Not easy to combine these types.\nconst multibaseDecoder = Object.values(bases).map(b => b.decoder).reduce((d, b) => d.or(b));\nfunction decodeCerthashStr(s) {\n    return digest.decode(multibaseDecoder.decode(s));\n}\n// Duplex that does nothing. Needed to fulfill the interface\nfunction inertDuplex() {\n    return {\n        source: {\n            [Symbol.asyncIterator]() {\n                return {\n                    async next() {\n                        // This will never resolve\n                        return await new Promise(() => { });\n                    }\n                };\n            }\n        },\n        sink: async (source) => {\n            // This will never resolve\n            return await new Promise(() => { });\n        }\n    };\n}\nasync function webtransportBiDiStreamToStream(bidiStream, streamId, direction, activeStreams, onStreamEnd) {\n    const writer = bidiStream.writable.getWriter();\n    const reader = bidiStream.readable.getReader();\n    await writer.ready;\n    function cleanupStreamFromActiveStreams() {\n        const index = activeStreams.findIndex(s => s === stream);\n        if (index !== -1) {\n            activeStreams.splice(index, 1);\n            stream.stat.timeline.close = Date.now();\n            onStreamEnd?.(stream);\n        }\n    }\n    let writerClosed = false;\n    let readerClosed = false;\n    (async function () {\n        const err = await writer.closed.catch((err) => err);\n        if (err != null) {\n            const msg = err.message;\n            if (!(msg.includes('aborted by the remote server') || msg.includes('STOP_SENDING'))) {\n                log.error(`WebTransport writer closed unexpectedly: streamId=${streamId} err=${err.message}`);\n            }\n        }\n        writerClosed = true;\n        if (writerClosed && readerClosed) {\n            cleanupStreamFromActiveStreams();\n        }\n    })().catch(() => {\n        log.error('WebTransport failed to cleanup closed stream');\n    });\n    (async function () {\n        const err = await reader.closed.catch((err) => err);\n        if (err != null) {\n            log.error(`WebTransport reader closed unexpectedly: streamId=${streamId} err=${err.message}`);\n        }\n        readerClosed = true;\n        if (writerClosed && readerClosed) {\n            cleanupStreamFromActiveStreams();\n        }\n    })().catch(() => {\n        log.error('WebTransport failed to cleanup closed stream');\n    });\n    let sinkSunk = false;\n    const stream = {\n        id: streamId,\n        abort(_err) {\n            if (!writerClosed) {\n                writer.abort();\n                writerClosed = true;\n            }\n            stream.closeRead();\n            readerClosed = true;\n            cleanupStreamFromActiveStreams();\n        },\n        close() {\n            stream.closeRead();\n            stream.closeWrite();\n            cleanupStreamFromActiveStreams();\n        },\n        closeRead() {\n            if (!readerClosed) {\n                reader.cancel().catch((err) => {\n                    if (err.toString().includes('RESET_STREAM') === true) {\n                        writerClosed = true;\n                    }\n                });\n                readerClosed = true;\n            }\n            if (writerClosed) {\n                cleanupStreamFromActiveStreams();\n            }\n        },\n        closeWrite() {\n            if (!writerClosed) {\n                writerClosed = true;\n                writer.close().catch((err) => {\n                    if (err.toString().includes('RESET_STREAM') === true) {\n                        readerClosed = true;\n                    }\n                });\n            }\n            if (readerClosed) {\n                cleanupStreamFromActiveStreams();\n            }\n        },\n        reset() {\n            stream.close();\n        },\n        stat: {\n            direction,\n            timeline: { open: Date.now() }\n        },\n        metadata: {},\n        source: (async function* () {\n            while (true) {\n                const val = await reader.read();\n                if (val.done === true) {\n                    readerClosed = true;\n                    if (writerClosed) {\n                        cleanupStreamFromActiveStreams();\n                    }\n                    return;\n                }\n                yield new Uint8ArrayList(val.value);\n            }\n        })(),\n        sink: async function (source) {\n            if (sinkSunk) {\n                throw new Error('sink already called on stream');\n            }\n            sinkSunk = true;\n            try {\n                for await (const chunks of source) {\n                    if (chunks instanceof Uint8Array) {\n                        await writer.write(chunks);\n                    }\n                    else {\n                        for (const buf of chunks) {\n                            await writer.write(buf);\n                        }\n                    }\n                }\n            }\n            finally {\n                stream.closeWrite();\n            }\n        }\n    };\n    return stream;\n}\nfunction parseMultiaddr(ma) {\n    const parts = ma.stringTuples();\n    // This is simpler to have inline than extract into a separate function\n    // eslint-disable-next-line complexity\n    const { url, certhashes, remotePeer } = parts.reduce((state, [proto, value]) => {\n        switch (proto) {\n            case protocols('ip6').code:\n            // @ts-expect-error - ts error on switch fallthrough\n            case protocols('dns6').code:\n                if (value?.includes(':') === true) {\n                    /**\n                     * This resolves cases where `new globalThis.WebTransport` fails to construct because of an invalid URL being passed.\n                     *\n                     * `new URL('https://::1:4001/blah')` will throw a `TypeError: Failed to construct 'URL': Invalid URL`\n                     * `new URL('https://[::1]:4001/blah')` is valid and will not.\n                     *\n                     * @see https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2\n                     */\n                    value = `[${value}]`;\n                }\n            // eslint-disable-next-line no-fallthrough\n            case protocols('ip4').code:\n            case protocols('dns4').code:\n                if (state.seenHost || state.seenPort) {\n                    throw new Error('Invalid multiaddr, saw host and already saw the host or port');\n                }\n                return {\n                    ...state,\n                    url: `${state.url}${value ?? ''}`,\n                    seenHost: true\n                };\n            case protocols('quic').code:\n            case protocols('quic-v1').code:\n            case protocols('webtransport').code:\n                if (!state.seenHost || !state.seenPort) {\n                    throw new Error(\"Invalid multiaddr, Didn't see host and port, but saw quic/webtransport\");\n                }\n                return state;\n            case protocols('udp').code:\n                if (state.seenPort) {\n                    throw new Error('Invalid multiaddr, saw port but already saw the port');\n                }\n                return {\n                    ...state,\n                    url: `${state.url}:${value ?? ''}`,\n                    seenPort: true\n                };\n            case protocols('certhash').code:\n                if (!state.seenHost || !state.seenPort) {\n                    throw new Error('Invalid multiaddr, saw the certhash before seeing the host and port');\n                }\n                return {\n                    ...state,\n                    certhashes: state.certhashes.concat([decodeCerthashStr(value ?? '')])\n                };\n            case protocols('p2p').code:\n                return {\n                    ...state,\n                    remotePeer: peerIdFromString(value ?? '')\n                };\n            default:\n                throw new Error(`unexpected component in multiaddr: ${proto} ${protocols(proto).name} ${value ?? ''} `);\n        }\n    }, \n    // All webtransport urls are https\n    { url: 'https://', seenHost: false, seenPort: false, certhashes: [] });\n    return { url, certhashes, remotePeer };\n}\n// Determines if `maybeSubset` is a subset of `set`. This means that all byte arrays in `maybeSubset` are present in `set`.\nexport function isSubset(set, maybeSubset) {\n    const intersection = maybeSubset.filter(byteArray => {\n        return Boolean(set.find((otherByteArray) => {\n            if (byteArray.length !== otherByteArray.length) {\n                return false;\n            }\n            for (let index = 0; index < byteArray.length; index++) {\n                if (otherByteArray[index] !== byteArray[index]) {\n                    return false;\n                }\n            }\n            return true;\n        }));\n    });\n    return (intersection.length === maybeSubset.length);\n}\nclass WebTransportTransport {\n    constructor(components, init = {}) {\n        this.components = components;\n        this.config = {\n            maxInboundStreams: init.maxInboundStreams ?? 1000\n        };\n    }\n    get [Symbol.toStringTag]() {\n        return '@libp2p/webtransport';\n    }\n    get [symbol]() {\n        return true;\n    }\n    async dial(ma, options) {\n        log('dialing %s', ma);\n        const localPeer = this.components.peerId;\n        if (localPeer === undefined) {\n            throw new Error('Need a local peerid');\n        }\n        options = options ?? {};\n        const { url, certhashes, remotePeer } = parseMultiaddr(ma);\n        if (certhashes.length === 0) {\n            throw new Error('Expected multiaddr to contain certhashes');\n        }\n        const wt = new WebTransport(`${url}/.well-known/libp2p-webtransport?type=noise`, {\n            serverCertificateHashes: certhashes.map(certhash => ({\n                algorithm: 'sha-256',\n                value: certhash.digest\n            }))\n        });\n        wt.closed.catch((error) => {\n            log.error('WebTransport transport closed due to:', error);\n        });\n        await wt.ready;\n        if (remotePeer == null) {\n            throw new Error('Need a target peerid');\n        }\n        if (!await this.authenticateWebTransport(wt, localPeer, remotePeer, certhashes)) {\n            throw new Error('Failed to authenticate webtransport');\n        }\n        const maConn = {\n            close: async (err) => {\n                if (err != null) {\n                    log('Closing webtransport with err:', err);\n                }\n                wt.close();\n            },\n            remoteAddr: ma,\n            timeline: {\n                open: Date.now()\n            },\n            // This connection is never used directly since webtransport supports native streams.\n            ...inertDuplex()\n        };\n        wt.closed.catch((err) => {\n            log.error('WebTransport connection closed:', err);\n            // This is how we specify the connection is closed and shouldn't be used.\n            maConn.timeline.close = Date.now();\n        });\n        try {\n            options?.signal?.throwIfAborted();\n        }\n        catch (e) {\n            wt.close();\n            throw e;\n        }\n        return await options.upgrader.upgradeOutbound(maConn, { skipEncryption: true, muxerFactory: this.webtransportMuxer(wt), skipProtection: true });\n    }\n    async authenticateWebTransport(wt, localPeer, remotePeer, certhashes) {\n        const stream = await wt.createBidirectionalStream();\n        const writer = stream.writable.getWriter();\n        const reader = stream.readable.getReader();\n        await writer.ready;\n        const duplex = {\n            source: (async function* () {\n                while (true) {\n                    const val = await reader.read();\n                    if (val.value != null) {\n                        yield val.value;\n                    }\n                    if (val.done === true) {\n                        break;\n                    }\n                }\n            })(),\n            sink: async function (source) {\n                for await (const chunk of source) {\n                    await writer.write(chunk);\n                }\n            }\n        };\n        const n = noise()();\n        const { remoteExtensions } = await n.secureOutbound(localPeer, duplex, remotePeer);\n        // We're done with this authentication stream\n        writer.close().catch((err) => {\n            log.error(`Failed to close authentication stream writer: ${err.message}`);\n        });\n        reader.cancel().catch((err) => {\n            log.error(`Failed to close authentication stream reader: ${err.message}`);\n        });\n        // Verify the certhashes we used when dialing are a subset of the certhashes relayed by the remote peer\n        if (!isSubset(remoteExtensions?.webtransportCerthashes ?? [], certhashes.map(ch => ch.bytes))) {\n            throw new Error(\"Our certhashes are not a subset of the remote's reported certhashes\");\n        }\n        return true;\n    }\n    webtransportMuxer(wt) {\n        let streamIDCounter = 0;\n        const config = this.config;\n        return {\n            protocol: 'webtransport',\n            createStreamMuxer: (init) => {\n                // !TODO handle abort signal when WebTransport supports this.\n                if (typeof init === 'function') {\n                    // The api docs say that init may be a function\n                    init = { onIncomingStream: init };\n                }\n                const activeStreams = [];\n                (async function () {\n                    //! TODO unclear how to add backpressure here?\n                    const reader = wt.incomingBidirectionalStreams.getReader();\n                    while (true) {\n                        const { done, value: wtStream } = await reader.read();\n                        if (done === true) {\n                            break;\n                        }\n                        if (activeStreams.length >= config.maxInboundStreams) {\n                            // We've reached our limit, close this stream.\n                            wtStream.writable.close().catch((err) => {\n                                log.error(`Failed to close inbound stream that crossed our maxInboundStream limit: ${err.message}`);\n                            });\n                            wtStream.readable.cancel().catch((err) => {\n                                log.error(`Failed to close inbound stream that crossed our maxInboundStream limit: ${err.message}`);\n                            });\n                        }\n                        else {\n                            const stream = await webtransportBiDiStreamToStream(wtStream, String(streamIDCounter++), 'inbound', activeStreams, init?.onStreamEnd);\n                            activeStreams.push(stream);\n                            init?.onIncomingStream?.(stream);\n                        }\n                    }\n                })().catch(() => {\n                    log.error('WebTransport failed to receive incoming stream');\n                });\n                const muxer = {\n                    protocol: 'webtransport',\n                    streams: activeStreams,\n                    newStream: async (name) => {\n                        const wtStream = await wt.createBidirectionalStream();\n                        const stream = await webtransportBiDiStreamToStream(wtStream, String(streamIDCounter++), init?.direction ?? 'outbound', activeStreams, init?.onStreamEnd);\n                        activeStreams.push(stream);\n                        return stream;\n                    },\n                    /**\n                     * Close or abort all tracked streams and stop the muxer\n                     */\n                    close: (err) => {\n                        if (err != null) {\n                            log('Closing webtransport muxer with err:', err);\n                        }\n                        wt.close();\n                    },\n                    // This stream muxer is webtransport native. Therefore it doesn't plug in with any other duplex.\n                    ...inertDuplex()\n                };\n                try {\n                    init?.signal?.throwIfAborted();\n                }\n                catch (e) {\n                    wt.close();\n                    throw e;\n                }\n                return muxer;\n            }\n        };\n    }\n    createListener(options) {\n        throw new Error('Webtransport servers are not supported in Node or the browser');\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid webtransport addresses.\n     */\n    filter(multiaddrs) {\n        return multiaddrs.filter(ma => ma.protoNames().includes('webtransport'));\n    }\n}\nexport function webTransport(init = {}) {\n    return (components) => new WebTransportTransport(components, init);\n}\n//# sourceMappingURL=index.js.map"],"names":["base","ALPHABET","name","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","str","decodeUnsafe","psz","b256","it3","it4","vch","decode","string","buffer","src","_brrp__multiformats_scope_baseX","coerce","o","fromString","toString","b","Encoder","prefix","baseEncode","bytes","Decoder","baseDecode","text","decoder","or","ComposedDecoder","decoders","input","left","right","Codec","from","baseX","alphabet","basex","bitsPerChar","codes","end","out","bits","written","value","data","pad","mask","rfc4648","identity","buf","base2","base8","base10","base16","base16upper","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58btc","base58flickr","base64","base64pad","base64url","base64urlpad","alphabetBytesToChars","p","c","alphabetCharsToBytes","byts","char","byt","base256emoji","encode_1","MSB","REST","MSBALL","INT","num","offset","oldOffset","read","MSB$1","REST$1","res","shift","counter","l","N1","N2","N3","N4","N5","N6","N7","N8","N9","varint","_brrp_varint","multihash","code","sizeOffset","varint.decode","digestOffset","digest","Digest","bases","identityBase","base58","log","logger","multibaseDecoder","d","decodeCerthashStr","s","digest.decode","inertDuplex","webtransportBiDiStreamToStream","bidiStream","streamId","direction","activeStreams","onStreamEnd","writer","reader","cleanupStreamFromActiveStreams","index","stream","writerClosed","readerClosed","err","msg","sinkSunk","_err","val","Uint8ArrayList","chunks","parseMultiaddr","ma","parts","url","certhashes","remotePeer","state","proto","protocols","peerIdFromString","isSubset","set","maybeSubset","byteArray","otherByteArray","WebTransportTransport","components","init","symbol","options","localPeer","wt","certhash","error","maConn","e","duplex","chunk","n","noise","remoteExtensions","ch","streamIDCounter","config","done","wtStream","muxer","multiaddrs","webTransport"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}